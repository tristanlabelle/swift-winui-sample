// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsSystem_DispatcherQueueHandlerBinding: WindowsRuntime.DelegateBinding {
    public typealias SwiftObject = WindowsSystem_DispatcherQueueHandler
    public typealias ABIStruct = SWRT_WindowsSystem_DispatcherQueueHandler

    public static let typeName = "Windows.System.IDispatcherQueueHandler"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static var ireferenceID: COM.COMInterfaceID {
        COMInterfaceID(0x9A8536AB, 0xC05D, 0x5699, 0xBF36, 0x18D4DD0AA3FA)
    }

    public static var ireferenceArrayID: COM.COMInterfaceID {
        COMInterfaceID(0x2026C5DA, 0xC7B0, 0x59F6, 0x904F, 0x142C39464587)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference).invoke
    }

    public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
        ExportedDelegate<Self>(object).toCOM()
    }

    private final class Import: COMImport<WindowsSystem_DispatcherQueueHandlerBinding> {
        public func invoke() throws {
            try _interop.invoke()
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsSystem_DispatcherQueueHandler_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        Invoke: { this in _implement(this) { this in
            try this()
        } }
    )
}