// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Manages a prioritized queue on which tasks execute in a serial fashion on a thread.
public final class WindowsSystem_DispatcherQueue: WindowsRuntime.WinRTImport<WindowsSystem_DispatcherQueueBinding>, @unchecked Sendable {
    /// Creates a **DispatcherQueueTimer** on the **DispatcherQueue** to execute a task periodically after a time interval has elapsed.
    /// - Returns: An **DispatcherQueueTimer** that can queue tasks on a timed basis to the current **DispatcherQueue**.
    public func createTimer() throws -> WindowsSystem_DispatcherQueueTimer {
        try COM.NullResult.unwrap(_interop.createTimer())
    }

    /// Adds a task to the **DispatcherQueue** which will be executed on the thread  associated with the **DispatcherQueue**.
    /// - Parameter callback: The task to execute.
    /// - Returns: **True** indicates that the task was added to the queue; **false**, otherwise.
    public func tryEnqueue(_ callback: WindowsSystem_DispatcherQueueHandler?) throws -> Swift.Bool {
        try _interop.tryEnqueue(callback)
    }

    /// Adds a task to the **DispatcherQueue** which will be executed on the thread associated with the **DispatcherQueue**.
    /// - Parameter priority: The priority of the task such as Low, Normal, or High.
    /// - Parameter callback: A delegate to the task to execute.
    /// - Returns: **True** indicates that the task was added to the queue; **false**, otherwise.
    public func tryEnqueue(_ priority: WindowsSystem_DispatcherQueuePriority, _ callback: WindowsSystem_DispatcherQueueHandler?) throws -> Swift.Bool {
        try _interop.tryEnqueueWithPriority(priority, callback)
    }

    /// Fires after the **DispatcherQueue** event loop stops which is the last step in the **DispatcherQueue** shutdown process.
    @discardableResult
    public func shutdownCompleted(adding handler: WindowsFoundation_TypedEventHandler<WindowsSystem_DispatcherQueue?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ShutdownCompleted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).shutdownCompleted(removing: token) })
    }

    public func shutdownCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ShutdownCompleted(token)
    }

    /// Fires before the dispatcher queue initiates an exit from its event loop.
    @discardableResult
    public func shutdownStarting(adding handler: WindowsFoundation_TypedEventHandler<WindowsSystem_DispatcherQueue?, WindowsSystem_DispatcherQueueShutdownStartingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ShutdownStarting(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).shutdownStarting(removing: token) })
    }

    public func shutdownStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ShutdownStarting(token)
    }


    ///       
    public var hasThreadAccess: Swift.Bool {
        get throws {
            try _idispatcherQueue2.get_HasThreadAccess()
        }
    }

    /// Gets a value indicating whether the DispatcherQueue has access to the current thread.
    public var hasThreadAccess_: Swift.Bool {
        try! self.hasThreadAccess
    }

    /// Gets the **DispatcherQueue** associated with the current thread.
    /// - Returns: A **DispatcherQueue** instance that will execute tasks serially on the current thread.
    public static func getForCurrentThread() throws -> WindowsSystem_DispatcherQueue {
        try COM.NullResult.unwrap(_idispatcherQueueStatics.getForCurrentThread())
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsSystem_IDispatcherQueue>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIDispatcherQueue2: COM.COMReference<SWRT_WindowsSystem_IDispatcherQueue2>.Optional = .none

    internal var _idispatcherQueue2: COM.COMInterop<SWRT_WindowsSystem_IDispatcherQueue2> {
        get throws {
            try _lazyIDispatcherQueue2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsSystem_IDispatcherQueue2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.System.DispatcherQueue")
            }
        }
    }

    private static var _lazyIDispatcherQueueStatics: COM.COMReference<SWRT_WindowsSystem_IDispatcherQueueStatics>.Optional = .none

    internal static var _idispatcherQueueStatics: COM.COMInterop<SWRT_WindowsSystem_IDispatcherQueueStatics> {
        get throws {
            try _lazyIDispatcherQueueStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsSystem_IDispatcherQueueStatics.self)).cast()
            }
        }
    }
}