// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Provides access to the music-related properties of an item (like a file or folder).
public final class WindowsStorageFileProperties_MusicProperties: WindowsRuntime.WinRTImport<WindowsStorageFileProperties_MusicPropertiesBinding>, WindowsStorageFileProperties_IStorageItemExtraPropertiesProtocol {
    /// The album name.
    public var album: Swift.String {
        get throws {
            try _interop.get_Album()
        }
    }

    /// Sets the name of the album that contains the song.
    /// - Parameter newValue: The album name.
    public func album(_ value: Swift.String) throws {
        try _interop.put_Album(value)
    }

    /// Gets or sets the name of the album that contains the song.
    public var album_: Swift.String {
        get {
            try! self.album
        }
        set {
            try! self.album(newValue)
        }
    }

    /// The name of the song's album artist.
    public var albumArtist: Swift.String {
        get throws {
            try _interop.get_AlbumArtist()
        }
    }

    /// Sets the name of the album artist of the song.
    /// - Parameter newValue: The name of the song's album artist.
    public func albumArtist(_ value: Swift.String) throws {
        try _interop.put_AlbumArtist(value)
    }

    /// Gets or sets the name of the album artist of the song.
    public var albumArtist_: Swift.String {
        get {
            try! self.albumArtist
        }
        set {
            try! self.albumArtist(newValue)
        }
    }

    /// The names of the song's artists.
    public var artist: Swift.String {
        get throws {
            try _interop.get_Artist()
        }
    }

    /// Gets the artists that contributed to the song.
    /// - Parameter newValue: The names of the song's artists.
    public func artist(_ value: Swift.String) throws {
        try _interop.put_Artist(value)
    }

    /// Gets the artists that contributed to the song.
    public var artist_: Swift.String {
        get {
            try! self.artist
        }
        set {
            try! self.artist(newValue)
        }
    }

    /// The bit rate, in bits per second.
    public var bitrate: Swift.UInt32 {
        get throws {
            try _interop.get_Bitrate()
        }
    }

    /// Gets the bit rate of the song file.
    public var bitrate_: Swift.UInt32 {
        try! self.bitrate
    }

    /// A list of the names of the song's composers.
    public var composers: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Composers())
        }
    }

    /// Gets the composers of the song.
    public var composers_: WindowsFoundationCollections_IVector<Swift.String>! {
        try! NullResult.catch(self.composers)
    }

    /// A list of the names of the song's conductors.
    public var conductors: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Conductors())
        }
    }

    /// Gets the conductors of the song.
    public var conductors_: WindowsFoundationCollections_IVector<Swift.String>! {
        try! NullResult.catch(self.conductors)
    }

    /// The duration in milliseconds.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Duration()
        }
    }

    /// Gets the duration of the song in milliseconds.
    public var duration_: WindowsFoundation_TimeSpan {
        try! self.duration
    }

    /// The collection of music genre names.
    public var genre: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Genre())
        }
    }

    /// Gets the names of music genres that the song belongs to.
    public var genre_: WindowsFoundationCollections_IVector<Swift.String>! {
        try! NullResult.catch(self.genre)
    }

    /// A list of the names of the song's producers.
    public var producers: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Producers())
        }
    }

    /// Gets the producers of the song.
    public var producers_: WindowsFoundationCollections_IVector<Swift.String>! {
        try! NullResult.catch(self.producers)
    }

    /// The name of the song's publisher.
    public var publisher: Swift.String {
        get throws {
            try _interop.get_Publisher()
        }
    }

    /// Sets the publisher of the song.
    /// - Parameter newValue: The name of the song's publisher.
    public func publisher(_ value: Swift.String) throws {
        try _interop.put_Publisher(value)
    }

    /// Gets or sets the publisher of the song.
    public var publisher_: Swift.String {
        get {
            try! self.publisher
        }
        set {
            try! self.publisher(newValue)
        }
    }

    /// The media file rating, as a value between 0 and 99.
    public var rating: Swift.UInt32 {
        get throws {
            try _interop.get_Rating()
        }
    }

    /// Sets the rating associated with a music file.
    /// - Parameter newValue: The media file rating, as a value between 0 and 99.
    public func rating(_ value: Swift.UInt32) throws {
        try _interop.put_Rating(value)
    }

    /// Gets or sets the rating associated with a music file.
    public var rating_: Swift.UInt32 {
        get {
            try! self.rating
        }
        set {
            try! self.rating(newValue)
        }
    }

    /// The song's subtitle.
    public var subtitle: Swift.String {
        get throws {
            try _interop.get_Subtitle()
        }
    }

    /// Sets the subtitle of the song.
    /// - Parameter newValue: The song's subtitle.
    public func subtitle(_ value: Swift.String) throws {
        try _interop.put_Subtitle(value)
    }

    /// Gets or sets the subtitle of the song.
    public var subtitle_: Swift.String {
        get {
            try! self.subtitle
        }
        set {
            try! self.subtitle(newValue)
        }
    }

    /// The song title.
    public var title: Swift.String {
        get throws {
            try _interop.get_Title()
        }
    }

    /// Sets the title of the song
    /// - Parameter newValue: The song title.
    public func title(_ value: Swift.String) throws {
        try _interop.put_Title(value)
    }

    /// Gets or sets the title of the song
    public var title_: Swift.String {
        get {
            try! self.title
        }
        set {
            try! self.title(newValue)
        }
    }

    /// The track number.
    public var trackNumber: Swift.UInt32 {
        get throws {
            try _interop.get_TrackNumber()
        }
    }

    /// Sets the track number of the song on the song's album.
    /// - Parameter newValue: The track number.
    public func trackNumber(_ value: Swift.UInt32) throws {
        try _interop.put_TrackNumber(value)
    }

    /// Gets or sets the track number of the song on the song's album.
    public var trackNumber_: Swift.UInt32 {
        get {
            try! self.trackNumber
        }
        set {
            try! self.trackNumber(newValue)
        }
    }

    /// A list of the names of the songwriters.
    public var writers: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Writers())
        }
    }

    /// Gets the songwriters.
    public var writers_: WindowsFoundationCollections_IVector<Swift.String>! {
        try! NullResult.catch(self.writers)
    }

    /// The song's release year.
    public var year: Swift.UInt32 {
        get throws {
            try _interop.get_Year()
        }
    }

    /// Sets the year that the song was released.
    /// - Parameter newValue: The song's release year.
    public func year(_ value: Swift.UInt32) throws {
        try _interop.put_Year(value)
    }

    /// Gets or sets the year that the song was released.
    public var year_: Swift.UInt32 {
        get {
            try! self.year
        }
        set {
            try! self.year(newValue)
        }
    }

    // MARK: Windows.Storage.FileProperties.IStorageItemExtraProperties members

    public func retrievePropertiesAsync(_ propertiesToRetrieve: WindowsFoundationCollections_IIterable<Swift.String>?) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>?> {
        try COM.NullResult.unwrap(_istorageItemExtraProperties.retrievePropertiesAsync(propertiesToRetrieve))
    }

    public func savePropertiesAsync(_ propertiesToSave: WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItemExtraProperties.savePropertiesAsync(propertiesToSave))
    }

    /// Saves all properties associated with the item.
    /// - Returns: No object or value is returned when this method completes.
    public func savePropertiesAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItemExtraProperties.savePropertiesAsyncOverloadDefault())
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsStorageFileProperties_IMusicProperties>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIStorageItemExtraProperties: COM.COMReference<SWRT_WindowsStorageFileProperties_IStorageItemExtraProperties>.Optional = .none

    internal var _istorageItemExtraProperties: COM.COMInterop<SWRT_WindowsStorageFileProperties_IStorageItemExtraProperties> {
        get throws {
            try _lazyIStorageItemExtraProperties.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorageFileProperties_IStorageItemExtraProperties.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.Storage.FileProperties.MusicProperties")
            }
        }
    }
}