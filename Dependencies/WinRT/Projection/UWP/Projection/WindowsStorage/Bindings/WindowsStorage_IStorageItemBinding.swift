// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsStorage_IStorageItemBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsStorage_IStorageItem
    public typealias ABIStruct = SWRT_WindowsStorage_IStorageItem

    public static let typeName = "Windows.Storage.IStorageItem"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsStorage_IStorageItemBinding>, WindowsStorage_IStorageItemProtocol {
        public func renameAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_interop.renameAsyncOverloadDefaultOptions(desiredName))
        }

        public func renameAsync(_ desiredName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_interop.renameAsync(desiredName, option))
        }

        public func deleteAsync() throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_interop.deleteAsyncOverloadDefaultOptions())
        }

        public func deleteAsync(_ option: WindowsStorage_StorageDeleteOption) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_interop.deleteAsync(option))
        }

        public func getBasicPropertiesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_BasicProperties?> {
            try COM.NullResult.unwrap(_interop.getBasicPropertiesAsync())
        }

        public func isOfType(_ type: WindowsStorage_StorageItemTypes) throws -> Swift.Bool {
            try _interop.isOfType(type)
        }

        public var attributes: WindowsStorage_FileAttributes {
            get throws {
                try _interop.get_Attributes()
            }
        }

        public var dateCreated: WindowsFoundation_DateTime {
            get throws {
                try _interop.get_DateCreated()
            }
        }

        public var name: Swift.String {
            get throws {
                try _interop.get_Name()
            }
        }

        public var path: Swift.String {
            get throws {
                try _interop.get_Path()
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsStorage_IStorageItem_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        RenameAsyncOverloadDefaultOptions: { this, desiredName, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let desiredName_swift = WindowsRuntime.StringBinding.fromABI(desiredName)
            let _result_swift = try COM.NullResult.`catch`(try this.renameAsync(desiredName_swift))
            _result.pointee = try WindowsFoundation_IAsyncActionBinding.toABI(_result_swift)
        } },
        RenameAsync: { this, desiredName, option, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let desiredName_swift = WindowsRuntime.StringBinding.fromABI(desiredName)
            let option_swift = WindowsStorage_NameCollisionOption.fromABI(option)
            let _result_swift = try COM.NullResult.`catch`(try this.renameAsync(desiredName_swift, option_swift))
            _result.pointee = try WindowsFoundation_IAsyncActionBinding.toABI(_result_swift)
        } },
        DeleteAsyncOverloadDefaultOptions: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.deleteAsync())
            _result.pointee = try WindowsFoundation_IAsyncActionBinding.toABI(_result_swift)
        } },
        DeleteAsync: { this, option, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let option_swift = WindowsStorage_StorageDeleteOption.fromABI(option)
            let _result_swift = try COM.NullResult.`catch`(try this.deleteAsync(option_swift))
            _result.pointee = try WindowsFoundation_IAsyncActionBinding.toABI(_result_swift)
        } },
        GetBasicPropertiesAsync: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getBasicPropertiesAsync())
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.BasicProperties.toABI(_result_swift)
        } },
        get_Name: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.name
            _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
        } },
        get_Path: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.path
            _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
        } },
        get_Attributes: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.attributes
            _result.pointee = WindowsStorage_FileAttributes.toABI(_result_swift)
        } },
        get_DateCreated: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.dateCreated
            _result.pointee = WindowsFoundation_DateTime.toABI(_result_swift)
        } },
        IsOfType: { this, type, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let type_swift = WindowsStorage_StorageItemTypes.fromABI(type)
            _result.pointee = try this.isOfType(type_swift)
        } }
    )
}