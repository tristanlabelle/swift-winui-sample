// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsStorage_IStorageFile2Binding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsStorage_IStorageFile2
    public typealias ABIStruct = SWRT_WindowsStorage_IStorageFile2

    public static let typeName = "Windows.Storage.IStorageFile2"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsStorage_IStorageFile2Binding>, WindowsStorage_IStorageFile2Protocol {
        public func openAsync(_ accessMode: WindowsStorage_FileAccessMode, _ options: WindowsStorage_StorageOpenOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?> {
            try COM.NullResult.unwrap(_interop.openWithOptionsAsync(accessMode, options))
        }

        public func openTransactedWriteAsync(_ options: WindowsStorage_StorageOpenOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageStreamTransaction?> {
            try COM.NullResult.unwrap(_interop.openTransactedWriteWithOptionsAsync(options))
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsStorage_IStorageFile2_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        OpenWithOptionsAsync: { this, accessMode, options, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let accessMode_swift = WindowsStorage_FileAccessMode.fromABI(accessMode)
            let options_swift = WindowsStorage_StorageOpenOptions.fromABI(options)
            let _result_swift = try COM.NullResult.`catch`(try this.openAsync(accessMode_swift, options_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IRandomAccessStream.toABI(_result_swift)
        } },
        OpenTransactedWriteWithOptionsAsync: { this, options, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let options_swift = WindowsStorage_StorageOpenOptions.fromABI(options)
            let _result_swift = try COM.NullResult.`catch`(try this.openTransactedWriteAsync(options_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageStreamTransaction.toABI(_result_swift)
        } }
    )
}