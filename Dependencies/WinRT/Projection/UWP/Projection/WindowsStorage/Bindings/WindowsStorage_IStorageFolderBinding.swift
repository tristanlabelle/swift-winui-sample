// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsStorage_IStorageFolderBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsStorage_IStorageFolder
    public typealias ABIStruct = SWRT_WindowsStorage_IStorageFolder

    public static let typeName = "Windows.Storage.IStorageFolder"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsStorage_IStorageFolderBinding>, WindowsStorage_IStorageFolderProtocol {
        public func createFileAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
            try COM.NullResult.unwrap(_interop.createFileAsyncOverloadDefaultOptions(desiredName))
        }

        public func createFileAsync(_ desiredName: Swift.String, _ options: WindowsStorage_CreationCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
            try COM.NullResult.unwrap(_interop.createFileAsync(desiredName, options))
        }

        public func createFolderAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
            try COM.NullResult.unwrap(_interop.createFolderAsyncOverloadDefaultOptions(desiredName))
        }

        public func createFolderAsync(_ desiredName: Swift.String, _ options: WindowsStorage_CreationCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
            try COM.NullResult.unwrap(_interop.createFolderAsync(desiredName, options))
        }

        public func getFileAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
            try COM.NullResult.unwrap(_interop.getFileAsync(name))
        }

        public func getFolderAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
            try COM.NullResult.unwrap(_interop.getFolderAsync(name))
        }

        public func getItemAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_IStorageItem?> {
            try COM.NullResult.unwrap(_interop.getItemAsync(name))
        }

        public func getFilesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?> {
            try COM.NullResult.unwrap(_interop.getFilesAsyncOverloadDefaultOptionsStartAndCount())
        }

        public func getFoldersAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?> {
            try COM.NullResult.unwrap(_interop.getFoldersAsyncOverloadDefaultOptionsStartAndCount())
        }

        public func getItemsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?> {
            try COM.NullResult.unwrap(_interop.getItemsAsyncOverloadDefaultStartAndCount())
        }

        // MARK: Windows.Storage.IStorageItem members

        public func renameAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_istorageItem.renameAsyncOverloadDefaultOptions(desiredName))
        }

        public func renameAsync(_ desiredName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_istorageItem.renameAsync(desiredName, option))
        }

        public func deleteAsync() throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_istorageItem.deleteAsyncOverloadDefaultOptions())
        }

        public func deleteAsync(_ option: WindowsStorage_StorageDeleteOption) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_istorageItem.deleteAsync(option))
        }

        public func getBasicPropertiesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_BasicProperties?> {
            try COM.NullResult.unwrap(_istorageItem.getBasicPropertiesAsync())
        }

        public func isOfType(_ type: WindowsStorage_StorageItemTypes) throws -> Swift.Bool {
            try _istorageItem.isOfType(type)
        }

        public var attributes: WindowsStorage_FileAttributes {
            get throws {
                try _istorageItem.get_Attributes()
            }
        }

        public var dateCreated: WindowsFoundation_DateTime {
            get throws {
                try _istorageItem.get_DateCreated()
            }
        }

        public var name: Swift.String {
            get throws {
                try _istorageItem.get_Name()
            }
        }

        public var path: Swift.String {
            get throws {
                try _istorageItem.get_Path()
            }
        }

        // MARK: Implementation boilerplate

        private var _lazyIStorageItem: COM.COMReference<SWRT_WindowsStorage_IStorageItem>.Optional = .none

        internal var _istorageItem: COM.COMInterop<SWRT_WindowsStorage_IStorageItem> {
            get throws {
                try _lazyIStorageItem.lazyInitInterop {
                    try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItem.self)).cast()
                }
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsStorage_IStorageFolder_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        CreateFileAsyncOverloadDefaultOptions: { this, desiredName, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let desiredName_swift = WindowsRuntime.StringBinding.fromABI(desiredName)
            let _result_swift = try COM.NullResult.`catch`(try this.createFileAsync(desiredName_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageFile.toABI(_result_swift)
        } },
        CreateFileAsync: { this, desiredName, options, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let desiredName_swift = WindowsRuntime.StringBinding.fromABI(desiredName)
            let options_swift = WindowsStorage_CreationCollisionOption.fromABI(options)
            let _result_swift = try COM.NullResult.`catch`(try this.createFileAsync(desiredName_swift, options_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageFile.toABI(_result_swift)
        } },
        CreateFolderAsyncOverloadDefaultOptions: { this, desiredName, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let desiredName_swift = WindowsRuntime.StringBinding.fromABI(desiredName)
            let _result_swift = try COM.NullResult.`catch`(try this.createFolderAsync(desiredName_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageFolder.toABI(_result_swift)
        } },
        CreateFolderAsync: { this, desiredName, options, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let desiredName_swift = WindowsRuntime.StringBinding.fromABI(desiredName)
            let options_swift = WindowsStorage_CreationCollisionOption.fromABI(options)
            let _result_swift = try COM.NullResult.`catch`(try this.createFolderAsync(desiredName_swift, options_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageFolder.toABI(_result_swift)
        } },
        GetFileAsync: { this, name, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let name_swift = WindowsRuntime.StringBinding.fromABI(name)
            let _result_swift = try COM.NullResult.`catch`(try this.getFileAsync(name_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageFile.toABI(_result_swift)
        } },
        GetFolderAsync: { this, name, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let name_swift = WindowsRuntime.StringBinding.fromABI(name)
            let _result_swift = try COM.NullResult.`catch`(try this.getFolderAsync(name_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageFolder.toABI(_result_swift)
        } },
        GetItemAsync: { this, name, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let name_swift = WindowsRuntime.StringBinding.fromABI(name)
            let _result_swift = try COM.NullResult.`catch`(try this.getItemAsync(name_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IStorageItem.toABI(_result_swift)
        } },
        GetFilesAsyncOverloadDefaultOptionsStartAndCount: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getFilesAsync())
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IVectorView_StorageFile.toABI(_result_swift)
        } },
        GetFoldersAsyncOverloadDefaultOptionsStartAndCount: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getFoldersAsync())
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IVectorView_StorageFolder.toABI(_result_swift)
        } },
        GetItemsAsyncOverloadDefaultStartAndCount: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getItemsAsync())
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IVectorView_IStorageItem.toABI(_result_swift)
        } }
    )
}