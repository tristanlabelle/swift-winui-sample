// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsStorage_IStorageFileBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsStorage_IStorageFile
    public typealias ABIStruct = SWRT_WindowsStorage_IStorageFile

    public static let typeName = "Windows.Storage.IStorageFile"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsStorage_IStorageFileBinding>, WindowsStorage_IStorageFileProtocol {
        public func openAsync(_ accessMode: WindowsStorage_FileAccessMode) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?> {
            try COM.NullResult.unwrap(_interop.openAsync(accessMode))
        }

        public func openTransactedWriteAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageStreamTransaction?> {
            try COM.NullResult.unwrap(_interop.openTransactedWriteAsync())
        }

        public func copyAsync(_ destinationFolder: WindowsStorage_IStorageFolder?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
            try COM.NullResult.unwrap(_interop.copyOverloadDefaultNameAndOptions(destinationFolder))
        }

        public func copyAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
            try COM.NullResult.unwrap(_interop.copyOverloadDefaultOptions(destinationFolder, desiredNewName))
        }

        public func copyAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
            try COM.NullResult.unwrap(_interop.copyOverload(destinationFolder, desiredNewName, option))
        }

        public func copyAndReplaceAsync(_ fileToReplace: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_interop.copyAndReplaceAsync(fileToReplace))
        }

        public func moveAsync(_ destinationFolder: WindowsStorage_IStorageFolder?) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_interop.moveOverloadDefaultNameAndOptions(destinationFolder))
        }

        public func moveAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_interop.moveOverloadDefaultOptions(destinationFolder, desiredNewName))
        }

        public func moveAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_interop.moveOverload(destinationFolder, desiredNewName, option))
        }

        public func moveAndReplaceAsync(_ fileToReplace: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_interop.moveAndReplaceAsync(fileToReplace))
        }

        public var contentType: Swift.String {
            get throws {
                try _interop.get_ContentType()
            }
        }

        public var fileType: Swift.String {
            get throws {
                try _interop.get_FileType()
            }
        }

        // MARK: Windows.Storage.IStorageItem members

        public func renameAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_istorageItem.renameAsyncOverloadDefaultOptions(desiredName))
        }

        public func renameAsync(_ desiredName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_istorageItem.renameAsync(desiredName, option))
        }

        public func deleteAsync() throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_istorageItem.deleteAsyncOverloadDefaultOptions())
        }

        public func deleteAsync(_ option: WindowsStorage_StorageDeleteOption) throws -> WindowsFoundation_IAsyncAction {
            try COM.NullResult.unwrap(_istorageItem.deleteAsync(option))
        }

        public func getBasicPropertiesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_BasicProperties?> {
            try COM.NullResult.unwrap(_istorageItem.getBasicPropertiesAsync())
        }

        public func isOfType(_ type: WindowsStorage_StorageItemTypes) throws -> Swift.Bool {
            try _istorageItem.isOfType(type)
        }

        public var attributes: WindowsStorage_FileAttributes {
            get throws {
                try _istorageItem.get_Attributes()
            }
        }

        public var dateCreated: WindowsFoundation_DateTime {
            get throws {
                try _istorageItem.get_DateCreated()
            }
        }

        public var name: Swift.String {
            get throws {
                try _istorageItem.get_Name()
            }
        }

        public var path: Swift.String {
            get throws {
                try _istorageItem.get_Path()
            }
        }

        // MARK: Windows.Storage.Streams.IRandomAccessStreamReference members

        public func openReadAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStreamWithContentType?> {
            try COM.NullResult.unwrap(_irandomAccessStreamReference.openReadAsync())
        }

        // MARK: Windows.Storage.Streams.IInputStreamReference members

        public func openSequentialReadAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IInputStream?> {
            try COM.NullResult.unwrap(_iinputStreamReference.openSequentialReadAsync())
        }

        // MARK: Implementation boilerplate

        private var _lazyIStorageItem: COM.COMReference<SWRT_WindowsStorage_IStorageItem>.Optional = .none

        internal var _istorageItem: COM.COMInterop<SWRT_WindowsStorage_IStorageItem> {
            get throws {
                try _lazyIStorageItem.lazyInitInterop {
                    try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItem.self)).cast()
                }
            }
        }

        private var _lazyIRandomAccessStreamReference: COM.COMReference<SWRT_WindowsStorageStreams_IRandomAccessStreamReference>.Optional = .none

        internal var _irandomAccessStreamReference: COM.COMInterop<SWRT_WindowsStorageStreams_IRandomAccessStreamReference> {
            get throws {
                try _lazyIRandomAccessStreamReference.lazyInitInterop {
                    try _queryInterface(uuidof(SWRT_WindowsStorageStreams_IRandomAccessStreamReference.self)).cast()
                }
            }
        }

        private var _lazyIInputStreamReference: COM.COMReference<SWRT_WindowsStorageStreams_IInputStreamReference>.Optional = .none

        internal var _iinputStreamReference: COM.COMInterop<SWRT_WindowsStorageStreams_IInputStreamReference> {
            get throws {
                try _lazyIInputStreamReference.lazyInitInterop {
                    try _queryInterface(uuidof(SWRT_WindowsStorageStreams_IInputStreamReference.self)).cast()
                }
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsStorage_IStorageFile_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_FileType: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.fileType
            _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
        } },
        get_ContentType: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.contentType
            _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
        } },
        OpenAsync: { this, accessMode, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let accessMode_swift = WindowsStorage_FileAccessMode.fromABI(accessMode)
            let _result_swift = try COM.NullResult.`catch`(try this.openAsync(accessMode_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IRandomAccessStream.toABI(_result_swift)
        } },
        OpenTransactedWriteAsync: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.openTransactedWriteAsync())
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageStreamTransaction.toABI(_result_swift)
        } },
        CopyOverloadDefaultNameAndOptions: { this, destinationFolder, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let destinationFolder_swift = WindowsStorage_IStorageFolderBinding.fromABI(destinationFolder)
            let _result_swift = try COM.NullResult.`catch`(try this.copyAsync(destinationFolder_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageFile.toABI(_result_swift)
        } },
        CopyOverloadDefaultOptions: { this, destinationFolder, desiredNewName, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let destinationFolder_swift = WindowsStorage_IStorageFolderBinding.fromABI(destinationFolder)
            let desiredNewName_swift = WindowsRuntime.StringBinding.fromABI(desiredNewName)
            let _result_swift = try COM.NullResult.`catch`(try this.copyAsync(destinationFolder_swift, desiredNewName_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageFile.toABI(_result_swift)
        } },
        CopyOverload: { this, destinationFolder, desiredNewName, option, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let destinationFolder_swift = WindowsStorage_IStorageFolderBinding.fromABI(destinationFolder)
            let desiredNewName_swift = WindowsRuntime.StringBinding.fromABI(desiredNewName)
            let option_swift = WindowsStorage_NameCollisionOption.fromABI(option)
            let _result_swift = try COM.NullResult.`catch`(try this.copyAsync(destinationFolder_swift, desiredNewName_swift, option_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.StorageFile.toABI(_result_swift)
        } },
        CopyAndReplaceAsync: { this, fileToReplace, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let fileToReplace_swift = WindowsStorage_IStorageFileBinding.fromABI(fileToReplace)
            let _result_swift = try COM.NullResult.`catch`(try this.copyAndReplaceAsync(fileToReplace_swift))
            _result.pointee = try WindowsFoundation_IAsyncActionBinding.toABI(_result_swift)
        } },
        MoveOverloadDefaultNameAndOptions: { this, destinationFolder, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let destinationFolder_swift = WindowsStorage_IStorageFolderBinding.fromABI(destinationFolder)
            let _result_swift = try COM.NullResult.`catch`(try this.moveAsync(destinationFolder_swift))
            _result.pointee = try WindowsFoundation_IAsyncActionBinding.toABI(_result_swift)
        } },
        MoveOverloadDefaultOptions: { this, destinationFolder, desiredNewName, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let destinationFolder_swift = WindowsStorage_IStorageFolderBinding.fromABI(destinationFolder)
            let desiredNewName_swift = WindowsRuntime.StringBinding.fromABI(desiredNewName)
            let _result_swift = try COM.NullResult.`catch`(try this.moveAsync(destinationFolder_swift, desiredNewName_swift))
            _result.pointee = try WindowsFoundation_IAsyncActionBinding.toABI(_result_swift)
        } },
        MoveOverload: { this, destinationFolder, desiredNewName, option, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let destinationFolder_swift = WindowsStorage_IStorageFolderBinding.fromABI(destinationFolder)
            let desiredNewName_swift = WindowsRuntime.StringBinding.fromABI(desiredNewName)
            let option_swift = WindowsStorage_NameCollisionOption.fromABI(option)
            let _result_swift = try COM.NullResult.`catch`(try this.moveAsync(destinationFolder_swift, desiredNewName_swift, option_swift))
            _result.pointee = try WindowsFoundation_IAsyncActionBinding.toABI(_result_swift)
        } },
        MoveAndReplaceAsync: { this, fileToReplace, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let fileToReplace_swift = WindowsStorage_IStorageFileBinding.fromABI(fileToReplace)
            let _result_swift = try COM.NullResult.`catch`(try this.moveAndReplaceAsync(fileToReplace_swift))
            _result.pointee = try WindowsFoundation_IAsyncActionBinding.toABI(_result_swift)
        } }
    )
}