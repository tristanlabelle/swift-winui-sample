// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Manages folders and their contents and provides information about them.
public final class WindowsStorage_StorageFolder: WindowsRuntime.WinRTImport<WindowsStorage_StorageFolderBinding>, WindowsStorage_IStorageFolderProtocol, WindowsStorage_IStorageItemProtocol, WindowsStorageSearch_IStorageFolderQueryOperationsProtocol, WindowsStorage_IStorageItemPropertiesProtocol, WindowsStorage_IStorageItemProperties2Protocol, WindowsStorage_IStorageItem2Protocol, WindowsStorage_IStorageFolder2Protocol, WindowsStorage_IStorageItemPropertiesWithProviderProtocol {
    // MARK: Windows.Storage.IStorageFolder members

    /// Creates a new file with the specified name in the current folder.
    /// - Parameter desiredName: The name of the new file to create in the current folder.
    /// - Returns: When this method completes, it returns a StorageFile that represents the new file.
    public func createFileAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.createFileAsyncOverloadDefaultOptions(desiredName))
    }

    /// Creates a new file in the current folder. This method also specifies what to do if a file with the same name already exists in the current folder.
    /// - Parameter desiredName: The name of the new file to create in the current folder.
    /// - Parameter options: One of the enumeration values that determines how to handle the collision if a file with the specified *desiredName* already exists in the current folder.
    /// - Returns: When this method completes, it returns a StorageFile that represents the new file.
    public func createFileAsync(_ desiredName: Swift.String, _ options: WindowsStorage_CreationCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.createFileAsync(desiredName, options))
    }

    /// Creates a new subfolder with the specified name in the current folder.
    /// - Parameter desiredName: The name of the new subfolder to create in the current folder.
    /// - Returns: When this method completes, it returns a StorageFolder that represents the new subfolder.
    public func createFolderAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_interop.createFolderAsyncOverloadDefaultOptions(desiredName))
    }

    /// Creates a new subfolder with the specified name in the current folder. This method also specifies what to do if a subfolder with the same name already exists in the current folder.
    /// - Parameter desiredName: The name of the new subfolder to create in the current folder.
    /// - Parameter options: One of the enumeration values that determines how to handle the collision if a subfolder with the specified *desiredName* already exists in the current folder.
    /// - Returns: When this method completes, it returns a StorageFolder that represents the new subfolder.
    public func createFolderAsync(_ desiredName: Swift.String, _ options: WindowsStorage_CreationCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_interop.createFolderAsync(desiredName, options))
    }

    /// Gets the file with the specified name from the current folder.
    /// - Parameter name: The name (or path relative to the current folder) of the file to get.
    /// - Returns: When this method completes successfully, it returns a StorageFile that represents the specified file.
    public func getFileAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.getFileAsync(name))
    }

    /// Gets the subfolder with the specified name from the current folder.
    /// - Parameter name: The name (or path relative to the current folder) of the subfolder to get.
    /// - Returns: When this method completes successfully, it returns a StorageFolder that represents the specified subfolder.
    public func getFolderAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_interop.getFolderAsync(name))
    }

    /// Gets the file or folder with the specified name from the current folder.
    /// - Parameter name: The name (or path relative to the current folder) of the file or folder to get.
    /// - Returns: When this method completes successfully, it returns an IStorageItem that represents the specified file or folder.
    public func getItemAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_IStorageItem?> {
        try COM.NullResult.unwrap(_interop.getItemAsync(name))
    }

    /// Gets the files in the current folder.
    /// - Returns: When this method completes successfully, it returns a list of the files in the current folder. The list is of type **IReadOnlyList**<StorageFile >. Each file in the list is represented by a StorageFile object.
    public func getFilesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?> {
        try COM.NullResult.unwrap(_interop.getFilesAsyncOverloadDefaultOptionsStartAndCount())
    }

    /// Gets the subfolders in the current folder.
    /// - Returns: When this method completes successfully, it returns a list of the subfolders in the current folder. The list is of type **IReadOnlyList**<StorageFolder >. Each folder in the list is represented by a StorageFolder object.
    public func getFoldersAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?> {
        try COM.NullResult.unwrap(_interop.getFoldersAsyncOverloadDefaultOptionsStartAndCount())
    }

    /// Gets the files and subfolders in the current folder.
    /// - Returns: When this method completes successfully, it returns a list of the files and folders in the current folder. The list is of type **IReadOnlyList**<IStorageItem >. Each item in the list is represented by an IStorageItem object.
    public func getItemsAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?> {
        try COM.NullResult.unwrap(_interop.getItemsAsyncOverloadDefaultStartAndCount())
    }

    // MARK: Windows.Storage.IStorageItem members

    /// Renames the current folder.
    /// - Parameter desiredName: The desired, new name for the current folder.
    /// - Returns: No object or value is returned by this method when it completes.
    public func renameAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.renameAsyncOverloadDefaultOptions(desiredName))
    }

    /// Renames the current folder and specifies what to do if a folder with the same name already exists.
    /// - Parameter desiredName: The desired, new name for the current folder.
    /// - Parameter option: The enum value that determines how Windows responds if the *desiredName* is the same as the name of an existing item in the current folder's location.
    /// - Returns: No object or value is returned by this method when it completes.
    public func renameAsync(_ desiredName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.renameAsync(desiredName, option))
    }

    /// Deletes the current folder.
    /// - Returns: No object or value is returned by this method when it completes.
    public func deleteAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.deleteAsyncOverloadDefaultOptions())
    }

    /// Deletes the current folder. This method also specifies whether to delete the folder permanently.
    /// - Parameter option: One of the enumeration values that specifies whether to delete the folder permanently.
    /// - Returns: No object or value is returned by this method when it completes.
    public func deleteAsync(_ option: WindowsStorage_StorageDeleteOption) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.deleteAsync(option))
    }

    /// Gets the basic properties of the current folder or file group.
    /// - Returns: When this method completes successfully, it returns the basic properties of the current folder or file group as a BasicProperties object.
    public func getBasicPropertiesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_BasicProperties?> {
        try COM.NullResult.unwrap(_istorageItem.getBasicPropertiesAsync())
    }

    /// Indicates whether the current StorageFolder matches the specified StorageItemTypes value.
    /// - Parameter type: The enum value that determines the object type to match against.
    /// - Returns: True if the StorageFolder matches the specified StorageItemTypes value; otherwise false.
    public func isOfType(_ type: WindowsStorage_StorageItemTypes) throws -> Swift.Bool {
        try _istorageItem.isOfType(type)
    }

    /// The attributes of the current folder.
    public var attributes: WindowsStorage_FileAttributes {
        get throws {
            try _istorageItem.get_Attributes()
        }
    }

    /// The date and time that the current folder was created as type DateTime.
    public var dateCreated: WindowsFoundation_DateTime {
        get throws {
            try _istorageItem.get_DateCreated()
        }
    }

    /// The name of the current folder.
    public var name: Swift.String {
        get throws {
            try _istorageItem.get_Name()
        }
    }

    /// The full path of the current folder in the file system, if the path is available.
    public var path: Swift.String {
        get throws {
            try _istorageItem.get_Path()
        }
    }

    // MARK: Windows.Storage.Search.IStorageFolderQueryOperations members

    /// Gets the indexed state of the current folder.
    /// - Returns: When this method completes successfully, it returns an IndexedState enum value that describes the state of the folder.
    public func getIndexedStateAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageSearch_IndexedState> {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.getIndexedStateAsync())
    }

    /// Gets a query result object that contains the files in the current folder.
    /// - Returns: A query result object. Call the GetFilesAsync method of the query result to get the flat list of files. This method returns a list of type **IReadOnlyList**<StorageFile >. Each file is represented by an item of type StorageFile.
    public func createFileQuery() throws -> WindowsStorageSearch_StorageFileQueryResult {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.createFileQueryOverloadDefault())
    }

    /// Gets a query result object that contains the files in the current folder. Also gets the files from the subfolders of the current folder when the value of the *query* argument is something other than CommonFileQuery.DefaultQuery. Files are sorted based on the specified CommonFileQuery.
    /// - Parameter query: One of the enumeration values that specifies how to sort the files and determines whether the query is shallow or deep.
    /// - Returns: A query result object. Call the GetFilesAsync method of the query result to get the flat list of files, sorted as specified by *query*. This method returns a list of type **IReadOnlyList**<StorageFile >. Each file is represented by an item of type StorageFile.
    public func createFileQuery(_ query: WindowsStorageSearch_CommonFileQuery) throws -> WindowsStorageSearch_StorageFileQueryResult {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.createFileQuery(query))
    }

    /// Gets a query result object that contains the files in the current folder and, optionally, in the subfolders of the current folder. The results are based on the specified QueryOptions.
    /// - Parameter queryOptions: The criteria that are applied to the query.
    /// - Returns: A query result object that contains the files in the current folder and, optionally, in the subfolders of the current folder, filtered and sorted based on the specified QueryOptions. Call the GetFilesAsync method of the query result to get the flat list of files, sorted as specified by *queryOptions*. This method returns a list of type **IReadOnlyList**<StorageFile >. Each file is represented by an item of type StorageFile.
    public func createFileQueryWithOptions(_ queryOptions: WindowsStorageSearch_QueryOptions?) throws -> WindowsStorageSearch_StorageFileQueryResult {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.createFileQueryWithOptions(queryOptions))
    }

    /// Gets a query result object that contains the subfolders in the current folder.
    /// - Returns: A query result object. Call the GetFoldersAsync method of the query result to get the subfolders in the current folder. This method returns a list of type **IReadOnlyList**<StorageFolder >. Each file or folder is represented by an item of type StorageFolder.
    public func createFolderQuery() throws -> WindowsStorageSearch_StorageFolderQueryResult {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.createFolderQueryOverloadDefault())
    }

    /// Gets a query result object that contains the subfolders in the current folder. When the value of the *query* argument is something other than CommonFolderQuery.DefaultQuery, gets a list of virtual folders that represent containers for groups of files in the subfolders of the current folder. Files are grouped into folders based on the specified value from the CommonFolderQuery enumeration.
    /// - Parameter query: One of the enumeration values that specifies how to group the files into folders and determines whether the query is shallow or deep.
    /// - Returns: A query result object. Call the GetFoldersAsync method of the query result to get the subfolders in the current folder. When the value of the *query* argument is something other than CommonFolderQuery.DefaultQuery, the query result object contains a list of virtual folders that represent containers for groups of files in the subfolders of the current folder. (Files from the current folder are not included.) The files are grouped as specified by *query*.
    public func createFolderQuery(_ query: WindowsStorageSearch_CommonFolderQuery) throws -> WindowsStorageSearch_StorageFolderQueryResult {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.createFolderQuery(query))
    }

    /// Gets a query result object that contains the subfolders in the current folder and, optionally, nested subfolders. The results are based on the specified QueryOptions.
    /// - Parameter queryOptions: The criteria that are applied to the query.
    /// - Returns: A query result object. Call the GetFoldersAsync method of the query result to get the subfolders in the current folder. If you provided a CommonFolderQuery value other than CommonFolderQuery.DefaultQuery when you instantiated the QueryOptions, the query result object contains a list of virtual folders that represent containers for groups of files in the subfolders of the current folder. (Files from the current folder are not included.) The files are grouped as specified by *queryOptions*.
    public func createFolderQueryWithOptions(_ queryOptions: WindowsStorageSearch_QueryOptions?) throws -> WindowsStorageSearch_StorageFolderQueryResult {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.createFolderQueryWithOptions(queryOptions))
    }

    /// Gets a query result object that contains the files and subfolders in the current folder.
    /// - Returns: A query result object. Call the GetItemsAsync method of the query result to get the files and subfolders in the current folder. This method returns a list of type **IReadOnlyList**<IStorageItem >. Each file or folder is represented by an item of type IStorageItem.
    public func createItemQuery() throws -> WindowsStorageSearch_StorageItemQueryResult {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.createItemQuery())
    }

    /// Gets a query result object that contains the files and subfolders in the current folder and, optionally, in the subfolders of the current folder. The results are based on the specified QueryOptions.
    /// - Parameter queryOptions: The criteria that are applied to the query.
    /// - Returns: A query result object. Call the GetItemsAsync method of the query result to get the files and subfolders in the current folder and, optionally, in the subfolders of the current folder, filtered and sorted based on the specified QueryOptions. This method returns a list of type **IReadOnlyList**<IStorageItem >. Each file or folder is represented by an item of type IStorageItem.
    public func createItemQueryWithOptions(_ queryOptions: WindowsStorageSearch_QueryOptions?) throws -> WindowsStorageSearch_StorageItemQueryResult {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.createItemQueryWithOptions(queryOptions))
    }

    /// Gets an index-based range of files from the list of all files in the current folder. Also gets the files from the subfolders of the current folder when the value of the *query* argument is something other than CommonFileQuery.DefaultQuery. Files are sorted based on the specified value from the CommonFileQuery enumeration.
    /// - Parameter query: One of the enumeration values that specifies how to sort the files and determines whether the query is shallow or deep.
    /// - Parameter startIndex: The zero-based index of the first file in the range to retrieve.
    /// - Parameter maxItemsToRetrieve: The maximum number of files to retrieve.
    /// - Returns: When this method completes successfully, it returns a flat list of files sorted as specified by *query*. The list is of type **IReadOnlyList**<StorageFile >. Each file in the list is represented by a StorageFile object.
    public func getFilesAsync(_ query: WindowsStorageSearch_CommonFileQuery, _ startIndex: Swift.UInt32, _ maxItemsToRetrieve: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?> {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.getFilesAsync(query, startIndex, maxItemsToRetrieve))
    }

    /// Gets the files in the current folder. Also gets the files from the subfolders of the current folder when the value of the *query* argument is something other than CommonFileQuery.DefaultQuery. Files are sorted based on the specified value from the CommonFileQuery enumeration.
    /// - Parameter query: One of the enumeration values that specifies how to sort the files and determines whether the query is shallow or deep.
    /// - Returns: When this method completes successfully, it returns a flat list of files, sorted as specified by *query*. The list is of type **IReadOnlyList**<StorageFile >. Each file in the list is represented by a StorageFile object.
    public func getFilesAsync(_ query: WindowsStorageSearch_CommonFileQuery) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?> {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.getFilesAsyncOverloadDefaultStartAndCount(query))
    }

    /// Gets an index-based range of folders from the list of all subfolders in the current folder. When the value of the *query* argument is something other than CommonFolderQuery.DefaultQuery, gets a list of virtual folders that represent containers for groups of files in the subfolders of the current folder. Files are grouped into folders based on the specified value from the CommonFolderQuery enumeration.
    /// - Parameter query: One of the enumeration values that specifies how to group the files into folders and determines whether the query is shallow or deep.
    /// - Parameter startIndex: The zero-based index of the first folder in the range to retrieve.
    /// - Parameter maxItemsToRetrieve: The maximum number of folders to retrieve.
    /// - Returns: When this method completes successfully, it returns a list of subfolders. When the value of the *query* argument is something other than CommonFolderQuery.DefaultQuery, this method returns a list of virtual folders that represent containers for groups of files in the subfolders of the current folder. (Files from the current folder are not included.) The files are grouped as specified by *query*. The list is of type **IReadOnlyList**<StorageFolder >.
    public func getFoldersAsync(_ query: WindowsStorageSearch_CommonFolderQuery, _ startIndex: Swift.UInt32, _ maxItemsToRetrieve: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?> {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.getFoldersAsync(query, startIndex, maxItemsToRetrieve))
    }

    /// Gets the subfolders in the current folder. When the value of the *query* argument is something other than CommonFolderQuery.DefaultQuery, gets a list of virtual folders that represent containers for groups of files in the subfolders of the current folder. Files are grouped into folders based on the specified value from the CommonFolderQuery enumeration.
    /// - Parameter query: One of the enumeration values that specifies how to group the files into folders and determines whether the query is shallow or deep.
    /// - Returns: When this method completes successfully, it returns a list of subfolders. When the value of the *query* argument is something other than CommonFolderQuery.DefaultQuery, this method returns a list of virtual folders that represent containers for groups of files in the subfolders of the current folder. (Files from the current folder are not included.) The files are grouped as specified by *query*. The list is of type **IReadOnlyList**<StorageFolder >.
    public func getFoldersAsync(_ query: WindowsStorageSearch_CommonFolderQuery) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?> {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.getFoldersAsyncOverloadDefaultStartAndCount(query))
    }

    /// Gets an index-based range of files and folders from the list of all files and subfolders in the current folder.
    /// - Parameter startIndex: The zero-based index of the first item in the range to get.
    /// - Parameter maxItemsToRetrieve: The maximum number of items to get.
    /// - Returns: When this method completes successfully, it returns a list of the files and subfolders in the current folder. The list is of type **IReadOnlyList**<IStorageItem >. Each item in the list is represented by an IStorageItem object.
    public func getItemsAsync(_ startIndex: Swift.UInt32, _ maxItemsToRetrieve: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?> {
        try COM.NullResult.unwrap(_istorageFolderQueryOperations.getItemsAsync(startIndex, maxItemsToRetrieve))
    }

    /// Indicates whether the current folder supports the specified QueryOptions.
    /// - Parameter queryOptions: The QueryOptions to check.
    /// - Returns: True if the folder or file group supports the specified QueryOptions; otherwise false.
    public func areQueryOptionsSupported(_ queryOptions: WindowsStorageSearch_QueryOptions?) throws -> Swift.Bool {
        try _istorageFolderQueryOperations.areQueryOptionsSupported(queryOptions)
    }

    /// Indicates whether the current folder supports the specified CommonFolderQuery.
    /// - Parameter query: The value to test.
    /// - Returns: True if the folder supports the specified CommonFolderQuery; otherwise, false.
    public func isCommonFolderQuerySupported(_ query: WindowsStorageSearch_CommonFolderQuery) throws -> Swift.Bool {
        try _istorageFolderQueryOperations.isCommonFolderQuerySupported(query)
    }

    /// Indicates whether the current folder supports the specified CommonFileQuery.
    /// - Parameter query: The value to test.
    /// - Returns: True if the folder supports the specified CommonFileQuery; otherwise, false.
    public func isCommonFileQuerySupported(_ query: WindowsStorageSearch_CommonFileQuery) throws -> Swift.Bool {
        try _istorageFolderQueryOperations.isCommonFileQuerySupported(query)
    }

    // MARK: Windows.Storage.IStorageItemProperties members

    /// Gets a thumbnail image for the current folder, sized for the specified purpose of the thumbnail.
    /// - Parameter mode: A value from the enumeration that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image, or **null** if there is no thumbnail image associated with the folder.
    public func getThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties.getThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode))
    }

    /// Gets a thumbnail image for the current folder, sized for the specified purpose of the thumbnail and adjusted to the requested size.
    /// - Parameter mode: A value from the enumeration that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Parameter requestedSize: The requested size, in pixels, of the longest edge of the thumbnail. This method uses the *requestedSize* as a guide and tries to scale the thumbnail image without reducing the quality of the image.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image, or **null** if there is no thumbnail image associated with the folder.
    public func getThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties.getThumbnailAsyncOverloadDefaultOptions(mode, requestedSize))
    }

    /// Gets a thumbnail image for the current folder, sized for the specified purpose of the thumbnail and adjusted to the requested size with the specified options.
    /// - Parameter mode: A value from the enumeration that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Parameter requestedSize: The requested size, in pixels, of the longest edge of the thumbnail. This method uses the *requestedSize* as a guide and tries to scale the thumbnail image without reducing the quality of the image.
    /// - Parameter options: A value from the enumeration that specifies how to retrieve and size the image. The default value, **UseCurrentScale**, is suitable for most apps.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image, or **null** if there is no thumbnail image associated with the folder.
    public func getThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32, _ options: WindowsStorageFileProperties_ThumbnailOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties.getThumbnailAsync(mode, requestedSize, options))
    }

    /// The user-friendly name of the current folder.
    public var displayName: Swift.String {
        get throws {
            try _istorageItemProperties.get_DisplayName()
        }
    }

    /// The user-friendly description of the type of the folder; for example, `JPEG image`.
    public var displayType: Swift.String {
        get throws {
            try _istorageItemProperties.get_DisplayType()
        }
    }

    /// The identifier for the current folder or file group within a query result or StorageFolder.
    public var folderRelativeId: Swift.String {
        get throws {
            try _istorageItemProperties.get_FolderRelativeId()
        }
    }

    /// The object that provides access to the content-related properties of the folder.
    public var properties: WindowsStorageFileProperties_StorageItemContentProperties {
        get throws {
            try COM.NullResult.unwrap(_istorageItemProperties.get_Properties())
        }
    }

    // MARK: Windows.Storage.IStorageItemProperties2 members

    /// Gets a scaled image as a thumbnail, determined by the purpose of the thumbnail.
    /// - Parameter mode: The enum value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image or **null** if there is no thumbnail image associated with the item.
    public func getScaledImageAsThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties2.getScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode))
    }

    /// Gets a scaled image as a thumbnail, determined by the purpose of the thumbnail and the requested size.
    /// - Parameter mode: The enum value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Parameter requestedSize: The requested size, in pixels, of the longest edge of the thumbnail. Windows uses the *requestedSize* as a guide and tries to scale the thumbnail image without reducing the quality of the image.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image or **null** if there is no thumbnail image associated with the item.
    public func getScaledImageAsThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties2.getScaledImageAsThumbnailAsyncOverloadDefaultOptions(mode, requestedSize))
    }

    /// Gets a scaled image as a thumbnail, determined by the purpose of the thumbnail, the requested size, and the specified options
    /// - Parameter mode: The enum value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Parameter requestedSize: The requested size, in pixels, of the longest edge of the thumbnail. Windows uses the *requestedSize* as a guide and tries to scale the thumbnail image without reducing the quality of the image.
    /// - Parameter options: The enum value that describes the desired behavior to use to retrieve the thumbnail image. The specified behavior might affect the size and/or quality of the image and how quickly the thumbnail image is retrieved.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image or **null** if there is no thumbnail image associated with the item.
    public func getScaledImageAsThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32, _ options: WindowsStorageFileProperties_ThumbnailOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties2.getScaledImageAsThumbnailAsync(mode, requestedSize, options))
    }

    // MARK: Windows.Storage.IStorageItem2 members

    /// Gets the parent folder of the current folder.
    /// - Returns: When this method completes, it returns the parent folder as a StorageFolder.
    public func getParentAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_istorageItem2.getParentAsync())
    }

    /// Indicates whether the current folder is equal to the specified folder.
    /// - Parameter item: The IStorageItem object that represents the folder to compare against.
    /// - Returns: Returns true if the current folder is equal to the specified folder; otherwise false.
    public func isEqual(_ item: WindowsStorage_IStorageItem?) throws -> Swift.Bool {
        try _istorageItem2.isEqual(item)
    }

    // MARK: Windows.Storage.IStorageFolder2 members

    /// Tries to get the file or folder with the specified name from the current folder. Returns **null** instead of raising a **FileNotFoundException** if the specified file or folder is not found.
    /// - Parameter name: The name (or path relative to the current folder) of the file or folder to get.
    /// - Returns: When this method completes successfully, it returns an IStorageItem that represents the specified file or folder. If the specified file or folder is not found, this method returns **null** instead of raising an exception.
    public func tryGetItemAsync(_ name: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_IStorageItem?> {
        try COM.NullResult.unwrap(_istorageFolder2.tryGetItemAsync(name))
    }

    // MARK: Windows.Storage.IStorageItemPropertiesWithProvider members

    /// The StorageProvider object that contains info about the service that stores the current folder. The folder may be stored by the local file system or by a remote service like Microsoft OneDrive.
    public var provider: WindowsStorage_StorageProvider {
        get throws {
            try COM.NullResult.unwrap(_istorageItemPropertiesWithProvider.get_Provider())
        }
    }

    /// Gets the StorageLibraryChangeTracker associated with a StorageFolder.
    /// - Returns: The StorageLibraryChangeTracker associated with a StorageFolder.
    public func tryGetChangeTracker() throws -> WindowsStorage_StorageLibraryChangeTracker {
        try COM.NullResult.unwrap(_istorageFolder3.tryGetChangeTracker())
    }


    ///       
    /// - Parameter user: 
    ///       
    /// - Parameter path: 
    ///       
    /// - Returns: 
    ///       
    public static func getFolderFromPathForUserAsync(_ user: WindowsSystem_User?, _ path: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_istorageFolderStatics2.getFolderFromPathForUserAsync(user, path))
    }

    /// Gets the folder that has the specified absolute path in the file system.
    /// - Parameter path: The absolute path in the file system (not the Uri) of the folder to get.
    /// - Returns: When this method completes successfully, it returns a StorageFolder that represents the specified folder.
    public static func getFolderFromPathAsync(_ path: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_istorageFolderStatics.getFolderFromPathAsync(path))
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsStorage_IStorageFolder>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIStorageItem: COM.COMReference<SWRT_WindowsStorage_IStorageItem>.Optional = .none

    internal var _istorageItem: COM.COMInterop<SWRT_WindowsStorage_IStorageItem> {
        get throws {
            try _lazyIStorageItem.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItem.self)).cast()
            }
        }
    }

    private var _lazyIStorageFolderQueryOperations: COM.COMReference<SWRT_WindowsStorageSearch_IStorageFolderQueryOperations>.Optional = .none

    internal var _istorageFolderQueryOperations: COM.COMInterop<SWRT_WindowsStorageSearch_IStorageFolderQueryOperations> {
        get throws {
            try _lazyIStorageFolderQueryOperations.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorageSearch_IStorageFolderQueryOperations.self)).cast()
            }
        }
    }

    private var _lazyIStorageItemProperties: COM.COMReference<SWRT_WindowsStorage_IStorageItemProperties>.Optional = .none

    internal var _istorageItemProperties: COM.COMInterop<SWRT_WindowsStorage_IStorageItemProperties> {
        get throws {
            try _lazyIStorageItemProperties.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItemProperties.self)).cast()
            }
        }
    }

    private var _lazyIStorageItemProperties2: COM.COMReference<SWRT_WindowsStorage_IStorageItemProperties2>.Optional = .none

    internal var _istorageItemProperties2: COM.COMInterop<SWRT_WindowsStorage_IStorageItemProperties2> {
        get throws {
            try _lazyIStorageItemProperties2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItemProperties2.self)).cast()
            }
        }
    }

    private var _lazyIStorageItem2: COM.COMReference<SWRT_WindowsStorage_IStorageItem2>.Optional = .none

    internal var _istorageItem2: COM.COMInterop<SWRT_WindowsStorage_IStorageItem2> {
        get throws {
            try _lazyIStorageItem2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItem2.self)).cast()
            }
        }
    }

    private var _lazyIStorageFolder2: COM.COMReference<SWRT_WindowsStorage_IStorageFolder2>.Optional = .none

    internal var _istorageFolder2: COM.COMInterop<SWRT_WindowsStorage_IStorageFolder2> {
        get throws {
            try _lazyIStorageFolder2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageFolder2.self)).cast()
            }
        }
    }

    private var _lazyIStorageItemPropertiesWithProvider: COM.COMReference<SWRT_WindowsStorage_IStorageItemPropertiesWithProvider>.Optional = .none

    internal var _istorageItemPropertiesWithProvider: COM.COMInterop<SWRT_WindowsStorage_IStorageItemPropertiesWithProvider> {
        get throws {
            try _lazyIStorageItemPropertiesWithProvider.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItemPropertiesWithProvider.self)).cast()
            }
        }
    }

    private var _lazyIStorageFolder3: COM.COMReference<SWRT_WindowsStorage_IStorageFolder3>.Optional = .none

    internal var _istorageFolder3: COM.COMInterop<SWRT_WindowsStorage_IStorageFolder3> {
        get throws {
            try _lazyIStorageFolder3.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageFolder3.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.Storage.StorageFolder")
            }
        }
    }

    private static var _lazyIStorageFolderStatics2: COM.COMReference<SWRT_WindowsStorage_IStorageFolderStatics2>.Optional = .none

    internal static var _istorageFolderStatics2: COM.COMInterop<SWRT_WindowsStorage_IStorageFolderStatics2> {
        get throws {
            try _lazyIStorageFolderStatics2.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsStorage_IStorageFolderStatics2.self)).cast()
            }
        }
    }

    private static var _lazyIStorageFolderStatics: COM.COMReference<SWRT_WindowsStorage_IStorageFolderStatics>.Optional = .none

    internal static var _istorageFolderStatics: COM.COMInterop<SWRT_WindowsStorage_IStorageFolderStatics> {
        get throws {
            try _lazyIStorageFolderStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsStorage_IStorageFolderStatics.self)).cast()
            }
        }
    }
}