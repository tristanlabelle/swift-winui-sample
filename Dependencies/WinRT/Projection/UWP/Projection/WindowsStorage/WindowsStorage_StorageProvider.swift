// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Contains info about the service that stores files and folders. Files and folders may be stored either by the local file system or by a remote service like Microsoft OneDrive.
public final class WindowsStorage_StorageProvider: WindowsRuntime.WinRTImport<WindowsStorage_StorageProviderBinding> {
    /// The user-friendly name for the provider. This name is localized to the current system locale.
    public var displayName: Swift.String {
        get throws {
            try _interop.get_DisplayName()
        }
    }

    /// Gets a user-friendly name for the current provider of files and folders.
    public var displayName_: Swift.String {
        try! self.displayName
    }

    /// The identifier for the provider.
    public var id: Swift.String {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets an identifier for the current provider of files and folders.
    public var id_: Swift.String {
        try! self.id
    }

    /// Determines if a property is supported by a cloud storage provider.
    /// - Parameter propertyCanonicalName: The name of the property. E.g., "System.Photo.DateTaken" or "System.Music.Artist"
    /// - Returns: **True** if the property is supported by the cloud storage provider; **False** otherwise
    public func isPropertySupportedForPartialFileAsync(_ propertyCanonicalName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_istorageProvider2.isPropertySupportedForPartialFileAsync(propertyCanonicalName))
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsStorage_IStorageProvider>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIStorageProvider2: COM.COMReference<SWRT_WindowsStorage_IStorageProvider2>.Optional = .none

    internal var _istorageProvider2: COM.COMInterop<SWRT_WindowsStorage_IStorageProvider2> {
        get throws {
            try _lazyIStorageProvider2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageProvider2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.Storage.StorageProvider")
            }
        }
    }
}