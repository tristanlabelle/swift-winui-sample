// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Represents a file. Provides information about the file and its content, and ways to manipulate them.
public final class WindowsStorage_StorageFile: WindowsRuntime.WinRTImport<WindowsStorage_StorageFileBinding>, WindowsStorage_IStorageFileProtocol, WindowsStorageStreams_IInputStreamReferenceProtocol, WindowsStorageStreams_IRandomAccessStreamReferenceProtocol, WindowsStorage_IStorageItemProtocol, WindowsStorage_IStorageItemPropertiesProtocol, WindowsStorage_IStorageItemProperties2Protocol, WindowsStorage_IStorageItem2Protocol, WindowsStorage_IStorageItemPropertiesWithProviderProtocol, WindowsStorage_IStorageFilePropertiesWithAvailabilityProtocol, WindowsStorage_IStorageFile2Protocol {
    // MARK: Windows.Storage.IStorageFile members

    /// Opens a random-access stream with the specified options over the specified file.
    /// - Parameter accessMode: One of the enumeration values that specifies the type of access to allow.
    /// - Returns: When this method completes, it returns an IRandomAccessStream that contains the requested random-access stream.
    public func openAsync(_ accessMode: WindowsStorage_FileAccessMode) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?> {
        try COM.NullResult.unwrap(_interop.openAsync(accessMode))
    }

    /// Opens a random-access stream to the file that can be used for transacted-write operations.
    /// - Returns: When this method completes, it returns a StorageStreamTransaction that contains the random-access stream and methods that can be used to complete transactions.
    public func openTransactedWriteAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageStreamTransaction?> {
        try COM.NullResult.unwrap(_interop.openTransactedWriteAsync())
    }

    /// Creates a copy of the file in the specified folder.
    /// - Parameter destinationFolder: The destination folder where the copy of the file is created.
    /// - Returns: When this method completes, it returns a StorageFile that represents the copy of the file created in the *destinationFolder*.
    public func copyAsync(_ destinationFolder: WindowsStorage_IStorageFolder?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.copyOverloadDefaultNameAndOptions(destinationFolder))
    }

    /// Creates a copy of the file in the specified folder and renames the copy.
    /// - Parameter destinationFolder: The destination folder where the copy of the file is created.
    /// - Parameter desiredNewName: The new name for the copy of the file created in the *destinationFolder*.
    /// - Returns: When this method completes, it returns a StorageFile that represents the copy of the file created in the *destinationFolder*.
    public func copyAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.copyOverloadDefaultOptions(destinationFolder, desiredNewName))
    }

    /// Creates a copy of the file in the specified folder and renames the copy. This method also specifies what to do if a file with the same name already exists in the destination folder.
    /// - Parameter destinationFolder: The destination folder where the copy of the file is created.
    /// - Parameter desiredNewName: The new name for the copy of the file created in the *destinationFolder*.
    /// - Parameter option: One of the enumeration values that determines how to handle the collision if a file with the specified *desiredNewName* already exists in the destination folder.
    /// - Returns: When this method completes, it returns a StorageFile that represents the copy of the file created in the *destinationFolder*.
    public func copyAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_interop.copyOverload(destinationFolder, desiredNewName, option))
    }

    /// Replaces the specified file with a copy of the current file.
    /// - Parameter fileToReplace: The file to replace.
    /// - Returns: No object or value is returned when this method completes.
    public func copyAndReplaceAsync(_ fileToReplace: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.copyAndReplaceAsync(fileToReplace))
    }

    /// Moves the current file to the specified folder.
    /// - Parameter destinationFolder: The destination folder where the file is moved.
    /// - Returns: No object or value is returned by this method.
    public func moveAsync(_ destinationFolder: WindowsStorage_IStorageFolder?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.moveOverloadDefaultNameAndOptions(destinationFolder))
    }

    /// Moves the current file to the specified folder and renames the file according to the desired name.
    /// - Parameter destinationFolder: The destination folder where the file is moved.
    /// - Parameter desiredNewName: The desired name of the file after it is moved.
    /// - Returns: No object or value is returned by this method.
    public func moveAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.moveOverloadDefaultOptions(destinationFolder, desiredNewName))
    }

    /// Moves the current file to the specified folder and renames the file according to the desired name. This method also specifies what to do if a file with the same name already exists in the specified folder.
    /// - Parameter destinationFolder: The destination folder where the file is moved.
    /// - Parameter desiredNewName: The desired name of the file after it is moved.
    /// - Parameter option: An enum value that determines how Windows responds if the *desiredNewName* is the same as the name of an existing file in the destination folder.
    /// - Returns: No object or value is returned by this method.
    public func moveAsync(_ destinationFolder: WindowsStorage_IStorageFolder?, _ desiredNewName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.moveOverload(destinationFolder, desiredNewName, option))
    }

    /// Moves the current file to the location of the specified file and replaces the specified file in that location.
    /// - Parameter fileToReplace: The file to replace.
    /// - Returns: No object or value is returned by this method.
    public func moveAndReplaceAsync(_ fileToReplace: WindowsStorage_IStorageFile?) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.moveAndReplaceAsync(fileToReplace))
    }

    /// The MIME type of the file contents.
    public var contentType: Swift.String {
        get throws {
            try _interop.get_ContentType()
        }
    }

    /// The file name extension of the file.
    public var fileType: Swift.String {
        get throws {
            try _interop.get_FileType()
        }
    }

    // MARK: Windows.Storage.Streams.IInputStreamReference members

    /// Opens a sequential-access stream over the current file for reading file contents.
    /// - Returns: When this method completes, it returns the sequential-access stream (type IInputStream ).
    public func openSequentialReadAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IInputStream?> {
        try COM.NullResult.unwrap(_iinputStreamReference.openSequentialReadAsync())
    }

    // MARK: Windows.Storage.Streams.IRandomAccessStreamReference members

    /// Opens a random-access stream over the current file for reading file contents.
    /// - Returns: When this method completes, it returns the random-access stream (type IRandomAccessStreamWithContentType ).
    public func openReadAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStreamWithContentType?> {
        try COM.NullResult.unwrap(_irandomAccessStreamReference.openReadAsync())
    }

    // MARK: Windows.Storage.IStorageItem members

    /// Renames the current file.
    /// - Parameter desiredName: The desired, new name of the current item.
    /// - Returns: No object or value is returned by this method when it completes.
    public func renameAsync(_ desiredName: Swift.String) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.renameAsyncOverloadDefaultOptions(desiredName))
    }

    /// Renames the current file. This method also specifies what to do if an existing item in the current file's location has the same name.
    /// - Parameter desiredName: The desired, new name of the current file.
    /// - Parameter option: The enum value that determines how Windows responds if the *desiredName* is the same as the name of an existing item in the current file's location.
    /// - Returns: No object or value is returned by this method when it completes.
    public func renameAsync(_ desiredName: Swift.String, _ option: WindowsStorage_NameCollisionOption) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.renameAsync(desiredName, option))
    }

    /// Deletes the current file.
    /// - Returns: No object or value is returned by this method when it completes.
    public func deleteAsync() throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.deleteAsyncOverloadDefaultOptions())
    }

    /// Deletes the current file, optionally deleting the item permanently.
    /// - Parameter option: A value that indicates whether to delete the item permanently.
    /// - Returns: No object or value is returned by this method when it completes.
    public func deleteAsync(_ option: WindowsStorage_StorageDeleteOption) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_istorageItem.deleteAsync(option))
    }

    /// Gets the basic properties of the current file.
    /// - Returns: When this method completes successfully, it returns the basic properties of the current file as a BasicProperties object.
    public func getBasicPropertiesAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_BasicProperties?> {
        try COM.NullResult.unwrap(_istorageItem.getBasicPropertiesAsync())
    }

    /// Determines whether the current StorageFile matches the specified StorageItemTypes value.
    /// - Parameter type: The value to match against.
    /// - Returns: True if the StorageFile matches the specified value; otherwise false.
    public func isOfType(_ type: WindowsStorage_StorageItemTypes) throws -> Swift.Bool {
        try _istorageItem.isOfType(type)
    }

    /// The file attributes.
    public var attributes: WindowsStorage_FileAttributes {
        get throws {
            try _istorageItem.get_Attributes()
        }
    }

    /// The date and time when the current file was created.
    public var dateCreated: WindowsFoundation_DateTime {
        get throws {
            try _istorageItem.get_DateCreated()
        }
    }

    /// The name of the file including the file name extension.
    public var name: Swift.String {
        get throws {
            try _istorageItem.get_Name()
        }
    }

    /// The full path of the file, if the file has a path in the user's file-system.
    public var path: Swift.String {
        get throws {
            try _istorageItem.get_Path()
        }
    }

    // MARK: Windows.Storage.IStorageItemProperties members

    /// Retrieves an adjusted thumbnail image for the file, determined by the purpose of the thumbnail.
    /// - Parameter mode: The enum value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image or **null** if there is no thumbnail image associated with the file.
    public func getThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties.getThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode))
    }

    /// Retrieves an adjusted thumbnail image for the file, determined by the purpose of the thumbnail and the requested size.
    /// - Parameter mode: The enum value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Parameter requestedSize: The requested size, in pixels, of the longest edge of the thumbnail. Windows uses the *requestedSize* as a guide and tries to scale the thumbnail image without reducing the quality of the image.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image or **null** if there is no thumbnail image associated with the file.
    public func getThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties.getThumbnailAsyncOverloadDefaultOptions(mode, requestedSize))
    }

    /// Retrieves an adjusted thumbnail image for the file, determined by the purpose of the thumbnail, the requested size, and the specified options.
    /// - Parameter mode: The enum value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Parameter requestedSize: The requested size, in pixels, of the longest edge of the thumbnail. Windows uses the *requestedSize* as a guide and tries to scale the thumbnail image without reducing the quality of the image.
    /// - Parameter options: The enum value that describes the desired behavior to use to retrieve the thumbnail image. The specified behavior might affect the size and/or quality of the image and how quickly the thumbnail image is retrieved.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image or **null** if there is no thumbnail image associated with the file.
    public func getThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32, _ options: WindowsStorageFileProperties_ThumbnailOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties.getThumbnailAsync(mode, requestedSize, options))
    }

    /// The user-friendly name for the file.
    public var displayName: Swift.String {
        get throws {
            try _istorageItemProperties.get_DisplayName()
        }
    }

    /// The user-friendly description of the type of the file.
    public var displayType: Swift.String {
        get throws {
            try _istorageItemProperties.get_DisplayType()
        }
    }

    /// The identifier for the file.
    public var folderRelativeId: Swift.String {
        get throws {
            try _istorageItemProperties.get_FolderRelativeId()
        }
    }

    /// The object that provides access to the content-related properties of the file.
    public var properties: WindowsStorageFileProperties_StorageItemContentProperties {
        get throws {
            try COM.NullResult.unwrap(_istorageItemProperties.get_Properties())
        }
    }

    // MARK: Windows.Storage.IStorageItemProperties2 members

    /// Gets a scaled image as a thumbnail, determined by the purpose of the thumbnail.
    /// - Parameter mode: The enum value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image or **null** if there is no thumbnail image associated with the item.
    public func getScaledImageAsThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties2.getScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode))
    }

    /// Gets a scaled image as a thumbnail, determined by the purpose of the thumbnail and the requested size.
    /// - Parameter mode: The enum value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Parameter requestedSize: The requested size, in pixels, of the longest edge of the thumbnail. Windows uses the *requestedSize* as a guide and tries to scale the thumbnail image without reducing the quality of the image.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image or **null** if there is no thumbnail image associated with the item.
    public func getScaledImageAsThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties2.getScaledImageAsThumbnailAsyncOverloadDefaultOptions(mode, requestedSize))
    }

    /// Gets a scaled image as a thumbnail, determined by the purpose of the thumbnail, the requested size, and the specified options
    /// - Parameter mode: The enum value that describes the purpose of the thumbnail and determines how the thumbnail image is adjusted.
    /// - Parameter requestedSize: The requested size, in pixels, of the longest edge of the thumbnail. Windows uses the *requestedSize* as a guide and tries to scale the thumbnail image without reducing the quality of the image.
    /// - Parameter options: The enum value that describes the desired behavior to use to retrieve the thumbnail image. The specified behavior might affect the size and/or quality of the image and how quickly the thumbnail image is retrieved.
    /// - Returns: When this method completes successfully, it returns a StorageItemThumbnail that represents the thumbnail image or **null** if there is no thumbnail image associated with the item.
    public func getScaledImageAsThumbnailAsync(_ mode: WindowsStorageFileProperties_ThumbnailMode, _ requestedSize: Swift.UInt32, _ options: WindowsStorageFileProperties_ThumbnailOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?> {
        try COM.NullResult.unwrap(_istorageItemProperties2.getScaledImageAsThumbnailAsync(mode, requestedSize, options))
    }

    // MARK: Windows.Storage.IStorageItem2 members

    /// Gets the parent folder of the current file.
    /// - Returns: When this method completes, it returns the parent folder as a StorageFolder.
    public func getParentAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?> {
        try COM.NullResult.unwrap(_istorageItem2.getParentAsync())
    }

    /// Indicates whether the current file is equal to the specified file.
    /// - Parameter item: The IStorageItem object that represents a file to compare against.
    /// - Returns: Returns true if the current file is equal to the specified file; otherwise false.
    public func isEqual(_ item: WindowsStorage_IStorageItem?) throws -> Swift.Bool {
        try _istorageItem2.isEqual(item)
    }

    // MARK: Windows.Storage.IStorageItemPropertiesWithProvider members

    /// The StorageProvider object that contains info about the service that stores the current file. The file may be stored by the local file system or by a remote service like Microsoft OneDrive.
    public var provider: WindowsStorage_StorageProvider {
        get throws {
            try COM.NullResult.unwrap(_istorageItemPropertiesWithProvider.get_Provider())
        }
    }

    // MARK: Windows.Storage.IStorageFilePropertiesWithAvailability members

    /// **True** if the file is local, is cached locally, or can be downloaded. Otherwise, **false**.
    public var isAvailable: Swift.Bool {
        get throws {
            try _istorageFilePropertiesWithAvailability.get_IsAvailable()
        }
    }

    // MARK: Windows.Storage.IStorageFile2 members

    /// Opens a random-access stream with the specified options over the specified file.
    /// - Parameter accessMode: One of the enumeration values that specifies the type of access to allow.
    /// - Parameter options: A bitwise combination of the enumeration values that specify options for opening the stream.
    /// - Returns: When this method completes, it returns an IRandomAccessStream that contains the requested random-access stream.
    public func openAsync(_ accessMode: WindowsStorage_FileAccessMode, _ options: WindowsStorage_StorageOpenOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?> {
        try COM.NullResult.unwrap(_istorageFile2.openWithOptionsAsync(accessMode, options))
    }

    /// Opens a random-access stream to the file that can be used for transacted-write operations with the specified options.
    /// - Parameter options: A bitwise combination of the enumeration values that specify options for opening the stream.
    /// - Returns: When this method completes, it returns a StorageStreamTransaction that contains the random-access stream and methods that can be used to complete transactions.
    public func openTransactedWriteAsync(_ options: WindowsStorage_StorageOpenOptions) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageStreamTransaction?> {
        try COM.NullResult.unwrap(_istorageFile2.openTransactedWriteWithOptionsAsync(options))
    }


    ///       
    /// - Parameter user: 
    ///       
    /// - Parameter path: 
    ///       
    /// - Returns: 
    ///       
    public static func getFileFromPathForUserAsync(_ user: WindowsSystem_User?, _ path: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFileStatics2.getFileFromPathForUserAsync(user, path))
    }

    /// Gets a StorageFile object to represent the file at the specified path.
    /// - Parameter path: The path of the file to get a StorageFile to represent.
    /// - Returns: When this method completes, it returns the file as a StorageFile.
    public static func getFileFromPathAsync(_ path: Swift.String) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFileStatics.getFileFromPathAsync(path))
    }

    /// Gets a StorageFile object to represent the specified Uniform Resource Identifier (URI) app resource. For examples of sample URIs see Load images and assets tailored for scale, theme, high contrast, and others.
    /// - Parameter uri: The Uniform Resource Identifier (URI) of the app resource to get a StorageFile to represent.
    /// - Returns: When this method completes, it returns a StorageFile object that represents the Uniform Resource Identifier (URI) resource.
    public static func getFileFromApplicationUriAsync(_ uri: WindowsFoundation_Uri?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFileStatics.getFileFromApplicationUriAsync(uri))
    }

    /// Creates a StorageFile to represent the specified stream of data. This method lets the app produce the data on-demand by specifying a function to be invoked when the StorageFile that represents the stream is first accessed.
    /// - Parameter displayNameWithExtension: The user-friendly name of the StorageFile to create, including a file type extension.
    /// - Parameter dataRequested: The function that should be invoked when the StorageFile that is returned is first accessed. This function should produce the data stream represented by the returned StorageFile and lets the app produce data on-demand instead of writing the contents of the file at creation time.
    /// - Parameter thumbnail: The thumbnail image for the StorageFile to create.
    /// - Returns: When this method completes, it returns a StorageFile object that represents the new stream of data.
    public static func createStreamedFileAsync(_ displayNameWithExtension: Swift.String, _ dataRequested: WindowsStorage_StreamedFileDataRequestedHandler?, _ thumbnail: WindowsStorageStreams_IRandomAccessStreamReference?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFileStatics.createStreamedFileAsync(displayNameWithExtension, dataRequested, thumbnail))
    }

    /// Replaces the contents of the file referred to by the specified IStorageFile object with a new data stream. This method lets the app produce the data on-demand by specifying a function to be invoked when the StorageFile that represents the stream is first accessed.
    /// - Parameter fileToReplace: The file (type IStorageFile ) that the new data stream should be written to.
    /// - Parameter dataRequested: The function that should be invoked when the StorageFile that is returned is first accessed. This function should produce the data stream represented by the returned StorageFile and lets the app produce data on-demand instead of writing the contents of the file at creation time.
    /// - Parameter thumbnail: The thumbnail image for the StorageFile to create.
    /// - Returns: When this method completes, it returns a StorageFile object that represents the new data stream. Subsequently, this StorageFile object should be used to access file content instead of the file (type IStorageFile ) that was specified to be replace.
    public static func replaceWithStreamedFileAsync(_ fileToReplace: WindowsStorage_IStorageFile?, _ dataRequested: WindowsStorage_StreamedFileDataRequestedHandler?, _ thumbnail: WindowsStorageStreams_IRandomAccessStreamReference?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFileStatics.replaceWithStreamedFileAsync(fileToReplace, dataRequested, thumbnail))
    }

    /// Creates a StorageFile to represent a stream of data from the specified Uniform Resource Identifier (URI) resource. This method lets the app download the data on-demand when the StorageFile that represents the stream is first accessed.
    /// - Parameter displayNameWithExtension: The user-friendly name of the StorageFile to create, including a file type extension.
    /// - Parameter uri: The Uniform Resource Identifier (URI) of the resource used to create the StorageFile.
    /// - Parameter thumbnail: The thumbnail image for the StorageFile to create.
    /// - Returns: When this method completes, it returns a StorageFile object that represents the Uniform Resource Identifier (URI) resource.
    public static func createStreamedFileFromUriAsync(_ displayNameWithExtension: Swift.String, _ uri: WindowsFoundation_Uri?, _ thumbnail: WindowsStorageStreams_IRandomAccessStreamReference?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFileStatics.createStreamedFileFromUriAsync(displayNameWithExtension, uri, thumbnail))
    }

    /// Replaces the contents of the file referred to by the specified IStorageFile object with a new data stream of the specified Uniform Resource Identifier (URI). This method lets the app download the data on-demand when the StorageFile that represents the stream is first accessed.
    /// - Parameter fileToReplace: The file that the created StorageFile will provide a stream of.
    /// - Parameter uri: The Uniform Resource Identifier (URI) of the resource used to create the StorageFile.
    /// - Parameter thumbnail: The thumbnail image for the StorageFile to create.
    /// - Returns: When this method completes, it returns a StorageFile object that represents the streamed file. Subsequently, this StorageFile object should be used to access file content instead of the file (type IStorageFile ) that was specified to be replace.
    public static func replaceWithStreamedFileFromUriAsync(_ fileToReplace: WindowsStorage_IStorageFile?, _ uri: WindowsFoundation_Uri?, _ thumbnail: WindowsStorageStreams_IRandomAccessStreamReference?) throws -> WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?> {
        try COM.NullResult.unwrap(_istorageFileStatics.replaceWithStreamedFileFromUriAsync(fileToReplace, uri, thumbnail))
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsStorage_IStorageFile>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIInputStreamReference: COM.COMReference<SWRT_WindowsStorageStreams_IInputStreamReference>.Optional = .none

    internal var _iinputStreamReference: COM.COMInterop<SWRT_WindowsStorageStreams_IInputStreamReference> {
        get throws {
            try _lazyIInputStreamReference.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorageStreams_IInputStreamReference.self)).cast()
            }
        }
    }

    private var _lazyIRandomAccessStreamReference: COM.COMReference<SWRT_WindowsStorageStreams_IRandomAccessStreamReference>.Optional = .none

    internal var _irandomAccessStreamReference: COM.COMInterop<SWRT_WindowsStorageStreams_IRandomAccessStreamReference> {
        get throws {
            try _lazyIRandomAccessStreamReference.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorageStreams_IRandomAccessStreamReference.self)).cast()
            }
        }
    }

    private var _lazyIStorageItem: COM.COMReference<SWRT_WindowsStorage_IStorageItem>.Optional = .none

    internal var _istorageItem: COM.COMInterop<SWRT_WindowsStorage_IStorageItem> {
        get throws {
            try _lazyIStorageItem.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItem.self)).cast()
            }
        }
    }

    private var _lazyIStorageItemProperties: COM.COMReference<SWRT_WindowsStorage_IStorageItemProperties>.Optional = .none

    internal var _istorageItemProperties: COM.COMInterop<SWRT_WindowsStorage_IStorageItemProperties> {
        get throws {
            try _lazyIStorageItemProperties.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItemProperties.self)).cast()
            }
        }
    }

    private var _lazyIStorageItemProperties2: COM.COMReference<SWRT_WindowsStorage_IStorageItemProperties2>.Optional = .none

    internal var _istorageItemProperties2: COM.COMInterop<SWRT_WindowsStorage_IStorageItemProperties2> {
        get throws {
            try _lazyIStorageItemProperties2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItemProperties2.self)).cast()
            }
        }
    }

    private var _lazyIStorageItem2: COM.COMReference<SWRT_WindowsStorage_IStorageItem2>.Optional = .none

    internal var _istorageItem2: COM.COMInterop<SWRT_WindowsStorage_IStorageItem2> {
        get throws {
            try _lazyIStorageItem2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItem2.self)).cast()
            }
        }
    }

    private var _lazyIStorageItemPropertiesWithProvider: COM.COMReference<SWRT_WindowsStorage_IStorageItemPropertiesWithProvider>.Optional = .none

    internal var _istorageItemPropertiesWithProvider: COM.COMInterop<SWRT_WindowsStorage_IStorageItemPropertiesWithProvider> {
        get throws {
            try _lazyIStorageItemPropertiesWithProvider.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageItemPropertiesWithProvider.self)).cast()
            }
        }
    }

    private var _lazyIStorageFilePropertiesWithAvailability: COM.COMReference<SWRT_WindowsStorage_IStorageFilePropertiesWithAvailability>.Optional = .none

    internal var _istorageFilePropertiesWithAvailability: COM.COMInterop<SWRT_WindowsStorage_IStorageFilePropertiesWithAvailability> {
        get throws {
            try _lazyIStorageFilePropertiesWithAvailability.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageFilePropertiesWithAvailability.self)).cast()
            }
        }
    }

    private var _lazyIStorageFile2: COM.COMReference<SWRT_WindowsStorage_IStorageFile2>.Optional = .none

    internal var _istorageFile2: COM.COMInterop<SWRT_WindowsStorage_IStorageFile2> {
        get throws {
            try _lazyIStorageFile2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsStorage_IStorageFile2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.Storage.StorageFile")
            }
        }
    }

    private static var _lazyIStorageFileStatics2: COM.COMReference<SWRT_WindowsStorage_IStorageFileStatics2>.Optional = .none

    internal static var _istorageFileStatics2: COM.COMInterop<SWRT_WindowsStorage_IStorageFileStatics2> {
        get throws {
            try _lazyIStorageFileStatics2.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsStorage_IStorageFileStatics2.self)).cast()
            }
        }
    }

    private static var _lazyIStorageFileStatics: COM.COMReference<SWRT_WindowsStorage_IStorageFileStatics>.Optional = .none

    internal static var _istorageFileStatics: COM.COMInterop<SWRT_WindowsStorage_IStorageFileStatics> {
        get throws {
            try _lazyIStorageFileStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsStorage_IStorageFileStatics.self)).cast()
            }
        }
    }
}