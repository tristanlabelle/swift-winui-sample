// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

/// Supports asynchronous actions and operations. IAsyncInfo is a base interface for IAsyncAction, IAsyncActionWithProgress<TProgress>, IAsyncOperation<TResult> and IAsyncOperationWithProgress<TResult,TProgress>, each of which support combinations of return type and progress for an asynchronous method.
public typealias WindowsFoundation_IAsyncInfo = any WindowsFoundation_IAsyncInfoProtocol


/// Supports asynchronous actions and operations. IAsyncInfo is a base interface for IAsyncAction, IAsyncActionWithProgress<TProgress>, IAsyncOperation<TResult> and IAsyncOperationWithProgress<TResult,TProgress>, each of which support combinations of return type and progress for an asynchronous method.
public protocol WindowsFoundation_IAsyncInfoProtocol: IInspectableProtocol {
    /// Cancels the asynchronous operation.
    func cancel() throws

    /// Closes the asynchronous operation.
    func close() throws

    /// The error string.
    var errorCode: COM.HResult { get throws }

    /// The handle of the asynchronous operation.
    var id: Swift.UInt32 { get throws }

    /// The status of the operation, as a value of the enumeration. A value of **Completed** indicates that the method has returned. The **Started** value represents a transition state before any of the other 3 final results (**Completed**, **Error**, **Canceled**) can be determined by the method's invocation.
    var status: WindowsFoundation_AsyncStatus { get throws }
}

extension WindowsFoundation_IAsyncInfoProtocol {
    /// Gets a string that describes an error condition of the asynchronous operation.
    public var errorCode_: COM.HResult {
        try! self.errorCode
    }

    /// Gets the handle of the asynchronous operation.
    public var id_: Swift.UInt32 {
        try! self.id
    }

    /// Gets a value that indicates the status of the asynchronous operation.
    public var status_: WindowsFoundation_AsyncStatus {
        try! self.status
    }
}