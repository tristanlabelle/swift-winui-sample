// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundation_IAsyncOperationBinding {
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamReference>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IRandomAccessStreamReference: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStreamReference?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_IRandomAccessStreamReference

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamReference>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IRandomAccessStreamReference>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageStreams_IRandomAccessStreamReference? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IRandomAccessStreamReference?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IRandomAccessStreamReference?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_IRandomAccessStreamReference_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IRandomAccessStreamReference.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IRandomAccessStreamReference.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageStreams_IRandomAccessStreamReferenceBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.System.User>>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IVectorView_User: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsSystem_User?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsSystem_User

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.System.User>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IVectorView_User>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsFoundationCollections_IVectorView<WindowsSystem_User?>? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsSystem_User?>?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsSystem_User?>?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsSystem_User_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_User.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_User.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.User.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Graphics.Imaging.SoftwareBitmap>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum SoftwareBitmap: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_SoftwareBitmap?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsGraphicsImaging_SoftwareBitmap

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Graphics.Imaging.SoftwareBitmap>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<SoftwareBitmap>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsGraphicsImaging_SoftwareBitmap? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsGraphicsImaging_SoftwareBitmap?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsGraphicsImaging_SoftwareBitmap?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsGraphicsImaging_SoftwareBitmap_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.SoftwareBitmap.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.SoftwareBitmap.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsGraphicsImaging_SoftwareBitmapBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.MusicProperties>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum MusicProperties: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_MusicProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_MusicProperties

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.MusicProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<MusicProperties>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageFileProperties_MusicProperties? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_MusicProperties?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_MusicProperties?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_MusicProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.MusicProperties.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.MusicProperties.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageFileProperties_MusicPropertiesBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.StorageStreamTransaction>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum StorageStreamTransaction: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorage_StorageStreamTransaction?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorage_StorageStreamTransaction

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.StorageStreamTransaction>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageStreamTransaction>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorage_StorageStreamTransaction? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_StorageStreamTransaction?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_StorageStreamTransaction?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorage_StorageStreamTransaction_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.StorageStreamTransaction.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.StorageStreamTransaction.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorage_StorageStreamTransactionBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.StorageItemThumbnail>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum StorageItemThumbnail: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_StorageItemThumbnail

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.StorageItemThumbnail>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageItemThumbnail>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageFileProperties_StorageItemThumbnail? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_StorageItemThumbnail?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_StorageItemThumbnail?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_StorageItemThumbnail_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.StorageItemThumbnail.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.StorageItemThumbnail.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageFileProperties_StorageItemThumbnailBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IVectorView_StorageFile: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFile

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IVectorView_StorageFile>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFile_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_StorageFile.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_StorageFile.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.StorageFile.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum StorageFile: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorage_StorageFile

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageFile>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorage_StorageFile? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_StorageFile?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_StorageFile?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorage_StorageFile_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.StorageFile.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.StorageFile.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorage_StorageFileBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.RandomAccessStreamReference>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum RandomAccessStreamReference: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageStreams_RandomAccessStreamReference?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_RandomAccessStreamReference

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.RandomAccessStreamReference>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<RandomAccessStreamReference>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageStreams_RandomAccessStreamReference? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_RandomAccessStreamReference?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_RandomAccessStreamReference?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_RandomAccessStreamReference_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.RandomAccessStreamReference.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.RandomAccessStreamReference.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageStreams_RandomAccessStreamReferenceBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.Search.IndexedState>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IndexedState: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageSearch_IndexedState>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageSearch_IndexedState

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.Search.IndexedState>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IndexedState>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageSearch_IndexedState {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageSearch_IndexedState> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageSearch_IndexedState>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageSearch_IndexedState_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IndexedState.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IndexedState.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = WindowsStorageSearch_IndexedState.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageLibraryChange>>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IVectorView_StorageLibraryChange: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageLibraryChange?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageLibraryChange

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageLibraryChange>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IVectorView_StorageLibraryChange>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsFoundationCollections_IVectorView<WindowsStorage_StorageLibraryChange?>? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageLibraryChange?>?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageLibraryChange?>?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageLibraryChange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_StorageLibraryChange.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_StorageLibraryChange.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.StorageLibraryChange.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStream>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IRandomAccessStream: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_IRandomAccessStream

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStream>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IRandomAccessStream>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageStreams_IRandomAccessStream? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IRandomAccessStream?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IRandomAccessStream?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_IRandomAccessStream_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IRandomAccessStream.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IRandomAccessStream.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageStreams_IRandomAccessStreamBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Foundation.Uri>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum Uri: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsFoundation_Uri?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundation_Uri

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Foundation.Uri>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Uri>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsFoundation_Uri? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundation_Uri?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundation_Uri?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundation_Uri_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.Uri.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.Uri.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsFoundation_UriBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.BasicProperties>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum BasicProperties: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_BasicProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_BasicProperties

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.BasicProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<BasicProperties>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageFileProperties_BasicProperties? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_BasicProperties?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_BasicProperties?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_BasicProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.BasicProperties.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.BasicProperties.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageFileProperties_BasicPropertiesBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IPropertySet>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IPropertySet: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IPropertySet?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IPropertySet

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IPropertySet>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IPropertySet>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsFoundationCollections_IPropertySet? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IPropertySet?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IPropertySet?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IPropertySet_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IPropertySet.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IPropertySet.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsFoundationCollections_IPropertySetBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IMapView<String, Windows.Storage.Streams.RandomAccessStreamReference>>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IMapView_String_RandomAccessStreamReference: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IMapView<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IMapView_String_WindowsStorageStreams_RandomAccessStreamReference

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IMapView<String, Windows.Storage.Streams.RandomAccessStreamReference>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IMapView_String_RandomAccessStreamReference>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IMapView<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IMapView<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IMapView_String_WindowsStorageStreams_RandomAccessStreamReference_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IMapView_String_RandomAccessStreamReference.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IMapView_String_RandomAccessStreamReference.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsFoundationCollections_IMapViewBinding.String_RandomAccessStreamReference.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum StorageFolder: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorage_StorageFolder

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageFolder>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorage_StorageFolder? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_StorageFolder?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_StorageFolder?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorage_StorageFolder_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.StorageFolder.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.StorageFolder.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorage_StorageFolderBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamWithContentType>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IRandomAccessStreamWithContentType: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStreamWithContentType?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_IRandomAccessStreamWithContentType

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamWithContentType>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IRandomAccessStreamWithContentType>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageStreams_IRandomAccessStreamWithContentType? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IRandomAccessStreamWithContentType?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IRandomAccessStreamWithContentType?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_IRandomAccessStreamWithContentType_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IRandomAccessStreamWithContentType.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IRandomAccessStreamWithContentType.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageStreams_IRandomAccessStreamWithContentTypeBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IMap<String, Object>>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IMap_String_Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IMap_String_IInspectable

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IMap<String, Object>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IMap_String_Object>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IMap_String_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IMap_String_Object.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IMap_String_Object.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsFoundationCollections_IMapBinding.String_Object.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.VideoProperties>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum VideoProperties: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_VideoProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_VideoProperties

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.VideoProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<VideoProperties>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageFileProperties_VideoProperties? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_VideoProperties?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_VideoProperties?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_VideoProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.VideoProperties.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.VideoProperties.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageFileProperties_VideoPropertiesBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.DocumentProperties>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum DocumentProperties: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_DocumentProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_DocumentProperties

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.DocumentProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<DocumentProperties>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageFileProperties_DocumentProperties? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_DocumentProperties?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_DocumentProperties?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_DocumentProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.DocumentProperties.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.DocumentProperties.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageFileProperties_DocumentPropertiesBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Object>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_IInspectable

        public static let typeName = "Windows.Foundation.IAsyncOperation<Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Object>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsRuntime.IInspectable? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsRuntime.IInspectable?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsRuntime.IInspectable?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.Object.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.Object.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsRuntime.IInspectableBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem>>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IVectorView_IStorageItem: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsStorage_IStorageItem

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IVectorView_IStorageItem>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsStorage_IStorageItem_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_IStorageItem.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_IStorageItem.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.IStorageItem.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Boolean>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum Boolean: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<Swift.Bool>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_Bool

        public static let typeName = "Windows.Foundation.IAsyncOperation<Boolean>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Boolean>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> Swift.Bool {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<Swift.Bool> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<Swift.Bool>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_Bool_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.Boolean.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.Boolean.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.getResults()
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<String>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_String

        public static let typeName = "Windows.Foundation.IAsyncOperation<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> Swift.String {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<Swift.String> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<Swift.String>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.String.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.String.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IInputStream>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IInputStream: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IInputStream?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_IInputStream

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IInputStream>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IInputStream>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageStreams_IInputStream? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IInputStream?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IInputStream?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageStreams_IInputStream_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IInputStream.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IInputStream.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageStreams_IInputStreamBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.IStorageItem>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IStorageItem: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorage_IStorageItem?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorage_IStorageItem

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.IStorageItem>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IStorageItem>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorage_IStorageItem? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_IStorageItem?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_IStorageItem?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorage_IStorageItem_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IStorageItem.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IStorageItem.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorage_IStorageItemBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum IVectorView_StorageFolder: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFolder

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IVectorView_StorageFolder>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFolder_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_StorageFolder.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.IVectorView_StorageFolder.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.StorageFolder.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum ProtectionPolicyEvaluationResult: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ProtectionPolicyEvaluationResult>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.ProtectionPolicyEvaluationResult.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.ProtectionPolicyEvaluationResult.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<UInt32>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum UInt32: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<Swift.UInt32>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_UInt32

        public static let typeName = "Windows.Foundation.IAsyncOperation<UInt32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<UInt32>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> Swift.UInt32 {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<Swift.UInt32> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<Swift.UInt32>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_UInt32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.UInt32.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.UInt32.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.getResults()
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.ImageProperties>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum ImageProperties: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_ImageProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_ImageProperties

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.Storage.FileProperties.ImageProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ImageProperties>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsStorageFileProperties_ImageProperties? {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_ImageProperties?> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_ImageProperties?>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsStorageFileProperties_ImageProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.ImageProperties.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.ImageProperties.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageFileProperties_ImagePropertiesBinding.toABI(_result_swift)
            } }
        )
    }
}