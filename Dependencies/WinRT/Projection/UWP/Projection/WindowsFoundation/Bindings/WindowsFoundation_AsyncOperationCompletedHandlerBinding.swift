// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundation_AsyncOperationCompletedHandlerBinding {
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.ImageProperties>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum ImageProperties: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_ImageProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_ImageProperties

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.ImageProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x4A195B51, 0x9679, 0x5044, 0x8E89, 0x2BAAE9852E67)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x88AA0464, 0x84ED, 0x587D, 0xAFF5, 0x8790B5330DB7)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ImageProperties> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_ImageProperties?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_ImageProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.ImageProperties.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.StorageFile>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum StorageFile: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_StorageFile?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorage_StorageFile

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.StorageFile>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x56D78AAA, 0x3B69, 0x51DC, 0xAF9D, 0xCDDC8AFC59DB)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x0F395E9E, 0x2F9E, 0x57A2, 0x8887, 0xDFB738AECA6E)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<StorageFile> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFile?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorage_StorageFile_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.StorageFile.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IRandomAccessStream>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IRandomAccessStream: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IRandomAccessStream?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_IRandomAccessStream

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IRandomAccessStream>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x608BA1CA, 0x4BFB, 0x55C6, 0xB5F7, 0xCD2C8F2492DB)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x5AB06433, 0xD778, 0x57ED, 0x8336, 0x932F2AE7295E)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IRandomAccessStream> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStream?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_IRandomAccessStream_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IRandomAccessStream.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.IStorageItem>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IStorageItem: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_IStorageItem?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorage_IStorageItem

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.IStorageItem>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x3A22FDF5, 0xBB6C, 0x587E, 0x9E1A, 0x928E4A447A81)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xDC41DB8A, 0xB078, 0x581C, 0xA001, 0x1FE278E46F47)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IStorageItem> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorage_IStorageItem?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorage_IStorageItem_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IStorageItem.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IRandomAccessStreamWithContentType>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IRandomAccessStreamWithContentType: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IRandomAccessStreamWithContentType?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_IRandomAccessStreamWithContentType

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IRandomAccessStreamWithContentType>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xA2D5F985, 0x1743, 0x5FEB, 0x9EF0, 0x66FBD11E362E)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x5DA2EF6C, 0x694F, 0x5D1F, 0xB0A2, 0xFF5D97E95E9C)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IRandomAccessStreamWithContentType> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStreamWithContentType?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_IRandomAccessStreamWithContentType_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IRandomAccessStreamWithContentType.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<String>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum String: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_String

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xD8688568, 0xFA2F, 0x5958, 0x81D5, 0xA3919AF95848)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x3CACA50B, 0xA249, 0x5A51, 0xB5A3, 0x0629565B61E1)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<String> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<Swift.String>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.String.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Boolean>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum Boolean: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<Swift.Bool>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_Bool

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Boolean>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x2A913BB2, 0x3265, 0x5D0F, 0x985B, 0xEFE4F9F508D2)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x9ED6004D, 0x8311, 0x530C, 0xBC41, 0xF74548BEB35D)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Boolean> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<Swift.Bool>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_Bool_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.Boolean.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IVectorView_StorageFolder: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFolder

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x41D88B73, 0x248A, 0x55BA, 0x9F7C, 0xF940593ADBB9)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x04030C74, 0xADCD, 0x5D9D, 0x833D, 0xEFA2A57D29CA)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IVectorView_StorageFolder> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFolder_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IVectorView_StorageFolder.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.System.User>>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IVectorView_User: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsSystem_User?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsSystem_User

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.System.User>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x1B0D7C2B, 0x893D, 0x503C, 0x970F, 0xC9EE1DBCCC7D)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xB260CD57, 0xDBF0, 0x5544, 0xAA04, 0x6EF800155BB3)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IVectorView_User> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsSystem_User?>?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsSystem_User_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IVectorView_User.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Uri>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum Uri: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundation_Uri?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundation_Uri

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Uri>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xE716E6B0, 0x7452, 0x5CEF, 0xBFF7, 0x4266B6908184)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xAE9850B0, 0xFF01, 0x5293, 0xAACC, 0x1E57628932B2)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Uri> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsFoundation_Uri?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundation_Uri_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.Uri.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IInputStream>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IInputStream: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IInputStream?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_IInputStream

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IInputStream>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x0FE7B171, 0xAD5D, 0x5BBE, 0x8DE0, 0x2A0365CA83B0)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x364D9F00, 0x2156, 0x51EC, 0x9A7F, 0x9F53B5B13CDC)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IInputStream> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IInputStream?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_IInputStream_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IInputStream.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IMap<String, Object>>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IMap_String_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IMap_String_IInspectable

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IMap<String, Object>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xE264EE25, 0x4945, 0x5FED, 0x8431, 0x59B02E5F5359)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x3AB49DD2, 0x3103, 0x5C51, 0xAC66, 0x986EC0409F19)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IMap_String_Object> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IMap<Swift.String, WindowsRuntime.IInspectable?>?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IMap_String_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IMap_String_Object.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<UInt32>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum UInt32: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<Swift.UInt32>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_UInt32

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<UInt32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xFFFAA8AE, 0x2928, 0x5BE7, 0x9FE3, 0x748B7625E3AC)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xD5AA1CB0, 0x44EB, 0x5286, 0xB1DE, 0x070EAE8F35BF)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UInt32> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<Swift.UInt32>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_UInt32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.UInt32.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IPropertySet>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IPropertySet: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IPropertySet?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IPropertySet

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IPropertySet>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x25D0377B, 0xD0C8, 0x5AB2, 0xBE20, 0x882C899A0A10)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x9ABA3B5D, 0x8210, 0x5FAC, 0x9AD9, 0x4737F9ADD554)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IPropertySet> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IPropertySet?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IPropertySet_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IPropertySet.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageLibraryChange>>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IVectorView_StorageLibraryChange: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageLibraryChange?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageLibraryChange

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageLibraryChange>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x928F7DAA, 0xEFAB, 0x5E62, 0xAC0A, 0x90ECCEE61D1E)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xB489EDCC, 0x8589, 0x5255, 0x9253, 0x0DF787FAE70F)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IVectorView_StorageLibraryChange> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageLibraryChange?>?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageLibraryChange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IVectorView_StorageLibraryChange.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IRandomAccessStreamReference>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IRandomAccessStreamReference: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_IRandomAccessStreamReference?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_IRandomAccessStreamReference

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IRandomAccessStreamReference>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x9460A35E, 0x0FDC, 0x5D58, 0x97AA, 0xF56CB1BDD9CA)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xB8D6C9D8, 0x98BC, 0x509E, 0x8B6A, 0x5116E01C960C)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IRandomAccessStreamReference> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageStreams_IRandomAccessStreamReference?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_IRandomAccessStreamReference_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IRandomAccessStreamReference.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.VideoProperties>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum VideoProperties: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_VideoProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_VideoProperties

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.VideoProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x22D92E1E, 0x1BE2, 0x504B, 0x9CF3, 0xA71325BCFCAE)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xFFF2CBDE, 0xBC2A, 0x5D47, 0x918A, 0xE4FB4351603F)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<VideoProperties> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_VideoProperties?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_VideoProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.VideoProperties.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.StorageItemThumbnail>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum StorageItemThumbnail: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_StorageItemThumbnail?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_StorageItemThumbnail

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.StorageItemThumbnail>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xFA88969C, 0x40E5, 0x5F6E, 0xBA9A, 0x31DA639868D0)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x08C9D6F9, 0xA7B7, 0x5073, 0xA382, 0xBD58FE3F3E58)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<StorageItemThumbnail> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_StorageItemThumbnail?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_StorageItemThumbnail_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.StorageItemThumbnail.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Search.IndexedState>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IndexedState: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageSearch_IndexedState>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageSearch_IndexedState

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Search.IndexedState>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x7EAA7AAF, 0x11A2, 0x5CC8, 0x93A1, 0x918954348FC0)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x1BF9C6CE, 0xD3AC, 0x5897, 0xB285, 0xF7BB9CC659B9)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IndexedState> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageSearch_IndexedState>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageSearch_IndexedState_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IndexedState.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Graphics.Imaging.SoftwareBitmap>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum SoftwareBitmap: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsGraphicsImaging_SoftwareBitmap?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsGraphicsImaging_SoftwareBitmap

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Graphics.Imaging.SoftwareBitmap>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x71963EDF, 0x44AB, 0x5685, 0xAE26, 0xC7ECDCAD6022)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x17CD323D, 0x1DE3, 0x5252, 0x8D20, 0xBB54FE043B1D)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<SoftwareBitmap> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_SoftwareBitmap?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsGraphicsImaging_SoftwareBitmap_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.SoftwareBitmap.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.RandomAccessStreamReference>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum RandomAccessStreamReference: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageStreams_RandomAccessStreamReference?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_RandomAccessStreamReference

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.RandomAccessStreamReference>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x40F78810, 0x0C93, 0x58CC, 0x8E3A, 0x9233FC545769)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xBACFC5E4, 0xF746, 0x5588, 0x97F2, 0xEC8C403B6ABF)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<RandomAccessStreamReference> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageStreams_RandomAccessStreamReference?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageStreams_RandomAccessStreamReference_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.RandomAccessStreamReference.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.MusicProperties>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum MusicProperties: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_MusicProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_MusicProperties

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.MusicProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x88296DA9, 0x121D, 0x5D47, 0xACF2, 0x3E667B8FCDF4)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x3EAA8FC8, 0xDE88, 0x5A0F, 0xBCCE, 0x04DF2D009111)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<MusicProperties> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_MusicProperties?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_MusicProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.MusicProperties.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IMapView<String, Windows.Storage.Streams.RandomAccessStreamReference>>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IMapView_String_RandomAccessStreamReference: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IMapView<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IMapView_String_WindowsStorageStreams_RandomAccessStreamReference

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IMapView<String, Windows.Storage.Streams.RandomAccessStreamReference>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x79EB8B78, 0x7C88, 0x5EB9, 0xBD79, 0x0B0DBE254208)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x8C2DAB11, 0x4BEB, 0x5223, 0xA2F3, 0x528CA22813A8)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IMapView_String_RandomAccessStreamReference> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IMapView<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IMapView_String_WindowsStorageStreams_RandomAccessStreamReference_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IMapView_String_RandomAccessStreamReference.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.BasicProperties>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum BasicProperties: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_BasicProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_BasicProperties

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.BasicProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xD69A0CAB, 0x8916, 0x5315, 0x9B1A, 0x3FD7B12DE1B1)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x8E414D44, 0x0477, 0x52EC, 0xA727, 0x9A3B11A05822)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<BasicProperties> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_BasicProperties?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_BasicProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.BasicProperties.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum ProtectionPolicyEvaluationResult: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x21DDE4F0, 0xA60B, 0x56D6, 0x8D6C, 0x95F473444539)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x938B79C3, 0x80E4, 0x53C1, 0x841E, 0x70E9E63093C4)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ProtectionPolicyEvaluationResult> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsSecurityEnterpriseData_ProtectionPolicyEvaluationResult_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.ProtectionPolicyEvaluationResult.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.StorageFolder>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum StorageFolder: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_StorageFolder?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorage_StorageFolder

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.StorageFolder>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xA3D873A7, 0x599A, 0x51B8, 0xB354, 0xD32337A3F5C1)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x4A8401FB, 0xD9FF, 0x5F4C, 0x93A9, 0x0766695A77CC)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<StorageFolder> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorage_StorageFolder?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorage_StorageFolder_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.StorageFolder.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Object>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_IInspectable

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xBA0D54FE, 0x1EAD, 0x5F55, 0xAEE3, 0x4A0108A1BBC1)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x846EF42D, 0xFC64, 0x5E54, 0xA79E, 0x152FF100CBE9)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Object> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsRuntime.IInspectable?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.Object.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem>>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IVectorView_IStorageItem: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsStorage_IStorageItem

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xBBFB48FB, 0x25C7, 0x58CA, 0xB6D1, 0x747D19A234B1)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xC46A00D7, 0x7789, 0x5457, 0xADA8, 0xCEB3C933EF01)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IVectorView_IStorageItem> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsStorage_IStorageItem_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IVectorView_IStorageItem.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.StorageStreamTransaction>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum StorageStreamTransaction: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorage_StorageStreamTransaction?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorage_StorageStreamTransaction

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.StorageStreamTransaction>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x510D5077, 0xA815, 0x53D8, 0x97E7, 0xB66E66FD2E61)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xC8E94865, 0x7D1E, 0x5E09, 0x8ECA, 0x9E87B3DC2DFB)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<StorageStreamTransaction> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorage_StorageStreamTransaction?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorage_StorageStreamTransaction_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.StorageStreamTransaction.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.DocumentProperties>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum DocumentProperties: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsStorageFileProperties_DocumentProperties?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_DocumentProperties

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.FileProperties.DocumentProperties>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x6F1F0FDE, 0xA7F1, 0x5AE6, 0x808B, 0x304484F5E739)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x5772BB56, 0x857B, 0x5F7A, 0x9E2B, 0x3B30DD0CBC5C)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DocumentProperties> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsStorageFileProperties_DocumentProperties?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsStorageFileProperties_DocumentProperties_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.DocumentProperties.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum IVectorView_StorageFile: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFile

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x315B15F9, 0xF3CE, 0x517D, 0x81A7, 0x89A37021A3EF)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xD8EC43F1, 0x75B4, 0x5BAC, 0x8BD5, 0xAC9F537F7F40)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IVectorView_StorageFile> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFile_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.IVectorView_StorageFile.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}