// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundation_IMemoryBufferReferenceBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsFoundation_IMemoryBufferReference
    public typealias ABIStruct = SWRT_WindowsFoundation_IMemoryBufferReference

    public static let typeName = "Windows.Foundation.IMemoryBufferReference"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsFoundation_IMemoryBufferReferenceBinding>, WindowsFoundation_IMemoryBufferReferenceProtocol {
        @discardableResult
        public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsFoundation_IMemoryBufferReference?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
            let _token = try _interop.add_Closed(handler)
            return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).closed(removing: token) })
        }

        public func closed(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
            try _interop.remove_Closed(cookie)
        }

        public var capacity: Swift.UInt32 {
            get throws {
                try _interop.get_Capacity()
            }
        }

        // MARK: Windows.Foundation.IClosable members

        public func close() throws {
            try _iclosable.close()
        }

        // MARK: Implementation boilerplate

        private var _lazyIClosable: COM.COMReference<SWRT_WindowsFoundation_IClosable>.Optional = .none

        internal var _iclosable: COM.COMInterop<SWRT_WindowsFoundation_IClosable> {
            get throws {
                try _lazyIClosable.lazyInitInterop {
                    try _queryInterface(uuidof(SWRT_WindowsFoundation_IClosable.self)).cast()
                }
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsFoundation_IMemoryBufferReference_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_Capacity: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.capacity
        } },
        add_Closed: { this, handler, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let handler_swift = WindowsFoundation_TypedEventHandlerBinding.IMemoryBufferReference_Object.fromABI(handler)
            let _result_swift = try this.closed(adding: handler_swift).token
            _result.pointee = WindowsRuntime.EventRegistrationToken.toABI(_result_swift)
        } },
        remove_Closed: { this, cookie in _implement(this) { this in
            let cookie_swift = WindowsRuntime.EventRegistrationToken.fromABI(cookie)
            try this.closed(removing: cookie_swift)
        } }
    )
}