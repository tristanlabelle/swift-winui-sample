// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundation_IPropertyValueBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsFoundation_IPropertyValue
    public typealias ABIStruct = SWRT_WindowsFoundation_IPropertyValue

    public static let typeName = "Windows.Foundation.IPropertyValue"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsFoundation_IPropertyValueBinding>, WindowsFoundation_IPropertyValueProtocol {
        public func getUInt8() throws -> Swift.UInt8 {
            try _interop.getUInt8()
        }

        public func getInt16() throws -> Swift.Int16 {
            try _interop.getInt16()
        }

        public func getUInt16() throws -> Swift.UInt16 {
            try _interop.getUInt16()
        }

        public func getInt32() throws -> Swift.Int32 {
            try _interop.getInt32()
        }

        public func getUInt32() throws -> Swift.UInt32 {
            try _interop.getUInt32()
        }

        public func getInt64() throws -> Swift.Int64 {
            try _interop.getInt64()
        }

        public func getUInt64() throws -> Swift.UInt64 {
            try _interop.getUInt64()
        }

        public func getSingle() throws -> Swift.Float {
            try _interop.getSingle()
        }

        public func getDouble() throws -> Swift.Double {
            try _interop.getDouble()
        }

        public func getChar16() throws -> WindowsRuntime.Char16 {
            try _interop.getChar16()
        }

        public func getBoolean() throws -> Swift.Bool {
            try _interop.getBoolean()
        }

        public func getString() throws -> Swift.String {
            try _interop.getString()
        }

        public func getGuid() throws -> COM.GUID {
            try _interop.getGuid()
        }

        public func getDateTime() throws -> WindowsFoundation_DateTime {
            try _interop.getDateTime()
        }

        public func getTimeSpan() throws -> WindowsFoundation_TimeSpan {
            try _interop.getTimeSpan()
        }

        public func getPoint() throws -> WindowsFoundation_Point {
            try _interop.getPoint()
        }

        public func getSize() throws -> WindowsFoundation_Size {
            try _interop.getSize()
        }

        public func getRect() throws -> WindowsFoundation_Rect {
            try _interop.getRect()
        }

        public func getUInt8Array(_ value: inout [Swift.UInt8]) throws {
            try _interop.getUInt8Array(&value)
        }

        public func getInt16Array(_ value: inout [Swift.Int16]) throws {
            try _interop.getInt16Array(&value)
        }

        public func getUInt16Array(_ value: inout [Swift.UInt16]) throws {
            try _interop.getUInt16Array(&value)
        }

        public func getInt32Array(_ value: inout [Swift.Int32]) throws {
            try _interop.getInt32Array(&value)
        }

        public func getUInt32Array(_ value: inout [Swift.UInt32]) throws {
            try _interop.getUInt32Array(&value)
        }

        public func getInt64Array(_ value: inout [Swift.Int64]) throws {
            try _interop.getInt64Array(&value)
        }

        public func getUInt64Array(_ value: inout [Swift.UInt64]) throws {
            try _interop.getUInt64Array(&value)
        }

        public func getSingleArray(_ value: inout [Swift.Float]) throws {
            try _interop.getSingleArray(&value)
        }

        public func getDoubleArray(_ value: inout [Swift.Double]) throws {
            try _interop.getDoubleArray(&value)
        }

        public func getChar16Array(_ value: inout [WindowsRuntime.Char16]) throws {
            try _interop.getChar16Array(&value)
        }

        public func getBooleanArray(_ value: inout [Swift.Bool]) throws {
            try _interop.getBooleanArray(&value)
        }

        public func getStringArray(_ value: inout [Swift.String]) throws {
            try _interop.getStringArray(&value)
        }

        public func getInspectableArray(_ value: inout [WindowsRuntime.IInspectable?]) throws {
            try _interop.getInspectableArray(&value)
        }

        public func getGuidArray(_ value: inout [COM.GUID]) throws {
            try _interop.getGuidArray(&value)
        }

        public func getDateTimeArray(_ value: inout [WindowsFoundation_DateTime]) throws {
            try _interop.getDateTimeArray(&value)
        }

        public func getTimeSpanArray(_ value: inout [WindowsFoundation_TimeSpan]) throws {
            try _interop.getTimeSpanArray(&value)
        }

        public func getPointArray(_ value: inout [WindowsFoundation_Point]) throws {
            try _interop.getPointArray(&value)
        }

        public func getSizeArray(_ value: inout [WindowsFoundation_Size]) throws {
            try _interop.getSizeArray(&value)
        }

        public func getRectArray(_ value: inout [WindowsFoundation_Rect]) throws {
            try _interop.getRectArray(&value)
        }

        public var isNumericScalar: Swift.Bool {
            get throws {
                try _interop.get_IsNumericScalar()
            }
        }

        public var type: WindowsFoundation_PropertyType {
            get throws {
                try _interop.get_Type()
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsFoundation_IPropertyValue_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_Type: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.type
            _result.pointee = WindowsFoundation_PropertyType.toABI(_result_swift)
        } },
        get_IsNumericScalar: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.isNumericScalar
        } },
        GetUInt8: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getUInt8()
        } },
        GetInt16: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getInt16()
        } },
        GetUInt16: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getUInt16()
        } },
        GetInt32: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getInt32()
        } },
        GetUInt32: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getUInt32()
        } },
        GetInt64: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getInt64()
        } },
        GetUInt64: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getUInt64()
        } },
        GetSingle: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getSingle()
        } },
        GetDouble: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getDouble()
        } },
        GetChar16: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.getChar16()
            _result.pointee = WindowsRuntime.Char16Binding.toABI(_result_swift)
        } },
        GetBoolean: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.getBoolean()
        } },
        GetString: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.getString()
            _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
        } },
        GetGuid: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.getGuid()
            _result.pointee = WindowsRuntime.GuidBinding.toABI(_result_swift)
        } },
        GetDateTime: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.getDateTime()
            _result.pointee = WindowsFoundation_DateTime.toABI(_result_swift)
        } },
        GetTimeSpan: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.getTimeSpan()
            _result.pointee = WindowsFoundation_TimeSpan.toABI(_result_swift)
        } },
        GetPoint: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.getPoint()
            _result.pointee = WindowsFoundation_Point.toABI(_result_swift)
        } },
        GetSize: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.getSize()
            _result.pointee = WindowsFoundation_Size.toABI(_result_swift)
        } },
        GetRect: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.getRect()
            _result.pointee = WindowsFoundation_Rect.toABI(_result_swift)
        } },
        GetUInt8Array: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.UInt8] = []
            try this.getUInt8Array(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetInt16Array: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.Int16] = []
            try this.getInt16Array(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetUInt16Array: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.UInt16] = []
            try this.getUInt16Array(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetInt32Array: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.Int32] = []
            try this.getInt32Array(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetUInt32Array: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.UInt32] = []
            try this.getUInt32Array(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetInt64Array: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.Int64] = []
            try this.getInt64Array(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetUInt64Array: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.UInt64] = []
            try this.getUInt64Array(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetSingleArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.Float] = []
            try this.getSingleArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetDoubleArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.Double] = []
            try this.getDoubleArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetChar16Array: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [WindowsRuntime.Char16] = []
            try this.getChar16Array(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetBooleanArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.Bool] = []
            try this.getBooleanArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetStringArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [Swift.String] = []
            try this.getStringArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetInspectableArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [WindowsRuntime.IInspectable?] = []
            try this.getInspectableArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetGuidArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [COM.GUID] = []
            try this.getGuidArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetDateTimeArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [WindowsFoundation_DateTime] = []
            try this.getDateTimeArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetTimeSpanArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [WindowsFoundation_TimeSpan] = []
            try this.getTimeSpanArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetPointArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [WindowsFoundation_Point] = []
            try this.getPointArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetSizeArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [WindowsFoundation_Size] = []
            try this.getSizeArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } },
        GetRectArray: { this, valueLength, value in _implement(this) { this in
            guard let value else { throw COM.COMError.pointer }
            var value_swift: [WindowsFoundation_Rect] = []
            try this.getRectArray(&value_swift)
            fatalError("Not implemented: out arrays")
        } }
    )
}