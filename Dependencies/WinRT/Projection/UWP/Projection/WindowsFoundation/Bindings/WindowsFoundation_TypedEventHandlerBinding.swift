// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundation_TypedEventHandlerBinding {
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.Storage.Search.IStorageQueryResultBase, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum IStorageQueryResultBase_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsStorageSearch_IStorageQueryResultBase?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsStorageSearch_IStorageQueryResultBase_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.Storage.Search.IStorageQueryResultBase, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x4FD0EC36, 0xC783, 0x5CE6, 0xA144, 0x34887A17981D)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x09A9CF9E, 0xCF79, 0x5A2B, 0xA54F, 0x89ADE81AB3D1)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IStorageQueryResultBase_Object> {
            public func invoke(_ sender: WindowsStorageSearch_IStorageQueryResultBase?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsStorageSearch_IStorageQueryResultBase_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsStorageSearch_IStorageQueryResultBaseBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.AutomationProviderRequestedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_AutomationProviderRequestedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_AutomationProviderRequestedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_AutomationProviderRequestedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.AutomationProviderRequestedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x85AEB4FB, 0x5361, 0x59B0, 0xBC9B, 0x9E10F212C83F)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x459AB272, 0x9AD3, 0x5524, 0xA225, 0x81706C054701)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_AutomationProviderRequestedEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_AutomationProviderRequestedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_AutomationProviderRequestedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_AutomationProviderRequestedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.DataTransfer.DataPackage, Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DataPackage_ShareCompletedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataPackage?, WindowsApplicationModelDataTransfer_ShareCompletedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsApplicationModelDataTransfer_DataPackage_WindowsApplicationModelDataTransfer_ShareCompletedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.DataTransfer.DataPackage, Windows.ApplicationModel.DataTransfer.ShareCompletedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x7FAC4B3C, 0xDB7B, 0x5D84, 0x9CDC, 0xFCC3E736EFDA)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x349F3CD4, 0x21DB, 0x5FF9, 0xAE36, 0x46369F6DAB7E)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DataPackage_ShareCompletedEventArgs> {
            public func invoke(_ sender: WindowsApplicationModelDataTransfer_DataPackage?, _ args: WindowsApplicationModelDataTransfer_ShareCompletedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsApplicationModelDataTransfer_DataPackage_WindowsApplicationModelDataTransfer_ShareCompletedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsApplicationModelDataTransfer_DataPackageBinding.fromABI(sender)
                let args_swift = WindowsApplicationModelDataTransfer_ShareCompletedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x57F88249, 0x18F5, 0x58EE, 0xAA66, 0xF92B391C229A)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x8A6F1313, 0xC18D, 0x50FD, 0xB6A9, 0x1F68252DD5E0)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_Object> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.KeyEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_KeyEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_KeyEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_KeyEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.KeyEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xCC473A6B, 0x219B, 0x5233, 0x9CBF, 0xFFDAA6801EA5)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xC3394B33, 0x665E, 0x5838, 0x8C5A, 0x7CF011ABC0C9)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_KeyEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_KeyEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_KeyEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_KeyEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.TouchHitTestingEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_TouchHitTestingEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_TouchHitTestingEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_TouchHitTestingEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.TouchHitTestingEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xE4278C9C, 0x0FA6, 0x5908, 0x8135, 0x27BC9F4B2A76)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xC08EE53F, 0xDD73, 0x5BCB, 0xBDA3, 0xCE0C6F6FA6A5)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_TouchHitTestingEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_TouchHitTestingEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_TouchHitTestingEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_TouchHitTestingEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.WindowSizeChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_WindowSizeChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_WindowSizeChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_WindowSizeChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.WindowSizeChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xE27E1A98, 0xB742, 0x55BC, 0x8619, 0xA586038B7189)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x13770A73, 0x26CC, 0x535A, 0x9674, 0x62AE8BE09B9B)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_WindowSizeChangedEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_WindowSizeChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_WindowSizeChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_WindowSizeChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.System.DispatcherQueueTimer, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DispatcherQueueTimer_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsSystem_DispatcherQueueTimer?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_DispatcherQueueTimer_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.System.DispatcherQueueTimer, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xD23EDB3C, 0x49E0, 0x5F22, 0x954D, 0xC50B2F706E23)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xF23E6642, 0x02B1, 0x556E, 0x9660, 0x7EA7E0B15023)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DispatcherQueueTimer_Object> {
            public func invoke(_ sender: WindowsSystem_DispatcherQueueTimer?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_DispatcherQueueTimer_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsSystem_DispatcherQueueTimerBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.DataTransfer.DataPackage, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DataPackage_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataPackage?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsApplicationModelDataTransfer_DataPackage_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.DataTransfer.DataPackage, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x0C10ACBE, 0x84FF, 0x51F8, 0x9B85, 0xAA039A4B39CE)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x5707C80B, 0x6856, 0x5416, 0xA83A, 0x00C915416BD0)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DataPackage_Object> {
            public func invoke(_ sender: WindowsApplicationModelDataTransfer_DataPackage?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsApplicationModelDataTransfer_DataPackage_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsApplicationModelDataTransfer_DataPackageBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.CoreWindowEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_CoreWindowEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_CoreWindowEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_CoreWindowEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.CoreWindowEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x9BC36F76, 0xA508, 0x5C03, 0xB162, 0xCE59DE8F069D)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x160522FA, 0xB14C, 0x5D9E, 0xBDC4, 0x4237F8232BAC)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_CoreWindowEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_CoreWindowEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_CoreWindowEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_CoreWindowEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreDispatcher, Windows.UI.Core.AcceleratorKeyEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreDispatcher_AcceleratorKeyEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreDispatcher?, WindowsUICore_AcceleratorKeyEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreDispatcher_WindowsUICore_AcceleratorKeyEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreDispatcher, Windows.UI.Core.AcceleratorKeyEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x89837301, 0xC4A1, 0x5955, 0x8790, 0xF48F5AE8AC37)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x1138533D, 0xA3B5, 0x52A4, 0x9560, 0xB33E2A13CF49)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreDispatcher_AcceleratorKeyEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreDispatcher?, _ args: WindowsUICore_AcceleratorKeyEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreDispatcher_WindowsUICore_AcceleratorKeyEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreDispatcherBinding.fromABI(sender)
                let args_swift = WindowsUICore_AcceleratorKeyEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.System.DispatcherQueue, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DispatcherQueue_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsSystem_DispatcherQueue?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_DispatcherQueue_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.System.DispatcherQueue, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xBAECAB98, 0x6CDF, 0x596B, 0xBF4C, 0x64E95CE11E38)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x35043EF8, 0xDF33, 0x572C, 0xA8C4, 0x8B6FE720AEC4)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DispatcherQueue_Object> {
            public func invoke(_ sender: WindowsSystem_DispatcherQueue?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_DispatcherQueue_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsSystem_DispatcherQueueBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_ClosestInteractiveBoundsRequestedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_ClosestInteractiveBoundsRequestedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_ClosestInteractiveBoundsRequestedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.ClosestInteractiveBoundsRequestedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xB835D207, 0x1504, 0x56AA, 0x8E10, 0xB8869F5AC1EF)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xA63B4734, 0xD162, 0x5C2C, 0xAC78, 0xA076CBD180BD)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_ClosestInteractiveBoundsRequestedEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_ClosestInteractiveBoundsRequestedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_ClosestInteractiveBoundsRequestedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_ClosestInteractiveBoundsRequestedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.System.UserWatcher, Windows.System.UserAuthenticationStatusChangingEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UserWatcher_UserAuthenticationStatusChangingEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsSystem_UserWatcher?, WindowsSystem_UserAuthenticationStatusChangingEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_UserWatcher_WindowsSystem_UserAuthenticationStatusChangingEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.System.UserWatcher, Windows.System.UserAuthenticationStatusChangingEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x3634E7DD, 0x5425, 0x5E3F, 0x8A7D, 0x50B7FA96703C)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x4A8DDAC2, 0x84F0, 0x50BB, 0x98F0, 0x065D1965800E)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UserWatcher_UserAuthenticationStatusChangingEventArgs> {
            public func invoke(_ sender: WindowsSystem_UserWatcher?, _ args: WindowsSystem_UserAuthenticationStatusChangingEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_UserWatcher_WindowsSystem_UserAuthenticationStatusChangingEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsSystem_UserWatcherBinding.fromABI(sender)
                let args_swift = WindowsSystem_UserAuthenticationStatusChangingEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.VisibilityChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_VisibilityChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_VisibilityChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_VisibilityChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.VisibilityChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xE3F0FF02, 0x3C25, 0x5D65, 0x8003, 0x33795D12832B)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x6544AA70, 0xBC2E, 0x546C, 0xB70A, 0xA979F269260F)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_VisibilityChangedEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_VisibilityChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_VisibilityChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_VisibilityChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.Activation.SplashScreen, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum SplashScreen_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsApplicationModelActivation_SplashScreen?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsApplicationModelActivation_SplashScreen_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.Activation.SplashScreen, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x9708A905, 0x3E3D, 0x5D2F, 0xAA44, 0x32CB5024D208)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xB42028D6, 0xC5B1, 0x5FED, 0xBCC1, 0xC3F841D4AEA0)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<SplashScreen_Object> {
            public func invoke(_ sender: WindowsApplicationModelActivation_SplashScreen?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsApplicationModelActivation_SplashScreen_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsApplicationModelActivation_SplashScreenBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.System.DispatcherQueue, Windows.System.DispatcherQueueShutdownStartingEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DispatcherQueue_DispatcherQueueShutdownStartingEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsSystem_DispatcherQueue?, WindowsSystem_DispatcherQueueShutdownStartingEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_DispatcherQueue_WindowsSystem_DispatcherQueueShutdownStartingEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.System.DispatcherQueue, Windows.System.DispatcherQueueShutdownStartingEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x359E2C3A, 0x8463, 0x55EE, 0xAE4F, 0x8682C56EC370)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xFDE75DD0, 0xEEB3, 0x53A2, 0x875C, 0x5FDCD57263EB)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DispatcherQueue_DispatcherQueueShutdownStartingEventArgs> {
            public func invoke(_ sender: WindowsSystem_DispatcherQueue?, _ args: WindowsSystem_DispatcherQueueShutdownStartingEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_DispatcherQueue_WindowsSystem_DispatcherQueueShutdownStartingEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsSystem_DispatcherQueueBinding.fromABI(sender)
                let args_swift = WindowsSystem_DispatcherQueueShutdownStartingEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.System.UserWatcher, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UserWatcher_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsSystem_UserWatcher?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_UserWatcher_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.System.UserWatcher, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xB665E6D6, 0x1C53, 0x54C3, 0x8B7F, 0x2CC07DD41B78)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x8A6E55C5, 0x35E5, 0x5990, 0xA3DA, 0xD777C803FEDD)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UserWatcher_Object> {
            public func invoke(_ sender: WindowsSystem_UserWatcher?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_UserWatcher_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsSystem_UserWatcherBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.System.UserWatcher, Windows.System.UserChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UserWatcher_UserChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsSystem_UserWatcher?, WindowsSystem_UserChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_UserWatcher_WindowsSystem_UserChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.System.UserWatcher, Windows.System.UserChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x9791ED38, 0x7DCB, 0x5D8C, 0xA783, 0x227280C2776B)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x8E1E67C0, 0x6D56, 0x5D5F, 0x9544, 0x30436A3B02E0)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UserWatcher_UserChangedEventArgs> {
            public func invoke(_ sender: WindowsSystem_UserWatcher?, _ args: WindowsSystem_UserChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsSystem_UserWatcher_WindowsSystem_UserChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsSystem_UserWatcherBinding.fromABI(sender)
                let args_swift = WindowsSystem_UserChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.CharacterReceivedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_CharacterReceivedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_CharacterReceivedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_CharacterReceivedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.CharacterReceivedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x2F534B36, 0x53F8, 0x5413, 0xB469, 0xFC39C7138751)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xE81909AA, 0x416D, 0x5414, 0xBC37, 0x49981072935E)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_CharacterReceivedEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_CharacterReceivedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_CharacterReceivedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_CharacterReceivedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.PointerEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_PointerEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_PointerEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_PointerEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.PointerEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xE684414A, 0xA8B5, 0x589B, 0x8666, 0x6A8CBA8C1536)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xC973EFF8, 0x159F, 0x53A7, 0x82AD, 0x80078521DD66)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_PointerEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_PointerEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_PointerEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_PointerEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Windows.UI.Composition.CompositionBatchCompletedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum Object_CompositionBatchCompletedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUIComposition_CompositionBatchCompletedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_WindowsUIComposition_CompositionBatchCompletedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Object, Windows.UI.Composition.CompositionBatchCompletedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x33FFADBE, 0x4577, 0x56C5, 0xA9CA, 0x72BE106866CD)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x1F9BD0F9, 0xBC59, 0x55FE, 0xB814, 0x55D2D24A3DCB)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Object_CompositionBatchCompletedEventArgs> {
            public func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: WindowsUIComposition_CompositionBatchCompletedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_WindowsUIComposition_CompositionBatchCompletedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsRuntime.IInspectableBinding.fromABI(sender)
                let args_swift = WindowsUIComposition_CompositionBatchCompletedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.ICorePointerRedirector, Windows.UI.Core.PointerEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum ICorePointerRedirector_PointerEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_ICorePointerRedirector?, WindowsUICore_PointerEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_ICorePointerRedirector_WindowsUICore_PointerEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.ICorePointerRedirector, Windows.UI.Core.PointerEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x9D8FA8FE, 0x10B8, 0x542D, 0xA503, 0xE1839A9F7A1F)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xD167D961, 0xCFB4, 0x54E4, 0xAADC, 0xB0B3A52FFEB6)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ICorePointerRedirector_PointerEventArgs> {
            public func invoke(_ sender: WindowsUICore_ICorePointerRedirector?, _ args: WindowsUICore_PointerEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_ICorePointerRedirector_WindowsUICore_PointerEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_ICorePointerRedirectorBinding.fromABI(sender)
                let args_swift = WindowsUICore_PointerEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.Foundation.IMemoryBufferReference, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum IMemoryBufferReference_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsFoundation_IMemoryBufferReference?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsFoundation_IMemoryBufferReference_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.Foundation.IMemoryBufferReference, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x78398765, 0xBDB0, 0x5D1E, 0x864A, 0x6B55F491DAD8)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xB6C4BB35, 0x49B8, 0x5E3F, 0xB54E, 0x6FFFB671F062)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IMemoryBufferReference_Object> {
            public func invoke(_ sender: WindowsFoundation_IMemoryBufferReference?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsFoundation_IMemoryBufferReference_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsFoundation_IMemoryBufferReferenceBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.WindowActivatedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_WindowActivatedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_WindowActivatedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_WindowActivatedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.WindowActivatedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x63A78786, 0xFB04, 0x5B86, 0xBC82, 0x91CA921F5DA4)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xB3DAFC95, 0x3AED, 0x5C76, 0x9CEB, 0x2525D7A1FFA9)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_WindowActivatedEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_WindowActivatedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_WindowActivatedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_WindowActivatedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.DataTransfer.DataPackage, Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DataPackage_OperationCompletedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsApplicationModelDataTransfer_DataPackage?, WindowsApplicationModelDataTransfer_OperationCompletedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsApplicationModelDataTransfer_DataPackage_WindowsApplicationModelDataTransfer_OperationCompletedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.ApplicationModel.DataTransfer.DataPackage, Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x9EE162CC, 0xAA64, 0x50BB, 0xBC68, 0xF33C38C00D88)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x0A48110C, 0xE4D6, 0x58C0, 0x9725, 0x45AA40D49FE7)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DataPackage_OperationCompletedEventArgs> {
            public func invoke(_ sender: WindowsApplicationModelDataTransfer_DataPackage?, _ args: WindowsApplicationModelDataTransfer_OperationCompletedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsApplicationModelDataTransfer_DataPackage_WindowsApplicationModelDataTransfer_OperationCompletedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsApplicationModelDataTransfer_DataPackageBinding.fromABI(sender)
                let args_swift = WindowsApplicationModelDataTransfer_OperationCompletedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.InputEnabledEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum CoreWindow_InputEnabledEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsUICore_CoreWindow?, WindowsUICore_InputEnabledEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_InputEnabledEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Windows.UI.Core.CoreWindow, Windows.UI.Core.InputEnabledEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x57721F8E, 0x87CB, 0x568F, 0x8D7A, 0x3734453015B5)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xE5D6E7D4, 0x0721, 0x5257, 0x8786, 0xF96EBD6E5F5A)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<CoreWindow_InputEnabledEventArgs> {
            public func invoke(_ sender: WindowsUICore_CoreWindow?, _ args: WindowsUICore_InputEnabledEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_WindowsUICore_CoreWindow_WindowsUICore_InputEnabledEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsUICore_CoreWindowBinding.fromABI(sender)
                let args_swift = WindowsUICore_InputEnabledEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}