// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundation_AsyncOperationProgressHandlerBinding {
}

// MARK: Windows.Foundation.AsyncOperationProgressHandler<UInt32, UInt32>

extension WindowsFoundation_AsyncOperationProgressHandlerBinding {
    internal enum UInt32_UInt32: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationProgressHandler<Swift.UInt32, Swift.UInt32>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationProgressHandler_UInt32_UInt32

        public static let typeName = "Windows.Foundation.AsyncOperationProgressHandler<UInt32, UInt32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x360A6B2F, 0xB481, 0x5E37, 0x9974, 0x6C78EB59B982)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x73FACDEB, 0x4316, 0x5B4B, 0x8F16, 0x48CF51C31E91)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UInt32_UInt32> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperationWithProgress<Swift.UInt32, Swift.UInt32>?, _ progressInfo: Swift.UInt32) throws {
                try _interop.invoke(asyncInfo, progressInfo)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationProgressHandler_UInt32_UInt32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, progressInfo in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationWithProgressBinding.UInt32_UInt32.fromABI(asyncInfo)
                try this(asyncInfo_swift, progressInfo)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationProgressHandler<Windows.Storage.Streams.IBuffer, UInt32>

extension WindowsFoundation_AsyncOperationProgressHandlerBinding {
    internal enum IBuffer_UInt32: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationProgressHandler<WindowsStorageStreams_IBuffer?, Swift.UInt32>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationProgressHandler_WindowsStorageStreams_IBuffer_UInt32

        public static let typeName = "Windows.Foundation.AsyncOperationProgressHandler<Windows.Storage.Streams.IBuffer, UInt32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x21DA568D, 0xA920, 0x5DBB, 0xA807, 0x69F281523C4F)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x46FD36D8, 0xD7DD, 0x5A74, 0xB0B1, 0x4C28C793AD7F)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<IBuffer_UInt32> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperationWithProgress<WindowsStorageStreams_IBuffer?, Swift.UInt32>?, _ progressInfo: Swift.UInt32) throws {
                try _interop.invoke(asyncInfo, progressInfo)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationProgressHandler_WindowsStorageStreams_IBuffer_UInt32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, progressInfo in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationWithProgressBinding.IBuffer_UInt32.fromABI(asyncInfo)
                try this(asyncInfo_swift, progressInfo)
            } }
        )
    }
}