// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundation_IAsyncOperationWithProgressBinding {
}

// MARK: Windows.Foundation.IAsyncOperationWithProgress<Windows.Storage.Streams.IBuffer, UInt32>

extension WindowsFoundation_IAsyncOperationWithProgressBinding {
    internal enum IBuffer_UInt32: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperationWithProgress<WindowsStorageStreams_IBuffer?, Swift.UInt32>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperationWithProgress_WindowsStorageStreams_IBuffer_UInt32

        public static let typeName = "Windows.Foundation.IAsyncOperationWithProgress<Windows.Storage.Streams.IBuffer, UInt32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IBuffer_UInt32>, WindowsFoundation_IAsyncOperationWithProgressProtocol {
            public func getResults() throws -> WindowsStorageStreams_IBuffer? {
                try _interop.getResults()
            }

            public var progress: WindowsFoundation_AsyncOperationProgressHandler<WindowsStorageStreams_IBuffer?, Swift.UInt32> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Progress())
                }
            }

            public func progress(_ handler: WindowsFoundation_AsyncOperationProgressHandler<WindowsStorageStreams_IBuffer?, Swift.UInt32>?) throws {
                try _interop.put_Progress(handler)
            }

            public var completed: WindowsFoundation_AsyncOperationWithProgressCompletedHandler<WindowsStorageStreams_IBuffer?, Swift.UInt32> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationWithProgressCompletedHandler<WindowsStorageStreams_IBuffer?, Swift.UInt32>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperationWithProgress_WindowsStorageStreams_IBuffer_UInt32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Progress: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationProgressHandlerBinding.IBuffer_UInt32.fromABI(handler)
                try this.progress(handler_swift)
            } },
            get_Progress: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.progress)
                _result.pointee = try WindowsFoundation_AsyncOperationProgressHandlerBinding.IBuffer_UInt32.toABI(_result_swift)
            } },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationWithProgressCompletedHandlerBinding.IBuffer_UInt32.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationWithProgressCompletedHandlerBinding.IBuffer_UInt32.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = try WindowsStorageStreams_IBufferBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperationWithProgress<UInt32, UInt32>

extension WindowsFoundation_IAsyncOperationWithProgressBinding {
    internal enum UInt32_UInt32: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperationWithProgress<Swift.UInt32, Swift.UInt32>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperationWithProgress_UInt32_UInt32

        public static let typeName = "Windows.Foundation.IAsyncOperationWithProgress<UInt32, UInt32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<UInt32_UInt32>, WindowsFoundation_IAsyncOperationWithProgressProtocol {
            public func getResults() throws -> Swift.UInt32 {
                try _interop.getResults()
            }

            public var progress: WindowsFoundation_AsyncOperationProgressHandler<Swift.UInt32, Swift.UInt32> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Progress())
                }
            }

            public func progress(_ handler: WindowsFoundation_AsyncOperationProgressHandler<Swift.UInt32, Swift.UInt32>?) throws {
                try _interop.put_Progress(handler)
            }

            public var completed: WindowsFoundation_AsyncOperationWithProgressCompletedHandler<Swift.UInt32, Swift.UInt32> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationWithProgressCompletedHandler<Swift.UInt32, Swift.UInt32>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperationWithProgress_UInt32_UInt32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Progress: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationProgressHandlerBinding.UInt32_UInt32.fromABI(handler)
                try this.progress(handler_swift)
            } },
            get_Progress: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.progress)
                _result.pointee = try WindowsFoundation_AsyncOperationProgressHandlerBinding.UInt32_UInt32.toABI(_result_swift)
            } },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationWithProgressCompletedHandlerBinding.UInt32_UInt32.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationWithProgressCompletedHandlerBinding.UInt32_UInt32.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.getResults()
            } }
        )
    }
}