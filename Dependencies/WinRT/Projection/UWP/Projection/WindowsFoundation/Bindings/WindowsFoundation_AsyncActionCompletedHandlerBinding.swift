// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundation_AsyncActionCompletedHandlerBinding: WindowsRuntime.DelegateBinding {
    public typealias SwiftObject = WindowsFoundation_AsyncActionCompletedHandler
    public typealias ABIStruct = SWRT_WindowsFoundation_AsyncActionCompletedHandler

    public static let typeName = "Windows.Foundation.IAsyncActionCompletedHandler"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static var ireferenceID: COM.COMInterfaceID {
        COMInterfaceID(0xF31DBB29, 0x606D, 0x5A89, 0xA23A, 0xC09AB9605B8F)
    }

    public static var ireferenceArrayID: COM.COMInterfaceID {
        COMInterfaceID(0x555E88F4, 0xA126, 0x5EC6, 0xA06B, 0xF4792E1964D2)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference).invoke
    }

    public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
        ExportedDelegate<Self>(object).toCOM()
    }

    private final class Import: COMImport<WindowsFoundation_AsyncActionCompletedHandlerBinding> {
        public func invoke(_ asyncInfo: WindowsFoundation_IAsyncAction?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
            try _interop.invoke(asyncInfo, asyncStatus)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsFoundation_AsyncActionCompletedHandler_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
            let asyncInfo_swift = WindowsFoundation_IAsyncActionBinding.fromABI(asyncInfo)
            let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
            try this(asyncInfo_swift, asyncStatus_swift)
        } }
    )
}