// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Stores a DeferralCompletedHandler to be invoked upon completion of the deferral and manipulates the state of the deferral.
public final class WindowsFoundation_Deferral: WindowsRuntime.WinRTImport<WindowsFoundation_DeferralBinding>, WindowsFoundation_IClosableProtocol, @unchecked Sendable {
    /// Initializes a new Deferral object and specifies a DeferralCompletedHandler to be called upon completion of the deferral.
    /// - Parameter handler: A DeferralCompletedHandler to be called upon completion of the deferral.
    public init(_ handler: WindowsFoundation_DeferralCompletedHandler?) throws {
        let _instance = try Self._ideferralFactory.create(handler)
        super.init(_wrapping: consume _instance)
    }

    /// If the DeferralCompletedHandler has not yet been invoked, this will call it and drop the reference to the delegate.
    public func complete() throws {
        try _interop.complete()
    }

    // MARK: Windows.Foundation.IClosable members

    /// If the DeferralCompletedHandler has not yet been invoked, this will call it and drop the reference to the delegate.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsFoundation_IDeferral>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIClosable: COM.COMReference<SWRT_WindowsFoundation_IClosable>.Optional = .none

    internal var _iclosable: COM.COMInterop<SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _lazyIClosable.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundation_IClosable.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.Foundation.Deferral")
            }
        }
    }

    private static var _lazyIDeferralFactory: COM.COMReference<SWRT_WindowsFoundation_IDeferralFactory>.Optional = .none

    internal static var _ideferralFactory: COM.COMInterop<SWRT_WindowsFoundation_IDeferralFactory> {
        get throws {
            try _lazyIDeferralFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsFoundation_IDeferralFactory.self)).cast()
            }
        }
    }
}