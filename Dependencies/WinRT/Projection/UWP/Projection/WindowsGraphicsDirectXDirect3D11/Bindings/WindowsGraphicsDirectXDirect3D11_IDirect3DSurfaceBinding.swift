// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsGraphicsDirectXDirect3D11_IDirect3DSurfaceBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsGraphicsDirectXDirect3D11_IDirect3DSurface
    public typealias ABIStruct = SWRT_WindowsGraphicsDirectXDirect3D11_IDirect3DSurface

    public static let typeName = "Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsGraphicsDirectXDirect3D11_IDirect3DSurfaceBinding>, WindowsGraphicsDirectXDirect3D11_IDirect3DSurfaceProtocol {
        public var description: WindowsGraphicsDirectXDirect3D11_Direct3DSurfaceDescription {
            get throws {
                try _interop.get_Description()
            }
        }

        // MARK: Windows.Foundation.IClosable members

        public func close() throws {
            try _iclosable.close()
        }

        // MARK: Implementation boilerplate

        private var _lazyIClosable: COM.COMReference<SWRT_WindowsFoundation_IClosable>.Optional = .none

        internal var _iclosable: COM.COMInterop<SWRT_WindowsFoundation_IClosable> {
            get throws {
                try _lazyIClosable.lazyInitInterop {
                    try _queryInterface(uuidof(SWRT_WindowsFoundation_IClosable.self)).cast()
                }
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsGraphicsDirectXDirect3D11_IDirect3DSurface_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_Description: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.description
            _result.pointee = WindowsGraphicsDirectXDirect3D11_Direct3DSurfaceDescription.toABI(_result_swift)
        } }
    )
}