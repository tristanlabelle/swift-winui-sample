// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Base class of the composition API representing a node in the visual tree structure.
open class WindowsUIComposition_CompositionObject: WindowsRuntime.ComposableClass, WindowsFoundation_IClosableProtocol, WindowsUIComposition_IAnimationObjectProtocol, @unchecked Sendable {
    /// Connects an animation with the specified property of the object and starts the animation.
    /// - Parameter propertyName: The property to associate the animation with.
    /// - Parameter animation: The animation to associate with the specified property.
    public func startAnimation(_ propertyName: Swift.String, _ animation: WindowsUIComposition_CompositionAnimation?) throws {
        try _icompositionObject.startAnimation(propertyName, animation)
    }

    /// Disconnects an animation from the specified property and stops the animation.
    /// - Parameter propertyName: The name of the property to disconnect the animation from.
    public func stopAnimation(_ propertyName: Swift.String) throws {
        try _icompositionObject.stopAnimation(propertyName)
    }

    /// The Compositor used to create this CompositionObject.
    public var compositor: WindowsUIComposition_Compositor {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject.get_Compositor())
        }
    }

    /// The Compositor used to create this CompositionObject.
    public var compositor_: WindowsUIComposition_Compositor! {
        try! NullResult.catch(self.compositor)
    }

    /// The dispatcher for the CompositionObject.
    public var dispatcher: WindowsUICore_CoreDispatcher {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject.get_Dispatcher())
        }
    }

    /// The dispatcher for the CompositionObject.
    public var dispatcher_: WindowsUICore_CoreDispatcher! {
        try! NullResult.catch(self.dispatcher)
    }

    /// The collection of properties associated with the CompositionObject.
    public var properties: WindowsUIComposition_CompositionPropertySet {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject.get_Properties())
        }
    }

    /// The collection of properties associated with the CompositionObject.
    public var properties_: WindowsUIComposition_CompositionPropertySet! {
        try! NullResult.catch(self.properties)
    }

    /// Starts an animation group.
    /// - Parameter value: The animation group to start.
    public func startAnimationGroup(_ value: WindowsUIComposition_ICompositionAnimationBase?) throws {
        try _icompositionObject2.startAnimationGroup(value)
    }

    /// Stops an animation group.
    /// - Parameter value: The animation group to stop.
    public func stopAnimationGroup(_ value: WindowsUIComposition_ICompositionAnimationBase?) throws {
        try _icompositionObject2.stopAnimationGroup(value)
    }

    /// A string to associate with the CompositionObject. Note that for Visual Studio's Live Visual Tree debugging tool, the name displayed for a particular visual will be pulled from its Comment property
    public var comment: Swift.String {
        get throws {
            try _icompositionObject2.get_Comment()
        }
    }

    /// A string to associate with the CompositionObject.
    /// - Parameter newValue: A string to associate with the CompositionObject. Note that for Visual Studio's Live Visual Tree debugging tool, the name displayed for a particular visual will be pulled from its Comment property
    public func comment(_ value: Swift.String) throws {
        try _icompositionObject2.put_Comment(value)
    }

    /// A string to associate with the CompositionObject.
    public var comment_: Swift.String {
        get {
            try! self.comment
        }
        set {
            try! self.comment(newValue)
        }
    }

    /// The collection of implicit animations attached to this object.
    public var implicitAnimations: WindowsUIComposition_ImplicitAnimationCollection {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject2.get_ImplicitAnimations())
        }
    }

    /// The collection of implicit animations attached to this object.
    /// - Parameter newValue: The collection of implicit animations attached to this object.
    public func implicitAnimations(_ value: WindowsUIComposition_ImplicitAnimationCollection?) throws {
        try _icompositionObject2.put_ImplicitAnimations(value)
    }

    /// The collection of implicit animations attached to this object.
    public var implicitAnimations_: WindowsUIComposition_ImplicitAnimationCollection! {
        get {
            try! NullResult.catch(self.implicitAnimations)
        }
        set {
            try! self.implicitAnimations(newValue)
        }
    }

    /// The DispatcherQueue for the CompostionObject.
    public var dispatcherQueue: WindowsSystem_DispatcherQueue {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject3.get_DispatcherQueue())
        }
    }

    /// Gets the DispatcherQueue for the CompostionObject.
    public var dispatcherQueue_: WindowsSystem_DispatcherQueue! {
        try! NullResult.catch(self.dispatcherQueue)
    }

    /// Returns an AnimationController for the animation running on the specified property.
    /// - Parameter propertyName: The property being animated.
    /// - Returns: An instance of AnimationController for the specified animation, or **null** if the animation is not found.
    public func tryGetAnimationController(_ propertyName: Swift.String) throws -> WindowsUIComposition_AnimationController {
        try COM.NullResult.unwrap(_icompositionObject4.tryGetAnimationController(propertyName))
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the CompositionObject and releases system resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Windows.UI.Composition.IAnimationObject members

    /// Defines a property that can be animated.
    /// - Parameter propertyName: The property that can be animated.
    /// - Parameter propertyInfo: Information about the property to be animated.
    public func populatePropertyInfo(_ propertyName: Swift.String, _ propertyInfo: WindowsUIComposition_AnimationPropertyInfo?) throws {
        try _ianimationObject.populatePropertyInfo(propertyName, propertyInfo)
    }

    /// Connects an animation with the specified property of the target object and starts the animation.
    /// - Parameter target: The object that defines the property to be animated.
    /// - Parameter propertyName: The property to associate the animation with.
    /// - Parameter animation: The animation to associate with the specified property.
    public static func startAnimationWithIAnimationObject(_ target: WindowsUIComposition_IAnimationObject?, _ propertyName: Swift.String, _ animation: WindowsUIComposition_CompositionAnimation?) throws {
        try _icompositionObjectStatics.startAnimationWithIAnimationObject(target, propertyName, animation)
    }

    /// Starts an animation group on the specified target.
    /// - Parameter target: The object that defines the property to be animated.
    /// - Parameter animation: The animation to associate with the specified property.
    public static func startAnimationGroupWithIAnimationObject(_ target: WindowsUIComposition_IAnimationObject?, _ animation: WindowsUIComposition_ICompositionAnimationBase?) throws {
        try _icompositionObjectStatics.startAnimationGroupWithIAnimationObject(target, animation)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_ICompositionObject>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyICompositionObject: COM.COMReference<SWRT_WindowsUIComposition_ICompositionObject>.Optional = .none

    internal var _icompositionObject: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionObject> {
        get throws {
            try _lazyICompositionObject.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_ICompositionObject.self)).cast()
            }
        }
    }

    private var _lazyICompositionObject2: COM.COMReference<SWRT_WindowsUIComposition_ICompositionObject2>.Optional = .none

    internal var _icompositionObject2: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionObject2> {
        get throws {
            try _lazyICompositionObject2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_ICompositionObject2.self)).cast()
            }
        }
    }

    private var _lazyICompositionObject3: COM.COMReference<SWRT_WindowsUIComposition_ICompositionObject3>.Optional = .none

    internal var _icompositionObject3: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionObject3> {
        get throws {
            try _lazyICompositionObject3.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_ICompositionObject3.self)).cast()
            }
        }
    }

    private var _lazyICompositionObject4: COM.COMReference<SWRT_WindowsUIComposition_ICompositionObject4>.Optional = .none

    internal var _icompositionObject4: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionObject4> {
        get throws {
            try _lazyICompositionObject4.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_ICompositionObject4.self)).cast()
            }
        }
    }

    private var _lazyIClosable: COM.COMReference<SWRT_WindowsFoundation_IClosable>.Optional = .none

    internal var _iclosable: COM.COMInterop<SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _lazyIClosable.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsFoundation_IClosable.self)).cast()
            }
        }
    }

    private var _lazyIAnimationObject: COM.COMReference<SWRT_WindowsUIComposition_IAnimationObject>.Optional = .none

    internal var _ianimationObject: COM.COMInterop<SWRT_WindowsUIComposition_IAnimationObject> {
        get throws {
            try _lazyIAnimationObject.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_IAnimationObject.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.CompositionObject")
            }
        }
    }

    private static var _lazyICompositionObjectFactory: COM.COMReference<SWRT_WindowsUIComposition_ICompositionObjectFactory>.Optional = .none

    internal static var _icompositionObjectFactory: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionObjectFactory> {
        get throws {
            try _lazyICompositionObjectFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsUIComposition_ICompositionObjectFactory.self)).cast()
            }
        }
    }

    private static var _lazyICompositionObjectStatics: COM.COMReference<SWRT_WindowsUIComposition_ICompositionObjectStatics>.Optional = .none

    internal static var _icompositionObjectStatics: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionObjectStatics> {
        get throws {
            try _lazyICompositionObjectStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsUIComposition_ICompositionObjectStatics.self)).cast()
            }
        }
    }
}