// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Provides playback controls for a KeyFrameAnimation.
public final class WindowsUIComposition_AnimationController: WindowsUIComposition_CompositionObject, @unchecked Sendable {
    /// Pauses playback of the animation.
    public func pause() throws {
        try _ianimationController.pause()
    }

    /// Starts playback of an animation that was previously paused.
    public func resume() throws {
        try _ianimationController.resume()
    }

    /// The rate at which the animation plays. The default is 1.0.
    public var playbackRate: Swift.Float {
        get throws {
            try _ianimationController.get_PlaybackRate()
        }
    }

    /// Sets the rate at which the animation plays.
    /// - Parameter newValue: The rate at which the animation plays. The default is 1.0.
    public func playbackRate(_ value: Swift.Float) throws {
        try _ianimationController.put_PlaybackRate(value)
    }

    /// Gets or sets the rate at which the animation plays.
    public var playbackRate_: Swift.Float {
        get {
            try! self.playbackRate
        }
        set {
            try! self.playbackRate(newValue)
        }
    }

    /// The current playback position of the animation.
    public var progress: Swift.Float {
        get throws {
            try _ianimationController.get_Progress()
        }
    }

    /// Sets a value that indicates the current playback position of the animation.
    /// - Parameter newValue: The current playback position of the animation.
    public func progress(_ value: Swift.Float) throws {
        try _ianimationController.put_Progress(value)
    }

    /// Gets or sets a value that indicates the current playback position of the animation.
    public var progress_: Swift.Float {
        get {
            try! self.progress
        }
        set {
            try! self.progress(newValue)
        }
    }

    /// A value of the enumeration that indicates how progress is determined. The default is **Default**.
    public var progressBehavior: WindowsUIComposition_AnimationControllerProgressBehavior {
        get throws {
            try _ianimationController.get_ProgressBehavior()
        }
    }

    /// Sets a value that indicates how progress is determined.
    /// - Parameter newValue: A value of the enumeration that indicates how progress is determined. The default is **Default**.
    public func progressBehavior(_ value: WindowsUIComposition_AnimationControllerProgressBehavior) throws {
        try _ianimationController.put_ProgressBehavior(value)
    }

    /// Gets or sets a value that indicates how progress is determined.
    public var progressBehavior_: WindowsUIComposition_AnimationControllerProgressBehavior {
        get {
            try! self.progressBehavior
        }
        set {
            try! self.progressBehavior(newValue)
        }
    }

    /// The maximum allowed playback rate.
    public static var maxPlaybackRate: Swift.Float {
        get throws {
            try _ianimationControllerStatics.get_MaxPlaybackRate()
        }
    }

    /// Gets the maximum allowed playback rate.
    public static var maxPlaybackRate_: Swift.Float {
        try! Self.maxPlaybackRate
    }

    /// The minimum allowed playback rate.
    public static var minPlaybackRate: Swift.Float {
        get throws {
            try _ianimationControllerStatics.get_MinPlaybackRate()
        }
    }

    /// Gets the minimum allowed playback rate.
    public static var minPlaybackRate_: Swift.Float {
        try! Self.minPlaybackRate
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_IAnimationController>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIAnimationController: COM.COMReference<SWRT_WindowsUIComposition_IAnimationController>.Optional = .none

    internal var _ianimationController: COM.COMInterop<SWRT_WindowsUIComposition_IAnimationController> {
        get throws {
            try _lazyIAnimationController.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUIComposition_IAnimationController.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.AnimationController")
            }
        }
    }

    private static var _lazyIAnimationControllerStatics: COM.COMReference<SWRT_WindowsUIComposition_IAnimationControllerStatics>.Optional = .none

    internal static var _ianimationControllerStatics: COM.COMInterop<SWRT_WindowsUIComposition_IAnimationControllerStatics> {
        get throws {
            try _lazyIAnimationControllerStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsUIComposition_IAnimationControllerStatics.self)).cast()
            }
        }
    }
}