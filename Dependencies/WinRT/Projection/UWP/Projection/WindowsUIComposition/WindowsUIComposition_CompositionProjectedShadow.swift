// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Represents a scene-based shadow calculated using the relationship between the light, the visual that casts the shadow,and the visual that receives the shadow, such that the shadow is drawn differently on each receiver.
public final class WindowsUIComposition_CompositionProjectedShadow: WindowsUIComposition_CompositionObject, @unchecked Sendable {
    /// The multiplier for the shadow's blur radius.
    public var blurRadiusMultiplier: Swift.Float {
        get throws {
            try _icompositionProjectedShadow.get_BlurRadiusMultiplier()
        }
    }

    /// Sets the multiplier for the shadow's blur radius.
    /// - Parameter newValue: The multiplier for the shadow's blur radius.
    public func blurRadiusMultiplier(_ value: Swift.Float) throws {
        try _icompositionProjectedShadow.put_BlurRadiusMultiplier(value)
    }

    /// Gets or sets the multiplier for the shadow's blur radius.
    public var blurRadiusMultiplier_: Swift.Float {
        get {
            try! self.blurRadiusMultiplier
        }
        set {
            try! self.blurRadiusMultiplier(newValue)
        }
    }

    /// The collection of objects that cast a shadow on the receivers.
    public var casters: WindowsUIComposition_CompositionProjectedShadowCasterCollection {
        get throws {
            try COM.NullResult.unwrap(_icompositionProjectedShadow.get_Casters())
        }
    }

    /// Gets the collection of objects that cast a shadow on the receivers.
    public var casters_: WindowsUIComposition_CompositionProjectedShadowCasterCollection! {
        try! NullResult.catch(self.casters)
    }

    /// The composition light that determines the direction the shadow is cast.
    public var lightSource: WindowsUIComposition_CompositionLight {
        get throws {
            try COM.NullResult.unwrap(_icompositionProjectedShadow.get_LightSource())
        }
    }

    /// Sets the composition light that determines the direction the shadow is cast.
    /// - Parameter newValue: The composition light that determines the direction the shadow is cast.
    public func lightSource(_ value: WindowsUIComposition_CompositionLight?) throws {
        try _icompositionProjectedShadow.put_LightSource(value)
    }

    /// Gets or sets the composition light that determines the direction the shadow is cast.
    public var lightSource_: WindowsUIComposition_CompositionLight! {
        get {
            try! NullResult.catch(self.lightSource)
        }
        set {
            try! self.lightSource(newValue)
        }
    }

    /// The maximum blur radius of the shadow.
    public var maxBlurRadius: Swift.Float {
        get throws {
            try _icompositionProjectedShadow.get_MaxBlurRadius()
        }
    }

    /// Sets the maximum blur radius of the shadow.
    /// - Parameter newValue: The maximum blur radius of the shadow.
    public func maxBlurRadius(_ value: Swift.Float) throws {
        try _icompositionProjectedShadow.put_MaxBlurRadius(value)
    }

    /// Gets or sets the maximum blur radius of the shadow.
    public var maxBlurRadius_: Swift.Float {
        get {
            try! self.maxBlurRadius
        }
        set {
            try! self.maxBlurRadius(newValue)
        }
    }

    /// The minimum blur radius of the shadow.
    public var minBlurRadius: Swift.Float {
        get throws {
            try _icompositionProjectedShadow.get_MinBlurRadius()
        }
    }

    /// Sets the minimum blur radius of the shadow.
    /// - Parameter newValue: The minimum blur radius of the shadow.
    public func minBlurRadius(_ value: Swift.Float) throws {
        try _icompositionProjectedShadow.put_MinBlurRadius(value)
    }

    /// Gets or sets the minimum blur radius of the shadow.
    public var minBlurRadius_: Swift.Float {
        get {
            try! self.minBlurRadius
        }
        set {
            try! self.minBlurRadius(newValue)
        }
    }

    /// The collection of objects that the shadow is cast on.
    public var receivers: WindowsUIComposition_CompositionProjectedShadowReceiverUnorderedCollection {
        get throws {
            try COM.NullResult.unwrap(_icompositionProjectedShadow.get_Receivers())
        }
    }

    /// Gets the collection of objects that the shadow is cast on.
    public var receivers_: WindowsUIComposition_CompositionProjectedShadowReceiverUnorderedCollection! {
        try! NullResult.catch(self.receivers)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_ICompositionProjectedShadow>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyICompositionProjectedShadow: COM.COMReference<SWRT_WindowsUIComposition_ICompositionProjectedShadow>.Optional = .none

    internal var _icompositionProjectedShadow: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionProjectedShadow> {
        get throws {
            try _lazyICompositionProjectedShadow.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUIComposition_ICompositionProjectedShadow.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.CompositionProjectedShadow")
            }
        }
    }
}