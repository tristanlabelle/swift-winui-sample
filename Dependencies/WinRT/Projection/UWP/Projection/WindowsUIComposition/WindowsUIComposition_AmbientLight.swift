// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// A light that illuminates every targeted Visual equally.
public final class WindowsUIComposition_AmbientLight: WindowsUIComposition_CompositionLight, @unchecked Sendable {
    /// The color of the ambient light.
    public var color: WindowsUI_Color {
        get throws {
            try _iambientLight.get_Color()
        }
    }

    /// Color of the light. Animatable.
    /// - Parameter newValue: The color of the ambient light.
    public func color(_ value: WindowsUI_Color) throws {
        try _iambientLight.put_Color(value)
    }

    /// Color of the light. Animatable.
    public var color_: WindowsUI_Color {
        get {
            try! self.color
        }
        set {
            try! self.color(newValue)
        }
    }

    /// The intensity of the light.
    public var intensity: Swift.Float {
        get throws {
            try _iambientLight2.get_Intensity()
        }
    }

    /// Sets the intensity of the light.
    /// - Parameter newValue: The intensity of the light.
    public func intensity(_ value: Swift.Float) throws {
        try _iambientLight2.put_Intensity(value)
    }

    /// Gets or sets the intensity of the light.
    public var intensity_: Swift.Float {
        get {
            try! self.intensity
        }
        set {
            try! self.intensity(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_IAmbientLight>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIAmbientLight: COM.COMReference<SWRT_WindowsUIComposition_IAmbientLight>.Optional = .none

    internal var _iambientLight: COM.COMInterop<SWRT_WindowsUIComposition_IAmbientLight> {
        get throws {
            try _lazyIAmbientLight.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUIComposition_IAmbientLight.self)).cast()
            }
        }
    }

    private var _lazyIAmbientLight2: COM.COMReference<SWRT_WindowsUIComposition_IAmbientLight2>.Optional = .none

    internal var _iambientLight2: COM.COMInterop<SWRT_WindowsUIComposition_IAmbientLight2> {
        get throws {
            try _lazyIAmbientLight2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUIComposition_IAmbientLight2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.AmbientLight")
            }
        }
    }
}