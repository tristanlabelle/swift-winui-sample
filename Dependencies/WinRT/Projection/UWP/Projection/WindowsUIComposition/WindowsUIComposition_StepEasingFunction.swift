// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// A step function for interpolating between animation key frames.
public final class WindowsUIComposition_StepEasingFunction: WindowsUIComposition_CompositionEasingFunction, @unchecked Sendable {
    /// The step to end at.
    public var finalStep: Swift.Int32 {
        get throws {
            try _istepEasingFunction.get_FinalStep()
        }
    }

    /// The step to end at.
    /// - Parameter newValue: The step to end at.
    public func finalStep(_ value: Swift.Int32) throws {
        try _istepEasingFunction.put_FinalStep(value)
    }

    /// The step to end at.
    public var finalStep_: Swift.Int32 {
        get {
            try! self.finalStep
        }
        set {
            try! self.finalStep(newValue)
        }
    }

    /// The step to start at.
    public var initialStep: Swift.Int32 {
        get throws {
            try _istepEasingFunction.get_InitialStep()
        }
    }

    /// The step to start at.
    /// - Parameter newValue: The step to start at.
    public func initialStep(_ value: Swift.Int32) throws {
        try _istepEasingFunction.put_InitialStep(value)
    }

    /// The step to start at.
    public var initialStep_: Swift.Int32 {
        get {
            try! self.initialStep
        }
        set {
            try! self.initialStep(newValue)
        }
    }

    /// Boolean indicating whether the final step should last the smallest possible duration (1 frame).
    public var isFinalStepSingleFrame: Swift.Bool {
        get throws {
            try _istepEasingFunction.get_IsFinalStepSingleFrame()
        }
    }

    /// Indicates whether the final step should last the smallest possible duration.
    /// - Parameter newValue: Boolean indicating whether the final step should last the smallest possible duration (1 frame).
    public func isFinalStepSingleFrame(_ value: Swift.Bool) throws {
        try _istepEasingFunction.put_IsFinalStepSingleFrame(value)
    }

    /// Indicates whether the final step should last the smallest possible duration.
    public var isFinalStepSingleFrame_: Swift.Bool {
        get {
            try! self.isFinalStepSingleFrame
        }
        set {
            try! self.isFinalStepSingleFrame(newValue)
        }
    }

    /// Boolean indicating whether the initial step should last the smallest possible duration (1 frame).
    public var isInitialStepSingleFrame: Swift.Bool {
        get throws {
            try _istepEasingFunction.get_IsInitialStepSingleFrame()
        }
    }

    /// Indicates whether the initial step should last the smallest possible duration.
    /// - Parameter newValue: Boolean indicating whether the initial step should last the smallest possible duration (1 frame).
    public func isInitialStepSingleFrame(_ value: Swift.Bool) throws {
        try _istepEasingFunction.put_IsInitialStepSingleFrame(value)
    }

    /// Indicates whether the initial step should last the smallest possible duration.
    public var isInitialStepSingleFrame_: Swift.Bool {
        get {
            try! self.isInitialStepSingleFrame
        }
        set {
            try! self.isInitialStepSingleFrame(newValue)
        }
    }

    /// The number of steps between the starting value and the end value.
    public var stepCount: Swift.Int32 {
        get throws {
            try _istepEasingFunction.get_StepCount()
        }
    }

    /// The number of steps between the starting value and the end value.
    /// - Parameter newValue: The number of steps between the starting value and the end value.
    public func stepCount(_ value: Swift.Int32) throws {
        try _istepEasingFunction.put_StepCount(value)
    }

    /// The number of steps between the starting value and the end value.
    public var stepCount_: Swift.Int32 {
        get {
            try! self.stepCount
        }
        set {
            try! self.stepCount(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_IStepEasingFunction>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIStepEasingFunction: COM.COMReference<SWRT_WindowsUIComposition_IStepEasingFunction>.Optional = .none

    internal var _istepEasingFunction: COM.COMInterop<SWRT_WindowsUIComposition_IStepEasingFunction> {
        get throws {
            try _lazyIStepEasingFunction.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUIComposition_IStepEasingFunction.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.StepEasingFunction")
            }
        }
    }
}