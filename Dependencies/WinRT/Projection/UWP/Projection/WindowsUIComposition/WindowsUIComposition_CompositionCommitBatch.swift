// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// A group of active animations or effects.
public final class WindowsUIComposition_CompositionCommitBatch: WindowsUIComposition_CompositionObject, @unchecked Sendable {
    /// Event that is triggered when all objects in a CompositionCommitBatch have completed.
    @discardableResult
    public func completed(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, WindowsUIComposition_CompositionBatchCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icompositionCommitBatch.add_Completed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).completed(removing: token) })
    }

    public func completed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icompositionCommitBatch.remove_Completed(token)
    }

    /// Boolean indicating whether the CompositionCommitBatch is currently opened for objects to be aggregated.
    public var isActive: Swift.Bool {
        get throws {
            try _icompositionCommitBatch.get_IsActive()
        }
    }

    /// Indicates whether the CompositionCommitBatch is currently opened for objects to be aggregated.
    public var isActive_: Swift.Bool {
        try! self.isActive
    }

    /// Boolean indicating whether the CompositionCommitBatch has been closed and can no longer accept changes.
    public var isEnded: Swift.Bool {
        get throws {
            try _icompositionCommitBatch.get_IsEnded()
        }
    }

    /// Indicates whether the CompositionCommitBatch has been closed and can no longer accept changes.
    public var isEnded_: Swift.Bool {
        try! self.isEnded
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_ICompositionCommitBatch>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyICompositionCommitBatch: COM.COMReference<SWRT_WindowsUIComposition_ICompositionCommitBatch>.Optional = .none

    internal var _icompositionCommitBatch: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionCommitBatch> {
        get throws {
            try _lazyICompositionCommitBatch.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUIComposition_ICompositionCommitBatch.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.CompositionCommitBatch")
            }
        }
    }
}