// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// A time-based animation with one or more key frames. These frames are markers, allowing developers to specify values at specific times for the animating property. KeyFrame animations can be further customized by specifying how the animation interpolates between keyframes.
open class WindowsUIComposition_KeyFrameAnimation: WindowsUIComposition_CompositionAnimation, @unchecked Sendable {
    /// Inserts an expression key frame.
    /// - Parameter normalizedProgressKey: The time the key frame should occur at, expressed as a percentage of the animation Duration. Allowed value is from 0.0 to 1.0.
    /// - Parameter value: The expression used to calculate the value of the key frame.
    public func insertExpressionKeyFrame(_ normalizedProgressKey: Swift.Float, _ value: Swift.String) throws {
        try _ikeyFrameAnimation.insertExpressionKeyFrame(normalizedProgressKey, value)
    }

    /// Inserts an expression keyframe.
    /// - Parameter normalizedProgressKey: The time the key frame should occur at, expressed as a percentage of the animation Duration. Allowed value is from 0.0 to 1.0.
    /// - Parameter value: The expression used to calculate the value of the key frame.
    /// - Parameter easingFunction: The easing function to use when interpolating between frames.
    public func insertExpressionKeyFrame(_ normalizedProgressKey: Swift.Float, _ value: Swift.String, _ easingFunction: WindowsUIComposition_CompositionEasingFunction?) throws {
        try _ikeyFrameAnimation.insertExpressionKeyFrameWithEasingFunction(normalizedProgressKey, value, easingFunction)
    }

    /// Delay before the animation starts after CompositionObject.StartAnimation is called.
    public var delayTime: WindowsFoundation_TimeSpan {
        get throws {
            try _ikeyFrameAnimation.get_DelayTime()
        }
    }

    /// Delay before the animation starts after CompositionObject.StartAnimation is called.
    /// - Parameter newValue: Delay before the animation starts after CompositionObject.StartAnimation is called.
    public func delayTime(_ value: WindowsFoundation_TimeSpan) throws {
        try _ikeyFrameAnimation.put_DelayTime(value)
    }

    /// Delay before the animation starts after CompositionObject.StartAnimation is called.
    public var delayTime_: WindowsFoundation_TimeSpan {
        get {
            try! self.delayTime
        }
        set {
            try! self.delayTime(newValue)
        }
    }

    /// The duration of the animation. Minimum allowed value is 1ms and maximum allowed value is 24 days.
    public var duration: WindowsFoundation_TimeSpan {
        get throws {
            try _ikeyFrameAnimation.get_Duration()
        }
    }

    /// The duration of the animation.
    /// - Parameter newValue: The duration of the animation. Minimum allowed value is 1ms and maximum allowed value is 24 days.
    public func duration(_ value: WindowsFoundation_TimeSpan) throws {
        try _ikeyFrameAnimation.put_Duration(value)
    }

    /// The duration of the animation.
    public var duration_: WindowsFoundation_TimeSpan {
        get {
            try! self.duration
        }
        set {
            try! self.duration(newValue)
        }
    }

    /// The iteration behavior for the key frame animation.
    public var iterationBehavior: WindowsUIComposition_AnimationIterationBehavior {
        get throws {
            try _ikeyFrameAnimation.get_IterationBehavior()
        }
    }

    /// The iteration behavior for the key frame animation.
    /// - Parameter newValue: The iteration behavior for the key frame animation.
    public func iterationBehavior(_ value: WindowsUIComposition_AnimationIterationBehavior) throws {
        try _ikeyFrameAnimation.put_IterationBehavior(value)
    }

    /// The iteration behavior for the key frame animation.
    public var iterationBehavior_: WindowsUIComposition_AnimationIterationBehavior {
        get {
            try! self.iterationBehavior
        }
        set {
            try! self.iterationBehavior(newValue)
        }
    }

    /// The number of times to repeat the key frame animation.
    public var iterationCount: Swift.Int32 {
        get throws {
            try _ikeyFrameAnimation.get_IterationCount()
        }
    }

    /// The number of times to repeat the key frame animation.
    /// - Parameter newValue: The number of times to repeat the key frame animation.
    public func iterationCount(_ value: Swift.Int32) throws {
        try _ikeyFrameAnimation.put_IterationCount(value)
    }

    /// The number of times to repeat the key frame animation.
    public var iterationCount_: Swift.Int32 {
        get {
            try! self.iterationCount
        }
        set {
            try! self.iterationCount(newValue)
        }
    }

    /// The number of key frames in the KeyFrameAnimation.
    public var keyFrameCount: Swift.Int32 {
        get throws {
            try _ikeyFrameAnimation.get_KeyFrameCount()
        }
    }

    /// The number of key frames in the KeyFrameAnimation.
    public var keyFrameCount_: Swift.Int32 {
        try! self.keyFrameCount
    }

    /// Specifies how to set the property value when StopAnimation is called.
    public var stopBehavior: WindowsUIComposition_AnimationStopBehavior {
        get throws {
            try _ikeyFrameAnimation.get_StopBehavior()
        }
    }

    /// Specifies how to set the property value when StopAnimation is called.
    /// - Parameter newValue: Specifies how to set the property value when StopAnimation is called.
    public func stopBehavior(_ value: WindowsUIComposition_AnimationStopBehavior) throws {
        try _ikeyFrameAnimation.put_StopBehavior(value)
    }

    /// Specifies how to set the property value when StopAnimation is called.
    public var stopBehavior_: WindowsUIComposition_AnimationStopBehavior {
        get {
            try! self.stopBehavior
        }
        set {
            try! self.stopBehavior(newValue)
        }
    }

    /// The direction the animation is playing.
    public var direction: WindowsUIComposition_AnimationDirection {
        get throws {
            try _ikeyFrameAnimation2.get_Direction()
        }
    }

    /// The direction the animation is playing.
    /// - Parameter newValue: The direction the animation is playing.
    public func direction(_ value: WindowsUIComposition_AnimationDirection) throws {
        try _ikeyFrameAnimation2.put_Direction(value)
    }

    /// The direction the animation is playing.
    public var direction_: WindowsUIComposition_AnimationDirection {
        get {
            try! self.direction
        }
        set {
            try! self.direction(newValue)
        }
    }

    /// The delay behavior of the key frame animation.
    public var delayBehavior: WindowsUIComposition_AnimationDelayBehavior {
        get throws {
            try _ikeyFrameAnimation3.get_DelayBehavior()
        }
    }

    /// The delay behavior of the key frame animation.
    /// - Parameter newValue: The delay behavior of the key frame animation.
    public func delayBehavior(_ value: WindowsUIComposition_AnimationDelayBehavior) throws {
        try _ikeyFrameAnimation3.put_DelayBehavior(value)
    }

    /// The delay behavior of the key frame animation.
    public var delayBehavior_: WindowsUIComposition_AnimationDelayBehavior {
        get {
            try! self.delayBehavior
        }
        set {
            try! self.delayBehavior(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_IKeyFrameAnimation>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIKeyFrameAnimation: COM.COMReference<SWRT_WindowsUIComposition_IKeyFrameAnimation>.Optional = .none

    internal var _ikeyFrameAnimation: COM.COMInterop<SWRT_WindowsUIComposition_IKeyFrameAnimation> {
        get throws {
            try _lazyIKeyFrameAnimation.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_IKeyFrameAnimation.self)).cast()
            }
        }
    }

    private var _lazyIKeyFrameAnimation2: COM.COMReference<SWRT_WindowsUIComposition_IKeyFrameAnimation2>.Optional = .none

    internal var _ikeyFrameAnimation2: COM.COMInterop<SWRT_WindowsUIComposition_IKeyFrameAnimation2> {
        get throws {
            try _lazyIKeyFrameAnimation2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_IKeyFrameAnimation2.self)).cast()
            }
        }
    }

    private var _lazyIKeyFrameAnimation3: COM.COMReference<SWRT_WindowsUIComposition_IKeyFrameAnimation3>.Optional = .none

    internal var _ikeyFrameAnimation3: COM.COMInterop<SWRT_WindowsUIComposition_IKeyFrameAnimation3> {
        get throws {
            try _lazyIKeyFrameAnimation3.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_IKeyFrameAnimation3.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.KeyFrameAnimation")
            }
        }
    }

    private static var _lazyIKeyFrameAnimationFactory: COM.COMReference<SWRT_WindowsUIComposition_IKeyFrameAnimationFactory>.Optional = .none

    internal static var _ikeyFrameAnimationFactory: COM.COMInterop<SWRT_WindowsUIComposition_IKeyFrameAnimationFactory> {
        get throws {
            try _lazyIKeyFrameAnimationFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsUIComposition_IKeyFrameAnimationFactory.self)).cast()
            }
        }
    }
}