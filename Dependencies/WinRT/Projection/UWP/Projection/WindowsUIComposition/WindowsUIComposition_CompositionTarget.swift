// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Represents the window on which to display the composition tree.
open class WindowsUIComposition_CompositionTarget: WindowsUIComposition_CompositionObject, @unchecked Sendable {
    /// The root of the composition tree to display.
    public var root: WindowsUIComposition_Visual {
        get throws {
            try COM.NullResult.unwrap(_icompositionTarget.get_Root())
        }
    }

    /// The root of the composition tree to display.
    /// - Parameter newValue: The root of the composition tree to display.
    public func root(_ value: WindowsUIComposition_Visual?) throws {
        try _icompositionTarget.put_Root(value)
    }

    /// The root of the composition tree to display.
    public var root_: WindowsUIComposition_Visual! {
        get {
            try! NullResult.catch(self.root)
        }
        set {
            try! self.root(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_ICompositionTarget>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyICompositionTarget: COM.COMReference<SWRT_WindowsUIComposition_ICompositionTarget>.Optional = .none

    internal var _icompositionTarget: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionTarget> {
        get throws {
            try _lazyICompositionTarget.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_ICompositionTarget.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.CompositionTarget")
            }
        }
    }

    private static var _lazyICompositionTargetFactory: COM.COMReference<SWRT_WindowsUIComposition_ICompositionTargetFactory>.Optional = .none

    internal static var _icompositionTargetFactory: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionTargetFactory> {
        get throws {
            try _lazyICompositionTargetFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsUIComposition_ICompositionTargetFactory.self)).cast()
            }
        }
    }
}