// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// A light source that casts inner and outer cones of light. For example, a flashlight.
public final class WindowsUIComposition_SpotLight: WindowsUIComposition_CompositionLight, @unchecked Sendable {
    /// The constant coefficient in the light's attenuation equation. Controls light intensity. Range is from 0 to infinity.
    public var constantAttenuation: Swift.Float {
        get throws {
            try _ispotLight.get_ConstantAttenuation()
        }
    }

    /// The constant coefficient in the light's attenuation equation. Controls light intensity. Animatable.
    /// - Parameter newValue: The constant coefficient in the light's attenuation equation. Controls light intensity. Range is from 0 to infinity.
    public func constantAttenuation(_ value: Swift.Float) throws {
        try _ispotLight.put_ConstantAttenuation(value)
    }

    /// The constant coefficient in the light's attenuation equation. Controls light intensity. Animatable.
    public var constantAttenuation_: Swift.Float {
        get {
            try! self.constantAttenuation
        }
        set {
            try! self.constantAttenuation(newValue)
        }
    }

    /// The visual the light's offset is relative to.
    public var coordinateSpace: WindowsUIComposition_Visual {
        get throws {
            try COM.NullResult.unwrap(_ispotLight.get_CoordinateSpace())
        }
    }

    /// The Visual used to determine the light's direction and offset. The light's offset and direction properties are relative to this Visual's coordinate space.
    /// - Parameter newValue: The visual the light's offset is relative to.
    public func coordinateSpace(_ value: WindowsUIComposition_Visual?) throws {
        try _ispotLight.put_CoordinateSpace(value)
    }

    /// The Visual used to determine the light's direction and offset. The light's offset and direction properties are relative to this Visual's coordinate space.
    public var coordinateSpace_: WindowsUIComposition_Visual! {
        get {
            try! NullResult.catch(self.coordinateSpace)
        }
        set {
            try! self.coordinateSpace(newValue)
        }
    }

    /// The direction in which the light is pointing, specified relative to its coordinate space Visual.
    public var direction: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _ispotLight.get_Direction()
        }
    }

    /// The direction in which the light is pointing, specified relative to its CoordinateSpace Visual.
    /// - Parameter newValue: The direction in which the light is pointing, specified relative to its coordinate space Visual.
    public func direction(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _ispotLight.put_Direction(value)
    }

    /// The direction in which the light is pointing, specified relative to its CoordinateSpace Visual.
    public var direction_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.direction
        }
        set {
            try! self.direction(newValue)
        }
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in radians.
    public var innerConeAngle: Swift.Float {
        get throws {
            try _ispotLight.get_InnerConeAngle()
        }
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in radians. Animatable.
    /// - Parameter newValue: The SpotLight’s inner cone angle, expressed as a semi-vertical angle in radians.
    public func innerConeAngle(_ value: Swift.Float) throws {
        try _ispotLight.put_InnerConeAngle(value)
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in radians. Animatable.
    public var innerConeAngle_: Swift.Float {
        get {
            try! self.innerConeAngle
        }
        set {
            try! self.innerConeAngle(newValue)
        }
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in degrees.
    public var innerConeAngleInDegrees: Swift.Float {
        get throws {
            try _ispotLight.get_InnerConeAngleInDegrees()
        }
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in degrees. Animatable.
    /// - Parameter newValue: The SpotLight’s inner cone angle, expressed as a semi-vertical angle in degrees.
    public func innerConeAngleInDegrees(_ value: Swift.Float) throws {
        try _ispotLight.put_InnerConeAngleInDegrees(value)
    }

    /// The SpotLight’s inner cone angle, expressed as a semi-vertical angle in degrees. Animatable.
    public var innerConeAngleInDegrees_: Swift.Float {
        get {
            try! self.innerConeAngleInDegrees
        }
        set {
            try! self.innerConeAngleInDegrees(newValue)
        }
    }

    /// Color of the spotlight's inner cone.
    public var innerConeColor: WindowsUI_Color {
        get throws {
            try _ispotLight.get_InnerConeColor()
        }
    }

    /// Color of the spotlight's inner cone. Animatable.
    /// - Parameter newValue: Color of the spotlight's inner cone.
    public func innerConeColor(_ value: WindowsUI_Color) throws {
        try _ispotLight.put_InnerConeColor(value)
    }

    /// Color of the spotlight's inner cone. Animatable.
    public var innerConeColor_: WindowsUI_Color {
        get {
            try! self.innerConeColor
        }
        set {
            try! self.innerConeColor(newValue)
        }
    }

    /// The linear coefficient in the light's attenuation equation that determines how the light falls off with distance. Range is from 0 to infinity.
    public var linearAttenuation: Swift.Float {
        get throws {
            try _ispotLight.get_LinearAttenuation()
        }
    }

    /// The linear coefficient in the light's attenuation equation that determines how the light falls off with distance. Animatable.
    /// - Parameter newValue: The linear coefficient in the light's attenuation equation that determines how the light falls off with distance. Range is from 0 to infinity.
    public func linearAttenuation(_ value: Swift.Float) throws {
        try _ispotLight.put_LinearAttenuation(value)
    }

    /// The linear coefficient in the light's attenuation equation that determines how the light falls off with distance. Animatable.
    public var linearAttenuation_: Swift.Float {
        get {
            try! self.linearAttenuation
        }
        set {
            try! self.linearAttenuation(newValue)
        }
    }

    /// Offset of the light source relative to its coordinate space Visual.
    public var offset: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _ispotLight.get_Offset()
        }
    }

    /// Offset of the light source relative to its CoordinateSpace Visual. Animatable.
    /// - Parameter newValue: Offset of the light source relative to its coordinate space Visual.
    public func offset(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _ispotLight.put_Offset(value)
    }

    /// Offset of the light source relative to its CoordinateSpace Visual. Animatable.
    public var offset_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.offset
        }
        set {
            try! self.offset(newValue)
        }
    }

    /// The SpotLight’s outer cone angle, expressed as a semi-vertical angle in radians. The value must be between 0 and pi.
    public var outerConeAngle: Swift.Float {
        get throws {
            try _ispotLight.get_OuterConeAngle()
        }
    }

    /// The SpotLight’s outer cone angle, expressed as a semi-vertical angle in radians. Animatable.
    /// - Parameter newValue: The SpotLight’s outer cone angle, expressed as a semi-vertical angle in radians. The value must be between 0 and pi.
    public func outerConeAngle(_ value: Swift.Float) throws {
        try _ispotLight.put_OuterConeAngle(value)
    }

    /// The SpotLight’s outer cone angle, expressed as a semi-vertical angle in radians. Animatable.
    public var outerConeAngle_: Swift.Float {
        get {
            try! self.outerConeAngle
        }
        set {
            try! self.outerConeAngle(newValue)
        }
    }

    /// The semi-vertical angle, in degrees, of the SpotLight's outer cone.
    public var outerConeAngleInDegrees: Swift.Float {
        get throws {
            try _ispotLight.get_OuterConeAngleInDegrees()
        }
    }

    /// The semi-vertical angle, in degrees, of the SpotLight's outer cone. Animatable.
    /// - Parameter newValue: The semi-vertical angle, in degrees, of the SpotLight's outer cone.
    public func outerConeAngleInDegrees(_ value: Swift.Float) throws {
        try _ispotLight.put_OuterConeAngleInDegrees(value)
    }

    /// The semi-vertical angle, in degrees, of the SpotLight's outer cone. Animatable.
    public var outerConeAngleInDegrees_: Swift.Float {
        get {
            try! self.outerConeAngleInDegrees
        }
        set {
            try! self.outerConeAngleInDegrees(newValue)
        }
    }

    /// The color of the spotlight's outer cone.
    public var outerConeColor: WindowsUI_Color {
        get throws {
            try _ispotLight.get_OuterConeColor()
        }
    }

    /// The color of the spotlight's outer cone. Animatable.
    /// - Parameter newValue: The color of the spotlight's outer cone.
    public func outerConeColor(_ value: WindowsUI_Color) throws {
        try _ispotLight.put_OuterConeColor(value)
    }

    /// The color of the spotlight's outer cone. Animatable.
    public var outerConeColor_: WindowsUI_Color {
        get {
            try! self.outerConeColor
        }
        set {
            try! self.outerConeColor(newValue)
        }
    }

    /// The quadratic coefficient in the light's attenuation equation. Controls light intensity falloff based on distance squared. Range is from 0 to infinity.
    public var quadraticAttenuation: Swift.Float {
        get throws {
            try _ispotLight.get_QuadraticAttenuation()
        }
    }

    /// The quadratic portion of the attenuation equation that determines how the light falls off with distance. Animatable.
    /// - Parameter newValue: The quadratic coefficient in the light's attenuation equation. Controls light intensity falloff based on distance squared. Range is from 0 to infinity.
    public func quadraticAttenuation(_ value: Swift.Float) throws {
        try _ispotLight.put_QuadraticAttenuation(value)
    }

    /// The quadratic portion of the attenuation equation that determines how the light falls off with distance. Animatable.
    public var quadraticAttenuation_: Swift.Float {
        get {
            try! self.quadraticAttenuation
        }
        set {
            try! self.quadraticAttenuation(newValue)
        }
    }

    /// The intensity of the light.
    public var innerConeIntensity: Swift.Float {
        get throws {
            try _ispotLight2.get_InnerConeIntensity()
        }
    }

    /// Sets the intensity of the light in the spotlight's inner cone.
    /// - Parameter newValue: The intensity of the light.
    public func innerConeIntensity(_ value: Swift.Float) throws {
        try _ispotLight2.put_InnerConeIntensity(value)
    }

    /// Gets or sets the intensity of the light in the spotlight's inner cone.
    public var innerConeIntensity_: Swift.Float {
        get {
            try! self.innerConeIntensity
        }
        set {
            try! self.innerConeIntensity(newValue)
        }
    }

    /// The intensity of the light.
    public var outerConeIntensity: Swift.Float {
        get throws {
            try _ispotLight2.get_OuterConeIntensity()
        }
    }

    /// Sets the intensity of the light in the spotlight's outer cone.
    /// - Parameter newValue: The intensity of the light.
    public func outerConeIntensity(_ value: Swift.Float) throws {
        try _ispotLight2.put_OuterConeIntensity(value)
    }

    /// Gets or sets the intensity of the light in the spotlight's outer cone.
    public var outerConeIntensity_: Swift.Float {
        get {
            try! self.outerConeIntensity
        }
        set {
            try! self.outerConeIntensity(newValue)
        }
    }

    /// The maximum range at which this light is effective. The default is 0.0.
    public var maxAttenuationCutoff: Swift.Float {
        get throws {
            try _ispotLight3.get_MaxAttenuationCutoff()
        }
    }

    /// Sets the maximum range at which this light is effective.
    /// - Parameter newValue: The maximum range at which this light is effective. The default is 0.0.
    public func maxAttenuationCutoff(_ value: Swift.Float) throws {
        try _ispotLight3.put_MaxAttenuationCutoff(value)
    }

    /// Gets or sets the maximum range at which this light is effective.
    public var maxAttenuationCutoff_: Swift.Float {
        get {
            try! self.maxAttenuationCutoff
        }
        set {
            try! self.maxAttenuationCutoff(newValue)
        }
    }

    /// The minimum range at which this light is effective. The default is 0.0.
    public var minAttenuationCutoff: Swift.Float {
        get throws {
            try _ispotLight3.get_MinAttenuationCutoff()
        }
    }

    /// Sets the minimum range at which this light is effective.
    /// - Parameter newValue: The minimum range at which this light is effective. The default is 0.0.
    public func minAttenuationCutoff(_ value: Swift.Float) throws {
        try _ispotLight3.put_MinAttenuationCutoff(value)
    }

    /// Gets or sets the minimum range at which this light is effective.
    public var minAttenuationCutoff_: Swift.Float {
        get {
            try! self.minAttenuationCutoff
        }
        set {
            try! self.minAttenuationCutoff(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_ISpotLight>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyISpotLight: COM.COMReference<SWRT_WindowsUIComposition_ISpotLight>.Optional = .none

    internal var _ispotLight: COM.COMInterop<SWRT_WindowsUIComposition_ISpotLight> {
        get throws {
            try _lazyISpotLight.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUIComposition_ISpotLight.self)).cast()
            }
        }
    }

    private var _lazyISpotLight2: COM.COMReference<SWRT_WindowsUIComposition_ISpotLight2>.Optional = .none

    internal var _ispotLight2: COM.COMInterop<SWRT_WindowsUIComposition_ISpotLight2> {
        get throws {
            try _lazyISpotLight2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUIComposition_ISpotLight2.self)).cast()
            }
        }
    }

    private var _lazyISpotLight3: COM.COMReference<SWRT_WindowsUIComposition_ISpotLight3>.Optional = .none

    internal var _ispotLight3: COM.COMInterop<SWRT_WindowsUIComposition_ISpotLight3> {
        get throws {
            try _lazyISpotLight3.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUIComposition_ISpotLight3.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.SpotLight")
            }
        }
    }
}