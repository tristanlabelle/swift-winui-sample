// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Base class for clipping objects such as InsetClip.
open class WindowsUIComposition_CompositionClip: WindowsUIComposition_CompositionObject, @unchecked Sendable {
    /// The point on the clip to be positioned at the clip's offset. Value is normalized with respect to the size of the clip. An AnchorPoint value of (0, 0) refers to the top-left corner of the untransformed clip and a value of (1, 1) refers to the bottom-right corner. Negative values and values greater than one are accepted but will result in an AnchorPoint that is outside the boundaries of the original, untransformed clip.
    public var anchorPoint: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _icompositionClip2.get_AnchorPoint()
        }
    }

    /// The point on the clip to be positioned at the clip's offset. Value is normalized with respect to the size of the clip.
    /// - Parameter newValue: The point on the clip to be positioned at the clip's offset. Value is normalized with respect to the size of the clip. An AnchorPoint value of (0, 0) refers to the top-left corner of the untransformed clip and a value of (1, 1) refers to the bottom-right corner. Negative values and values greater than one are accepted but will result in an AnchorPoint that is outside the boundaries of the original, untransformed clip.
    public func anchorPoint(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _icompositionClip2.put_AnchorPoint(value)
    }

    /// The point on the clip to be positioned at the clip's offset. Value is normalized with respect to the size of the clip.
    public var anchorPoint_: WindowsFoundationNumerics_Vector2 {
        get {
            try! self.anchorPoint
        }
        set {
            try! self.anchorPoint(newValue)
        }
    }

    /// The point about which rotation or scaling occurs. Value is in pixels within the local coordinate space of the visual on which the clip is applied.
    public var centerPoint: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _icompositionClip2.get_CenterPoint()
        }
    }

    /// The point about which rotation or scaling occurs.
    /// - Parameter newValue: The point about which rotation or scaling occurs. Value is in pixels within the local coordinate space of the visual on which the clip is applied.
    public func centerPoint(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _icompositionClip2.put_CenterPoint(value)
    }

    /// The point about which rotation or scaling occurs.
    public var centerPoint_: WindowsFoundationNumerics_Vector2 {
        get {
            try! self.centerPoint
        }
        set {
            try! self.centerPoint(newValue)
        }
    }

    /// The offset of the clip relative to the visual on which the clip is applied. By default, the Offset value on a clip is (0, 0).
    public var offset: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _icompositionClip2.get_Offset()
        }
    }

    /// The offset of the clip relative to the visual on which the clip is applied.
    /// - Parameter newValue: The offset of the clip relative to the visual on which the clip is applied. By default, the Offset value on a clip is (0, 0).
    public func offset(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _icompositionClip2.put_Offset(value)
    }

    /// The offset of the clip relative to the visual on which the clip is applied.
    public var offset_: WindowsFoundationNumerics_Vector2 {
        get {
            try! self.offset
        }
        set {
            try! self.offset(newValue)
        }
    }

    /// The angle of rotation applied to the clip, in radians. For a CompositionClip, the axis of rotation is always about the z-axis, with positive RotationAngle values resulting in a clockwise rotation and negative values resulting in a counter-clockwise rotation. For specifying RotationAngle in degrees, use CompositionClip.RotationAngleInDegrees.
    public var rotationAngle: Swift.Float {
        get throws {
            try _icompositionClip2.get_RotationAngle()
        }
    }

    /// The angle of rotation applied to the clip, in radians.
    /// - Parameter newValue: The angle of rotation applied to the clip, in radians. For a CompositionClip, the axis of rotation is always about the z-axis, with positive RotationAngle values resulting in a clockwise rotation and negative values resulting in a counter-clockwise rotation. For specifying RotationAngle in degrees, use CompositionClip.RotationAngleInDegrees.
    public func rotationAngle(_ value: Swift.Float) throws {
        try _icompositionClip2.put_RotationAngle(value)
    }

    /// The angle of rotation applied to the clip, in radians.
    public var rotationAngle_: Swift.Float {
        get {
            try! self.rotationAngle
        }
        set {
            try! self.rotationAngle(newValue)
        }
    }

    /// The angle of rotation applied to the clip, in degrees. For a CompositionClip, the axis of rotation is always about the z-axis, with positive RotationAngleInDegrees values resulting in a clockwise rotation and negative values resulting in a counter-clockwise rotation. For specifying RotationAngle in radians, use CompositionClip.RotationAngle.
    public var rotationAngleInDegrees: Swift.Float {
        get throws {
            try _icompositionClip2.get_RotationAngleInDegrees()
        }
    }

    /// The angle of rotation applied to the clip, in degrees.
    /// - Parameter newValue: The angle of rotation applied to the clip, in degrees. For a CompositionClip, the axis of rotation is always about the z-axis, with positive RotationAngleInDegrees values resulting in a clockwise rotation and negative values resulting in a counter-clockwise rotation. For specifying RotationAngle in radians, use CompositionClip.RotationAngle.
    public func rotationAngleInDegrees(_ value: Swift.Float) throws {
        try _icompositionClip2.put_RotationAngleInDegrees(value)
    }

    /// The angle of rotation applied to the clip, in degrees.
    public var rotationAngleInDegrees_: Swift.Float {
        get {
            try! self.rotationAngleInDegrees
        }
        set {
            try! self.rotationAngleInDegrees(newValue)
        }
    }

    /// The scale to apply to the clip. The scale value is a multiplier of the clip's size. By default, the Scale value on a clip is (1, 1).
    public var scale: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _icompositionClip2.get_Scale()
        }
    }

    /// The scale to apply to the clip.
    /// - Parameter newValue: The scale to apply to the clip. The scale value is a multiplier of the clip's size. By default, the Scale value on a clip is (1, 1).
    public func scale(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _icompositionClip2.put_Scale(value)
    }

    /// The scale to apply to the clip.
    public var scale_: WindowsFoundationNumerics_Vector2 {
        get {
            try! self.scale
        }
        set {
            try! self.scale(newValue)
        }
    }

    /// The transformation matrix to apply to the clip. By default, the TransformMatrix is set to:
    public var transformMatrix: WindowsFoundationNumerics_Matrix3x2 {
        get throws {
            try _icompositionClip2.get_TransformMatrix()
        }
    }

    /// The 3x2 transformation matrix to apply to the clip.
    /// - Parameter newValue: The transformation matrix to apply to the clip. By default, the TransformMatrix is set to:
    public func transformMatrix(_ value: WindowsFoundationNumerics_Matrix3x2) throws {
        try _icompositionClip2.put_TransformMatrix(value)
    }

    /// The 3x2 transformation matrix to apply to the clip.
    public var transformMatrix_: WindowsFoundationNumerics_Matrix3x2 {
        get {
            try! self.transformMatrix
        }
        set {
            try! self.transformMatrix(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIComposition_ICompositionClip>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyICompositionClip: COM.COMReference<SWRT_WindowsUIComposition_ICompositionClip>.Optional = .none

    internal var _icompositionClip: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionClip> {
        get throws {
            try _lazyICompositionClip.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_ICompositionClip.self)).cast()
            }
        }
    }

    private var _lazyICompositionClip2: COM.COMReference<SWRT_WindowsUIComposition_ICompositionClip2>.Optional = .none

    internal var _icompositionClip2: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionClip2> {
        get throws {
            try _lazyICompositionClip2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsUIComposition_ICompositionClip2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Composition.CompositionClip")
            }
        }
    }

    private static var _lazyICompositionClipFactory: COM.COMReference<SWRT_WindowsUIComposition_ICompositionClipFactory>.Optional = .none

    internal static var _icompositionClipFactory: COM.COMInterop<SWRT_WindowsUIComposition_ICompositionClipFactory> {
        get throws {
            try _lazyICompositionClipFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsUIComposition_ICompositionClipFactory.self)).cast()
            }
        }
    }
}