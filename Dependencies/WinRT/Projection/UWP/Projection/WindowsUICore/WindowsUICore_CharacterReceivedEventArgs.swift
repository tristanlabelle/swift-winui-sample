// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Provides the arguments returned by the event raised when a character is received by the input queue.
public final class WindowsUICore_CharacterReceivedEventArgs: WindowsRuntime.WinRTImport<WindowsUICore_CharacterReceivedEventArgsBinding>, WindowsUICore_ICoreWindowEventArgsProtocol {
    /// The character in UTF-32 encoding.
    public var keyCode: Swift.UInt32 {
        get throws {
            try _interop.get_KeyCode()
        }
    }

    /// Gets the key code of the character received by the input queue.
    public var keyCode_: Swift.UInt32 {
        try! self.keyCode
    }

    /// The status of the key that was pressed.
    public var keyStatus: WindowsUICore_CorePhysicalKeyStatus {
        get throws {
            try _interop.get_KeyStatus()
        }
    }

    /// Gets the status of the physical key press that raised the character-received event.
    public var keyStatus_: WindowsUICore_CorePhysicalKeyStatus {
        try! self.keyStatus
    }

    // MARK: Windows.UI.Core.ICoreWindowEventArgs members

    /// True if the character received event has been handled; false if it has not.
    public var handled: Swift.Bool {
        get throws {
            try _icoreWindowEventArgs.get_Handled()
        }
    }

    /// Sets whether the character-received event was handled or not.
    /// - Parameter newValue: True if the character received event has been handled; false if it has not.
    public func handled(_ value: Swift.Bool) throws {
        try _icoreWindowEventArgs.put_Handled(value)
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUICore_ICharacterReceivedEventArgs>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyICoreWindowEventArgs: COM.COMReference<SWRT_WindowsUICore_ICoreWindowEventArgs>.Optional = .none

    internal var _icoreWindowEventArgs: COM.COMInterop<SWRT_WindowsUICore_ICoreWindowEventArgs> {
        get throws {
            try _lazyICoreWindowEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUICore_ICoreWindowEventArgs.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Core.CharacterReceivedEventArgs")
            }
        }
    }
}