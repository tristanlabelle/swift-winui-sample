// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Provides the arguments returned by an automation provider request event callback.
public final class WindowsUICore_AutomationProviderRequestedEventArgs: WindowsRuntime.WinRTImport<WindowsUICore_AutomationProviderRequestedEventArgsBinding>, WindowsUICore_ICoreWindowEventArgsProtocol {
    /// The automation provider object returned by the callback.
    public var automationProvider: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_AutomationProvider())
        }
    }

    /// Sets the automation provider object returned by the request event callback.
    /// - Parameter newValue: The automation provider object returned by the callback.
    public func automationProvider(_ value: WindowsRuntime.IInspectable?) throws {
        try _interop.put_AutomationProvider(value)
    }

    /// Gets or sets the automation provider object returned by the request event callback.
    public var automationProvider_: WindowsRuntime.IInspectable! {
        get {
            try! NullResult.catch(self.automationProvider)
        }
        set {
            try! self.automationProvider(newValue)
        }
    }

    // MARK: Windows.UI.Core.ICoreWindowEventArgs members

    /// True if the automation provider request event has been handled; false if it has not.
    public var handled: Swift.Bool {
        get throws {
            try _icoreWindowEventArgs.get_Handled()
        }
    }

    /// Sets whether the automation provider request event has been handled.
    /// - Parameter newValue: True if the automation provider request event has been handled; false if it has not.
    public func handled(_ value: Swift.Bool) throws {
        try _icoreWindowEventArgs.put_Handled(value)
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUICore_IAutomationProviderRequestedEventArgs>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyICoreWindowEventArgs: COM.COMReference<SWRT_WindowsUICore_ICoreWindowEventArgs>.Optional = .none

    internal var _icoreWindowEventArgs: COM.COMInterop<SWRT_WindowsUICore_ICoreWindowEventArgs> {
        get throws {
            try _lazyICoreWindowEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUICore_ICoreWindowEventArgs.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Core.AutomationProviderRequestedEventArgs")
            }
        }
    }
}