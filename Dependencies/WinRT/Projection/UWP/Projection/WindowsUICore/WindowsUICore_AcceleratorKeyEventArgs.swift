// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Provides the arguments returned by an accelerator key event callback.
public final class WindowsUICore_AcceleratorKeyEventArgs: WindowsRuntime.WinRTImport<WindowsUICore_AcceleratorKeyEventArgsBinding>, WindowsUICore_ICoreWindowEventArgsProtocol, @unchecked Sendable {
    /// The type of the accelerator key event that invoked the callback.
    public var eventType: WindowsUICore_CoreAcceleratorKeyEventType {
        get throws {
            try _interop.get_EventType()
        }
    }

    /// Gets the type of the accelerator key event that invoked the callback.
    public var eventType_: WindowsUICore_CoreAcceleratorKeyEventType {
        try! self.eventType
    }

    /// The status of the accelerator key.
    public var keyStatus: WindowsUICore_CorePhysicalKeyStatus {
        get throws {
            try _interop.get_KeyStatus()
        }
    }

    /// Gets the status of the accelerator key for which the event was raised.
    public var keyStatus_: WindowsUICore_CorePhysicalKeyStatus {
        try! self.keyStatus
    }

    /// The virtual key code of the key that was pressed.
    public var virtualKey: WindowsSystem_VirtualKey {
        get throws {
            try _interop.get_VirtualKey()
        }
    }

    /// Gets the virtual key code for the keypress in the accelerator key event.
    public var virtualKey_: WindowsSystem_VirtualKey {
        try! self.virtualKey
    }

    // MARK: Windows.UI.Core.ICoreWindowEventArgs members

    /// True if the accelerator key event has been handled; false if it has not.
    public var handled: Swift.Bool {
        get throws {
            try _icoreWindowEventArgs.get_Handled()
        }
    }

    /// Sets whether the accelerator key event was handled or not.
    /// - Parameter newValue: True if the accelerator key event has been handled; false if it has not.
    public func handled(_ value: Swift.Bool) throws {
        try _icoreWindowEventArgs.put_Handled(value)
    }

    /// A unique identifier for the input device associated with the key event, or an empty string. The same device can be assigned a different ID each time it is connected.
    public var deviceId: Swift.String {
        get throws {
            try _iacceleratorKeyEventArgs2.get_DeviceId()
        }
    }

    /// Gets a unique ID for the input device that generated this key event.
    public var deviceId_: Swift.String {
        try! self.deviceId
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUICore_IAcceleratorKeyEventArgs>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyICoreWindowEventArgs: COM.COMReference<SWRT_WindowsUICore_ICoreWindowEventArgs>.Optional = .none

    internal var _icoreWindowEventArgs: COM.COMInterop<SWRT_WindowsUICore_ICoreWindowEventArgs> {
        get throws {
            try _lazyICoreWindowEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUICore_ICoreWindowEventArgs.self)).cast()
            }
        }
    }

    private var _lazyIAcceleratorKeyEventArgs2: COM.COMReference<SWRT_WindowsUICore_IAcceleratorKeyEventArgs2>.Optional = .none

    internal var _iacceleratorKeyEventArgs2: COM.COMInterop<SWRT_WindowsUICore_IAcceleratorKeyEventArgs2> {
        get throws {
            try _lazyIAcceleratorKeyEventArgs2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsUICore_IAcceleratorKeyEventArgs2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.Core.AcceleratorKeyEventArgs")
            }
        }
    }
}