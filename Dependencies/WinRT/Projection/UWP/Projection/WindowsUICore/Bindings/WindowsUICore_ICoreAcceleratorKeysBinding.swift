// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsUICore_ICoreAcceleratorKeysBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsUICore_ICoreAcceleratorKeys
    public typealias ABIStruct = SWRT_WindowsUICore_ICoreAcceleratorKeys

    public static let typeName = "Windows.UI.Core.ICoreAcceleratorKeys"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsUICore_ICoreAcceleratorKeysBinding>, WindowsUICore_ICoreAcceleratorKeysProtocol {
        @discardableResult
        public func acceleratorKeyActivated(adding handler: WindowsFoundation_TypedEventHandler<WindowsUICore_CoreDispatcher?, WindowsUICore_AcceleratorKeyEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
            let _token = try _interop.add_AcceleratorKeyActivated(handler)
            return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).acceleratorKeyActivated(removing: token) })
        }

        public func acceleratorKeyActivated(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
            try _interop.remove_AcceleratorKeyActivated(cookie)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsUICore_ICoreAcceleratorKeys_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        add_AcceleratorKeyActivated: { this, handler, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let handler_swift = WindowsFoundation_TypedEventHandlerBinding.CoreDispatcher_AcceleratorKeyEventArgs.fromABI(handler)
            let _result_swift = try this.acceleratorKeyActivated(adding: handler_swift).token
            _result.pointee = WindowsRuntime.EventRegistrationToken.toABI(_result_swift)
        } },
        remove_AcceleratorKeyActivated: { this, cookie in _implement(this) { this in
            let cookie_swift = WindowsRuntime.EventRegistrationToken.fromABI(cookie)
            try this.acceleratorKeyActivated(removing: cookie_swift)
        } }
    )
}