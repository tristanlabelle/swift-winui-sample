// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsUICore_IdleDispatchedHandlerBinding: WindowsRuntime.DelegateBinding {
    public typealias SwiftObject = WindowsUICore_IdleDispatchedHandler
    public typealias ABIStruct = SWRT_WindowsUICore_IdleDispatchedHandler

    public static let typeName = "Windows.UI.Core.IIdleDispatchedHandler"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static var ireferenceID: COM.COMInterfaceID {
        COMInterfaceID(0xE810CC18, 0x036B, 0x57B1, 0x9E5A, 0x6C20051B64F3)
    }

    public static var ireferenceArrayID: COM.COMInterfaceID {
        COMInterfaceID(0x90B74F14, 0x93F5, 0x51D8, 0x99EB, 0x0F1C79A70531)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference).invoke
    }

    public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
        ExportedDelegate<Self>(object).toCOM()
    }

    private final class Import: COMImport<WindowsUICore_IdleDispatchedHandlerBinding> {
        public func invoke(_ e: WindowsUICore_IdleDispatchedHandlerArgs?) throws {
            try _interop.invoke(e)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsUICore_IdleDispatchedHandler_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        Invoke: { this, e in _implement(this) { this in
            let e_swift = WindowsUICore_IdleDispatchedHandlerArgsBinding.fromABI(e)
            try this(e_swift)
        } }
    )
}