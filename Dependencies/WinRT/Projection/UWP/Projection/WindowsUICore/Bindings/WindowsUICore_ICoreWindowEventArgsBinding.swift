// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsUICore_ICoreWindowEventArgsBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsUICore_ICoreWindowEventArgs
    public typealias ABIStruct = SWRT_WindowsUICore_ICoreWindowEventArgs

    public static let typeName = "Windows.UI.Core.ICoreWindowEventArgs"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsUICore_ICoreWindowEventArgsBinding>, WindowsUICore_ICoreWindowEventArgsProtocol {
        public var handled: Swift.Bool {
            get throws {
                try _interop.get_Handled()
            }
        }

        public func handled(_ value: Swift.Bool) throws {
            try _interop.put_Handled(value)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsUICore_ICoreWindowEventArgs_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_Handled: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.handled
        } },
        put_Handled: { this, value in _implement(this) { this in
            try this.handled(value)
        } }
    )
}