// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Provides methods for switching to an app view in response to an activation.
public final class WindowsUIViewManagement_ActivationViewSwitcher: WindowsRuntime.WinRTImport<WindowsUIViewManagement_ActivationViewSwitcherBinding>, @unchecked Sendable {
    /// Shows the view in a new standalone window.
    /// - Parameter viewId: The identifier for the view.
    /// - Returns: The asynchronous results of the operation. Use this to determine when the async call is complete.
    public func showAsStandaloneAsync(_ viewId: Swift.Int32) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.showAsStandaloneAsync(viewId))
    }

    /// Shows the view in a new standalone window and sets the size preference for the view.
    /// - Parameter viewId: The identifier for the view.
    /// - Parameter sizePreference: The preferred size of the view.
    /// - Returns: The asynchronous results of the operation. Use this to determine when the async call is complete.
    public func showAsStandaloneAsync(_ viewId: Swift.Int32, _ sizePreference: WindowsUIViewManagement_ViewSizePreference) throws -> WindowsFoundation_IAsyncAction {
        try COM.NullResult.unwrap(_interop.showAsStandaloneWithSizePreferenceAsync(viewId, sizePreference))
    }

    /// Returns a value that indicates whether the specified view is present on the virtual desktop that the activation was initiated on.
    /// - Parameter viewId: The identifier for that view that is being activated.
    /// - Returns: **true** if the view is present on the virtual desktop that the activation was initiated on; otherwise, **false**.
    public func isViewPresentedOnActivationVirtualDesktop(_ viewId: Swift.Int32) throws -> Swift.Bool {
        try _interop.isViewPresentedOnActivationVirtualDesktop(viewId)
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsUIViewManagement_IActivationViewSwitcher>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.UI.ViewManagement.ActivationViewSwitcher")
            }
        }
    }
}