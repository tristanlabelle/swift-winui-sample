// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsUIInput_IPointerPointTransformBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsUIInput_IPointerPointTransform
    public typealias ABIStruct = SWRT_WindowsUIInput_IPointerPointTransform

    public static let typeName = "Windows.UI.Input.IPointerPointTransform"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsUIInput_IPointerPointTransformBinding>, WindowsUIInput_IPointerPointTransformProtocol {
        public func tryTransform(_ inPoint: WindowsFoundation_Point, _ outPoint: inout WindowsFoundation_Point) throws -> Swift.Bool {
            try _interop.tryTransform(inPoint, &outPoint)
        }

        public func transformBounds(_ rect: WindowsFoundation_Rect) throws -> WindowsFoundation_Rect {
            try _interop.transformBounds(rect)
        }

        public var inverse: WindowsUIInput_IPointerPointTransform {
            get throws {
                try COM.NullResult.unwrap(_interop.get_Inverse())
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsUIInput_IPointerPointTransform_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_Inverse: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.inverse)
            _result.pointee = try WindowsUIInput_IPointerPointTransformBinding.toABI(_result_swift)
        } },
        TryTransform: { this, inPoint, outPoint, _result in _implement(this) { this in
            guard let outPoint else { throw COM.COMError.pointer }
            guard let _result else { throw COM.COMError.pointer }
            let inPoint_swift = WindowsFoundation_Point.fromABI(inPoint)
            var outPoint_swift: WindowsFoundation_Point = .init()
            _result.pointee = try this.tryTransform(inPoint_swift, &outPoint_swift)
            outPoint.pointee = WindowsFoundation_Point.toABI(outPoint_swift)
        } },
        TransformBounds: { this, rect, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let rect_swift = WindowsFoundation_Rect.fromABI(rect)
            let _result_swift = try this.transformBounds(rect_swift)
            _result.pointee = WindowsFoundation_Rect.toABI(_result_swift)
        } }
    )
}