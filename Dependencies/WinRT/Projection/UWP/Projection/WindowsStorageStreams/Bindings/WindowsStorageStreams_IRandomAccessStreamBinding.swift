// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsStorageStreams_IRandomAccessStreamBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsStorageStreams_IRandomAccessStream
    public typealias ABIStruct = SWRT_WindowsStorageStreams_IRandomAccessStream

    public static let typeName = "Windows.Storage.Streams.IRandomAccessStream"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsStorageStreams_IRandomAccessStreamBinding>, WindowsStorageStreams_IRandomAccessStreamProtocol {
        public func getInputStreamAt(_ position: Swift.UInt64) throws -> WindowsStorageStreams_IInputStream {
            try COM.NullResult.unwrap(_interop.getInputStreamAt(position))
        }

        public func getOutputStreamAt(_ position: Swift.UInt64) throws -> WindowsStorageStreams_IOutputStream {
            try COM.NullResult.unwrap(_interop.getOutputStreamAt(position))
        }

        public func seek(_ position: Swift.UInt64) throws {
            try _interop.seek(position)
        }

        public func cloneStream() throws -> WindowsStorageStreams_IRandomAccessStream {
            try COM.NullResult.unwrap(_interop.cloneStream())
        }

        public var canRead: Swift.Bool {
            get throws {
                try _interop.get_CanRead()
            }
        }

        public var canWrite: Swift.Bool {
            get throws {
                try _interop.get_CanWrite()
            }
        }

        public var position: Swift.UInt64 {
            get throws {
                try _interop.get_Position()
            }
        }

        public var size: Swift.UInt64 {
            get throws {
                try _interop.get_Size()
            }
        }

        public func size(_ value: Swift.UInt64) throws {
            try _interop.put_Size(value)
        }

        // MARK: Windows.Foundation.IClosable members

        public func close() throws {
            try _iclosable.close()
        }

        // MARK: Windows.Storage.Streams.IInputStream members

        public func readAsync(_ buffer: WindowsStorageStreams_IBuffer?, _ count: Swift.UInt32, _ options: WindowsStorageStreams_InputStreamOptions) throws -> WindowsFoundation_IAsyncOperationWithProgress<WindowsStorageStreams_IBuffer?, Swift.UInt32> {
            try COM.NullResult.unwrap(_iinputStream.readAsync(buffer, count, options))
        }

        // MARK: Windows.Storage.Streams.IOutputStream members

        public func writeAsync(_ buffer: WindowsStorageStreams_IBuffer?) throws -> WindowsFoundation_IAsyncOperationWithProgress<Swift.UInt32, Swift.UInt32> {
            try COM.NullResult.unwrap(_ioutputStream.writeAsync(buffer))
        }

        public func flushAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
            try COM.NullResult.unwrap(_ioutputStream.flushAsync())
        }

        // MARK: Implementation boilerplate

        private var _lazyIClosable: COM.COMReference<SWRT_WindowsFoundation_IClosable>.Optional = .none

        internal var _iclosable: COM.COMInterop<SWRT_WindowsFoundation_IClosable> {
            get throws {
                try _lazyIClosable.lazyInitInterop {
                    try _queryInterface(uuidof(SWRT_WindowsFoundation_IClosable.self)).cast()
                }
            }
        }

        private var _lazyIInputStream: COM.COMReference<SWRT_WindowsStorageStreams_IInputStream>.Optional = .none

        internal var _iinputStream: COM.COMInterop<SWRT_WindowsStorageStreams_IInputStream> {
            get throws {
                try _lazyIInputStream.lazyInitInterop {
                    try _queryInterface(uuidof(SWRT_WindowsStorageStreams_IInputStream.self)).cast()
                }
            }
        }

        private var _lazyIOutputStream: COM.COMReference<SWRT_WindowsStorageStreams_IOutputStream>.Optional = .none

        internal var _ioutputStream: COM.COMInterop<SWRT_WindowsStorageStreams_IOutputStream> {
            get throws {
                try _lazyIOutputStream.lazyInitInterop {
                    try _queryInterface(uuidof(SWRT_WindowsStorageStreams_IOutputStream.self)).cast()
                }
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsStorageStreams_IRandomAccessStream_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_Size: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.size
        } },
        put_Size: { this, value in _implement(this) { this in
            try this.size(value)
        } },
        GetInputStreamAt: { this, position, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getInputStreamAt(position))
            _result.pointee = try WindowsStorageStreams_IInputStreamBinding.toABI(_result_swift)
        } },
        GetOutputStreamAt: { this, position, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getOutputStreamAt(position))
            _result.pointee = try WindowsStorageStreams_IOutputStreamBinding.toABI(_result_swift)
        } },
        get_Position: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.position
        } },
        Seek: { this, position in _implement(this) { this in
            try this.seek(position)
        } },
        CloneStream: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.cloneStream())
            _result.pointee = try WindowsStorageStreams_IRandomAccessStreamBinding.toABI(_result_swift)
        } },
        get_CanRead: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.canRead
        } },
        get_CanWrite: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.canWrite
        } }
    )
}