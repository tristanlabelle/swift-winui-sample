// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundationCollections_IVectorViewBinding {
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum StorageFolder: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFolder

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageFolder>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsStorage_StorageFolder?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsStorage_StorageFolder? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsStorage_StorageFolder?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsStorage_StorageFolder?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.StorageFolder> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorage_StorageFolder?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFolder>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFolder> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFolder.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFolder_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsStorage_StorageFolderBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsStorage_StorageFolderBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorage_StorageFolderBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum StorageFile: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFile

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageFile>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsStorage_StorageFile?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsStorage_StorageFile? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsStorage_StorageFile?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsStorage_StorageFile?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.StorageFile> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorage_StorageFile?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFile>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFile> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFile.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageFile_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsStorage_StorageFileBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsStorage_StorageFileBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorage_StorageFileBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.UI.Input.PointerPoint>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum PointerPoint: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsUIInput_PointerPoint?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsUIInput_PointerPoint

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.UI.Input.PointerPoint>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerPoint>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsUIInput_PointerPoint?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsUIInput_PointerPoint? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsUIInput_PointerPoint?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsUIInput_PointerPoint?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Input.PointerPoint> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIInput_PointerPoint?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsUIInput_PointerPoint>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsUIInput_PointerPoint> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsUIInput_PointerPoint.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsUIInput_PointerPoint_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsUIInput_PointerPointBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsUIInput_PointerPointBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIInput_PointerPointBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageLibraryChange>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum StorageLibraryChange: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsStorage_StorageLibraryChange?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageLibraryChange

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageLibraryChange>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageLibraryChange>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsStorage_StorageLibraryChange?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsStorage_StorageLibraryChange? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsStorage_StorageLibraryChange?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsStorage_StorageLibraryChange?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.StorageLibraryChange> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorage_StorageLibraryChange?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageLibraryChange>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageLibraryChange> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageLibraryChange.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorage_StorageLibraryChange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsStorage_StorageLibraryChangeBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsStorage_StorageLibraryChangeBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorage_StorageLibraryChangeBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.Devices.Input.PointerDeviceUsage>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum PointerDeviceUsage: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsDevicesInput_PointerDeviceUsage>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsDevicesInput_PointerDeviceUsage

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.Devices.Input.PointerDeviceUsage>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerDeviceUsage>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsDevicesInput_PointerDeviceUsage

            public func getAt(_ index: Swift.UInt32) throws -> WindowsDevicesInput_PointerDeviceUsage {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsDevicesInput_PointerDeviceUsage, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsDevicesInput_PointerDeviceUsage]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Devices.Input.PointerDeviceUsage> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsDevicesInput_PointerDeviceUsage> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDeviceUsage>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDeviceUsage> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDeviceUsage.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsDevicesInput_PointerDeviceUsage_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = WindowsDevicesInput_PointerDeviceUsage.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsDevicesInput_PointerDeviceUsage.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsDevicesInput_PointerDeviceUsage>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.Storage.Search.SortEntry>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum SortEntry: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsStorageSearch_SortEntry>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorageSearch_SortEntry

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.Storage.Search.SortEntry>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<SortEntry>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsStorageSearch_SortEntry

            public func getAt(_ index: Swift.UInt32) throws -> WindowsStorageSearch_SortEntry {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsStorageSearch_SortEntry, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsStorageSearch_SortEntry]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.Search.SortEntry> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorageSearch_SortEntry> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsStorageSearch_SortEntry>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsStorageSearch_SortEntry> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsStorageSearch_SortEntry.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorageSearch_SortEntry_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsStorageSearch_SortEntry.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsStorageSearch_SortEntry.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorageSearch_SortEntry>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Single>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum Single: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<Swift.Float>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_Float

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Single>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Single>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = Swift.Float

            public func getAt(_ index: Swift.UInt32) throws -> Swift.Float {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: Swift.Float, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [Swift.Float]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Single> members

            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.Float> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_Float>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_Float> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_Float.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_Float_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.getAt(index)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.indexOf(value, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.SingleBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.Devices.Input.PointerDevice>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum PointerDevice: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsDevicesInput_PointerDevice?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsDevicesInput_PointerDevice

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.Devices.Input.PointerDevice>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerDevice>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsDevicesInput_PointerDevice?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsDevicesInput_PointerDevice? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsDevicesInput_PointerDevice?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsDevicesInput_PointerDevice?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Devices.Input.PointerDevice> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsDevicesInput_PointerDevice?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDevice>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDevice> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDevice.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsDevicesInput_PointerDevice_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsDevicesInput_PointerDeviceBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsDevicesInput_PointerDeviceBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsDevicesInput_PointerDeviceBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum IStorageItem: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorage_IStorageItem

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IStorageItem>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsStorage_IStorageItem?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsStorage_IStorageItem? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsStorage_IStorageItem?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsStorage_IStorageItem?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.IStorageItem> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorage_IStorageItem?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_IStorageItem>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_IStorageItem> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_IStorageItem.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsStorage_IStorageItem_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsStorage_IStorageItemBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsStorage_IStorageItemBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorage_IStorageItemBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.UI.Composition.CompositionShape>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum CompositionShape: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsUIComposition_CompositionShape?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsUIComposition_CompositionShape

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.UI.Composition.CompositionShape>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionShape>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsUIComposition_CompositionShape?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsUIComposition_CompositionShape? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsUIComposition_CompositionShape?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsUIComposition_CompositionShape?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionShape> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionShape?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionShape>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionShape> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionShape.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsUIComposition_CompositionShape_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsUIComposition_CompositionShapeBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsUIComposition_CompositionShapeBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionShapeBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.Foundation.IWwwFormUrlDecoderEntry>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum IWwwFormUrlDecoderEntry: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsFoundation_IWwwFormUrlDecoderEntry?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsFoundation_IWwwFormUrlDecoderEntry

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.Foundation.IWwwFormUrlDecoderEntry>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IWwwFormUrlDecoderEntry>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsFoundation_IWwwFormUrlDecoderEntry?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsFoundation_IWwwFormUrlDecoderEntry? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsFoundation_IWwwFormUrlDecoderEntry?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsFoundation_IWwwFormUrlDecoderEntry?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.IWwwFormUrlDecoderEntry> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundation_IWwwFormUrlDecoderEntry?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_IWwwFormUrlDecoderEntry>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_IWwwFormUrlDecoderEntry> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_IWwwFormUrlDecoderEntry.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsFoundation_IWwwFormUrlDecoderEntry_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsFoundation_IWwwFormUrlDecoderEntryBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsFoundation_IWwwFormUrlDecoderEntryBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundation_IWwwFormUrlDecoderEntryBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.UI.Composition.CompositionColorGradientStop>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum CompositionColorGradientStop: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsUIComposition_CompositionColorGradientStop?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsUIComposition_CompositionColorGradientStop

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.UI.Composition.CompositionColorGradientStop>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionColorGradientStop>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsUIComposition_CompositionColorGradientStop?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsUIComposition_CompositionColorGradientStop? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsUIComposition_CompositionColorGradientStop?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsUIComposition_CompositionColorGradientStop?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionColorGradientStop> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionColorGradientStop?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionColorGradientStop>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionColorGradientStop> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionColorGradientStop.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsUIComposition_CompositionColorGradientStop_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsUIComposition_CompositionColorGradientStopBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsUIComposition_CompositionColorGradientStopBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionColorGradientStopBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<String>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_String

        public static let typeName = "Windows.Foundation.Collections.IVectorView<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = Swift.String

            public func getAt(_ index: Swift.UInt32) throws -> Swift.String {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: Swift.String, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [Swift.String]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<String> members

            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.String> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_String>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_String> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_String.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsRuntime.StringBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.System.UserWatcherUpdateKind>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum UserWatcherUpdateKind: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsSystem_UserWatcherUpdateKind>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsSystem_UserWatcherUpdateKind

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.System.UserWatcherUpdateKind>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<UserWatcherUpdateKind>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsSystem_UserWatcherUpdateKind

            public func getAt(_ index: Swift.UInt32) throws -> WindowsSystem_UserWatcherUpdateKind {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsSystem_UserWatcherUpdateKind, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsSystem_UserWatcherUpdateKind]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.System.UserWatcherUpdateKind> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsSystem_UserWatcherUpdateKind> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_UserWatcherUpdateKind>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_UserWatcherUpdateKind> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_UserWatcherUpdateKind.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsSystem_UserWatcherUpdateKind_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = WindowsSystem_UserWatcherUpdateKind.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsSystem_UserWatcherUpdateKind.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsSystem_UserWatcherUpdateKind>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.UI.Notifications.ShownTileNotification>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum ShownTileNotification: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsUINotifications_ShownTileNotification?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsUINotifications_ShownTileNotification

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.UI.Notifications.ShownTileNotification>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ShownTileNotification>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsUINotifications_ShownTileNotification?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsUINotifications_ShownTileNotification? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsUINotifications_ShownTileNotification?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsUINotifications_ShownTileNotification?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Notifications.ShownTileNotification> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUINotifications_ShownTileNotification?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsUINotifications_ShownTileNotification>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsUINotifications_ShownTileNotification> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsUINotifications_ShownTileNotification.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsUINotifications_ShownTileNotification_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsUINotifications_ShownTileNotificationBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsUINotifications_ShownTileNotificationBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUINotifications_ShownTileNotificationBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.System.User>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum User: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsSystem_User?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsSystem_User

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.System.User>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<User>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsSystem_User?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsSystem_User? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsSystem_User?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsSystem_User?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.System.User> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsSystem_User?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_User>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_User> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_User.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsSystem_User_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsSystem_UserBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsSystem_UserBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsSystem_UserBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum TextSegment: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<WindowsDataText_TextSegment>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_WindowsDataText_TextSegment

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TextSegment>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = WindowsDataText_TextSegment

            public func getAt(_ index: Swift.UInt32) throws -> WindowsDataText_TextSegment {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: WindowsDataText_TextSegment, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsDataText_TextSegment]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Data.Text.TextSegment> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsDataText_TextSegment> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsDataText_TextSegment>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsDataText_TextSegment> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsDataText_TextSegment.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_WindowsDataText_TextSegment_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = WindowsDataText_TextSegment.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsDataText_TextSegment.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsDataText_TextSegment>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}