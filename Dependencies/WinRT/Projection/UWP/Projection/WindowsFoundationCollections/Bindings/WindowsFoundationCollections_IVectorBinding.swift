// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundationCollections_IVectorBinding {
}

// MARK: Windows.Foundation.Collections.IVector<Windows.UI.Composition.CompositionColorGradientStop>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum CompositionColorGradientStop: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<WindowsUIComposition_CompositionColorGradientStop?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_WindowsUIComposition_CompositionColorGradientStop

        public static let typeName = "Windows.Foundation.Collections.IVector<Windows.UI.Composition.CompositionColorGradientStop>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionColorGradientStop>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = WindowsUIComposition_CompositionColorGradientStop?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsUIComposition_CompositionColorGradientStop? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<WindowsUIComposition_CompositionColorGradientStop?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: WindowsUIComposition_CompositionColorGradientStop?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: WindowsUIComposition_CompositionColorGradientStop?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: WindowsUIComposition_CompositionColorGradientStop?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: WindowsUIComposition_CompositionColorGradientStop?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsUIComposition_CompositionColorGradientStop?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [WindowsUIComposition_CompositionColorGradientStop?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionColorGradientStop> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionColorGradientStop?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionColorGradientStop>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionColorGradientStop> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionColorGradientStop.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_WindowsUIComposition_CompositionColorGradientStop_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsUIComposition_CompositionColorGradientStopBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.CompositionColorGradientStop.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsUIComposition_CompositionColorGradientStopBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsUIComposition_CompositionColorGradientStopBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsUIComposition_CompositionColorGradientStopBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = WindowsUIComposition_CompositionColorGradientStopBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionColorGradientStopBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionColorGradientStopBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<String>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_String

        public static let typeName = "Windows.Foundation.Collections.IVector<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = Swift.String

            public func getAt(_ index: Swift.UInt32) throws -> Swift.String {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<Swift.String> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: Swift.String, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: Swift.String) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: Swift.String) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: Swift.String) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [Swift.String]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [Swift.String]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<String> members

            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.String> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_String>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_String> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_String.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.String.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsRuntime.StringBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsRuntime.StringBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsRuntime.StringBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = WindowsRuntime.StringBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Windows.Storage.Search.SortEntry>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum SortEntry: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<WindowsStorageSearch_SortEntry>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_WindowsStorageSearch_SortEntry

        public static let typeName = "Windows.Foundation.Collections.IVector<Windows.Storage.Search.SortEntry>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<SortEntry>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = WindowsStorageSearch_SortEntry

            public func getAt(_ index: Swift.UInt32) throws -> WindowsStorageSearch_SortEntry {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<WindowsStorageSearch_SortEntry> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: WindowsStorageSearch_SortEntry, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: WindowsStorageSearch_SortEntry) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: WindowsStorageSearch_SortEntry) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: WindowsStorageSearch_SortEntry) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsStorageSearch_SortEntry]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [WindowsStorageSearch_SortEntry]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.Search.SortEntry> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorageSearch_SortEntry> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsStorageSearch_SortEntry>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsStorageSearch_SortEntry> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsStorageSearch_SortEntry.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_WindowsStorageSearch_SortEntry_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsStorageSearch_SortEntry.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.SortEntry.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsStorageSearch_SortEntry.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsStorageSearch_SortEntry.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsStorageSearch_SortEntry.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = WindowsStorageSearch_SortEntry.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorageSearch_SortEntry>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorageSearch_SortEntry>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Windows.UI.Composition.CompositionShape>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum CompositionShape: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<WindowsUIComposition_CompositionShape?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_WindowsUIComposition_CompositionShape

        public static let typeName = "Windows.Foundation.Collections.IVector<Windows.UI.Composition.CompositionShape>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionShape>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = WindowsUIComposition_CompositionShape?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsUIComposition_CompositionShape? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<WindowsUIComposition_CompositionShape?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: WindowsUIComposition_CompositionShape?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: WindowsUIComposition_CompositionShape?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: WindowsUIComposition_CompositionShape?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: WindowsUIComposition_CompositionShape?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsUIComposition_CompositionShape?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [WindowsUIComposition_CompositionShape?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionShape> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionShape?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionShape>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionShape> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionShape.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_WindowsUIComposition_CompositionShape_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsUIComposition_CompositionShapeBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.CompositionShape.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsUIComposition_CompositionShapeBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsUIComposition_CompositionShapeBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsUIComposition_CompositionShapeBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = WindowsUIComposition_CompositionShapeBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionShapeBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionShapeBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Windows.UI.Input.PointerPoint>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum PointerPoint: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<WindowsUIInput_PointerPoint?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_WindowsUIInput_PointerPoint

        public static let typeName = "Windows.Foundation.Collections.IVector<Windows.UI.Input.PointerPoint>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerPoint>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = WindowsUIInput_PointerPoint?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsUIInput_PointerPoint? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<WindowsUIInput_PointerPoint?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: WindowsUIInput_PointerPoint?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: WindowsUIInput_PointerPoint?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: WindowsUIInput_PointerPoint?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: WindowsUIInput_PointerPoint?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsUIInput_PointerPoint?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [WindowsUIInput_PointerPoint?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Input.PointerPoint> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIInput_PointerPoint?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsUIInput_PointerPoint>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsUIInput_PointerPoint> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsUIInput_PointerPoint.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_WindowsUIInput_PointerPoint_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsUIInput_PointerPointBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.PointerPoint.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsUIInput_PointerPointBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsUIInput_PointerPointBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsUIInput_PointerPointBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = WindowsUIInput_PointerPointBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIInput_PointerPointBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIInput_PointerPointBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Single>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum Single: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<Swift.Float>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_Float

        public static let typeName = "Windows.Foundation.Collections.IVector<Single>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Single>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = Swift.Float

            public func getAt(_ index: Swift.UInt32) throws -> Swift.Float {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<Swift.Float> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: Swift.Float, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: Swift.Float) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: Swift.Float) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: Swift.Float) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [Swift.Float]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [Swift.Float]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Single> members

            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.Float> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_Float>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_Float> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_Float.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_Float_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.getAt(index)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.Single.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.indexOf(value, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                try this.setAt(index, value)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                try this.insertAt(index, value)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                try this.append(value)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.SingleBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.SingleBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}