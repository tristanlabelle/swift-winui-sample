// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundationCollections_IIterableBinding {
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String>>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IKeyValuePair_String_String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_String

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_String>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IKeyValuePair_String_String.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment>>>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IKeyValuePair_String_IVectorView_TextSegment: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsFoundationCollections_IVectorView<WindowsDataText_TextSegment>?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVectorView_WindowsDataText_TextSegment

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment>>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_IVectorView_TextSegment>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsFoundationCollections_IVectorView<WindowsDataText_TextSegment>?>?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVectorView_WindowsDataText_TextSegment_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IKeyValuePair_String_IVectorView_TextSegment.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Windows.Storage.Streams.RandomAccessStreamReference>>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IKeyValuePair_String_RandomAccessStreamReference: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsStorageStreams_RandomAccessStreamReference

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Windows.Storage.Streams.RandomAccessStreamReference>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_RandomAccessStreamReference>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsStorageStreams_RandomAccessStreamReference_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IKeyValuePair_String_RandomAccessStreamReference.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionShape>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionShape: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsUIComposition_CompositionShape?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionShape

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionShape>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionShape>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionShape?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionShape_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionShape.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionColorGradientStop>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionColorGradientStop: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsUIComposition_CompositionColorGradientStop?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionColorGradientStop

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionColorGradientStop>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionColorGradientStop>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionColorGradientStop?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionColorGradientStop_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionColorGradientStop.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.StorageFile>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum StorageFile: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsStorage_StorageFile?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFile

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Storage.StorageFile>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageFile>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorage_StorageFile?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFile_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.StorageFile.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Input.PointerPoint>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum PointerPoint: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsUIInput_PointerPoint?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsUIInput_PointerPoint

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.UI.Input.PointerPoint>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerPoint>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIInput_PointerPoint?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsUIInput_PointerPoint_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.PointerPoint.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.Visual>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum Visual: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsUIComposition_Visual?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_Visual

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.UI.Composition.Visual>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Visual>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_Visual?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_Visual_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.Visual.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Devices.Input.PointerDevice>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum PointerDevice: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsDevicesInput_PointerDevice?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDevice

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Devices.Input.PointerDevice>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerDevice>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsDevicesInput_PointerDevice?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDevice_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.PointerDevice.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Notifications.ShownTileNotification>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum ShownTileNotification: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsUINotifications_ShownTileNotification?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsUINotifications_ShownTileNotification

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.UI.Notifications.ShownTileNotification>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ShownTileNotification>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUINotifications_ShownTileNotification?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsUINotifications_ShownTileNotification_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.ShownTileNotification.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Devices.Input.PointerDeviceUsage>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum PointerDeviceUsage: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsDevicesInput_PointerDeviceUsage>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDeviceUsage

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Devices.Input.PointerDeviceUsage>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerDeviceUsage>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsDevicesInput_PointerDeviceUsage> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsDevicesInput_PointerDeviceUsage_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.PointerDeviceUsage.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.StorageFolder>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum StorageFolder: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsStorage_StorageFolder?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFolder

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Storage.StorageFolder>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageFolder>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorage_StorageFolder?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageFolder_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.StorageFolder.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.Search.SortEntry>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum SortEntry: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsStorageSearch_SortEntry>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsStorageSearch_SortEntry

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Storage.Search.SortEntry>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<SortEntry>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorageSearch_SortEntry> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsStorageSearch_SortEntry_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.SortEntry.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.System.User>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum User: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsSystem_User?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_User

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.System.User>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<User>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsSystem_User?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_User_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.User.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Windows.UI.Composition.ICompositionAnimationBase>>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IKeyValuePair_String_ICompositionAnimationBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsUIComposition_ICompositionAnimationBase?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsUIComposition_ICompositionAnimationBase

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Windows.UI.Composition.ICompositionAnimationBase>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_ICompositionAnimationBase>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsUIComposition_ICompositionAnimationBase?>?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_WindowsUIComposition_ICompositionAnimationBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IKeyValuePair_String_ICompositionAnimationBase.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Data.Text.TextSegment>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum TextSegment: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsDataText_TextSegment>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsDataText_TextSegment

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Data.Text.TextSegment>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TextSegment>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsDataText_TextSegment> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsDataText_TextSegment_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.TextSegment.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.System.UserWatcherUpdateKind>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum UserWatcherUpdateKind: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsSystem_UserWatcherUpdateKind>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_UserWatcherUpdateKind

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.System.UserWatcherUpdateKind>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<UserWatcherUpdateKind>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsSystem_UserWatcherUpdateKind> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsSystem_UserWatcherUpdateKind_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.UserWatcherUpdateKind.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Single>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum Single: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<Swift.Float>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_Float

        public static let typeName = "Windows.Foundation.Collections.IIterable<Single>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Single>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.Float> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_Float_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.Single.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionProjectedShadowReceiver>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionProjectedShadowReceiver: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsUIComposition_CompositionProjectedShadowReceiver?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionProjectedShadowReceiver

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionProjectedShadowReceiver>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionProjectedShadowReceiver>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionProjectedShadowReceiver?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionProjectedShadowReceiver_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionProjectedShadowReceiver.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<String>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_String

        public static let typeName = "Windows.Foundation.Collections.IIterable<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.String> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.String.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.IWwwFormUrlDecoderEntry>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IWwwFormUrlDecoderEntry: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundation_IWwwFormUrlDecoderEntry?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_IWwwFormUrlDecoderEntry

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.IWwwFormUrlDecoderEntry>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IWwwFormUrlDecoderEntry>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundation_IWwwFormUrlDecoderEntry?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_IWwwFormUrlDecoderEntry_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IWwwFormUrlDecoderEntry.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.IStorageItem>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IStorageItem: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsStorage_IStorageItem?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_IStorageItem

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Storage.IStorageItem>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IStorageItem>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorage_IStorageItem?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_IStorageItem_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IStorageItem.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Storage.StorageLibraryChange>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum StorageLibraryChange: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsStorage_StorageLibraryChange?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageLibraryChange

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Storage.StorageLibraryChange>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageLibraryChange>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsStorage_StorageLibraryChange?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsStorage_StorageLibraryChange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.StorageLibraryChange.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Object>>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IKeyValuePair_String_Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_IInspectable

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Object>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_Object>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IKeyValuePair_String_Object.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionAnimation>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionAnimation: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsUIComposition_CompositionAnimation?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionAnimation

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionAnimation>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionAnimation>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionAnimation?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionAnimation_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionAnimation.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionProjectedShadowCaster>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionProjectedShadowCaster: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsUIComposition_CompositionProjectedShadowCaster?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionProjectedShadowCaster

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.UI.Composition.CompositionProjectedShadowCaster>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionProjectedShadowCaster>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionProjectedShadowCaster?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsUIComposition_CompositionProjectedShadowCaster_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionProjectedShadowCaster.toABI(_result_swift)
            } }
        )
    }
}