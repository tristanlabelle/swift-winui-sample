// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundationCollections_IIteratorBinding {
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.System.User>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum User: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsSystem_User?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsSystem_User

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.System.User>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<User>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsSystem_User?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsSystem_User? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsSystem_User_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsSystem_UserBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsSystem_UserBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Storage.Search.SortEntry>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum SortEntry: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsStorageSearch_SortEntry>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsStorageSearch_SortEntry

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Storage.Search.SortEntry>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<SortEntry>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsStorageSearch_SortEntry]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsStorageSearch_SortEntry {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsStorageSearch_SortEntry_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsStorageSearch_SortEntry.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorageSearch_SortEntry>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.IWwwFormUrlDecoderEntry>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IWwwFormUrlDecoderEntry: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundation_IWwwFormUrlDecoderEntry?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundation_IWwwFormUrlDecoderEntry

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.IWwwFormUrlDecoderEntry>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IWwwFormUrlDecoderEntry>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundation_IWwwFormUrlDecoderEntry?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundation_IWwwFormUrlDecoderEntry? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundation_IWwwFormUrlDecoderEntry_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundation_IWwwFormUrlDecoderEntryBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundation_IWwwFormUrlDecoderEntryBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Storage.StorageFolder>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum StorageFolder: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsStorage_StorageFolder?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsStorage_StorageFolder

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Storage.StorageFolder>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageFolder>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsStorage_StorageFolder?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsStorage_StorageFolder? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsStorage_StorageFolder_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsStorage_StorageFolderBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorage_StorageFolderBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Data.Text.TextSegment>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum TextSegment: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsDataText_TextSegment>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsDataText_TextSegment

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Data.Text.TextSegment>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TextSegment>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsDataText_TextSegment]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsDataText_TextSegment {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsDataText_TextSegment_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = WindowsDataText_TextSegment.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsDataText_TextSegment>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Devices.Input.PointerDevice>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum PointerDevice: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsDevicesInput_PointerDevice?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsDevicesInput_PointerDevice

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Devices.Input.PointerDevice>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerDevice>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsDevicesInput_PointerDevice?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsDevicesInput_PointerDevice? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsDevicesInput_PointerDevice_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsDevicesInput_PointerDeviceBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsDevicesInput_PointerDeviceBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionColorGradientStop>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionColorGradientStop: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionColorGradientStop?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionColorGradientStop

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionColorGradientStop>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionColorGradientStop>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsUIComposition_CompositionColorGradientStop?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsUIComposition_CompositionColorGradientStop? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionColorGradientStop_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsUIComposition_CompositionColorGradientStopBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionColorGradientStopBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Windows.Storage.Streams.RandomAccessStreamReference>>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IKeyValuePair_String_RandomAccessStreamReference: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_WindowsStorageStreams_RandomAccessStreamReference

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Windows.Storage.Streams.RandomAccessStreamReference>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_RandomAccessStreamReference>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_WindowsStorageStreams_RandomAccessStreamReference_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundationCollections_IKeyValuePairBinding.String_RandomAccessStreamReference.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.String_RandomAccessStreamReference>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.UI.Notifications.ShownTileNotification>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum ShownTileNotification: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsUINotifications_ShownTileNotification?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsUINotifications_ShownTileNotification

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.UI.Notifications.ShownTileNotification>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ShownTileNotification>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsUINotifications_ShownTileNotification?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsUINotifications_ShownTileNotification? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsUINotifications_ShownTileNotification_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsUINotifications_ShownTileNotificationBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUINotifications_ShownTileNotificationBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Single>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Single: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<Swift.Float>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_Float

        public static let typeName = "Windows.Foundation.Collections.IIterator<Single>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Single>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [Swift.Float]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: Swift.Float {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_Float_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.current
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.SingleBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, String>>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IKeyValuePair_String_String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_String

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, String>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_String>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundationCollections_IKeyValuePairBinding.String_String.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.String_String>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment>>>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IKeyValuePair_String_IVectorView_TextSegment: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsFoundationCollections_IVectorView<WindowsDataText_TextSegment>?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVectorView_WindowsDataText_TextSegment

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment>>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_IVectorView_TextSegment>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsFoundationCollections_IVectorView<WindowsDataText_TextSegment>?>?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsFoundationCollections_IVectorView<WindowsDataText_TextSegment>?>? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVectorView_WindowsDataText_TextSegment_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundationCollections_IKeyValuePairBinding.String_IVectorView_TextSegment.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.String_IVectorView_TextSegment>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Devices.Input.PointerDeviceUsage>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum PointerDeviceUsage: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsDevicesInput_PointerDeviceUsage>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsDevicesInput_PointerDeviceUsage

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Devices.Input.PointerDeviceUsage>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerDeviceUsage>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsDevicesInput_PointerDeviceUsage]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsDevicesInput_PointerDeviceUsage {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsDevicesInput_PointerDeviceUsage_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = WindowsDevicesInput_PointerDeviceUsage.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsDevicesInput_PointerDeviceUsage>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<String>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_String

        public static let typeName = "Windows.Foundation.Collections.IIterator<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [Swift.String]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: Swift.String {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Windows.UI.Composition.ICompositionAnimationBase>>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IKeyValuePair_String_ICompositionAnimationBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsUIComposition_ICompositionAnimationBase?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_WindowsUIComposition_ICompositionAnimationBase

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Windows.UI.Composition.ICompositionAnimationBase>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_ICompositionAnimationBase>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsUIComposition_ICompositionAnimationBase?>?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsUIComposition_ICompositionAnimationBase?>? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_WindowsUIComposition_ICompositionAnimationBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundationCollections_IKeyValuePairBinding.String_ICompositionAnimationBase.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.String_ICompositionAnimationBase>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.UI.Input.PointerPoint>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum PointerPoint: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsUIInput_PointerPoint?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsUIInput_PointerPoint

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.UI.Input.PointerPoint>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerPoint>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsUIInput_PointerPoint?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsUIInput_PointerPoint? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsUIInput_PointerPoint_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsUIInput_PointerPointBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIInput_PointerPointBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionProjectedShadowCaster>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionProjectedShadowCaster: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionProjectedShadowCaster?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionProjectedShadowCaster

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionProjectedShadowCaster>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionProjectedShadowCaster>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsUIComposition_CompositionProjectedShadowCaster?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsUIComposition_CompositionProjectedShadowCaster? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionProjectedShadowCaster_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsUIComposition_CompositionProjectedShadowCasterBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionProjectedShadowCasterBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionProjectedShadowReceiver>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionProjectedShadowReceiver: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionProjectedShadowReceiver?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionProjectedShadowReceiver

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionProjectedShadowReceiver>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionProjectedShadowReceiver>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsUIComposition_CompositionProjectedShadowReceiver?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsUIComposition_CompositionProjectedShadowReceiver? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionProjectedShadowReceiver_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsUIComposition_CompositionProjectedShadowReceiverBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionProjectedShadowReceiverBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Object>>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IKeyValuePair_String_Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_IInspectable

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Object>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_Object>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundationCollections_IKeyValuePairBinding.String_Object.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.String_Object>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionAnimation>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionAnimation: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionAnimation?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionAnimation

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionAnimation>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionAnimation>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsUIComposition_CompositionAnimation?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsUIComposition_CompositionAnimation? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionAnimation_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsUIComposition_CompositionAnimationBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionAnimationBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Storage.StorageLibraryChange>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum StorageLibraryChange: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsStorage_StorageLibraryChange?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsStorage_StorageLibraryChange

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Storage.StorageLibraryChange>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageLibraryChange>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsStorage_StorageLibraryChange?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsStorage_StorageLibraryChange? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsStorage_StorageLibraryChange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsStorage_StorageLibraryChangeBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorage_StorageLibraryChangeBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.System.UserWatcherUpdateKind>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum UserWatcherUpdateKind: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsSystem_UserWatcherUpdateKind>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsSystem_UserWatcherUpdateKind

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.System.UserWatcherUpdateKind>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<UserWatcherUpdateKind>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsSystem_UserWatcherUpdateKind]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsSystem_UserWatcherUpdateKind {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsSystem_UserWatcherUpdateKind_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = WindowsSystem_UserWatcherUpdateKind.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsSystem_UserWatcherUpdateKind>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Storage.IStorageItem>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IStorageItem: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsStorage_IStorageItem?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsStorage_IStorageItem

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Storage.IStorageItem>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IStorageItem>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsStorage_IStorageItem?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsStorage_IStorageItem? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsStorage_IStorageItem_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsStorage_IStorageItemBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorage_IStorageItemBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionShape>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionShape: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsUIComposition_CompositionShape?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionShape

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.UI.Composition.CompositionShape>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionShape>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsUIComposition_CompositionShape?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsUIComposition_CompositionShape? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_CompositionShape_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsUIComposition_CompositionShapeBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_CompositionShapeBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.UI.Composition.Visual>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Visual: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsUIComposition_Visual?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_Visual

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.UI.Composition.Visual>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Visual>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsUIComposition_Visual?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsUIComposition_Visual? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsUIComposition_Visual_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsUIComposition_VisualBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsUIComposition_VisualBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Storage.StorageFile>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum StorageFile: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsStorage_StorageFile?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsStorage_StorageFile

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Storage.StorageFile>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<StorageFile>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsStorage_StorageFile?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsStorage_StorageFile? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsStorage_StorageFile_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsStorage_StorageFileBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsStorage_StorageFileBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}