// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsFoundationCollections_IKeyValuePairBinding {
}

// MARK: Windows.Foundation.Collections.IKeyValuePair<String, Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment>>

extension WindowsFoundationCollections_IKeyValuePairBinding {
    internal enum String_IVectorView_TextSegment: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsFoundationCollections_IVectorView<WindowsDataText_TextSegment>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVectorView_WindowsDataText_TextSegment

        public static let typeName = "Windows.Foundation.Collections.IKeyValuePair<String, Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String_IVectorView_TextSegment>, WindowsFoundationCollections_IKeyValuePairProtocol {
            public var key: Swift.String {
                get throws {
                    try _interop.get_Key()
                }
            }

            public var value: WindowsFoundationCollections_IVectorView<WindowsDataText_TextSegment>? {
                get throws {
                    try _interop.get_Value()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IKeyValuePair_String_WindowsFoundationCollections_IVectorView_WindowsDataText_TextSegment_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Key: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.key
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_Value: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.value
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.TextSegment.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IKeyValuePair<String, Windows.Storage.Streams.RandomAccessStreamReference>

extension WindowsFoundationCollections_IKeyValuePairBinding {
    internal enum String_RandomAccessStreamReference: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsStorageStreams_RandomAccessStreamReference?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IKeyValuePair_String_WindowsStorageStreams_RandomAccessStreamReference

        public static let typeName = "Windows.Foundation.Collections.IKeyValuePair<String, Windows.Storage.Streams.RandomAccessStreamReference>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String_RandomAccessStreamReference>, WindowsFoundationCollections_IKeyValuePairProtocol {
            public var key: Swift.String {
                get throws {
                    try _interop.get_Key()
                }
            }

            public var value: WindowsStorageStreams_RandomAccessStreamReference? {
                get throws {
                    try _interop.get_Value()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IKeyValuePair_String_WindowsStorageStreams_RandomAccessStreamReference_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Key: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.key
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_Value: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.value
                _result.pointee = try WindowsStorageStreams_RandomAccessStreamReferenceBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IKeyValuePair<String, Windows.UI.Composition.ICompositionAnimationBase>

extension WindowsFoundationCollections_IKeyValuePairBinding {
    internal enum String_ICompositionAnimationBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsUIComposition_ICompositionAnimationBase?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IKeyValuePair_String_WindowsUIComposition_ICompositionAnimationBase

        public static let typeName = "Windows.Foundation.Collections.IKeyValuePair<String, Windows.UI.Composition.ICompositionAnimationBase>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String_ICompositionAnimationBase>, WindowsFoundationCollections_IKeyValuePairProtocol {
            public var key: Swift.String {
                get throws {
                    try _interop.get_Key()
                }
            }

            public var value: WindowsUIComposition_ICompositionAnimationBase? {
                get throws {
                    try _interop.get_Value()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IKeyValuePair_String_WindowsUIComposition_ICompositionAnimationBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Key: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.key
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_Value: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.value
                _result.pointee = try WindowsUIComposition_ICompositionAnimationBaseBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IKeyValuePair<String, Object>

extension WindowsFoundationCollections_IKeyValuePairBinding {
    internal enum String_Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IKeyValuePair_String_IInspectable

        public static let typeName = "Windows.Foundation.Collections.IKeyValuePair<String, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String_Object>, WindowsFoundationCollections_IKeyValuePairProtocol {
            public var key: Swift.String {
                get throws {
                    try _interop.get_Key()
                }
            }

            public var value: WindowsRuntime.IInspectable? {
                get throws {
                    try _interop.get_Value()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IKeyValuePair_String_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Key: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.key
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_Value: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.value
                _result.pointee = try WindowsRuntime.IInspectableBinding.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IKeyValuePair<String, String>

extension WindowsFoundationCollections_IKeyValuePairBinding {
    internal enum String_String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IKeyValuePair_String_String

        public static let typeName = "Windows.Foundation.Collections.IKeyValuePair<String, String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String_String>, WindowsFoundationCollections_IKeyValuePairProtocol {
            public var key: Swift.String {
                get throws {
                    try _interop.get_Key()
                }
            }

            public var value: Swift.String {
                get throws {
                    try _interop.get_Value()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IKeyValuePair_String_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Key: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.key
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_Value: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.value
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } }
        )
    }
}