// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Supports the ability to identify the connected pointer devices and determine their capabilities.
public final class WindowsDevicesInput_PointerDevice: WindowsRuntime.WinRTImport<WindowsDevicesInput_PointerDeviceBinding> {
    /// True if the pointer device is integrated; otherwise, false.
    public var isIntegrated: Swift.Bool {
        get throws {
            try _interop.get_IsIntegrated()
        }
    }

    /// Gets a value indicating whether the pointer device is an integrated device. For example, a video display with an integrated touch digitizer compared to an external pen/stylus digitizer.
    public var isIntegrated_: Swift.Bool {
        try! self.isIntegrated
    }

    /// The number of contacts.
    public var maxContacts: Swift.UInt32 {
        get throws {
            try _interop.get_MaxContacts()
        }
    }

    /// Gets a value indicating the maximum number of contacts supported by the input device.
    public var maxContacts_: Swift.UInt32 {
        try! self.maxContacts
    }

    /// The bounding rectangle at 96 dots per inch (dpi).
    public var physicalDeviceRect: WindowsFoundation_Rect {
        get throws {
            try _interop.get_PhysicalDeviceRect()
        }
    }

    /// Gets the coordinates of the bounding rectangle supported by the input device.
    public var physicalDeviceRect_: WindowsFoundation_Rect {
        try! self.physicalDeviceRect
    }

    /// A pointer device type.
    public var pointerDeviceType: WindowsDevicesInput_PointerDeviceType {
        get throws {
            try _interop.get_PointerDeviceType()
        }
    }

    /// Gets the pointer device type.
    public var pointerDeviceType_: WindowsDevicesInput_PointerDeviceType {
        try! self.pointerDeviceType
    }

    /// The screen coordinates, in device-independent pixel (DIP).
    public var screenRect: WindowsFoundation_Rect {
        get throws {
            try _interop.get_ScreenRect()
        }
    }

    /// Gets the screen coordinates that are mapped to the bounding rectangle supported by the input device.
    public var screenRect_: WindowsFoundation_Rect {
        try! self.screenRect
    }

    /// A collection containing the supported pointer device usages.
    public var supportedUsages: WindowsFoundationCollections_IVectorView<WindowsDevicesInput_PointerDeviceUsage> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SupportedUsages())
        }
    }

    /// Gets a collection containing the supported pointer device usages.
    public var supportedUsages_: WindowsFoundationCollections_IVectorView<WindowsDevicesInput_PointerDeviceUsage>! {
        try! NullResult.catch(self.supportedUsages)
    }

    /// The default value is 0.
    public var maxPointersWithZDistance: Swift.UInt32 {
        get throws {
            try _ipointerDevice2.get_MaxPointersWithZDistance()
        }
    }

    /// Gets the maximum number of hover contacts supported by the input device.
    public var maxPointersWithZDistance_: Swift.UInt32 {
        try! self.maxPointersWithZDistance
    }

    /// Gets information about the pointer device associated with the specified input pointer ID.
    /// - Parameter pointerId: The ID of the pointer input.
    /// - Returns: The PointerDevice object that represents the associated pointer device.
    public static func getPointerDevice(_ pointerId: Swift.UInt32) throws -> WindowsDevicesInput_PointerDevice {
        try COM.NullResult.unwrap(_ipointerDeviceStatics.getPointerDevice(pointerId))
    }

    /// Gets information about the pointer devices attached to the system.
    /// - Returns: The collection of PointerDevice objects that represent the pointer devices attached to the system.
    public static func getPointerDevices() throws -> WindowsFoundationCollections_IVectorView<WindowsDevicesInput_PointerDevice?> {
        try COM.NullResult.unwrap(_ipointerDeviceStatics.getPointerDevices())
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsDevicesInput_IPointerDevice>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIPointerDevice2: COM.COMReference<SWRT_WindowsDevicesInput_IPointerDevice2>.Optional = .none

    internal var _ipointerDevice2: COM.COMInterop<SWRT_WindowsDevicesInput_IPointerDevice2> {
        get throws {
            try _lazyIPointerDevice2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsDevicesInput_IPointerDevice2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.Devices.Input.PointerDevice")
            }
        }
    }

    private static var _lazyIPointerDeviceStatics: COM.COMReference<SWRT_WindowsDevicesInput_IPointerDeviceStatics>.Optional = .none

    internal static var _ipointerDeviceStatics: COM.COMInterop<SWRT_WindowsDevicesInput_IPointerDeviceStatics> {
        get throws {
            try _lazyIPointerDeviceStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsDevicesInput_IPointerDeviceStatics.self)).cast()
            }
        }
    }
}