// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// An object of this type is passed to the DataProviderHandler delegate.
public final class WindowsApplicationModelDataTransfer_DataProviderRequest: WindowsRuntime.WinRTImport<WindowsApplicationModelDataTransfer_DataProviderRequestBinding>, @unchecked Sendable {
    /// Returns a DataProviderDeferral object.
    /// - Returns: An data provider deferral object.
    public func getDeferral() throws -> WindowsApplicationModelDataTransfer_DataProviderDeferral {
        try COM.NullResult.unwrap(_interop.getDeferral())
    }

    /// Sets the content of the DataPackage to be shared with a target app.
    /// - Parameter value: The object associated with a particular format in the DataPackage.
    public func setData(_ value: WindowsRuntime.IInspectable?) throws {
        try _interop.setData(value)
    }

    /// The deadline for the delayed rendering operation.
    public var deadline: WindowsFoundation_DateTime {
        get throws {
            try _interop.get_Deadline()
        }
    }

    /// Gets the deadline for finishing a delayed rendering operation. If execution goes beyond that deadline, the results of delayed rendering are ignored.
    public var deadline_: WindowsFoundation_DateTime {
        try! self.deadline
    }

    /// The format id. See StandardDataFormats for more information.
    public var formatId: Swift.String {
        get throws {
            try _interop.get_FormatId()
        }
    }

    /// Specifies the format id.
    public var formatId_: Swift.String {
        try! self.formatId
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataProviderRequest>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.ApplicationModel.DataTransfer.DataProviderRequest")
            }
        }
    }
}