// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsApplicationModelDataTransfer_DataProviderHandlerBinding: WindowsRuntime.DelegateBinding {
    public typealias SwiftObject = WindowsApplicationModelDataTransfer_DataProviderHandler
    public typealias ABIStruct = SWRT_WindowsApplicationModelDataTransfer_DataProviderHandler

    public static let typeName = "Windows.ApplicationModel.DataTransfer.IDataProviderHandler"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static var ireferenceID: COM.COMInterfaceID {
        COMInterfaceID(0x18BCA142, 0x6F7C, 0x58A2, 0x8F2A, 0xB2489E7B7BF6)
    }

    public static var ireferenceArrayID: COM.COMInterfaceID {
        COMInterfaceID(0xA4C49683, 0xBA98, 0x5A63, 0xAF83, 0xAD8F57D6B869)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference).invoke
    }

    public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
        ExportedDelegate<Self>(object).toCOM()
    }

    private final class Import: COMImport<WindowsApplicationModelDataTransfer_DataProviderHandlerBinding> {
        public func invoke(_ request: WindowsApplicationModelDataTransfer_DataProviderRequest?) throws {
            try _interop.invoke(request)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsApplicationModelDataTransfer_DataProviderHandler_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        Invoke: { this, request in _implement(this) { this in
            let request_swift = WindowsApplicationModelDataTransfer_DataProviderRequestBinding.fromABI(request)
            try this(request_swift)
        } }
    )
}