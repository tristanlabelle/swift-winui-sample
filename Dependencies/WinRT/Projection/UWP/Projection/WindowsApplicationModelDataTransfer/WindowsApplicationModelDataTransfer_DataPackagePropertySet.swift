// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Defines a set of properties to use with a DataPackage object.
public final class WindowsApplicationModelDataTransfer_DataPackagePropertySet: WindowsRuntime.WinRTImport<WindowsApplicationModelDataTransfer_DataPackagePropertySetBinding>, WindowsFoundationCollections_IMapProtocol, WindowsFoundationCollections_IIterableProtocol, @unchecked Sendable {
    public typealias K = Swift.String
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?

    /// The Uniform Resource Identifier (URI) of the app in the Windows Store.
    public var applicationListingUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ApplicationListingUri())
        }
    }

    /// Sets the Uniform Resource Identifier (URI) of the app's location in the Windows Store.
    /// - Parameter newValue: The Uniform Resource Identifier (URI) of the app in the Windows Store.
    public func applicationListingUri(_ value: WindowsFoundation_Uri?) throws {
        try _interop.put_ApplicationListingUri(value)
    }

    /// Gets or sets the Uniform Resource Identifier (URI) of the app's location in the Windows Store.
    public var applicationListingUri_: WindowsFoundation_Uri! {
        get {
            try! NullResult.catch(self.applicationListingUri)
        }
        set {
            try! self.applicationListingUri(newValue)
        }
    }

    /// Specifies the name of the app that created the DataPackage object.
    public var applicationName: Swift.String {
        get throws {
            try _interop.get_ApplicationName()
        }
    }

    /// Sets the name of the app that created the DataPackage object.
    /// - Parameter newValue: Specifies the name of the app that created the DataPackage object.
    public func applicationName(_ value: Swift.String) throws {
        try _interop.put_ApplicationName(value)
    }

    /// Gets or sets the name of the app that created the DataPackage object.
    public var applicationName_: Swift.String {
        get {
            try! self.applicationName
        }
        set {
            try! self.applicationName(newValue)
        }
    }

    /// Text that describes the contents of the DataPackage.
    public var description: Swift.String {
        get throws {
            try _interop.get_Description()
        }
    }

    /// Sets text that describes the contents of the DataPackage.
    /// - Parameter newValue: Text that describes the contents of the DataPackage.
    public func description(_ value: Swift.String) throws {
        try _interop.put_Description(value)
    }

    /// Gets or sets text that describes the contents of the DataPackage.
    public var description_: Swift.String {
        get {
            try! self.description
        }
        set {
            try! self.description(newValue)
        }
    }

    /// Contains the types of files stored in the DataPackage object.
    public var fileTypes: WindowsFoundationCollections_IVector<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_FileTypes())
        }
    }

    /// Specifies a vector object that contains the types of files stored in the DataPackage object.
    public var fileTypes_: WindowsFoundationCollections_IVector<Swift.String>! {
        try! NullResult.catch(self.fileTypes)
    }

    /// The IRandomAccessStreamReference that represents the thumbnail image.
    public var thumbnail: WindowsStorageStreams_IRandomAccessStreamReference {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Thumbnail())
        }
    }

    /// Sets a thumbnail image for the DataPackage.
    /// - Parameter newValue: The IRandomAccessStreamReference that represents the thumbnail image.
    public func thumbnail(_ value: WindowsStorageStreams_IRandomAccessStreamReference?) throws {
        try _interop.put_Thumbnail(value)
    }

    /// Gets or sets a thumbnail image for the DataPackage.
    public var thumbnail_: WindowsStorageStreams_IRandomAccessStreamReference! {
        get {
            try! NullResult.catch(self.thumbnail)
        }
        set {
            try! self.thumbnail(newValue)
        }
    }

    /// The text that displays as a title for the contents of the DataPackage object.
    public var title: Swift.String {
        get throws {
            try _interop.get_Title()
        }
    }

    /// Sets the text that displays as a title for the contents of the DataPackage object.
    /// - Parameter newValue: The text that displays as a title for the contents of the DataPackage object.
    public func title(_ value: Swift.String) throws {
        try _interop.put_Title(value)
    }

    /// Gets or sets the text that displays as a title for the contents of the DataPackage object.
    public var title_: Swift.String {
        get {
            try! self.title
        }
        set {
            try! self.title(newValue)
        }
    }

    // MARK: Windows.Foundation.Collections.IMap<String, Object> members

    /// Retrieves the value of a specific property.
    /// - Parameter key: The key.
    /// - Returns: The value, if an item with the specified key exists. Use the **HasKey** method to determine whether the key exists.
    public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
        try _imap.lookup(key)
    }

    /// Indicates whether the DataPackagePropertySet object contains a specific property.
    /// - Parameter key: The key.
    /// - Returns: True if the property set has an item with the specified key; otherwise false.
    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        try _imap.hasKey(key)
    }

    /// Gets an immutable view of the property set.
    /// - Returns: The immutable view.
    public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?> {
        try COM.NullResult.unwrap(_imap.getView())
    }

    /// Adds a property to the DataPackagePropertySet object.
    /// - Parameter key: The key to insert.
    /// - Parameter value: The value to insert.
    /// - Returns: True if the method replaced a value that already existed for the key; false if this is a new key.
    public func insert(_ key: Swift.String, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        try _imap.insert(key, value)
    }

    /// Removes an item from the property set.
    /// - Parameter key: The key.
    public func remove(_ key: Swift.String) throws {
        try _imap.remove(key)
    }

    /// Removes all items from the property set.
    public func clear() throws {
        try _imap.clear()
    }

    /// The number of elements in the property set.
    public var size: Swift.UInt32 {
        get throws {
            try _imap.get_Size()
        }
    }

    // MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Object>> members

    /// Returns an iterator to enumerate the items in the property set.
    /// - Returns: The first item in the DataPackage object.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    /// The Uniform Resource Identifier (URI) of the application link to shared content.
    public var contentSourceApplicationLink: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_idataPackagePropertySet2.get_ContentSourceApplicationLink())
        }
    }

    /// Sets the application link to the content from the source app.
    /// - Parameter newValue: The Uniform Resource Identifier (URI) of the application link to shared content.
    public func contentSourceApplicationLink(_ value: WindowsFoundation_Uri?) throws {
        try _idataPackagePropertySet2.put_ContentSourceApplicationLink(value)
    }

    /// Gets or sets the application link to the content from the source app.
    public var contentSourceApplicationLink_: WindowsFoundation_Uri! {
        get {
            try! NullResult.catch(self.contentSourceApplicationLink)
        }
        set {
            try! self.contentSourceApplicationLink(newValue)
        }
    }

    /// The Uniform Resource Identifier (URI) of the web link to shared content.
    public var contentSourceWebLink: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_idataPackagePropertySet2.get_ContentSourceWebLink())
        }
    }

    /// Provides a web link to shared content that's currently displayed in the app.
    /// - Parameter newValue: The Uniform Resource Identifier (URI) of the web link to shared content.
    public func contentSourceWebLink(_ value: WindowsFoundation_Uri?) throws {
        try _idataPackagePropertySet2.put_ContentSourceWebLink(value)
    }

    /// Provides a web link to shared content that's currently displayed in the app.
    public var contentSourceWebLink_: WindowsFoundation_Uri! {
        get {
            try! NullResult.catch(self.contentSourceWebLink)
        }
        set {
            try! self.contentSourceWebLink(newValue)
        }
    }

    /// The color of the logo's background.
    public var logoBackgroundColor: WindowsUI_Color {
        get throws {
            try _idataPackagePropertySet2.get_LogoBackgroundColor()
        }
    }

    /// Sets a background color for the sharing app's Square30x30Logo.
    /// - Parameter newValue: The color of the logo's background.
    public func logoBackgroundColor(_ value: WindowsUI_Color) throws {
        try _idataPackagePropertySet2.put_LogoBackgroundColor(value)
    }

    /// Gets or sets a background color for the sharing app's Square30x30Logo.
    public var logoBackgroundColor_: WindowsUI_Color {
        get {
            try! self.logoBackgroundColor
        }
        set {
            try! self.logoBackgroundColor(newValue)
        }
    }

    /// The package family name.
    public var packageFamilyName: Swift.String {
        get throws {
            try _idataPackagePropertySet2.get_PackageFamilyName()
        }
    }

    /// Sets the package family name of the source app.
    /// - Parameter newValue: The package family name.
    public func packageFamilyName(_ value: Swift.String) throws {
        try _idataPackagePropertySet2.put_PackageFamilyName(value)
    }

    /// Gets or sets the package family name of the source app.
    public var packageFamilyName_: Swift.String {
        get {
            try! self.packageFamilyName
        }
        set {
            try! self.packageFamilyName(newValue)
        }
    }

    /// The logo's bitmap.
    public var square30x30Logo: WindowsStorageStreams_IRandomAccessStreamReference {
        get throws {
            try COM.NullResult.unwrap(_idataPackagePropertySet2.get_Square30x30Logo())
        }
    }

    /// Sets the source app's logo.
    /// - Parameter newValue: The logo's bitmap.
    public func square30x30Logo(_ value: WindowsStorageStreams_IRandomAccessStreamReference?) throws {
        try _idataPackagePropertySet2.put_Square30x30Logo(value)
    }

    /// Gets or sets the source app's logo.
    public var square30x30Logo_: WindowsStorageStreams_IRandomAccessStreamReference! {
        get {
            try! NullResult.catch(self.square30x30Logo)
        }
        set {
            try! self.square30x30Logo(newValue)
        }
    }

    /// The enterprise Id.
    public var enterpriseId: Swift.String {
        get throws {
            try _idataPackagePropertySet3.get_EnterpriseId()
        }
    }

    /// Sets the enterprise identity (see Enterprise data protection ).
    /// - Parameter newValue: The enterprise Id.
    public func enterpriseId(_ value: Swift.String) throws {
        try _idataPackagePropertySet3.put_EnterpriseId(value)
    }

    /// Gets or sets the enterprise identity (see Enterprise data protection ).
    public var enterpriseId_: Swift.String {
        get {
            try! self.enterpriseId
        }
        set {
            try! self.enterpriseId(newValue)
        }
    }

    /// The UserActivity in serialized JSON format to be shared with another app.
    public var contentSourceUserActivityJson: Swift.String {
        get throws {
            try _idataPackagePropertySet4.get_ContentSourceUserActivityJson()
        }
    }

    /// Sets the UserActivity in serialized JSON format to be shared with another app.
    /// - Parameter newValue: The UserActivity in serialized JSON format to be shared with another app.
    public func contentSourceUserActivityJson(_ value: Swift.String) throws {
        try _idataPackagePropertySet4.put_ContentSourceUserActivityJson(value)
    }

    /// Gets or sets the UserActivity in serialized JSON format to be shared with another app.
    public var contentSourceUserActivityJson_: Swift.String {
        get {
            try! self.contentSourceUserActivityJson
        }
        set {
            try! self.contentSourceUserActivityJson(newValue)
        }
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIMap: COM.COMReference<SWRT_WindowsFoundationCollections_IMap_String_IInspectable>.Optional = .none

    internal var _imap: COM.COMInterop<SWRT_WindowsFoundationCollections_IMap_String_IInspectable> {
        get throws {
            try _lazyIMap.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IMap_String_IInspectable.self)).cast()
            }
        }
    }

    private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_IInspectable>.Optional = .none

    internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_IInspectable> {
        get throws {
            try _lazyIIterable.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_IInspectable.self)).cast()
            }
        }
    }

    private var _lazyIDataPackagePropertySet2: COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet2>.Optional = .none

    internal var _idataPackagePropertySet2: COM.COMInterop<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet2> {
        get throws {
            try _lazyIDataPackagePropertySet2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet2.self)).cast()
            }
        }
    }

    private var _lazyIDataPackagePropertySet3: COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet3>.Optional = .none

    internal var _idataPackagePropertySet3: COM.COMInterop<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet3> {
        get throws {
            try _lazyIDataPackagePropertySet3.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet3.self)).cast()
            }
        }
    }

    private var _lazyIDataPackagePropertySet4: COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet4>.Optional = .none

    internal var _idataPackagePropertySet4: COM.COMInterop<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet4> {
        get throws {
            try _lazyIDataPackagePropertySet4.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySet4.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.ApplicationModel.DataTransfer.DataPackagePropertySet")
            }
        }
    }
}