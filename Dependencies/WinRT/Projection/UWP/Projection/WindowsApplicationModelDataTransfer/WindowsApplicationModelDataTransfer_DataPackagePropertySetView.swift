// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Gets the set of properties of a DataPackageView object.
public final class WindowsApplicationModelDataTransfer_DataPackagePropertySetView: WindowsRuntime.WinRTImport<WindowsApplicationModelDataTransfer_DataPackagePropertySetViewBinding>, WindowsFoundationCollections_IMapViewProtocol, WindowsFoundationCollections_IIterableProtocol, @unchecked Sendable {
    public typealias K = Swift.String
    public typealias V = WindowsRuntime.IInspectable?
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?

    /// The Uniform Resource Identifier (URI) of the app in the Microsoft Store.
    public var applicationListingUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ApplicationListingUri())
        }
    }

    /// Gets the Uniform Resource Identifier (URI) of the app's location in the Microsoft Store.
    public var applicationListingUri_: WindowsFoundation_Uri! {
        try! NullResult.catch(self.applicationListingUri)
    }

    /// The name of the app that created the DataPackage object.
    public var applicationName: Swift.String {
        get throws {
            try _interop.get_ApplicationName()
        }
    }

    /// Gets the name of the app that created the DataPackage object.
    public var applicationName_: Swift.String {
        try! self.applicationName
    }

    /// Text that describes the contents of the DataPackage.
    public var description: Swift.String {
        get throws {
            try _interop.get_Description()
        }
    }

    /// Gets the text that describes the contents of the DataPackage.
    public var description_: Swift.String {
        try! self.description
    }

    /// Contains the types of files stored in the DataPackage object.
    public var fileTypes: WindowsFoundationCollections_IVectorView<Swift.String> {
        get throws {
            try COM.NullResult.unwrap(_interop.get_FileTypes())
        }
    }

    /// Gets a vector object that contains the types of files stored in the DataPackage object.
    public var fileTypes_: WindowsFoundationCollections_IVectorView<Swift.String>! {
        try! NullResult.catch(self.fileTypes)
    }

    /// The IRandomAccessStreamReference that represents the thumbnail image.
    public var thumbnail: WindowsStorageStreams_RandomAccessStreamReference {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Thumbnail())
        }
    }

    /// Gets the thumbnail image for the DataPackageView.
    public var thumbnail_: WindowsStorageStreams_RandomAccessStreamReference! {
        try! NullResult.catch(self.thumbnail)
    }

    /// The text that displays as a title for the contents of the DataPackagePropertySetView object.
    public var title: Swift.String {
        get throws {
            try _interop.get_Title()
        }
    }

    /// Gets the text that displays as a title for the contents of the DataPackagePropertySetView object.
    public var title_: Swift.String {
        try! self.title
    }

    /// The Uniform Resource Identifier (URI) of the application link to shared content.
    public var contentSourceApplicationLink: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_idataPackagePropertySetView2.get_ContentSourceApplicationLink())
        }
    }

    /// Gets the application link to the content from the source app.
    public var contentSourceApplicationLink_: WindowsFoundation_Uri! {
        try! NullResult.catch(self.contentSourceApplicationLink)
    }

    /// The Uniform Resource Identifier (URI) of the web link to shared content.
    public var contentSourceWebLink: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_idataPackagePropertySetView2.get_ContentSourceWebLink())
        }
    }

    /// Gets a web link to shared content that's currently displayed in the app.
    public var contentSourceWebLink_: WindowsFoundation_Uri! {
        try! NullResult.catch(self.contentSourceWebLink)
    }

    /// The background color for the sharing app's Square30x30Logo.
    public var logoBackgroundColor: WindowsUI_Color {
        get throws {
            try _idataPackagePropertySetView2.get_LogoBackgroundColor()
        }
    }

    /// Gets a background color for the sharing app's Square30x30Logo.
    public var logoBackgroundColor_: WindowsUI_Color {
        try! self.logoBackgroundColor
    }

    /// The package family name.
    public var packageFamilyName: Swift.String {
        get throws {
            try _idataPackagePropertySetView2.get_PackageFamilyName()
        }
    }

    /// Gets the package family name of the source app.
    public var packageFamilyName_: Swift.String {
        try! self.packageFamilyName
    }

    /// The logo's bitmap.
    public var square30x30Logo: WindowsStorageStreams_IRandomAccessStreamReference {
        get throws {
            try COM.NullResult.unwrap(_idataPackagePropertySetView2.get_Square30x30Logo())
        }
    }

    /// Gets the source app's logo.
    public var square30x30Logo_: WindowsStorageStreams_IRandomAccessStreamReference! {
        try! NullResult.catch(self.square30x30Logo)
    }

    /// The enterprise Id.
    public var enterpriseId: Swift.String {
        get throws {
            try _idataPackagePropertySetView3.get_EnterpriseId()
        }
    }

    /// Gets or sets the enterprise Id.
    public var enterpriseId_: Swift.String {
        try! self.enterpriseId
    }

    /// The UserActivity in serialized JSON format to be shared with another app.
    public var contentSourceUserActivityJson: Swift.String {
        get throws {
            try _idataPackagePropertySetView4.get_ContentSourceUserActivityJson()
        }
    }

    /// Gets the UserActivity in serialized JSON format to be shared with another app.
    public var contentSourceUserActivityJson_: Swift.String {
        try! self.contentSourceUserActivityJson
    }

    /// True if the shared content in the DataPackageView comes from clipboard data that was synced from another device for the current user; otherwise, false.
    public var isFromRoamingClipboard: Swift.Bool {
        get throws {
            try _idataPackagePropertySetView5.get_IsFromRoamingClipboard()
        }
    }

    /// Gets a value that indicates whether the shared content in the DataPackageView comes from clipboard data that was synced from another device for the current user.
    public var isFromRoamingClipboard_: Swift.Bool {
        try! self.isFromRoamingClipboard
    }

    // MARK: Windows.Foundation.Collections.IMapView<String, Object> members

    /// Retrieves the value of a specific property.
    /// - Parameter key: The key.
    /// - Returns: The value, if an item with the specified key exists. Use the **HasKey** method to determine whether the key exists.
    public func lookup(_ key: Swift.String) throws -> WindowsRuntime.IInspectable? {
        try _imapView.lookup(key)
    }

    /// Indicates whether the DataPackagePropertySetView object contains a specific property.
    /// - Parameter key: The key.
    /// - Returns: True if the property set has an item with the specified key; otherwise false.
    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        try _imapView.hasKey(key)
    }

    public func split(_ first: inout WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>?, _ second: inout WindowsFoundationCollections_IMapView<Swift.String, WindowsRuntime.IInspectable?>?) throws {
        try _imapView.split(&first, &second)
    }

    /// The number of elements in the property set.
    public var size: Swift.UInt32 {
        get throws {
            try _imapView.get_Size()
        }
    }

    // MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Object>> members

    /// Returns an iterator to enumerate the items in the property set.
    /// - Returns: The first item in the DataPackage object.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, WindowsRuntime.IInspectable?>?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIDataPackagePropertySetView2: COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView2>.Optional = .none

    internal var _idataPackagePropertySetView2: COM.COMInterop<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView2> {
        get throws {
            try _lazyIDataPackagePropertySetView2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView2.self)).cast()
            }
        }
    }

    private var _lazyIDataPackagePropertySetView3: COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView3>.Optional = .none

    internal var _idataPackagePropertySetView3: COM.COMInterop<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView3> {
        get throws {
            try _lazyIDataPackagePropertySetView3.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView3.self)).cast()
            }
        }
    }

    private var _lazyIDataPackagePropertySetView4: COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView4>.Optional = .none

    internal var _idataPackagePropertySetView4: COM.COMInterop<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView4> {
        get throws {
            try _lazyIDataPackagePropertySetView4.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView4.self)).cast()
            }
        }
    }

    private var _lazyIDataPackagePropertySetView5: COM.COMReference<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView5>.Optional = .none

    internal var _idataPackagePropertySetView5: COM.COMInterop<SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView5> {
        get throws {
            try _lazyIDataPackagePropertySetView5.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsApplicationModelDataTransfer_IDataPackagePropertySetView5.self)).cast()
            }
        }
    }

    private var _lazyIMapView: COM.COMReference<SWRT_WindowsFoundationCollections_IMapView_String_IInspectable>.Optional = .none

    internal var _imapView: COM.COMInterop<SWRT_WindowsFoundationCollections_IMapView_String_IInspectable> {
        get throws {
            try _lazyIMapView.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IMapView_String_IInspectable.self)).cast()
            }
        }
    }

    private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_IInspectable>.Optional = .none

    internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_IInspectable> {
        get throws {
            try _lazyIIterable.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_IInspectable.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView")
            }
        }
    }
}