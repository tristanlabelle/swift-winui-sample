// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Represents an uncompressed bitmap.
public final class WindowsGraphicsImaging_SoftwareBitmap: WindowsRuntime.WinRTImport<WindowsGraphicsImaging_SoftwareBitmapBinding>, WindowsFoundation_IClosableProtocol, @unchecked Sendable {
    /// Initializes a new instance of the SoftwareBitmap class.
    /// - Parameter format: The pixel format of the new software bitmap.
    /// - Parameter width: The width of the new software bitmap, in pixels.
    /// - Parameter height: The height of the new software bitmap, in pixels.
    public init(_ format: WindowsGraphicsImaging_BitmapPixelFormat, _ width: Swift.Int32, _ height: Swift.Int32) throws {
        let _instance = try Self._isoftwareBitmapFactory.create(format, width, height)
        super.init(_wrapping: consume _instance)
    }

    /// Initializes a new instance of the SoftwareBitmap class.
    /// - Parameter format: The pixel format of the new software bitmap.
    /// - Parameter width: The width of the new software bitmap, in pixels.
    /// - Parameter height: The height of the new software bitmap, in pixels.
    /// - Parameter alpha: The alpha mode of the new software bitmap.
    public init(_ format: WindowsGraphicsImaging_BitmapPixelFormat, _ width: Swift.Int32, _ height: Swift.Int32, _ alpha: WindowsGraphicsImaging_BitmapAlphaMode) throws {
        let _instance = try Self._isoftwareBitmapFactory.createWithAlpha(format, width, height, alpha)
        super.init(_wrapping: consume _instance)
    }

    /// Gets a BitmapBuffer object that allows you to operate directly on the software bitmap's pixel data.
    /// - Parameter mode: A value indicating the access mode of the returned buffer.
    /// - Returns: The buffer containing pixel data.
    public func lockBuffer(_ mode: WindowsGraphicsImaging_BitmapBufferAccessMode) throws -> WindowsGraphicsImaging_BitmapBuffer {
        try COM.NullResult.unwrap(_interop.lockBuffer(mode))
    }

    /// Copies the current SoftwareBitmap into the provided SoftwareBitmap object.
    /// - Parameter bitmap: The target software bitmap into which the data will be copied.
    public func copyTo(_ bitmap: WindowsGraphicsImaging_SoftwareBitmap?) throws {
        try _interop.copyTo(bitmap)
    }

    /// Copies the pixel data from an IBuffer into the SoftwareBitmap.
    /// - Parameter buffer: The buffer containing the pixel data to be copied.
    public func copyFromBuffer(_ buffer: WindowsStorageStreams_IBuffer?) throws {
        try _interop.copyFromBuffer(buffer)
    }

    /// Copies the software bitmap pixel data into the specified IBuffer.
    /// - Parameter buffer: The target buffer to which the pixel data will be copied.
    public func copyToBuffer(_ buffer: WindowsStorageStreams_IBuffer?) throws {
        try _interop.copyToBuffer(buffer)
    }

    /// Gets a read-only representation of the SoftwareBitmap object.
    /// - Returns: A read-only representation of the SoftwareBitmap object.
    public func getReadOnlyView() throws -> WindowsGraphicsImaging_SoftwareBitmap {
        try COM.NullResult.unwrap(_interop.getReadOnlyView())
    }

    /// The alpha mode of the software bitmap.
    public var bitmapAlphaMode: WindowsGraphicsImaging_BitmapAlphaMode {
        get throws {
            try _interop.get_BitmapAlphaMode()
        }
    }

    /// Gets the alpha mode of the software bitmap.
    public var bitmapAlphaMode_: WindowsGraphicsImaging_BitmapAlphaMode {
        try! self.bitmapAlphaMode
    }

    /// The pixel format of the software bitmap.
    public var bitmapPixelFormat: WindowsGraphicsImaging_BitmapPixelFormat {
        get throws {
            try _interop.get_BitmapPixelFormat()
        }
    }

    /// Gets the pixel format of the software bitmap.
    public var bitmapPixelFormat_: WindowsGraphicsImaging_BitmapPixelFormat {
        try! self.bitmapPixelFormat
    }

    /// The dots per inch of the software bitmap in the X direction.
    public var dpiX: Swift.Double {
        get throws {
            try _interop.get_DpiX()
        }
    }

    /// Sets the dots per inch of the software bitmap in the X direction.
    /// - Parameter newValue: The dots per inch of the software bitmap in the X direction.
    public func dpiX(_ value: Swift.Double) throws {
        try _interop.put_DpiX(value)
    }

    /// Gets or sets the dots per inch of the software bitmap in the X direction.
    public var dpiX_: Swift.Double {
        get {
            try! self.dpiX
        }
        set {
            try! self.dpiX(newValue)
        }
    }

    /// The dots per inch of the software bitmap in the Y direction.
    public var dpiY: Swift.Double {
        get throws {
            try _interop.get_DpiY()
        }
    }

    /// Sets the dots per inch of the software bitmap in the Y direction.
    /// - Parameter newValue: The dots per inch of the software bitmap in the Y direction.
    public func dpiY(_ value: Swift.Double) throws {
        try _interop.put_DpiY(value)
    }

    /// Gets or sets the dots per inch of the software bitmap in the Y direction.
    public var dpiY_: Swift.Double {
        get {
            try! self.dpiY
        }
        set {
            try! self.dpiY(newValue)
        }
    }

    /// True if the software bitmap is read-only; otherwise, false.
    public var isReadOnly: Swift.Bool {
        get throws {
            try _interop.get_IsReadOnly()
        }
    }

    /// Gets a value indicating whether the software bitmap can be modified.
    public var isReadOnly_: Swift.Bool {
        try! self.isReadOnly
    }

    /// The height of the software bitmap, in pixels.
    public var pixelHeight: Swift.Int32 {
        get throws {
            try _interop.get_PixelHeight()
        }
    }

    /// Gets the height of the software bitmap, in pixels.
    public var pixelHeight_: Swift.Int32 {
        try! self.pixelHeight
    }

    /// The width of the software bitmap, in pixels.
    public var pixelWidth: Swift.Int32 {
        get throws {
            try _interop.get_PixelWidth()
        }
    }

    /// Gets the width of the software bitmap, in pixels.
    public var pixelWidth_: Swift.Int32 {
        try! self.pixelWidth
    }

    // MARK: Windows.Foundation.IClosable members

    /// Disposes of the object and associated resources.
    public func close() throws {
        try _iclosable.close()
    }

    /// Creates a copy of the provided SoftwareBitmap object.
    /// - Parameter source: The software bitmap to copy.
    /// - Returns: The newly created copy of the software bitmap.
    public static func copy(_ source: WindowsGraphicsImaging_SoftwareBitmap?) throws -> WindowsGraphicsImaging_SoftwareBitmap {
        try COM.NullResult.unwrap(_isoftwareBitmapStatics.copy(source))
    }

    /// Converts an existing SoftwareBitmap to a SoftwareBitmap with a different pixel format.
    /// - Parameter source: The software bitmap to convert.
    /// - Parameter format: The pixel format of the new software bitmap.
    /// - Returns: The converted software bitmap.
    public static func convert(_ source: WindowsGraphicsImaging_SoftwareBitmap?, _ format: WindowsGraphicsImaging_BitmapPixelFormat) throws -> WindowsGraphicsImaging_SoftwareBitmap {
        try COM.NullResult.unwrap(_isoftwareBitmapStatics.convert(source, format))
    }

    /// Converts an existing SoftwareBitmap to a SoftwareBitmap with a different pixel format or alpha mode.
    /// - Parameter source: The software bitmap to convert.
    /// - Parameter format: The pixel format of the new software bitmap.
    /// - Parameter alpha: The alpha mode of the new software bitmap.
    /// - Returns: The converted software bitmap.
    public static func convert(_ source: WindowsGraphicsImaging_SoftwareBitmap?, _ format: WindowsGraphicsImaging_BitmapPixelFormat, _ alpha: WindowsGraphicsImaging_BitmapAlphaMode) throws -> WindowsGraphicsImaging_SoftwareBitmap {
        try COM.NullResult.unwrap(_isoftwareBitmapStatics.convertWithAlpha(source, format, alpha))
    }

    /// Creates a new SoftwareBitmap by performing a deep copy of the provided buffer. Modifications to the data in the new SoftwareBitmap will not effect the buffer from which it was created.
    /// - Parameter source: The source buffer from which the copy will be created.
    /// - Parameter format: The pixel format of the software bitmap.
    /// - Parameter width: The width of the software bitmap, in pixels.
    /// - Parameter height: The height of the software bitmap, in pixels.
    /// - Returns: The new software bitmap.
    public static func createCopyFromBuffer(_ source: WindowsStorageStreams_IBuffer?, _ format: WindowsGraphicsImaging_BitmapPixelFormat, _ width: Swift.Int32, _ height: Swift.Int32) throws -> WindowsGraphicsImaging_SoftwareBitmap {
        try COM.NullResult.unwrap(_isoftwareBitmapStatics.createCopyFromBuffer(source, format, width, height))
    }

    /// Creates a new SoftwareBitmap by performing a deep copy of the provided buffer. Modifications to the data in the new SoftwareBitmap will not effect the buffer from which it was created.
    /// - Parameter source: The source buffer from which the copy will be created.
    /// - Parameter format: The pixel format of the software bitmap.
    /// - Parameter width: The width of the software bitmap, in pixels.
    /// - Parameter height: The height of the software bitmap, in pixels.
    /// - Parameter alpha: The alpha mode of the software bitmap.
    /// - Returns: The new software bitmap.
    public static func createCopyFromBuffer(_ source: WindowsStorageStreams_IBuffer?, _ format: WindowsGraphicsImaging_BitmapPixelFormat, _ width: Swift.Int32, _ height: Swift.Int32, _ alpha: WindowsGraphicsImaging_BitmapAlphaMode) throws -> WindowsGraphicsImaging_SoftwareBitmap {
        try COM.NullResult.unwrap(_isoftwareBitmapStatics.createCopyWithAlphaFromBuffer(source, format, width, height, alpha))
    }

    /// Asynchronously creates a new SoftwareBitmap by performing a deep copy of the provided IDirect3DSurface. Modifications to the data in the new SoftwareBitmap will not effect the surface from which it was created.
    /// - Parameter surface: The source surface from which the copy will be created.
    /// - Returns: An asynchronous operation that returns a SoftwareBitmap on successful completion.
    public static func createCopyFromSurfaceAsync(_ surface: WindowsGraphicsDirectXDirect3D11_IDirect3DSurface?) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_SoftwareBitmap?> {
        try COM.NullResult.unwrap(_isoftwareBitmapStatics.createCopyFromSurfaceAsync(surface))
    }

    /// Asynchronously creates a new SoftwareBitmap by performing a deep copy of the provided IDirect3DSurface . Modifications to the data in the new SoftwareBitmap will not effect the surface from which it was created.
    /// - Parameter surface: The source surface from which the copy will be created.
    /// - Parameter alpha: The alpha mode of the software bitmap.
    /// - Returns: An asynchronous operation that returns a SoftwareBitmap on successful completion.
    public static func createCopyFromSurfaceAsync(_ surface: WindowsGraphicsDirectXDirect3D11_IDirect3DSurface?, _ alpha: WindowsGraphicsImaging_BitmapAlphaMode) throws -> WindowsFoundation_IAsyncOperation<WindowsGraphicsImaging_SoftwareBitmap?> {
        try COM.NullResult.unwrap(_isoftwareBitmapStatics.createCopyWithAlphaFromSurfaceAsync(surface, alpha))
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsGraphicsImaging_ISoftwareBitmap>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIClosable: COM.COMReference<SWRT_WindowsFoundation_IClosable>.Optional = .none

    internal var _iclosable: COM.COMInterop<SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _lazyIClosable.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundation_IClosable.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.Graphics.Imaging.SoftwareBitmap")
            }
        }
    }

    private static var _lazyISoftwareBitmapFactory: COM.COMReference<SWRT_WindowsGraphicsImaging_ISoftwareBitmapFactory>.Optional = .none

    internal static var _isoftwareBitmapFactory: COM.COMInterop<SWRT_WindowsGraphicsImaging_ISoftwareBitmapFactory> {
        get throws {
            try _lazyISoftwareBitmapFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsGraphicsImaging_ISoftwareBitmapFactory.self)).cast()
            }
        }
    }

    private static var _lazyISoftwareBitmapStatics: COM.COMReference<SWRT_WindowsGraphicsImaging_ISoftwareBitmapStatics>.Optional = .none

    internal static var _isoftwareBitmapStatics: COM.COMInterop<SWRT_WindowsGraphicsImaging_ISoftwareBitmapStatics> {
        get throws {
            try _lazyISoftwareBitmapStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WindowsGraphicsImaging_ISoftwareBitmapStatics.self)).cast()
            }
        }
    }
}