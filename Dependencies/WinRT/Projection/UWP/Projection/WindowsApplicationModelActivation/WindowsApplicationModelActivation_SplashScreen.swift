// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI


/// Provides a dismissal event and image location information for the app's splash screen.
public final class WindowsApplicationModelActivation_SplashScreen: WindowsRuntime.WinRTImport<WindowsApplicationModelActivation_SplashScreenBinding> {
    /// Fires when the app's splash screen is dismissed.
    @discardableResult
    public func dismissed(adding handler: WindowsFoundation_TypedEventHandler<WindowsApplicationModelActivation_SplashScreen?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Dismissed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).dismissed(removing: token) })
    }

    public func dismissed(removing cookie: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Dismissed(cookie)
    }

    /// The coordinates of the splash screen image relative to the window and scaled for the dots per inch (dpi) of the device.
    public var imageLocation: WindowsFoundation_Rect {
        get throws {
            try _interop.get_ImageLocation()
        }
    }

    /// The coordinates of the app's splash screen image relative to the window.
    public var imageLocation_: WindowsFoundation_Rect {
        try! self.imageLocation
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_WindowsApplicationModelActivation_ISplashScreen>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Windows.ApplicationModel.Activation.SplashScreen")
            }
        }
    }
}