// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsStorageSearch_IStorageQueryResultBaseBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsStorageSearch_IStorageQueryResultBase
    public typealias ABIStruct = SWRT_WindowsStorageSearch_IStorageQueryResultBase

    public static let typeName = "Windows.Storage.Search.IStorageQueryResultBase"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsStorageSearch_IStorageQueryResultBaseBinding>, WindowsStorageSearch_IStorageQueryResultBaseProtocol {
        public func getItemCountAsync() throws -> WindowsFoundation_IAsyncOperation<Swift.UInt32> {
            try COM.NullResult.unwrap(_interop.getItemCountAsync())
        }

        public func findStartIndexAsync(_ value: WindowsRuntime.IInspectable?) throws -> WindowsFoundation_IAsyncOperation<Swift.UInt32> {
            try COM.NullResult.unwrap(_interop.findStartIndexAsync(value))
        }

        public func getCurrentQueryOptions() throws -> WindowsStorageSearch_QueryOptions {
            try COM.NullResult.unwrap(_interop.getCurrentQueryOptions())
        }

        public func applyNewQueryOptions(_ newQueryOptions: WindowsStorageSearch_QueryOptions?) throws {
            try _interop.applyNewQueryOptions(newQueryOptions)
        }

        @discardableResult
        public func contentsChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsStorageSearch_IStorageQueryResultBase?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
            let _token = try _interop.add_ContentsChanged(handler)
            return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).contentsChanged(removing: token) })
        }

        public func contentsChanged(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
            try _interop.remove_ContentsChanged(eventCookie)
        }

        @discardableResult
        public func optionsChanged(adding changedHandler: WindowsFoundation_TypedEventHandler<WindowsStorageSearch_IStorageQueryResultBase?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
            let _token = try _interop.add_OptionsChanged(changedHandler)
            return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).optionsChanged(removing: token) })
        }

        public func optionsChanged(removing eventCookie: WindowsRuntime.EventRegistrationToken) throws {
            try _interop.remove_OptionsChanged(eventCookie)
        }

        public var folder: WindowsStorage_StorageFolder {
            get throws {
                try COM.NullResult.unwrap(_interop.get_Folder())
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsStorageSearch_IStorageQueryResultBase_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        GetItemCountAsync: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getItemCountAsync())
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.UInt32.toABI(_result_swift)
        } },
        get_Folder: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.folder)
            _result.pointee = try WindowsStorage_StorageFolderBinding.toABI(_result_swift)
        } },
        add_ContentsChanged: { this, handler, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let handler_swift = WindowsFoundation_TypedEventHandlerBinding.IStorageQueryResultBase_Object.fromABI(handler)
            let _result_swift = try this.contentsChanged(adding: handler_swift).token
            _result.pointee = WindowsRuntime.EventRegistrationToken.toABI(_result_swift)
        } },
        remove_ContentsChanged: { this, eventCookie in _implement(this) { this in
            let eventCookie_swift = WindowsRuntime.EventRegistrationToken.fromABI(eventCookie)
            try this.contentsChanged(removing: eventCookie_swift)
        } },
        add_OptionsChanged: { this, changedHandler, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let changedHandler_swift = WindowsFoundation_TypedEventHandlerBinding.IStorageQueryResultBase_Object.fromABI(changedHandler)
            let _result_swift = try this.optionsChanged(adding: changedHandler_swift).token
            _result.pointee = WindowsRuntime.EventRegistrationToken.toABI(_result_swift)
        } },
        remove_OptionsChanged: { this, eventCookie in _implement(this) { this in
            let eventCookie_swift = WindowsRuntime.EventRegistrationToken.fromABI(eventCookie)
            try this.optionsChanged(removing: eventCookie_swift)
        } },
        FindStartIndexAsync: { this, value, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let value_swift = WindowsRuntime.IInspectableBinding.fromABI(value)
            let _result_swift = try COM.NullResult.`catch`(try this.findStartIndexAsync(value_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.UInt32.toABI(_result_swift)
        } },
        GetCurrentQueryOptions: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getCurrentQueryOptions())
            _result.pointee = try WindowsStorageSearch_QueryOptionsBinding.toABI(_result_swift)
        } },
        ApplyNewQueryOptions: { this, newQueryOptions in _implement(this) { this in
            let newQueryOptions_swift = WindowsStorageSearch_QueryOptionsBinding.fromABI(newQueryOptions)
            try this.applyNewQueryOptions(newQueryOptions_swift)
        } }
    )
}