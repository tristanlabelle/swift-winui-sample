// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsStorageSearch_IStorageFolderQueryOperationsBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsStorageSearch_IStorageFolderQueryOperations
    public typealias ABIStruct = SWRT_WindowsStorageSearch_IStorageFolderQueryOperations

    public static let typeName = "Windows.Storage.Search.IStorageFolderQueryOperations"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsStorageSearch_IStorageFolderQueryOperationsBinding>, WindowsStorageSearch_IStorageFolderQueryOperationsProtocol {
        public func getIndexedStateAsync() throws -> WindowsFoundation_IAsyncOperation<WindowsStorageSearch_IndexedState> {
            try COM.NullResult.unwrap(_interop.getIndexedStateAsync())
        }

        public func createFileQuery() throws -> WindowsStorageSearch_StorageFileQueryResult {
            try COM.NullResult.unwrap(_interop.createFileQueryOverloadDefault())
        }

        public func createFileQuery(_ query: WindowsStorageSearch_CommonFileQuery) throws -> WindowsStorageSearch_StorageFileQueryResult {
            try COM.NullResult.unwrap(_interop.createFileQuery(query))
        }

        public func createFileQueryWithOptions(_ queryOptions: WindowsStorageSearch_QueryOptions?) throws -> WindowsStorageSearch_StorageFileQueryResult {
            try COM.NullResult.unwrap(_interop.createFileQueryWithOptions(queryOptions))
        }

        public func createFolderQuery() throws -> WindowsStorageSearch_StorageFolderQueryResult {
            try COM.NullResult.unwrap(_interop.createFolderQueryOverloadDefault())
        }

        public func createFolderQuery(_ query: WindowsStorageSearch_CommonFolderQuery) throws -> WindowsStorageSearch_StorageFolderQueryResult {
            try COM.NullResult.unwrap(_interop.createFolderQuery(query))
        }

        public func createFolderQueryWithOptions(_ queryOptions: WindowsStorageSearch_QueryOptions?) throws -> WindowsStorageSearch_StorageFolderQueryResult {
            try COM.NullResult.unwrap(_interop.createFolderQueryWithOptions(queryOptions))
        }

        public func createItemQuery() throws -> WindowsStorageSearch_StorageItemQueryResult {
            try COM.NullResult.unwrap(_interop.createItemQuery())
        }

        public func createItemQueryWithOptions(_ queryOptions: WindowsStorageSearch_QueryOptions?) throws -> WindowsStorageSearch_StorageItemQueryResult {
            try COM.NullResult.unwrap(_interop.createItemQueryWithOptions(queryOptions))
        }

        public func getFilesAsync(_ query: WindowsStorageSearch_CommonFileQuery, _ startIndex: Swift.UInt32, _ maxItemsToRetrieve: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?> {
            try COM.NullResult.unwrap(_interop.getFilesAsync(query, startIndex, maxItemsToRetrieve))
        }

        public func getFilesAsync(_ query: WindowsStorageSearch_CommonFileQuery) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFile?>?> {
            try COM.NullResult.unwrap(_interop.getFilesAsyncOverloadDefaultStartAndCount(query))
        }

        public func getFoldersAsync(_ query: WindowsStorageSearch_CommonFolderQuery, _ startIndex: Swift.UInt32, _ maxItemsToRetrieve: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?> {
            try COM.NullResult.unwrap(_interop.getFoldersAsync(query, startIndex, maxItemsToRetrieve))
        }

        public func getFoldersAsync(_ query: WindowsStorageSearch_CommonFolderQuery) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_StorageFolder?>?> {
            try COM.NullResult.unwrap(_interop.getFoldersAsyncOverloadDefaultStartAndCount(query))
        }

        public func getItemsAsync(_ startIndex: Swift.UInt32, _ maxItemsToRetrieve: Swift.UInt32) throws -> WindowsFoundation_IAsyncOperation<WindowsFoundationCollections_IVectorView<WindowsStorage_IStorageItem?>?> {
            try COM.NullResult.unwrap(_interop.getItemsAsync(startIndex, maxItemsToRetrieve))
        }

        public func areQueryOptionsSupported(_ queryOptions: WindowsStorageSearch_QueryOptions?) throws -> Swift.Bool {
            try _interop.areQueryOptionsSupported(queryOptions)
        }

        public func isCommonFolderQuerySupported(_ query: WindowsStorageSearch_CommonFolderQuery) throws -> Swift.Bool {
            try _interop.isCommonFolderQuerySupported(query)
        }

        public func isCommonFileQuerySupported(_ query: WindowsStorageSearch_CommonFileQuery) throws -> Swift.Bool {
            try _interop.isCommonFileQuerySupported(query)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsStorageSearch_IStorageFolderQueryOperations_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        GetIndexedStateAsync: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getIndexedStateAsync())
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IndexedState.toABI(_result_swift)
        } },
        CreateFileQueryOverloadDefault: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.createFileQuery())
            _result.pointee = try WindowsStorageSearch_StorageFileQueryResultBinding.toABI(_result_swift)
        } },
        CreateFileQuery: { this, query, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let query_swift = WindowsStorageSearch_CommonFileQuery.fromABI(query)
            let _result_swift = try COM.NullResult.`catch`(try this.createFileQuery(query_swift))
            _result.pointee = try WindowsStorageSearch_StorageFileQueryResultBinding.toABI(_result_swift)
        } },
        CreateFileQueryWithOptions: { this, queryOptions, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let queryOptions_swift = WindowsStorageSearch_QueryOptionsBinding.fromABI(queryOptions)
            let _result_swift = try COM.NullResult.`catch`(try this.createFileQueryWithOptions(queryOptions_swift))
            _result.pointee = try WindowsStorageSearch_StorageFileQueryResultBinding.toABI(_result_swift)
        } },
        CreateFolderQueryOverloadDefault: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.createFolderQuery())
            _result.pointee = try WindowsStorageSearch_StorageFolderQueryResultBinding.toABI(_result_swift)
        } },
        CreateFolderQuery: { this, query, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let query_swift = WindowsStorageSearch_CommonFolderQuery.fromABI(query)
            let _result_swift = try COM.NullResult.`catch`(try this.createFolderQuery(query_swift))
            _result.pointee = try WindowsStorageSearch_StorageFolderQueryResultBinding.toABI(_result_swift)
        } },
        CreateFolderQueryWithOptions: { this, queryOptions, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let queryOptions_swift = WindowsStorageSearch_QueryOptionsBinding.fromABI(queryOptions)
            let _result_swift = try COM.NullResult.`catch`(try this.createFolderQueryWithOptions(queryOptions_swift))
            _result.pointee = try WindowsStorageSearch_StorageFolderQueryResultBinding.toABI(_result_swift)
        } },
        CreateItemQuery: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.createItemQuery())
            _result.pointee = try WindowsStorageSearch_StorageItemQueryResultBinding.toABI(_result_swift)
        } },
        CreateItemQueryWithOptions: { this, queryOptions, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let queryOptions_swift = WindowsStorageSearch_QueryOptionsBinding.fromABI(queryOptions)
            let _result_swift = try COM.NullResult.`catch`(try this.createItemQueryWithOptions(queryOptions_swift))
            _result.pointee = try WindowsStorageSearch_StorageItemQueryResultBinding.toABI(_result_swift)
        } },
        GetFilesAsync: { this, query, startIndex, maxItemsToRetrieve, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let query_swift = WindowsStorageSearch_CommonFileQuery.fromABI(query)
            let _result_swift = try COM.NullResult.`catch`(try this.getFilesAsync(query_swift, startIndex, maxItemsToRetrieve))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IVectorView_StorageFile.toABI(_result_swift)
        } },
        GetFilesAsyncOverloadDefaultStartAndCount: { this, query, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let query_swift = WindowsStorageSearch_CommonFileQuery.fromABI(query)
            let _result_swift = try COM.NullResult.`catch`(try this.getFilesAsync(query_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IVectorView_StorageFile.toABI(_result_swift)
        } },
        GetFoldersAsync: { this, query, startIndex, maxItemsToRetrieve, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let query_swift = WindowsStorageSearch_CommonFolderQuery.fromABI(query)
            let _result_swift = try COM.NullResult.`catch`(try this.getFoldersAsync(query_swift, startIndex, maxItemsToRetrieve))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IVectorView_StorageFolder.toABI(_result_swift)
        } },
        GetFoldersAsyncOverloadDefaultStartAndCount: { this, query, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let query_swift = WindowsStorageSearch_CommonFolderQuery.fromABI(query)
            let _result_swift = try COM.NullResult.`catch`(try this.getFoldersAsync(query_swift))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IVectorView_StorageFolder.toABI(_result_swift)
        } },
        GetItemsAsync: { this, startIndex, maxItemsToRetrieve, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.getItemsAsync(startIndex, maxItemsToRetrieve))
            _result.pointee = try WindowsFoundation_IAsyncOperationBinding.IVectorView_IStorageItem.toABI(_result_swift)
        } },
        AreQueryOptionsSupported: { this, queryOptions, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let queryOptions_swift = WindowsStorageSearch_QueryOptionsBinding.fromABI(queryOptions)
            _result.pointee = try this.areQueryOptionsSupported(queryOptions_swift)
        } },
        IsCommonFolderQuerySupported: { this, query, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let query_swift = WindowsStorageSearch_CommonFolderQuery.fromABI(query)
            _result.pointee = try this.isCommonFolderQuerySupported(query_swift)
        } },
        IsCommonFileQuerySupported: { this, query, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let query_swift = WindowsStorageSearch_CommonFileQuery.fromABI(query)
            _result.pointee = try this.isCommonFileQuerySupported(query_swift)
        } }
    )
}