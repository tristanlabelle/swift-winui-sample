// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides the practical object source type for the Image.Source and ImageBrush.ImageSource properties. You can define a BitmapImage by using a Uniform Resource Identifier (URI) that references an image source file, or by calling SetSourceAsync and supplying a stream.
public final class MicrosoftUIXamlMediaImaging_BitmapImage: MicrosoftUIXamlMediaImaging_BitmapSource, @unchecked Sendable {
    /// Initializes a new instance of the BitmapImage class.
    public override init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXamlMediaImaging_BitmapImageBinding.self))
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// Initializes a new instance of the BitmapImage class, using the supplied Uniform Resource Identifier (URI).
    /// - Parameter uriSource: A reference to the image source file.
    public init(_ uriSource: WindowsFoundation_Uri?) throws {
        let _instance = try Self._ibitmapImageFactory.createInstanceWithUriSource(uriSource)
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// Starts the animation of an animated image.
    public func play() throws {
        try _ibitmapImage.play()
    }

    /// Ends the animation of an animated image.
    public func stop() throws {
        try _ibitmapImage.stop()
    }

    /// Occurs when a significant change has occurred in the download progress of the BitmapImage content.
    @discardableResult
    public func downloadProgress(adding handler: MicrosoftUIXamlMediaImaging_DownloadProgressEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ibitmapImage.add_DownloadProgress(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).downloadProgress(removing: token) })
    }

    public func downloadProgress(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ibitmapImage.remove_DownloadProgress(token)
    }

    /// Occurs when there is an error associated with image retrieval or format.
    @discardableResult
    public func imageFailed(adding handler: MicrosoftUIXaml_ExceptionRoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ibitmapImage.add_ImageFailed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).imageFailed(removing: token) })
    }

    public func imageFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ibitmapImage.remove_ImageFailed(token)
    }

    /// Occurs when the image source is downloaded and decoded with no failure. You can use this event to determine the size of an image before rendering it.
    @discardableResult
    public func imageOpened(adding handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ibitmapImage.add_ImageOpened(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).imageOpened(removing: token) })
    }

    public func imageOpened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ibitmapImage.remove_ImageOpened(token)
    }

    /// true if an animated image should play as soon as it loads; otherwise, false. The default is true.
    public var autoPlay: Swift.Bool {
        get throws {
            try _ibitmapImage.get_AutoPlay()
        }
    }

    /// Sets a value that indicates whether an animated image should play as soon as it loads.
    /// - Parameter newValue: true if an animated image should play as soon as it loads; otherwise, false. The default is true.
    public func autoPlay(_ value: Swift.Bool) throws {
        try _ibitmapImage.put_AutoPlay(value)
    }

    /// Gets or sets a value that indicates whether an animated image should play as soon as it loads.
    public var autoPlay_: Swift.Bool {
        get {
            try! self.autoPlay
        }
        set {
            try! self.autoPlay(newValue)
        }
    }

    /// The BitmapCreateOptions used for this BitmapImage. The default is None. With this default, a BitmapImage uses cached content when it is available. For a BitmapImage that is created by referencing an image source file by Uniform Resource Identifier (URI), the Uniform Resource Identifier (URI) controls the internal caching scheme.
    public var createOptions: MicrosoftUIXamlMediaImaging_BitmapCreateOptions {
        get throws {
            try _ibitmapImage.get_CreateOptions()
        }
    }

    /// Sets the BitmapCreateOptions for a BitmapImage.
    /// - Parameter newValue: The BitmapCreateOptions used for this BitmapImage. The default is None. With this default, a BitmapImage uses cached content when it is available. For a BitmapImage that is created by referencing an image source file by Uniform Resource Identifier (URI), the Uniform Resource Identifier (URI) controls the internal caching scheme.
    public func createOptions(_ value: MicrosoftUIXamlMediaImaging_BitmapCreateOptions) throws {
        try _ibitmapImage.put_CreateOptions(value)
    }

    /// Gets or sets the BitmapCreateOptions for a BitmapImage.
    public var createOptions_: MicrosoftUIXamlMediaImaging_BitmapCreateOptions {
        get {
            try! self.createOptions
        }
        set {
            try! self.createOptions(newValue)
        }
    }

    /// The height (in pixels) to use for image decoding operations.
    public var decodePixelHeight: Swift.Int32 {
        get throws {
            try _ibitmapImage.get_DecodePixelHeight()
        }
    }

    /// Sets the height to use for image decoding operations.
    /// - Parameter newValue: The height (in pixels) to use for image decoding operations.
    public func decodePixelHeight(_ value: Swift.Int32) throws {
        try _ibitmapImage.put_DecodePixelHeight(value)
    }

    /// Gets or sets the height to use for image decoding operations.
    public var decodePixelHeight_: Swift.Int32 {
        get {
            try! self.decodePixelHeight
        }
        set {
            try! self.decodePixelHeight(newValue)
        }
    }

    /// A value of the enumeration. The default is Physical.
    public var decodePixelType: MicrosoftUIXamlMediaImaging_DecodePixelType {
        get throws {
            try _ibitmapImage.get_DecodePixelType()
        }
    }

    /// Sets a value that determines how DecodePixelWidth and DecodePixelHeight values are interpreted for decoding operations.
    /// - Parameter newValue: A value of the enumeration. The default is Physical.
    public func decodePixelType(_ value: MicrosoftUIXamlMediaImaging_DecodePixelType) throws {
        try _ibitmapImage.put_DecodePixelType(value)
    }

    /// Gets or sets a value that determines how DecodePixelWidth and DecodePixelHeight values are interpreted for decoding operations.
    public var decodePixelType_: MicrosoftUIXamlMediaImaging_DecodePixelType {
        get {
            try! self.decodePixelType
        }
        set {
            try! self.decodePixelType(newValue)
        }
    }

    /// The width (in pixels) to use for image decoding operations.
    public var decodePixelWidth: Swift.Int32 {
        get throws {
            try _ibitmapImage.get_DecodePixelWidth()
        }
    }

    /// Sets the width to use for image decoding operations.
    /// - Parameter newValue: The width (in pixels) to use for image decoding operations.
    public func decodePixelWidth(_ value: Swift.Int32) throws {
        try _ibitmapImage.put_DecodePixelWidth(value)
    }

    /// Gets or sets the width to use for image decoding operations.
    public var decodePixelWidth_: Swift.Int32 {
        get {
            try! self.decodePixelWidth
        }
        set {
            try! self.decodePixelWidth(newValue)
        }
    }

    /// true if the image is animated; otherwise, false.
    public var isAnimatedBitmap: Swift.Bool {
        get throws {
            try _ibitmapImage.get_IsAnimatedBitmap()
        }
    }

    /// Gets a value that indicates whether an image is animated.
    public var isAnimatedBitmap_: Swift.Bool {
        try! self.isAnimatedBitmap
    }

    /// true if the animated image is playing; otherwise, false.
    public var isPlaying: Swift.Bool {
        get throws {
            try _ibitmapImage.get_IsPlaying()
        }
    }

    /// Gets a value that indicates whether an animated image is playing.
    public var isPlaying_: Swift.Bool {
        try! self.isPlaying
    }

    /// An object describing the Uniform Resource Identifier (URI) of the graphics source file that generated this BitmapImage.
    public var uriSource: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_ibitmapImage.get_UriSource())
        }
    }

    /// Sets the Uniform Resource Identifier (URI) of the graphics source file that generated this BitmapImage.
    /// - Parameter newValue: An object describing the Uniform Resource Identifier (URI) of the graphics source file that generated this BitmapImage.
    public func uriSource(_ value: WindowsFoundation_Uri?) throws {
        try _ibitmapImage.put_UriSource(value)
    }

    /// Gets or sets the Uniform Resource Identifier (URI) of the graphics source file that generated this BitmapImage.
    public var uriSource_: WindowsFoundation_Uri! {
        get {
            try! NullResult.catch(self.uriSource)
        }
        set {
            try! self.uriSource(newValue)
        }
    }

    /// The identifier for the AutoPlay dependency property.
    public static var autoPlayProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibitmapImageStatics.get_AutoPlayProperty())
        }
    }

    /// Identifies the AutoPlay dependency property.
    public static var autoPlayProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.autoPlayProperty)
    }

    /// The identifier for the CreateOptions dependency property.
    public static var createOptionsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibitmapImageStatics.get_CreateOptionsProperty())
        }
    }

    /// Identifies the CreateOptions dependency property.
    public static var createOptionsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.createOptionsProperty)
    }

    /// The identifier for the DecodePixelHeight dependency property.
    public static var decodePixelHeightProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibitmapImageStatics.get_DecodePixelHeightProperty())
        }
    }

    /// Identifies the DecodePixelHeight dependency property.
    public static var decodePixelHeightProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.decodePixelHeightProperty)
    }

    /// The identifier for the DecodePixelType dependency property.
    public static var decodePixelTypeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibitmapImageStatics.get_DecodePixelTypeProperty())
        }
    }

    /// Identifies the DecodePixelType dependency property.
    public static var decodePixelTypeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.decodePixelTypeProperty)
    }

    /// The identifier for the DecodePixelWidth dependency property.
    public static var decodePixelWidthProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibitmapImageStatics.get_DecodePixelWidthProperty())
        }
    }

    /// Identifies the DecodePixelWidth dependency property.
    public static var decodePixelWidthProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.decodePixelWidthProperty)
    }

    /// The identifier for the IsAnimatedBitmap dependency property.
    public static var isAnimatedBitmapProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibitmapImageStatics.get_IsAnimatedBitmapProperty())
        }
    }

    /// Identifies the IsAnimatedBitmap dependency property.
    public static var isAnimatedBitmapProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isAnimatedBitmapProperty)
    }

    /// The identifier for the IsPlaying dependency property.
    public static var isPlayingProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibitmapImageStatics.get_IsPlayingProperty())
        }
    }

    /// Identifies the IsPlaying dependency property.
    public static var isPlayingProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isPlayingProperty)
    }

    /// The identifier for the UriSource dependency property.
    public static var uriSourceProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibitmapImageStatics.get_UriSourceProperty())
        }
    }

    /// Identifies the UriSource dependency property.
    public static var uriSourceProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.uriSourceProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlMediaImaging_IBitmapImage>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIBitmapImage: COM.COMReference<SWRT_MicrosoftUIXamlMediaImaging_IBitmapImage>.Optional = .none

    internal var _ibitmapImage: COM.COMInterop<SWRT_MicrosoftUIXamlMediaImaging_IBitmapImage> {
        get throws {
            try _lazyIBitmapImage.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlMediaImaging_IBitmapImage.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Media.Imaging.BitmapImage")
            }
        }
    }

    private static var _lazyIBitmapImageFactory: COM.COMReference<SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageFactory>.Optional = .none

    internal static var _ibitmapImageFactory: COM.COMInterop<SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageFactory> {
        get throws {
            try _lazyIBitmapImageFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageFactory.self)).cast()
            }
        }
    }

    private static var _lazyIBitmapImageStatics: COM.COMReference<SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageStatics>.Optional = .none

    internal static var _ibitmapImageStatics: COM.COMInterop<SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageStatics> {
        get throws {
            try _lazyIBitmapImageStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageStatics.self)).cast()
            }
        }
    }
}