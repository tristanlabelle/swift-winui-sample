// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents the base class for flyout controls, such as Flyout and MenuFlyout.
open class MicrosoftUIXamlControlsPrimitives_FlyoutBase: MicrosoftUIXaml_DependencyObject, @unchecked Sendable {
    /// Provides base class initialization behavior for FlyoutBase derived classes.
    public override init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlControlsPrimitives_FlyoutBase.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._iflyoutBaseFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Shows the flyout placed in relation to the specified element.
    /// - Parameter placementTarget: The element to use as the flyout's placement target.
    public func showAt(_ placementTarget: MicrosoftUIXaml_FrameworkElement?) throws {
        try _iflyoutBase.showAt(placementTarget)
    }

    /// Shows the flyout placed in relation to the specified element using the specified options.
    /// - Parameter placementTarget: The element to use as the flyout's placement target.
    /// - Parameter showOptions: The options to use when showing the flyout.
    public func showAt(_ placementTarget: MicrosoftUIXaml_DependencyObject?, _ showOptions: MicrosoftUIXamlControlsPrimitives_FlyoutShowOptions?) throws {
        try _iflyoutBase.showAtWithOptions(placementTarget, showOptions)
    }

    /// Closes the flyout.
    public func hide() throws {
        try _iflyoutBase.hide()
    }

    /// Attempts to invoke a keyboard shortcut (accelerator).
    /// - Parameter args: The ProcessKeyboardAcceleratorEventArgs.
    public func tryInvokeKeyboardAccelerator(_ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        try _iflyoutBase.tryInvokeKeyboardAccelerator(args)
    }

    /// Occurs when the flyout is hidden.
    @discardableResult
    public func closed(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflyoutBase.add_Closed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).closed(removing: token) })
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflyoutBase.remove_Closed(token)
    }

    /// Occurs when the flyout starts to be hidden.
    @discardableResult
    public func closing(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControlsPrimitives_FlyoutBase?, MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflyoutBase.add_Closing(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).closing(removing: token) })
    }

    public func closing(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflyoutBase.remove_Closing(token)
    }

    /// Occurs when the flyout is shown.
    @discardableResult
    public func opened(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflyoutBase.add_Opened(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).opened(removing: token) })
    }

    public func opened(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflyoutBase.remove_Opened(token)
    }

    /// Occurs before the flyout is shown.
    @discardableResult
    public func opening(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iflyoutBase.add_Opening(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).opening(removing: token) })
    }

    public func opening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iflyoutBase.remove_Opening(token)
    }

    /// true if the element gets focus when a user interacts with it; otherwise, false.
    public var allowFocusOnInteraction: Swift.Bool {
        get throws {
            try _iflyoutBase.get_AllowFocusOnInteraction()
        }
    }

    /// Sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    /// - Parameter newValue: true if the element gets focus when a user interacts with it; otherwise, false.
    public func allowFocusOnInteraction(_ value: Swift.Bool) throws {
        try _iflyoutBase.put_AllowFocusOnInteraction(value)
    }

    /// Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    public var allowFocusOnInteraction_: Swift.Bool {
        get {
            try! self.allowFocusOnInteraction
        }
        set {
            try! self.allowFocusOnInteraction(newValue)
        }
    }

    /// true if the control can receive focus when it's disabled; otherwise, false.
    public var allowFocusWhenDisabled: Swift.Bool {
        get throws {
            try _iflyoutBase.get_AllowFocusWhenDisabled()
        }
    }

    /// Sets a value that specifies whether the control can receive focus when it's disabled.
    /// - Parameter newValue: true if the control can receive focus when it's disabled; otherwise, false.
    public func allowFocusWhenDisabled(_ value: Swift.Bool) throws {
        try _iflyoutBase.put_AllowFocusWhenDisabled(value)
    }

    /// Gets or sets a value that specifies whether the control can receive focus when it's disabled.
    public var allowFocusWhenDisabled_: Swift.Bool {
        get {
            try! self.allowFocusWhenDisabled
        }
        set {
            try! self.allowFocusWhenDisabled(newValue)
        }
    }

    /// true if animations are played when the flyout is opened or closed; otherwise, false.
    public var areOpenCloseAnimationsEnabled: Swift.Bool {
        get throws {
            try _iflyoutBase.get_AreOpenCloseAnimationsEnabled()
        }
    }

    /// Sets a value that indicates whether animations are played when the flyout is opened or closed.
    /// - Parameter newValue: true if animations are played when the flyout is opened or closed; otherwise, false.
    public func areOpenCloseAnimationsEnabled(_ value: Swift.Bool) throws {
        try _iflyoutBase.put_AreOpenCloseAnimationsEnabled(value)
    }

    /// Gets or sets a value that indicates whether animations are played when the flyout is opened or closed.
    public var areOpenCloseAnimationsEnabled_: Swift.Bool {
        get {
            try! self.areOpenCloseAnimationsEnabled
        }
        set {
            try! self.areOpenCloseAnimationsEnabled(newValue)
        }
    }

    /// An enumeration value that specifies the control's preference for whether it plays sounds. The default is Default.
    public var elementSoundMode: MicrosoftUIXaml_ElementSoundMode {
        get throws {
            try _iflyoutBase.get_ElementSoundMode()
        }
    }

    /// Sets a value that specifies the control's preference for whether it plays sounds.
    /// - Parameter newValue: An enumeration value that specifies the control's preference for whether it plays sounds. The default is Default.
    public func elementSoundMode(_ value: MicrosoftUIXaml_ElementSoundMode) throws {
        try _iflyoutBase.put_ElementSoundMode(value)
    }

    /// Gets or sets a value that specifies the control's preference for whether it plays sounds.
    public var elementSoundMode_: MicrosoftUIXaml_ElementSoundMode {
        get {
            try! self.elementSoundMode
        }
        set {
            try! self.elementSoundMode(newValue)
        }
    }

    /// true if the input device used to open the flyout does not easily open the secondary commands; otherwise, false.
    public var inputDevicePrefersPrimaryCommands: Swift.Bool {
        get throws {
            try _iflyoutBase.get_InputDevicePrefersPrimaryCommands()
        }
    }

    /// Gets a value that indicates whether the input device used to open the flyout does not easily open the secondary commands.
    public var inputDevicePrefersPrimaryCommands_: Swift.Bool {
        try! self.inputDevicePrefersPrimaryCommands
    }

    /// true if the flyout is shown within the bounds of the XAML root; otherwise, false. This value is always true for Windows App SDK apps.
    public var isConstrainedToRootBounds: Swift.Bool {
        get throws {
            try _iflyoutBase.get_IsConstrainedToRootBounds()
        }
    }

    /// Gets a value that indicates whether the flyout is shown within the bounds of the XAML root. This property is always true for Windows App SDK apps.
    public var isConstrainedToRootBounds_: Swift.Bool {
        try! self.isConstrainedToRootBounds
    }

    /// true if the flyout is open; otherwise, false.
    public var isOpen: Swift.Bool {
        get throws {
            try _iflyoutBase.get_IsOpen()
        }
    }

    /// Gets a value that indicates whether the flyout is open.
    public var isOpen_: Swift.Bool {
        try! self.isOpen
    }

    /// A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is Auto.
    public var lightDismissOverlayMode: MicrosoftUIXamlControls_LightDismissOverlayMode {
        get throws {
            try _iflyoutBase.get_LightDismissOverlayMode()
        }
    }

    /// Sets a value that specifies whether the area outside of a light-dismiss UI is darkened.
    /// - Parameter newValue: A value of the enumeration that specifies whether the area outside of a light-dismiss UI is darkened. The default is Auto.
    public func lightDismissOverlayMode(_ value: MicrosoftUIXamlControls_LightDismissOverlayMode) throws {
        try _iflyoutBase.put_LightDismissOverlayMode(value)
    }

    /// Gets or sets a value that specifies whether the area outside of a light-dismiss UI is darkened.
    public var lightDismissOverlayMode_: MicrosoftUIXamlControls_LightDismissOverlayMode {
        get {
            try! self.lightDismissOverlayMode
        }
        set {
            try! self.lightDismissOverlayMode(newValue)
        }
    }

    /// The element that should receive pointer input events even when underneath the flyout's overlay.
    public var overlayInputPassThroughElement: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBase.get_OverlayInputPassThroughElement())
        }
    }

    /// Sets an element that should receive pointer input events even when underneath the flyout's overlay.
    /// - Parameter newValue: The element that should receive pointer input events even when underneath the flyout's overlay.
    public func overlayInputPassThroughElement(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _iflyoutBase.put_OverlayInputPassThroughElement(value)
    }

    /// Gets or sets an element that should receive pointer input events even when underneath the flyout's overlay.
    public var overlayInputPassThroughElement_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.overlayInputPassThroughElement)
        }
        set {
            try! self.overlayInputPassThroughElement(newValue)
        }
    }

    /// A named constant of the enumeration that indicates where the flyout is placed in relation to its placement target. The default is Top.
    public var placement: MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode {
        get throws {
            try _iflyoutBase.get_Placement()
        }
    }

    /// Sets the default placement to be used for the flyout, in relation to its placement target.
    /// - Parameter newValue: A named constant of the enumeration that indicates where the flyout is placed in relation to its placement target. The default is Top.
    public func placement(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode) throws {
        try _iflyoutBase.put_Placement(value)
    }

    /// Gets or sets the default placement to be used for the flyout, in relation to its placement target.
    public var placement_: MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode {
        get {
            try! self.placement
        }
        set {
            try! self.placement(newValue)
        }
    }

    /// true if the flyout should be shown within the bounds of the XAML root; otherwise, false.
    public var shouldConstrainToRootBounds: Swift.Bool {
        get throws {
            try _iflyoutBase.get_ShouldConstrainToRootBounds()
        }
    }

    /// Sets a value that indicates whether the flyout should be shown within the bounds of the XAML root.
    /// - Parameter newValue: true if the flyout should be shown within the bounds of the XAML root; otherwise, false.
    public func shouldConstrainToRootBounds(_ value: Swift.Bool) throws {
        try _iflyoutBase.put_ShouldConstrainToRootBounds(value)
    }

    /// Gets or sets a value that indicates whether the flyout should be shown within the bounds of the XAML root.
    public var shouldConstrainToRootBounds_: Swift.Bool {
        get {
            try! self.shouldConstrainToRootBounds
        }
        set {
            try! self.shouldConstrainToRootBounds(newValue)
        }
    }

    /// A value of the enumeration that indicates how a flyout behaves when shown.
    public var showMode: MicrosoftUIXamlControlsPrimitives_FlyoutShowMode {
        get throws {
            try _iflyoutBase.get_ShowMode()
        }
    }

    /// Sets a value that indicates how a flyout behaves when shown.
    /// - Parameter newValue: A value of the enumeration that indicates how a flyout behaves when shown.
    public func showMode(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutShowMode) throws {
        try _iflyoutBase.put_ShowMode(value)
    }

    /// Gets or sets a value that indicates how a flyout behaves when shown.
    public var showMode_: MicrosoftUIXamlControlsPrimitives_FlyoutShowMode {
        get {
            try! self.showMode
        }
        set {
            try! self.showMode(newValue)
        }
    }

    /// The element to use as the flyout's placement target.
    public var target: MicrosoftUIXaml_FrameworkElement {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBase.get_Target())
        }
    }

    /// Gets the element to use as the flyout's placement target.
    public var target_: MicrosoftUIXaml_FrameworkElement! {
        try! NullResult.catch(self.target)
    }

    /// The XamlRoot in which this flyout is being viewed. The default is null.
    public var xamlRoot: MicrosoftUIXaml_XamlRoot {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBase.get_XamlRoot())
        }
    }

    /// Sets the XamlRoot in which this flyout is being viewed.
    /// - Parameter newValue: The XamlRoot in which this flyout is being viewed. The default is null.
    public func xamlRoot(_ value: MicrosoftUIXaml_XamlRoot?) throws {
        try _iflyoutBase.put_XamlRoot(value)
    }

    /// Gets or sets the XamlRoot in which this flyout is being viewed.
    public var xamlRoot_: MicrosoftUIXaml_XamlRoot! {
        get {
            try! NullResult.catch(self.xamlRoot)
        }
        set {
            try! self.xamlRoot(newValue)
        }
    }

    /// The system backdrop to apply to this flyout.
    public var systemBackdrop: MicrosoftUIXamlMedia_SystemBackdrop {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBase2.get_SystemBackdrop())
        }
    }

    /// Sets the system backdrop to apply to this flyout. The backdrop is rendered behind the flyout content.
    /// - Parameter newValue: The system backdrop to apply to this flyout.
    public func systemBackdrop(_ value: MicrosoftUIXamlMedia_SystemBackdrop?) throws {
        try _iflyoutBase2.put_SystemBackdrop(value)
    }

    /// Gets or sets the system backdrop to apply to this flyout. The backdrop is rendered behind the flyout content.
    public var systemBackdrop_: MicrosoftUIXamlMedia_SystemBackdrop! {
        get {
            try! NullResult.catch(self.systemBackdrop)
        }
        set {
            try! self.systemBackdrop(newValue)
        }
    }

    /// When overridden in a derived class, initializes a control to show the flyout content as appropriate for the derived control. Note: This method has no base class implementation and must be overridden in a derived class.
    /// - Returns: The control that displays the content of the flyout.
    open func createPresenter() throws -> MicrosoftUIXamlControls_Control {
        try COM.NullResult.unwrap(_iflyoutBaseOverrides.createPresenter())
    }

    /// Called just before a keyboard shortcut (accelerator) is processed in your app. Invoked whenever application code or internal processes call ProcessKeyboardAccelerators. Override this method to influence the default accelerator handling.
    /// - Parameter args: The ProcessKeyboardAcceleratorEventArgs.
    open func onProcessKeyboardAccelerators(_ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        try _iflyoutBaseOverrides.onProcessKeyboardAccelerators(args)
    }

    /// The identifier for the SystemBackdrop dependency property.
    public static var systemBackdropProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics2.get_SystemBackdropProperty())
        }
    }

    /// Identifies the SystemBackdrop dependency property.
    public static var systemBackdropProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.systemBackdropProperty)
    }

    /// Gets the flyout associated with the specified element.
    /// - Parameter element: The element for which to get the associated flyout.
    /// - Returns: The flyout attached to the specified element.
    public static func getAttachedFlyout(_ element: MicrosoftUIXaml_FrameworkElement?) throws -> MicrosoftUIXamlControlsPrimitives_FlyoutBase {
        try COM.NullResult.unwrap(_iflyoutBaseStatics.getAttachedFlyout(element))
    }

    /// Associates the specified flyout with the specified FrameworkElement.
    /// - Parameter element: The element to associate the flyout with.
    /// - Parameter value: The flyout to associate with the specified element.
    public static func setAttachedFlyout(_ element: MicrosoftUIXaml_FrameworkElement?, _ value: MicrosoftUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _iflyoutBaseStatics.setAttachedFlyout(element, value)
    }

    /// Shows the flyout associated with the specified element, if any.
    /// - Parameter flyoutOwner: The element for which to show the associated flyout.
    public static func showAttachedFlyout(_ flyoutOwner: MicrosoftUIXaml_FrameworkElement?) throws {
        try _iflyoutBaseStatics.showAttachedFlyout(flyoutOwner)
    }

    /// The identifier for the AllowFocusOnInteraction dependency property.
    public static var allowFocusOnInteractionProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_AllowFocusOnInteractionProperty())
        }
    }

    /// Identifies the AllowFocusOnInteraction dependency property.
    public static var allowFocusOnInteractionProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.allowFocusOnInteractionProperty)
    }

    /// The identifier for the AllowFocusWhenDisabled dependency property.
    public static var allowFocusWhenDisabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_AllowFocusWhenDisabledProperty())
        }
    }

    /// Identifies the AllowFocusWhenDisabled dependency property.
    public static var allowFocusWhenDisabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.allowFocusWhenDisabledProperty)
    }

    /// The identifier for the AreOpenCloseAnimationsEnabled dependency property.
    public static var areOpenCloseAnimationsEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_AreOpenCloseAnimationsEnabledProperty())
        }
    }

    /// Identifies the AreOpenCloseAnimationsEnabled dependency property.
    public static var areOpenCloseAnimationsEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.areOpenCloseAnimationsEnabledProperty)
    }

    /// The identifier for the FlyoutBase.AttachedFlyout XAML attached property.
    public static var attachedFlyoutProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_AttachedFlyoutProperty())
        }
    }

    /// Identifies the FlyoutBase.AttachedFlyout XAML attached property.
    public static var attachedFlyoutProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.attachedFlyoutProperty)
    }

    /// The identifier for the ElementSoundMode dependency property.
    public static var elementSoundModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_ElementSoundModeProperty())
        }
    }

    /// Identifies the ElementSoundMode dependency property.
    public static var elementSoundModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.elementSoundModeProperty)
    }

    /// The identifier for the InputDevicePrefersPrimaryCommands dependency property.
    public static var inputDevicePrefersPrimaryCommandsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_InputDevicePrefersPrimaryCommandsProperty())
        }
    }

    /// Identifies the InputDevicePrefersPrimaryCommands dependency property.
    public static var inputDevicePrefersPrimaryCommandsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.inputDevicePrefersPrimaryCommandsProperty)
    }

    /// The identifier for the IsOpen dependency property.
    public static var isOpenProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_IsOpenProperty())
        }
    }

    /// Identifies the IsOpen dependency property.
    public static var isOpenProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isOpenProperty)
    }

    /// The identifier for the LightDismissOverlayMode dependency property.
    public static var lightDismissOverlayModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_LightDismissOverlayModeProperty())
        }
    }

    /// Identifies the LightDismissOverlayMode dependency property.
    public static var lightDismissOverlayModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.lightDismissOverlayModeProperty)
    }

    /// The identifier for the OverlayInputPassThroughElement dependency property.
    public static var overlayInputPassThroughElementProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_OverlayInputPassThroughElementProperty())
        }
    }

    /// Identifies the OverlayInputPassThroughElement dependency property.
    public static var overlayInputPassThroughElementProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.overlayInputPassThroughElementProperty)
    }

    /// The identifier for the Placement dependency property.
    public static var placementProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_PlacementProperty())
        }
    }

    /// Identifies the Placement dependency property.
    public static var placementProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.placementProperty)
    }

    /// The identifier for the ShouldConstrainToRootBounds dependency property.
    public static var shouldConstrainToRootBoundsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_ShouldConstrainToRootBoundsProperty())
        }
    }

    /// Identifies the ShouldConstrainToRootBounds dependency property.
    public static var shouldConstrainToRootBoundsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.shouldConstrainToRootBoundsProperty)
    }

    /// The identifier for the ShowMode dependency property.
    public static var showModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_ShowModeProperty())
        }
    }

    /// Identifies the ShowMode dependency property.
    public static var showModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.showModeProperty)
    }

    /// The identifier for the Target dependency property.
    public static var targetProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iflyoutBaseStatics.get_TargetProperty())
        }
    }

    /// Identifies the Target dependency property.
    public static var targetProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.targetProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIFlyoutBase: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase>.Optional = .none

    internal var _iflyoutBase: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase> {
        get throws {
            try _lazyIFlyoutBase.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase.self)).cast()
            }
        }
    }

    private var _lazyIFlyoutBase2: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase2>.Optional = .none

    internal var _iflyoutBase2: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase2> {
        get throws {
            try _lazyIFlyoutBase2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase2.self)).cast()
            }
        }
    }

    private var _lazyIFlyoutBaseOverrides: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseOverrides>.Optional = .none

    internal var _iflyoutBaseOverrides: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseOverrides> {
        get throws {
            try _lazyIFlyoutBaseOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseOverrides.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase")
            }
        }
    }

    private static var _lazyIFlyoutBaseFactory: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseFactory>.Optional = .none

    internal static var _iflyoutBaseFactory: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseFactory> {
        get throws {
            try _lazyIFlyoutBaseFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseFactory.self)).cast()
            }
        }
    }

    private static var _lazyIFlyoutBaseStatics2: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics2>.Optional = .none

    internal static var _iflyoutBaseStatics2: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics2> {
        get throws {
            try _lazyIFlyoutBaseStatics2.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics2.self)).cast()
            }
        }
    }

    private static var _lazyIFlyoutBaseStatics: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics>.Optional = .none

    internal static var _iflyoutBaseStatics: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics> {
        get throws {
            try _lazyIFlyoutBaseStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _iflyoutBaseOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseOverrides.self) {
            if !_iflyoutBaseOverrides_outer.isInitialized {
                _iflyoutBaseOverrides_outer.initialize(embedder: self,
                    virtualTable: &MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.VirtualTables.iflyoutBaseOverrides)
            }
            return .init(_iflyoutBaseOverrides_outer.toCOM())
        }
        return .none
    }
}