// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents the base class for all button controls, such as Button, RepeatButton, and HyperlinkButton.
open class MicrosoftUIXamlControlsPrimitives_ButtonBase: MicrosoftUIXamlControls_ContentControl, @unchecked Sendable {
    /// Provides base class initialization behavior for ButtonBase derived classes.
    public override init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlControlsPrimitives_ButtonBase.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._ibuttonBaseFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Occurs when a button control is clicked.
    @discardableResult
    public func click(adding handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ibuttonBase.add_Click(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).click(removing: token) })
    }

    public func click(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ibuttonBase.remove_Click(token)
    }

    /// A value of the enumeration that indicates when the Click event occurs.

    public var clickMode: MicrosoftUIXamlControls_ClickMode {
        get throws {
            try _ibuttonBase.get_ClickMode()
        }
    }

    /// Sets a value that indicates when the Click event occurs, in terms of device behavior.
    /// - Parameter newValue: A value of the enumeration that indicates when the Click event occurs.

    public func clickMode(_ value: MicrosoftUIXamlControls_ClickMode) throws {
        try _ibuttonBase.put_ClickMode(value)
    }

    /// Gets or sets a value that indicates when the Click event occurs, in terms of device behavior.
    public var clickMode_: MicrosoftUIXamlControls_ClickMode {
        get {
            try! self.clickMode
        }
        set {
            try! self.clickMode(newValue)
        }
    }

    /// The command to invoke when this button is pressed. The default is null.
    public var command: MicrosoftUIXamlInput_ICommand {
        get throws {
            try COM.NullResult.unwrap(_ibuttonBase.get_Command())
        }
    }

    /// Sets the command to invoke when this button is pressed.
    /// - Parameter newValue: The command to invoke when this button is pressed. The default is null.
    public func command(_ value: MicrosoftUIXamlInput_ICommand?) throws {
        try _ibuttonBase.put_Command(value)
    }

    /// Gets or sets the command to invoke when this button is pressed.
    public var command_: MicrosoftUIXamlInput_ICommand! {
        get {
            try! NullResult.catch(self.command)
        }
        set {
            try! self.command(newValue)
        }
    }

    /// The parameter to pass to the Command property. The default is null.
    public var commandParameter: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ibuttonBase.get_CommandParameter())
        }
    }

    /// Sets the parameter to pass to the Command property.
    /// - Parameter newValue: The parameter to pass to the Command property. The default is null.
    public func commandParameter(_ value: WindowsRuntime.IInspectable?) throws {
        try _ibuttonBase.put_CommandParameter(value)
    }

    /// Gets or sets the parameter to pass to the Command property.
    public var commandParameter_: WindowsRuntime.IInspectable! {
        get {
            try! NullResult.catch(self.commandParameter)
        }
        set {
            try! self.commandParameter(newValue)
        }
    }

    /// True if a pointer is over the button control; otherwise false. The default is false.
    public var isPointerOver: Swift.Bool {
        get throws {
            try _ibuttonBase.get_IsPointerOver()
        }
    }

    /// Gets a value that indicates whether a device pointer is located over this button control.
    public var isPointerOver_: Swift.Bool {
        try! self.isPointerOver
    }

    /// True if the ButtonBase is in a pressed state; otherwise false. The default is false.
    public var isPressed: Swift.Bool {
        get throws {
            try _ibuttonBase.get_IsPressed()
        }
    }

    /// Gets a value that indicates whether a ButtonBase is currently in a pressed state.
    public var isPressed_: Swift.Bool {
        try! self.isPressed
    }

    /// The identifier for the ClickMode dependency property.
    public static var clickModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibuttonBaseStatics.get_ClickModeProperty())
        }
    }

    /// Identifies the ClickMode dependency property.
    public static var clickModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.clickModeProperty)
    }

    /// The identifier for the CommandParameter dependency property.
    public static var commandParameterProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibuttonBaseStatics.get_CommandParameterProperty())
        }
    }

    /// Identifier for the CommandParameter dependency property.
    public static var commandParameterProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.commandParameterProperty)
    }

    /// The identifier for the Command dependency property.
    public static var commandProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibuttonBaseStatics.get_CommandProperty())
        }
    }

    /// Identifier for the Command dependency property.
    public static var commandProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.commandProperty)
    }

    /// The identifier for the IsPointerOver dependency property.
    public static var isPointerOverProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibuttonBaseStatics.get_IsPointerOverProperty())
        }
    }

    /// Identifies the IsPointerOver dependency property.
    public static var isPointerOverProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isPointerOverProperty)
    }

    /// The identifier for the IsPressed dependency property.
    public static var isPressedProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ibuttonBaseStatics.get_IsPressedProperty())
        }
    }

    /// Identifies the IsPressed dependency property.
    public static var isPressedProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isPressedProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBase>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIButtonBase: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBase>.Optional = .none

    internal var _ibuttonBase: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBase> {
        get throws {
            try _lazyIButtonBase.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBase.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase")
            }
        }
    }

    private static var _lazyIButtonBaseFactory: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseFactory>.Optional = .none

    internal static var _ibuttonBaseFactory: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseFactory> {
        get throws {
            try _lazyIButtonBaseFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseFactory.self)).cast()
            }
        }
    }

    private static var _lazyIButtonBaseStatics: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseStatics>.Optional = .none

    internal static var _ibuttonBaseStatics: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseStatics> {
        get throws {
            try _lazyIButtonBaseStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseStatics.self)).cast()
            }
        }
    }
}