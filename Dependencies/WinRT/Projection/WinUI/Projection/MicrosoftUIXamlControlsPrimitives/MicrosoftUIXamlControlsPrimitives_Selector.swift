// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents a control that enables a user to select an item from a collection of items.
open class MicrosoftUIXamlControlsPrimitives_Selector: MicrosoftUIXamlControls_ItemsControl, @unchecked Sendable {
    /// Occurs when the currently selected item changes.
    @discardableResult
    public func selectionChanged(adding handler: MicrosoftUIXamlControls_SelectionChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iselector.add_SelectionChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).selectionChanged(removing: token) })
    }

    public func selectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iselector.remove_SelectionChanged(token)
    }

    /// true if the SelectedItem is always synchronized with the current item in the ItemCollection; false if the SelectedItem is never synchronized with the current item; null if the SelectedItem is synchronized with the current item only if the Selector uses an ICollectionView. The default value is null/indeterminate.


    /// If you are programming using C#or Microsoft Visual Basic, the type of this property is projected as **bool?**(a nullable Boolean.
    public var isSynchronizedWithCurrentItem: Swift.Bool? {
        get throws {
            try _iselector.get_IsSynchronizedWithCurrentItem()
        }
    }

    /// Sets a value that indicates whether a Selector should keep the SelectedItem synchronized with the current item in the Items property.
    /// - Parameter newValue: true if the SelectedItem is always synchronized with the current item in the ItemCollection; false if the SelectedItem is never synchronized with the current item; null if the SelectedItem is synchronized with the current item only if the Selector uses an ICollectionView. The default value is null/indeterminate.


    /// If you are programming using C#or Microsoft Visual Basic, the type of this property is projected as **bool?**(a nullable Boolean.
    public func isSynchronizedWithCurrentItem(_ value: Swift.Bool?) throws {
        try _iselector.put_IsSynchronizedWithCurrentItem(value)
    }

    /// Gets or sets a value that indicates whether a Selector should keep the SelectedItem synchronized with the current item in the Items property.
    public var isSynchronizedWithCurrentItem_: Swift.Bool? {
        get {
            try! self.isSynchronizedWithCurrentItem
        }
        set {
            try! self.isSynchronizedWithCurrentItem(newValue)
        }
    }

    /// The index of the selected item. The default is -1, which indicates that no item is selected.
    public var selectedIndex: Swift.Int32 {
        get throws {
            try _iselector.get_SelectedIndex()
        }
    }

    /// Sets the index of the selected item.
    /// - Parameter newValue: The index of the selected item. The default is -1, which indicates that no item is selected.
    public func selectedIndex(_ value: Swift.Int32) throws {
        try _iselector.put_SelectedIndex(value)
    }

    /// Gets or sets the index of the selected item.
    public var selectedIndex_: Swift.Int32 {
        get {
            try! self.selectedIndex
        }
        set {
            try! self.selectedIndex(newValue)
        }
    }

    /// The selected item. The default is null.
    public var selectedItem: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_iselector.get_SelectedItem())
        }
    }

    /// Sets the selected item.
    /// - Parameter newValue: The selected item. The default is null.
    public func selectedItem(_ value: WindowsRuntime.IInspectable?) throws {
        try _iselector.put_SelectedItem(value)
    }

    /// Gets or sets the selected item.
    public var selectedItem_: WindowsRuntime.IInspectable! {
        get {
            try! NullResult.catch(self.selectedItem)
        }
        set {
            try! self.selectedItem(newValue)
        }
    }

    /// The value of the selected item, obtained by using the SelectedValuePath, or null if no item is selected. The default value is null.
    public var selectedValue: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_iselector.get_SelectedValue())
        }
    }

    /// Sets the value of the selected item, obtained by using the SelectedValuePath.
    /// - Parameter newValue: The value of the selected item, obtained by using the SelectedValuePath, or null if no item is selected. The default value is null.
    public func selectedValue(_ value: WindowsRuntime.IInspectable?) throws {
        try _iselector.put_SelectedValue(value)
    }

    /// Gets or sets the value of the selected item, obtained by using the SelectedValuePath.
    public var selectedValue_: WindowsRuntime.IInspectable! {
        get {
            try! NullResult.catch(self.selectedValue)
        }
        set {
            try! self.selectedValue(newValue)
        }
    }

    /// The property path that is used to get the SelectedValue property of the SelectedItem property. The default is String.Empty.
    public var selectedValuePath: Swift.String {
        get throws {
            try _iselector.get_SelectedValuePath()
        }
    }

    /// Sets the property path that is used to get the SelectedValue property of the SelectedItem property.
    /// - Parameter newValue: The property path that is used to get the SelectedValue property of the SelectedItem property. The default is String.Empty.
    public func selectedValuePath(_ value: Swift.String) throws {
        try _iselector.put_SelectedValuePath(value)
    }

    /// Gets or sets the property path that is used to get the SelectedValue property of the SelectedItem property.
    public var selectedValuePath_: Swift.String {
        get {
            try! self.selectedValuePath
        }
        set {
            try! self.selectedValuePath(newValue)
        }
    }

    /// Gets a value that indicates whether the specified Selector has the focus.
    /// - Parameter element: The Selector to evaluate.
    /// - Returns: true to indicate that the Selector has the focus; otherwise, false.
    public static func getIsSelectionActive(_ element: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _iselectorStatics.getIsSelectionActive(element)
    }

    /// The identifier for the IsSynchronizedWithCurrentItem dependency property.
    public static var isSynchronizedWithCurrentItemProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_IsSynchronizedWithCurrentItemProperty())
        }
    }

    /// Identifies the IsSynchronizedWithCurrentItem dependency property.
    public static var isSynchronizedWithCurrentItemProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isSynchronizedWithCurrentItemProperty)
    }

    /// The identifier for the SelectedIndex dependency property.
    public static var selectedIndexProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_SelectedIndexProperty())
        }
    }

    /// Identifies the SelectedIndex dependency property.
    public static var selectedIndexProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.selectedIndexProperty)
    }

    /// The identifier for the SelectedItem dependency property.
    public static var selectedItemProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_SelectedItemProperty())
        }
    }

    /// Identifies the SelectedItem dependency property.
    public static var selectedItemProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.selectedItemProperty)
    }

    /// The identifier for the SelectedValuePath dependency property.
    public static var selectedValuePathProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_SelectedValuePathProperty())
        }
    }

    /// Gets the identifier for the SelectedValuePath dependency property.
    public static var selectedValuePathProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.selectedValuePathProperty)
    }

    /// The identifier for the SelectedValue dependency property.
    public static var selectedValueProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iselectorStatics.get_SelectedValueProperty())
        }
    }

    /// Gets the identifier for the SelectedValue dependency property.
    public static var selectedValueProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.selectedValueProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_ISelector>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyISelector: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_ISelector>.Optional = .none

    internal var _iselector: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_ISelector> {
        get throws {
            try _lazyISelector.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_ISelector.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.Primitives.Selector")
            }
        }
    }

    private static var _lazyISelectorFactory: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorFactory>.Optional = .none

    internal static var _iselectorFactory: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorFactory> {
        get throws {
            try _lazyISelectorFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorFactory.self)).cast()
            }
        }
    }

    private static var _lazyISelectorStatics: COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorStatics>.Optional = .none

    internal static var _iselectorStatics: COM.COMInterop<SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorStatics> {
        get throws {
            try _lazyISelectorStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorStatics.self)).cast()
            }
        }
    }
}