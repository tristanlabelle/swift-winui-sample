// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents the current application and its available services.
open class MicrosoftUIXaml_Application: WindowsRuntime.ComposableClass, @unchecked Sendable {
    /// Initializes a new instance of the Application class.
    public init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXaml_Application.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._iapplicationFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Shuts down the app.
    public func exit() throws {
        try _iapplication.exit()
    }

    /// Occurs when an exception can be handled by app code, as forwarded from a native-level Windows Runtime error. Apps can mark the occurrence as handled in event data.
    @discardableResult
    public func unhandledException(adding handler: MicrosoftUIXaml_UnhandledExceptionEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iapplication.add_UnhandledException(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).unhandledException(removing: token) })
    }

    public func unhandledException(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iapplication.remove_UnhandledException(token)
    }

    /// An object that declares how the app behaves when run in a debug environment.
    public var debugSettings: MicrosoftUIXaml_DebugSettings {
        get throws {
            try COM.NullResult.unwrap(_iapplication.get_DebugSettings())
        }
    }

    /// Gets an object that declares how the app behaves when run in a debug environment.
    public var debugSettings_: MicrosoftUIXaml_DebugSettings! {
        try! NullResult.catch(self.debugSettings)
    }

    /// The type of visual feedback used to indicate the UI element that has focus. The default value is HighVisibility.
    public var focusVisualKind: MicrosoftUIXaml_FocusVisualKind {
        get throws {
            try _iapplication.get_FocusVisualKind()
        }
    }

    /// Sets the type of visual feedback that an app can use to indicate the UI element that has focus.
    /// - Parameter newValue: The type of visual feedback used to indicate the UI element that has focus. The default value is HighVisibility.
    public func focusVisualKind(_ value: MicrosoftUIXaml_FocusVisualKind) throws {
        try _iapplication.put_FocusVisualKind(value)
    }

    /// Gets or sets the type of visual feedback that an app can use to indicate the UI element that has focus.
    public var focusVisualKind_: MicrosoftUIXaml_FocusVisualKind {
        get {
            try! self.focusVisualKind
        }
        set {
            try! self.focusVisualKind(newValue)
        }
    }

    /// A value of the enumeration that indicates whether the framework automatically adjusts visual properties when high contrast themes are enabled. The default is Auto.
    public var highContrastAdjustment: MicrosoftUIXaml_ApplicationHighContrastAdjustment {
        get throws {
            try _iapplication.get_HighContrastAdjustment()
        }
    }

    /// Sets a value that indicates whether the framework automatically adjusts visual properties when high contrast themes are enabled.
    /// - Parameter newValue: A value of the enumeration that indicates whether the framework automatically adjusts visual properties when high contrast themes are enabled. The default is Auto.
    public func highContrastAdjustment(_ value: MicrosoftUIXaml_ApplicationHighContrastAdjustment) throws {
        try _iapplication.put_HighContrastAdjustment(value)
    }

    /// Gets or sets a value that indicates whether the framework automatically adjusts visual properties when high contrast themes are enabled.
    public var highContrastAdjustment_: MicrosoftUIXaml_ApplicationHighContrastAdjustment {
        get {
            try! self.highContrastAdjustment
        }
        set {
            try! self.highContrastAdjustment(newValue)
        }
    }

    /// A value of the enumeration. The initial value is the default theme set by the user in Windows settings.
    public var requestedTheme: MicrosoftUIXaml_ApplicationTheme {
        get throws {
            try _iapplication.get_RequestedTheme()
        }
    }

    /// Sets a value that determines the light-dark preference for the overall theme of an app.
    /// - Parameter newValue: A value of the enumeration. The initial value is the default theme set by the user in Windows settings.
    public func requestedTheme(_ value: MicrosoftUIXaml_ApplicationTheme) throws {
        try _iapplication.put_RequestedTheme(value)
    }

    /// Gets or sets a value that determines the light-dark preference for the overall theme of an app.
    public var requestedTheme_: MicrosoftUIXaml_ApplicationTheme {
        get {
            try! self.requestedTheme
        }
        set {
            try! self.requestedTheme(newValue)
        }
    }

    /// A ResourceDictionary object that contains zero or more application-scoped resources.
    public var resources: MicrosoftUIXaml_ResourceDictionary {
        get throws {
            try COM.NullResult.unwrap(_iapplication.get_Resources())
        }
    }

    /// Gets a collection of application-scoped resources, such as styles, templates, and brushes.
    /// - Parameter newValue: A ResourceDictionary object that contains zero or more application-scoped resources.
    public func resources(_ value: MicrosoftUIXaml_ResourceDictionary?) throws {
        try _iapplication.put_Resources(value)
    }

    /// Gets a collection of application-scoped resources, such as styles, templates, and brushes.
    public var resources_: MicrosoftUIXaml_ResourceDictionary! {
        get {
            try! NullResult.catch(self.resources)
        }
        set {
            try! self.resources(newValue)
        }
    }

    /// Occurs during startup of a new WinUI thread to let you provide a custom IResourceManager implementation to be used by the framework for resolving resource URIs.
    @discardableResult
    public func resourceManagerRequested(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_ResourceManagerRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iapplication2.add_ResourceManagerRequested(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).resourceManagerRequested(removing: token) })
    }

    public func resourceManagerRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iapplication2.remove_ResourceManagerRequested(token)
    }

    /// An enumeration value that specifies whether the DispatcherQueue event loop exits when all XAML windows on a thread are closed. See Remarks for default behavior.
    public var dispatcherShutdownMode: MicrosoftUIXaml_DispatcherShutdownMode {
        get throws {
            try _iapplication3.get_DispatcherShutdownMode()
        }
    }

    /// Sets a value that specifies whether the DispatcherQueue event loop exits when all XAML windows on a thread are closed.
    /// - Parameter newValue: An enumeration value that specifies whether the DispatcherQueue event loop exits when all XAML windows on a thread are closed. See Remarks for default behavior.
    public func dispatcherShutdownMode(_ value: MicrosoftUIXaml_DispatcherShutdownMode) throws {
        try _iapplication3.put_DispatcherShutdownMode(value)
    }

    /// Gets or sets a value that specifies whether the DispatcherQueue event loop exits when all XAML windows on a thread are closed.
    public var dispatcherShutdownMode_: MicrosoftUIXaml_DispatcherShutdownMode {
        get {
            try! self.dispatcherShutdownMode
        }
        set {
            try! self.dispatcherShutdownMode(newValue)
        }
    }

    /// Invoked when the application is launched. Override this method to perform application initialization and to create a new window.
    /// - Parameter args: 
    ///       
    open func onLaunched(_ args: MicrosoftUIXaml_LaunchActivatedEventArgs?) throws {
        try _iapplicationOverrides.onLaunched(args)
    }

    /// Provides the entry point and requests initialization of the application. Use the specified ApplicationInitializationCallback to instantiate the Application class.
    /// - Parameter callback: The callback that should be invoked during the initialization sequence.
    public static func start(_ callback: MicrosoftUIXaml_ApplicationInitializationCallback?) throws {
        try _iapplicationStatics.start(callback)
    }

    /// Loads a XAML file that is located at the specified relative location, and converts it to an instance of the object that is specified by the root element of the XAML file.
    /// - Parameter component: An object of the same type as the root element of the XAML content to be loaded.
    /// - Parameter resourceLocator: An object describing the Uniform Resource Identifier (URI) path to the resource to load.
    public static func loadComponent(_ component: WindowsRuntime.IInspectable?, _ resourceLocator: WindowsFoundation_Uri?) throws {
        try _iapplicationStatics.loadComponent(component, resourceLocator)
    }

    /// Loads a XAML file that is located at the specified relative location, and converts it to an instance of the object that is specified by the root element of the XAML file.
    /// - Parameter component: An object of the same type as the root element of the XAML content to be loaded.
    /// - Parameter resourceLocator: An object describing the Uniform Resource Identifier (URI) path to the resource to load.
    /// - Parameter componentResourceLocation: A value of the enumeration.
    public static func loadComponent(_ component: WindowsRuntime.IInspectable?, _ resourceLocator: WindowsFoundation_Uri?, _ componentResourceLocation: MicrosoftUIXamlControlsPrimitives_ComponentResourceLocation) throws {
        try _iapplicationStatics.loadComponentWithResourceLocation(component, resourceLocator, componentResourceLocation)
    }

    /// The Application object for the current application.
    public static var current: MicrosoftUIXaml_Application {
        get throws {
            try COM.NullResult.unwrap(_iapplicationStatics.get_Current())
        }
    }

    /// Gets the Application object for the current application.
    public static var current_: MicrosoftUIXaml_Application! {
        try! NullResult.catch(Self.current)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IApplication>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIApplication: COM.COMReference<SWRT_MicrosoftUIXaml_IApplication>.Optional = .none

    internal var _iapplication: COM.COMInterop<SWRT_MicrosoftUIXaml_IApplication> {
        get throws {
            try _lazyIApplication.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IApplication.self)).cast()
            }
        }
    }

    private var _lazyIApplication2: COM.COMReference<SWRT_MicrosoftUIXaml_IApplication2>.Optional = .none

    internal var _iapplication2: COM.COMInterop<SWRT_MicrosoftUIXaml_IApplication2> {
        get throws {
            try _lazyIApplication2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IApplication2.self)).cast()
            }
        }
    }

    private var _lazyIApplication3: COM.COMReference<SWRT_MicrosoftUIXaml_IApplication3>.Optional = .none

    internal var _iapplication3: COM.COMInterop<SWRT_MicrosoftUIXaml_IApplication3> {
        get throws {
            try _lazyIApplication3.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IApplication3.self)).cast()
            }
        }
    }

    private var _lazyIApplicationOverrides: COM.COMReference<SWRT_MicrosoftUIXaml_IApplicationOverrides>.Optional = .none

    internal var _iapplicationOverrides: COM.COMInterop<SWRT_MicrosoftUIXaml_IApplicationOverrides> {
        get throws {
            try _lazyIApplicationOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IApplicationOverrides.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Application")
            }
        }
    }

    private static var _lazyIApplicationFactory: COM.COMReference<SWRT_MicrosoftUIXaml_IApplicationFactory>.Optional = .none

    internal static var _iapplicationFactory: COM.COMInterop<SWRT_MicrosoftUIXaml_IApplicationFactory> {
        get throws {
            try _lazyIApplicationFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IApplicationFactory.self)).cast()
            }
        }
    }

    private static var _lazyIApplicationStatics: COM.COMReference<SWRT_MicrosoftUIXaml_IApplicationStatics>.Optional = .none

    internal static var _iapplicationStatics: COM.COMInterop<SWRT_MicrosoftUIXaml_IApplicationStatics> {
        get throws {
            try _lazyIApplicationStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IApplicationStatics.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _iapplicationOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_MicrosoftUIXaml_IApplicationOverrides.self) {
            if !_iapplicationOverrides_outer.isInitialized {
                _iapplicationOverrides_outer.initialize(embedder: self,
                    virtualTable: &MicrosoftUIXaml_ApplicationBinding.VirtualTables.iapplicationOverrides)
            }
            return .init(_iapplicationOverrides_outer.toCOM())
        }
        return .none
    }
}