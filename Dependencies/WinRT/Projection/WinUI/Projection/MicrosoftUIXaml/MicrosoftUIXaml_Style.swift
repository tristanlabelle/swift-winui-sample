// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Contains property setters that can be shared between instances of a type. A Style is usually declared in a resources collection so that it can be shared and used for applying control templates and other styles.
public final class MicrosoftUIXaml_Style: MicrosoftUIXaml_DependencyObject, @unchecked Sendable {
    /// Initializes a new instance of the Style class, with no initial TargetType and an empty Setters collection.
    public override init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXaml_StyleBinding.self))
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// Initializes a new instance of the Style class, with a specified initial TargetType and an empty Setters collection.
    /// - Parameter targetType: The TargetType to set for the Style.
    public init(_ targetType: WindowsUIXamlInterop_TypeName) throws {
        let _instance = try Self._istyleFactory.createInstance(targetType)
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// Locks the style so that the TargetType property or any Setter in the Setters collection cannot be changed.
    public func seal() throws {
        try _istyle.seal()
    }

    /// A defined style that is the basis of the current style. The default value is null.
    public var basedOn: MicrosoftUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_istyle.get_BasedOn())
        }
    }

    /// Sets a defined style that is the basis of the current style.
    /// - Parameter newValue: A defined style that is the basis of the current style. The default value is null.
    public func basedOn(_ value: MicrosoftUIXaml_Style?) throws {
        try _istyle.put_BasedOn(value)
    }

    /// Gets or sets a defined style that is the basis of the current style.
    public var basedOn_: MicrosoftUIXaml_Style! {
        get {
            try! NullResult.catch(self.basedOn)
        }
        set {
            try! self.basedOn(newValue)
        }
    }

    /// true if the style is read-only; otherwise, false.
    public var isSealed: Swift.Bool {
        get throws {
            try _istyle.get_IsSealed()
        }
    }

    /// Gets a value that indicates whether the style is read-only and cannot be changed.
    public var isSealed_: Swift.Bool {
        try! self.isSealed
    }

    /// A collection of Setter objects. The default is an empty collection.
    public var setters: MicrosoftUIXaml_SetterBaseCollection {
        get throws {
            try COM.NullResult.unwrap(_istyle.get_Setters())
        }
    }

    /// Gets a collection of Setter objects.
    public var setters_: MicrosoftUIXaml_SetterBaseCollection! {
        try! NullResult.catch(self.setters)
    }

    /// The type of object to which the style is applied. This value is usually set in XAML, not code. See Remarks.
    public var targetType: WindowsUIXamlInterop_TypeName {
        get throws {
            try _istyle.get_TargetType()
        }
    }

    /// Sets the type for which the style is intended. TargetType can be used to declare an implicit style resource if there's no resource key specified.
    /// - Parameter newValue: The type of object to which the style is applied. This value is usually set in XAML, not code. See Remarks.
    public func targetType(_ value: WindowsUIXamlInterop_TypeName) throws {
        try _istyle.put_TargetType(value)
    }

    /// Gets or sets the type for which the style is intended. TargetType can be used to declare an implicit style resource if there's no resource key specified.
    public var targetType_: WindowsUIXamlInterop_TypeName {
        get {
            try! self.targetType
        }
        set {
            try! self.targetType(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IStyle>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIStyle: COM.COMReference<SWRT_MicrosoftUIXaml_IStyle>.Optional = .none

    internal var _istyle: COM.COMInterop<SWRT_MicrosoftUIXaml_IStyle> {
        get throws {
            try _lazyIStyle.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXaml_IStyle.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Style")
            }
        }
    }

    private static var _lazyIStyleFactory: COM.COMReference<SWRT_MicrosoftUIXaml_IStyleFactory>.Optional = .none

    internal static var _istyleFactory: COM.COMInterop<SWRT_MicrosoftUIXaml_IStyleFactory> {
        get throws {
            try _lazyIStyleFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IStyleFactory.self)).cast()
            }
        }
    }
}