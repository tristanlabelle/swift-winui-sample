// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents a tree of XAML content and information about the context in which it is hosted.
public final class MicrosoftUIXaml_XamlRoot: WindowsRuntime.WinRTImport<MicrosoftUIXaml_XamlRootBinding>, @unchecked Sendable {
    /// Occurs when a property of XamlRoot has changed.
    @discardableResult
    public func changed(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_XamlRoot?, MicrosoftUIXaml_XamlRootChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Changed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).changed(removing: token) })
    }

    public func changed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Changed(token)
    }

    /// The root element of the XAML element tree.
    public var content: MicrosoftUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Content())
        }
    }

    /// Gets the root element of the XAML element tree.
    public var content_: MicrosoftUIXaml_UIElement! {
        try! NullResult.catch(self.content)
    }

    /// true if the XamlRoot is visible; otherwise, false.
    public var isHostVisible: Swift.Bool {
        get throws {
            try _interop.get_IsHostVisible()
        }
    }

    /// Gets a value that indicates whether the XamlRoot is visible.
    public var isHostVisible_: Swift.Bool {
        try! self.isHostVisible
    }

    /// A value that represents the number of raw (physical) pixels for each view pixel.
    public var rasterizationScale: Swift.Double {
        get throws {
            try _interop.get_RasterizationScale()
        }
    }

    /// Gets a value that represents the number of raw (physical) pixels for each view pixel.
    public var rasterizationScale_: Swift.Double {
        try! self.rasterizationScale
    }

    /// The width and height of the content area.
    public var size: WindowsFoundation_Size {
        get throws {
            try _interop.get_Size()
        }
    }

    /// Gets the width and height of the content area.
    public var size_: WindowsFoundation_Size {
        try! self.size
    }

    /// General environment information for the content island.
    public var contentIslandEnvironment: MicrosoftUIContent_ContentIslandEnvironment {
        get throws {
            try COM.NullResult.unwrap(_ixamlRoot2.get_ContentIslandEnvironment())
        }
    }

    /// Gets general environment information for the content island.
    public var contentIslandEnvironment_: MicrosoftUIContent_ContentIslandEnvironment! {
        try! NullResult.catch(self.contentIslandEnvironment)
    }


    public var coordinateConverter: MicrosoftUIContent_ContentCoordinateConverter {
        get throws {
            try COM.NullResult.unwrap(_ixamlRoot3.get_CoordinateConverter())
        }
    }


    public var coordinateConverter_: MicrosoftUIContent_ContentCoordinateConverter! {
        try! NullResult.catch(self.coordinateConverter)
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IXamlRoot>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIXamlRoot2: COM.COMReference<SWRT_MicrosoftUIXaml_IXamlRoot2>.Optional = .none

    internal var _ixamlRoot2: COM.COMInterop<SWRT_MicrosoftUIXaml_IXamlRoot2> {
        get throws {
            try _lazyIXamlRoot2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXaml_IXamlRoot2.self)).cast()
            }
        }
    }

    private var _lazyIXamlRoot3: COM.COMReference<SWRT_MicrosoftUIXaml_IXamlRoot3>.Optional = .none

    internal var _ixamlRoot3: COM.COMInterop<SWRT_MicrosoftUIXaml_IXamlRoot3> {
        get throws {
            try _lazyIXamlRoot3.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXaml_IXamlRoot3.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.XamlRoot")
            }
        }
    }
}