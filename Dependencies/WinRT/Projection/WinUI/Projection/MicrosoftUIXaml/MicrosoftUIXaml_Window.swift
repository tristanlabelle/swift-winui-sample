// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents the window of the current Application.
open class MicrosoftUIXaml_Window: WindowsRuntime.ComposableClass, @unchecked Sendable {
    /// Initializes a new instance of the Window class.
    public init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXaml_Window.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._iwindowFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Attempts to activate the application window by bringing it to the foreground and setting the input focus to it.
    public func activate() throws {
        try _iwindow.activate()
    }

    /// Closes the application window.
    public func close() throws {
        try _iwindow.close()
    }

    /// Enables title bar behavior on a XAML element when ExtendsContentIntoTitleBar is true.
    /// - Parameter titleBar: The element to support title bar behavior.
    public func setTitleBar(_ titleBar: MicrosoftUIXaml_UIElement?) throws {
        try _iwindow.setTitleBar(titleBar)
    }

    /// Occurs when the window has successfully been activated.
    @discardableResult
    public func activated(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowActivatedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iwindow.add_Activated(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).activated(removing: token) })
    }

    public func activated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iwindow.remove_Activated(token)
    }

    /// Occurs when the window has closed.
    @discardableResult
    public func closed(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iwindow.add_Closed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).closed(removing: token) })
    }

    public func closed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iwindow.remove_Closed(token)
    }

    /// Occurs when the app window has first rendered or has changed its rendering size.
    @discardableResult
    public func sizeChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowSizeChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iwindow.add_SizeChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).sizeChanged(removing: token) })
    }

    public func sizeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iwindow.remove_SizeChanged(token)
    }

    /// Occurs when the value of the Visible property changes.
    @discardableResult
    public func visibilityChanged(adding handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowVisibilityChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iwindow.add_VisibilityChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).visibilityChanged(removing: token) })
    }

    public func visibilityChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iwindow.remove_VisibilityChanged(token)
    }

    /// A value that reports the height and width of the application window.
    public var bounds: WindowsFoundation_Rect {
        get throws {
            try _iwindow.get_Bounds()
        }
    }

    /// Gets a Rect pixels.
    public var bounds_: WindowsFoundation_Rect {
        try! self.bounds
    }

    /// The Compositor for this window.
    public var compositor: MicrosoftUIComposition_Compositor {
        get throws {
            try COM.NullResult.unwrap(_iwindow.get_Compositor())
        }
    }

    /// Gets the Compositor for this window.
    public var compositor_: MicrosoftUIComposition_Compositor! {
        try! NullResult.catch(self.compositor)
    }

    /// The visual root of an application window.
    public var content: MicrosoftUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_iwindow.get_Content())
        }
    }

    /// Sets the visual root of an application window.
    /// - Parameter newValue: The visual root of an application window.
    public func content(_ value: MicrosoftUIXaml_UIElement?) throws {
        try _iwindow.put_Content(value)
    }

    /// Gets or sets the visual root of an application window.
    public var content_: MicrosoftUIXaml_UIElement! {
        get {
            try! NullResult.catch(self.content)
        }
        set {
            try! self.content(newValue)
        }
    }

    /// Value is null for Desktop apps.
    public var coreWindow: WindowsUICore_CoreWindow {
        get throws {
            try COM.NullResult.unwrap(_iwindow.get_CoreWindow())
        }
    }

    /// Desktop apps always return null for this property.
    public var coreWindow_: WindowsUICore_CoreWindow! {
        try! NullResult.catch(self.coreWindow)
    }

    /// Always null in a Windows App SDK app.
    public var dispatcher: WindowsUICore_CoreDispatcher {
        get throws {
            try COM.NullResult.unwrap(_iwindow.get_Dispatcher())
        }
    }

    /// Always returns null in a Windows App SDK app.

    /// > [!NOTE]
    /// > Window.Dispatcher may be altered or unavailable in future releases. Use Window.DispatcherQueue instead.
    public var dispatcher_: WindowsUICore_CoreDispatcher! {
        try! NullResult.catch(self.dispatcher)
    }

    /// The DispatcherQueue object for the window.
    public var dispatcherQueue: MicrosoftUIDispatching_DispatcherQueue {
        get throws {
            try COM.NullResult.unwrap(_iwindow.get_DispatcherQueue())
        }
    }

    /// Gets the DispatcherQueue object for the window.
    public var dispatcherQueue_: MicrosoftUIDispatching_DispatcherQueue! {
        try! NullResult.catch(self.dispatcherQueue)
    }

    /// true if the default title bar should be hidden; otherwise, false.
    public var extendsContentIntoTitleBar: Swift.Bool {
        get throws {
            try _iwindow.get_ExtendsContentIntoTitleBar()
        }
    }

    /// Sets a value that specifies whether the default title bar of the window should be hidden to create space for app content.
    /// - Parameter newValue: true if the default title bar should be hidden; otherwise, false.
    public func extendsContentIntoTitleBar(_ value: Swift.Bool) throws {
        try _iwindow.put_ExtendsContentIntoTitleBar(value)
    }

    /// Gets or sets a value that specifies whether the default title bar of the window should be hidden to create space for app content.
    public var extendsContentIntoTitleBar_: Swift.Bool {
        get {
            try! self.extendsContentIntoTitleBar
        }
        set {
            try! self.extendsContentIntoTitleBar(newValue)
        }
    }

    /// The string used for the window title.
    public var title: Swift.String {
        get throws {
            try _iwindow.get_Title()
        }
    }

    /// Sets a string used for the window title.
    /// - Parameter newValue: The string used for the window title.
    public func title(_ value: Swift.String) throws {
        try _iwindow.put_Title(value)
    }

    /// Gets or sets a string used for the window title.
    public var title_: Swift.String {
        get {
            try! self.title
        }
        set {
            try! self.title(newValue)
        }
    }

    /// true if the window is visible; false if the window is not visible.
    public var visible: Swift.Bool {
        get throws {
            try _iwindow.get_Visible()
        }
    }

    /// Gets a value that reports whether the window is visible.
    public var visible_: Swift.Bool {
        try! self.visible
    }

    /// The AppWindow associated with this XAML Window.
    public var appWindow: MicrosoftUIWindowing_AppWindow {
        get throws {
            try COM.NullResult.unwrap(_iwindow2.get_AppWindow())
        }
    }

    /// Gets the AppWindow associated with this XAML Window.
    public var appWindow_: MicrosoftUIWindowing_AppWindow! {
        try! NullResult.catch(self.appWindow)
    }

    /// The system backdrop to apply to this Window.
    public var systemBackdrop: MicrosoftUIXamlMedia_SystemBackdrop {
        get throws {
            try COM.NullResult.unwrap(_iwindow2.get_SystemBackdrop())
        }
    }

    /// Sets the system backdrop to apply to this Window. The backdrop is rendered behind the Window content.
    /// - Parameter newValue: The system backdrop to apply to this Window.
    public func systemBackdrop(_ value: MicrosoftUIXamlMedia_SystemBackdrop?) throws {
        try _iwindow2.put_SystemBackdrop(value)
    }

    /// Gets or sets the system backdrop to apply to this Window. The backdrop is rendered behind the Window content.
    public var systemBackdrop_: MicrosoftUIXamlMedia_SystemBackdrop! {
        get {
            try! NullResult.catch(self.systemBackdrop)
        }
        set {
            try! self.systemBackdrop(newValue)
        }
    }

    /// Value is null for Desktop apps.
    public static var current: MicrosoftUIXaml_Window {
        get throws {
            try COM.NullResult.unwrap(_iwindowStatics.get_Current())
        }
    }

    /// Desktop apps always return null for this property.
    public static var current_: MicrosoftUIXaml_Window! {
        try! NullResult.catch(Self.current)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IWindow>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIWindow: COM.COMReference<SWRT_MicrosoftUIXaml_IWindow>.Optional = .none

    internal var _iwindow: COM.COMInterop<SWRT_MicrosoftUIXaml_IWindow> {
        get throws {
            try _lazyIWindow.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IWindow.self)).cast()
            }
        }
    }

    private var _lazyIWindow2: COM.COMReference<SWRT_MicrosoftUIXaml_IWindow2>.Optional = .none

    internal var _iwindow2: COM.COMInterop<SWRT_MicrosoftUIXaml_IWindow2> {
        get throws {
            try _lazyIWindow2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IWindow2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Window")
            }
        }
    }

    private static var _lazyIWindowFactory: COM.COMReference<SWRT_MicrosoftUIXaml_IWindowFactory>.Optional = .none

    internal static var _iwindowFactory: COM.COMInterop<SWRT_MicrosoftUIXaml_IWindowFactory> {
        get throws {
            try _lazyIWindowFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IWindowFactory.self)).cast()
            }
        }
    }

    private static var _lazyIWindowStatics: COM.COMReference<SWRT_MicrosoftUIXaml_IWindowStatics>.Optional = .none

    internal static var _iwindowStatics: COM.COMInterop<SWRT_MicrosoftUIXaml_IWindowStatics> {
        get throws {
            try _lazyIWindowStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IWindowStatics.self)).cast()
            }
        }
    }
}