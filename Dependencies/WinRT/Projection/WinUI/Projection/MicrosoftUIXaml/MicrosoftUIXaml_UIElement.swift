// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// UIElement is a base class for most of the Windows Runtime UI objects that have visual appearance and can process basic input as part of your app's user interface.
open class MicrosoftUIXaml_UIElement: MicrosoftUIXaml_DependencyObject, MicrosoftUIComposition_IAnimationObjectProtocol, MicrosoftUIComposition_IVisualElementProtocol, MicrosoftUIComposition_IVisualElement2Protocol, @unchecked Sendable {
    /// Updates the DesiredSize of a UIElement. Typically, objects that implement custom layout for their layout children call this method from their own MeasureOverride implementations to form a recursive layout update.
    /// - Parameter availableSize: The available space that a parent can allocate to a child object. A child object can request a larger space than what is available; the provided size might be accommodated if scrolling or other resize behavior is possible in that particular container.
    public func measure(_ availableSize: WindowsFoundation_Size) throws {
        try _iuielement.measure(availableSize)
    }

    /// Positions child objects and determines a size for a UIElement. Parent objects that implement custom layout for their child elements should call this method from their layout override implementations to form a recursive layout update.
    /// - Parameter finalRect: The final size that the parent computes for the child in layout, provided as a Rect value.
    public func arrange(_ finalRect: WindowsFoundation_Rect) throws {
        try _iuielement.arrange(finalRect)
    }

    /// Sets pointer capture to a UIElement. Once captured, only the element that has capture will fire pointer-related events.
    /// - Parameter value: The pointer object reference.
    /// - Returns: true if the object has pointer capture; otherwise, false.
    public func capturePointer(_ value: MicrosoftUIXamlInput_Pointer?) throws -> Swift.Bool {
        try _iuielement.capturePointer(value)
    }

    /// Releases pointer captures for capture of one specific pointer by this UIElement.
    /// - Parameter value: The pointer reference. Use either saved references from previous captures, or pointer event data, to obtain this reference.
    public func releasePointerCapture(_ value: MicrosoftUIXamlInput_Pointer?) throws {
        try _iuielement.releasePointerCapture(value)
    }

    /// Releases all pointer captures held by this element.
    public func releasePointerCaptures() throws {
        try _iuielement.releasePointerCaptures()
    }

    /// Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify handledEventsToo as true to have the provided handler be invoked even if the event is handled elsewhere.
    /// - Parameter routedEvent: An identifier for the routed event to be handled.
    /// - Parameter handler: A reference to the handler implementation.
    /// - Parameter handledEventsToo: true to register the handler such that it is invoked even when the routed event is marked handled in its event data.

    /// false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled. The default is false.

    /// Do not routinely ask to rehandle a routed event, because it interferes with the intended design of the Windows Runtime event system for control compositing.
    public func addHandler(_ routedEvent: MicrosoftUIXaml_RoutedEvent?, _ handler: WindowsRuntime.IInspectable?, _ handledEventsToo: Swift.Bool) throws {
        try _iuielement.addHandler(routedEvent, handler, handledEventsToo)
    }

    /// Removes the specified routed event handler from this UIElement. Typically the handler in question was added by AddHandler.
    /// - Parameter routedEvent: The identifier of the routed event for which the handler is attached.
    /// - Parameter handler: The specific handler implementation to remove from the event handler collection on this UIElement.
    public func removeHandler(_ routedEvent: MicrosoftUIXaml_RoutedEvent?, _ handler: WindowsRuntime.IInspectable?) throws {
        try _iuielement.removeHandler(routedEvent, handler)
    }

    /// Returns a transform object that can be used to transform coordinates from the UIElement to the specified object.
    /// - Parameter visual: The object to compare to the current object for purposes of obtaining the transform.

    /// If this parameter is null, then the root of the XAML tree is used.
    /// - Returns: The transform information as an object. Call methods on this object to get a practical transform.
    public func transformToVisual(_ visual: MicrosoftUIXaml_UIElement?) throws -> MicrosoftUIXamlMedia_GeneralTransform {
        try COM.NullResult.unwrap(_iuielement.transformToVisual(visual))
    }

    /// Invalidates the measurement state (layout) for a UIElement.
    public func invalidateMeasure() throws {
        try _iuielement.invalidateMeasure()
    }

    /// Invalidates the arrange state (layout) for a UIElement. After the invalidation, the UIElement will have its layout updated, which will occur asynchronously.
    public func invalidateArrange() throws {
        try _iuielement.invalidateArrange()
    }

    /// Ensures that all positions of child objects of a UIElement are properly updated for layout.
    public func updateLayout() throws {
        try _iuielement.updateLayout()
    }

    /// Cancels ongoing direct manipulation processing (system-defined panning/zooming) on any ScrollViewer parent that contains the current UIElement.
    /// - Returns: true if a ScrollViewer parent exists and setting the value resulted in canceling the panning/zooming action. false if calling the method results in no action.
    public func cancelDirectManipulations() throws -> Swift.Bool {
        try _iuielement.cancelDirectManipulations()
    }

    /// Initiates a drag-and-drop operation.

    /// > [!IMPORTANT]
    /// > Not supported if a user runs the app in elevated mode, as an administrator.
    /// - Parameter pointerPoint: The coordinates of the pointer where the user interacts with the screen, and where the drag visual is attached.
    /// - Returns: A DataPackageOperation value that indicates the type of drag-and-drop operation, and whether the operation was successful.
    public func startDragAsync(_ pointerPoint: MicrosoftUIInput_PointerPoint?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelDataTransfer_DataPackageOperation> {
        try COM.NullResult.unwrap(_iuielement.startDragAsync(pointerPoint))
    }

    /// Initiates a request to the XAML framework to bring the element into view within any scrollable regions it is contained within.
    public func startBringIntoView() throws {
        try _iuielement.startBringIntoView()
    }

    /// Initiates a request to the XAML framework to bring the element into view using the specified options.
    /// - Parameter options: An instance of BringIntoViewOptions.
    public func startBringIntoView(_ options: MicrosoftUIXaml_BringIntoViewOptions?) throws {
        try _iuielement.startBringIntoViewWithOptions(options)
    }

    /// Attempts to invoke a keyboard shortcut (or accelerator) by searching the entire visual tree of the UIElement for the shortcut.
    /// - Parameter args: The ProcessKeyboardAcceleratorEventArgs.
    public func tryInvokeKeyboardAccelerator(_ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        try _iuielement.tryInvokeKeyboardAccelerator(args)
    }

    /// Attempts to set focus to this element.
    /// - Parameter value: How this element obtains focus.
    /// - Returns: True if keyboard focus and logical focus were set to this element. False if only logical focus was set to this element, or if the call to this method did not force the focus to change.
    public func focus(_ value: MicrosoftUIXaml_FocusState) throws -> Swift.Bool {
        try _iuielement.focus(value)
    }

    /// Begins the specified animation on the element.
    /// - Parameter animation: The animation to start.
    public func startAnimation(_ animation: MicrosoftUIComposition_ICompositionAnimationBase?) throws {
        try _iuielement.startAnimation(animation)
    }

    /// Stops the specified animation on the element.
    /// - Parameter animation: The animation to stop.
    public func stopAnimation(_ animation: MicrosoftUIComposition_ICompositionAnimationBase?) throws {
        try _iuielement.stopAnimation(animation)
    }

    /// Occurs when access keys should no longer be displayed.
    @discardableResult
    public func accessKeyDisplayDismissed(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_AccessKeyDisplayDismissed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).accessKeyDisplayDismissed(removing: token) })
    }

    public func accessKeyDisplayDismissed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_AccessKeyDisplayDismissed(token)
    }

    /// Occurs when the user requests that access keys be displayed.
    @discardableResult
    public func accessKeyDisplayRequested(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_AccessKeyDisplayRequested(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).accessKeyDisplayRequested(removing: token) })
    }

    public func accessKeyDisplayRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_AccessKeyDisplayRequested(token)
    }

    /// Occurs when a user completes an access key sequence.
    @discardableResult
    public func accessKeyInvoked(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_AccessKeyInvokedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_AccessKeyInvoked(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).accessKeyInvoked(removing: token) })
    }

    public func accessKeyInvoked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_AccessKeyInvoked(token)
    }

    /// Occurs when StartBringIntoView is called on this element or one of its descendants.
    @discardableResult
    public func bringIntoViewRequested(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_BringIntoViewRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_BringIntoViewRequested(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).bringIntoViewRequested(removing: token) })
    }

    public func bringIntoViewRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_BringIntoViewRequested(token)
    }

    /// Occurs when a single, composed character is received by the input queue.
    @discardableResult
    public func characterReceived(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_CharacterReceived(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).characterReceived(removing: token) })
    }

    public func characterReceived(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_CharacterReceived(token)
    }

    /// Occurs when a context input gesture continues into a manipulation gesture, to notify the element that the context flyout should not be opened.
    @discardableResult
    public func contextCanceled(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_RoutedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ContextCanceled(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).contextCanceled(removing: token) })
    }

    public func contextCanceled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ContextCanceled(token)
    }

    /// Occurs when the user has completed a context input gesture, such as a right-click.
    @discardableResult
    public func contextRequested(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_ContextRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ContextRequested(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).contextRequested(removing: token) })
    }

    public func contextRequested(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ContextRequested(token)
    }

    /// Occurs when an otherwise unhandled DoubleTap interaction occurs over the hit test area of this element.
    @discardableResult
    public func doubleTapped(adding handler: MicrosoftUIXamlInput_DoubleTappedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DoubleTapped(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).doubleTapped(removing: token) })
    }

    public func doubleTapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DoubleTapped(token)
    }

    /// Occurs when the input system reports an underlying drag event with this element as the target.
    @discardableResult
    public func dragEnter(adding handler: MicrosoftUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DragEnter(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).dragEnter(removing: token) })
    }

    public func dragEnter(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DragEnter(token)
    }

    /// Occurs when the input system reports an underlying drag event with this element as the origin.
    @discardableResult
    public func dragLeave(adding handler: MicrosoftUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DragLeave(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).dragLeave(removing: token) })
    }

    public func dragLeave(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DragLeave(token)
    }

    /// Occurs when the input system reports an underlying drag event with this element as the potential drop target.
    @discardableResult
    public func dragOver(adding handler: MicrosoftUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DragOver(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).dragOver(removing: token) })
    }

    public func dragOver(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DragOver(token)
    }

    /// Occurs when a drag operation is initiated.
    @discardableResult
    public func dragStarting(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_DragStartingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DragStarting(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).dragStarting(removing: token) })
    }

    public func dragStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DragStarting(token)
    }

    /// Occurs when the input system reports an underlying drop event with this element as the drop target.
    @discardableResult
    public func drop(adding handler: MicrosoftUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_Drop(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).drop(removing: token) })
    }

    public func drop(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_Drop(token)
    }

    /// Occurs when a drag-and-drop operation with this element as the source is ended.
    @discardableResult
    public func dropCompleted(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_DropCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_DropCompleted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).dropCompleted(removing: token) })
    }

    public func dropCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_DropCompleted(token)
    }

    /// Occurs before a UIElement receives focus. This event is raised synchronously to ensure focus isn't moved while the event is bubbling.
    @discardableResult
    public func gettingFocus(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_GettingFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_GettingFocus(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).gettingFocus(removing: token) })
    }

    public func gettingFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_GettingFocus(token)
    }

    /// Occurs when a UIElement receives focus. This event is raised asynchronously, so focus can move again before bubbling is complete.
    @discardableResult
    public func gotFocus(adding handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_GotFocus(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).gotFocus(removing: token) })
    }

    public func gotFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_GotFocus(token)
    }

    /// Occurs when an otherwise unhandled Hold interaction occurs over the hit test area of this element.
    @discardableResult
    public func holding(adding handler: MicrosoftUIXamlInput_HoldingEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_Holding(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).holding(removing: token) })
    }

    public func holding(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_Holding(token)
    }

    /// Occurs when a keyboard key is pressed while the UIElement has focus.
    @discardableResult
    public func keyDown(adding handler: MicrosoftUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_KeyDown(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).keyDown(removing: token) })
    }

    public func keyDown(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_KeyDown(token)
    }

    /// Occurs when a keyboard key is released while the UIElement has focus.
    @discardableResult
    public func keyUp(adding handler: MicrosoftUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_KeyUp(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).keyUp(removing: token) })
    }

    public func keyUp(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_KeyUp(token)
    }

    /// Occurs before a UIElement loses focus. This event is raised synchronously to ensure focus isn't moved while the event is bubbling.
    @discardableResult
    public func losingFocus(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_LosingFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_LosingFocus(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).losingFocus(removing: token) })
    }

    public func losingFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_LosingFocus(token)
    }

    /// Occurs when a UIElement loses focus. This event is raised asynchronously, so focus can move again before bubbling is complete.
    @discardableResult
    public func lostFocus(adding handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_LostFocus(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).lostFocus(removing: token) })
    }

    public func lostFocus(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_LostFocus(token)
    }

    /// Occurs when a manipulation on the UIElement is complete.
    @discardableResult
    public func manipulationCompleted(adding handler: MicrosoftUIXamlInput_ManipulationCompletedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationCompleted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).manipulationCompleted(removing: token) })
    }

    public func manipulationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationCompleted(token)
    }

    /// Occurs when the input device changes position during a manipulation.
    @discardableResult
    public func manipulationDelta(adding handler: MicrosoftUIXamlInput_ManipulationDeltaEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationDelta(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).manipulationDelta(removing: token) })
    }

    public func manipulationDelta(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationDelta(token)
    }

    /// Occurs when the input device loses contact with the UIElement object during a manipulation and inertia begins.
    @discardableResult
    public func manipulationInertiaStarting(adding handler: MicrosoftUIXamlInput_ManipulationInertiaStartingEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationInertiaStarting(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).manipulationInertiaStarting(removing: token) })
    }

    public func manipulationInertiaStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationInertiaStarting(token)
    }

    /// Occurs when an input device begins a manipulation on the UIElement.
    @discardableResult
    public func manipulationStarted(adding handler: MicrosoftUIXamlInput_ManipulationStartedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationStarted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).manipulationStarted(removing: token) })
    }

    public func manipulationStarted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationStarted(token)
    }

    /// Occurs when the manipulation processor is first created.
    @discardableResult
    public func manipulationStarting(adding handler: MicrosoftUIXamlInput_ManipulationStartingEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ManipulationStarting(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).manipulationStarting(removing: token) })
    }

    public func manipulationStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ManipulationStarting(token)
    }

    /// Occurs when a user attempts to move focus (via tab or directional arrows), but focus doesn't move because no focus candidate is found in the direction of movement.
    @discardableResult
    public func noFocusCandidateFound(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_NoFocusCandidateFound(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).noFocusCandidateFound(removing: token) })
    }

    public func noFocusCandidateFound(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_NoFocusCandidateFound(token)
    }

    /// Occurs when a pointer that made contact abnormally loses contact.
    @discardableResult
    public func pointerCanceled(adding handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerCanceled(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).pointerCanceled(removing: token) })
    }

    public func pointerCanceled(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerCanceled(token)
    }

    /// Occurs when pointer capture previously held by this element moves to another element or elsewhere.
    @discardableResult
    public func pointerCaptureLost(adding handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerCaptureLost(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).pointerCaptureLost(removing: token) })
    }

    public func pointerCaptureLost(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerCaptureLost(token)
    }

    /// Occurs when a pointer enters the hit test area of this element.
    @discardableResult
    public func pointerEntered(adding handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerEntered(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).pointerEntered(removing: token) })
    }

    public func pointerEntered(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerEntered(token)
    }

    /// Occurs when a pointer leaves the hit test area of this element.
    @discardableResult
    public func pointerExited(adding handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerExited(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).pointerExited(removing: token) })
    }

    public func pointerExited(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerExited(token)
    }

    /// Occurs when a pointer moves while the pointer remains within the hit test area of this element.
    @discardableResult
    public func pointerMoved(adding handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerMoved(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).pointerMoved(removing: token) })
    }

    public func pointerMoved(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerMoved(token)
    }

    /// Occurs when the pointer device initiates a Press action within this element.
    @discardableResult
    public func pointerPressed(adding handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerPressed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).pointerPressed(removing: token) })
    }

    public func pointerPressed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerPressed(token)
    }

    /// Occurs when the pointer device that previously initiated a Press action is released, while within this element. Note that the end of a Press action is not guaranteed to fire a PointerReleased event; other events may fire instead. For more info, see Remarks.
    @discardableResult
    public func pointerReleased(adding handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerReleased(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).pointerReleased(removing: token) })
    }

    public func pointerReleased(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerReleased(token)
    }

    /// Occurs when the delta value of a pointer wheel changes.
    @discardableResult
    public func pointerWheelChanged(adding handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PointerWheelChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).pointerWheelChanged(removing: token) })
    }

    public func pointerWheelChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PointerWheelChanged(token)
    }

    /// Occurs when a keyboard key is pressed while the UIElement has focus.
    @discardableResult
    public func previewKeyDown(adding handler: MicrosoftUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PreviewKeyDown(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).previewKeyDown(removing: token) })
    }

    public func previewKeyDown(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PreviewKeyDown(token)
    }

    /// Occurs when a keyboard key is released while the UIElement has focus.
    @discardableResult
    public func previewKeyUp(adding handler: MicrosoftUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_PreviewKeyUp(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).previewKeyUp(removing: token) })
    }

    public func previewKeyUp(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_PreviewKeyUp(token)
    }

    /// Occurs when a keyboard shortcut (or accelerator) is pressed.
    @discardableResult
    public func processKeyboardAccelerators(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_ProcessKeyboardAccelerators(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).processKeyboardAccelerators(removing: token) })
    }

    public func processKeyboardAccelerators(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_ProcessKeyboardAccelerators(token)
    }

    /// Occurs when a right-tap input stimulus happens while the pointer is over the element.
    @discardableResult
    public func rightTapped(adding handler: MicrosoftUIXamlInput_RightTappedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_RightTapped(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).rightTapped(removing: token) })
    }

    public func rightTapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_RightTapped(token)
    }

    /// Occurs when an otherwise unhandled Tap interaction occurs over the hit test area of this element.
    @discardableResult
    public func tapped(adding handler: MicrosoftUIXamlInput_TappedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iuielement.add_Tapped(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).tapped(removing: token) })
    }

    public func tapped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iuielement.remove_Tapped(token)
    }

    /// The access key (mnemonic) for this element.
    public var accessKey: Swift.String {
        get throws {
            try _iuielement.get_AccessKey()
        }
    }

    /// Sets the access key (mnemonic) for this element.
    /// - Parameter newValue: The access key (mnemonic) for this element.
    public func accessKey(_ value: Swift.String) throws {
        try _iuielement.put_AccessKey(value)
    }

    /// Gets or sets the access key (mnemonic) for this element.
    public var accessKey_: Swift.String {
        get {
            try! self.accessKey
        }
        set {
            try! self.accessKey(newValue)
        }
    }

    /// The element that defines the access key scope.
    public var accessKeyScopeOwner: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_AccessKeyScopeOwner())
        }
    }

    /// Sets a source element that provides the access key scope for this element, even if it's not in the visual tree of the source element.
    /// - Parameter newValue: The element that defines the access key scope.
    public func accessKeyScopeOwner(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _iuielement.put_AccessKeyScopeOwner(value)
    }

    /// Gets or sets a source element that provides the access key scope for this element, even if it's not in the visual tree of the source element.
    public var accessKeyScopeOwner_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.accessKeyScopeOwner)
        }
        set {
            try! self.accessKeyScopeOwner(newValue)
        }
    }

    /// The position of this UIElement, relative to its parent, computed during the arrange pass of the layout process.
    public var actualOffset: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement.get_ActualOffset()
        }
    }

    /// Gets the position of this UIElement, relative to its parent, computed during the arrange pass of the layout process.
    public var actualOffset_: WindowsFoundationNumerics_Vector3 {
        try! self.actualOffset
    }

    /// The size that this UIElement computed during the arrange pass of the layout process.
    public var actualSize: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _iuielement.get_ActualSize()
        }
    }

    /// Gets the size that this UIElement computed during the arrange pass of the layout process.
    public var actualSize_: WindowsFoundationNumerics_Vector2 {
        try! self.actualSize
    }

    /// true if this UIElement can be a drop target for purposes of drag-and-drop operations; otherwise, false. The default is false.
    public var allowDrop: Swift.Bool {
        get throws {
            try _iuielement.get_AllowDrop()
        }
    }

    /// Sets a value that determines whether this UIElement can be a drop target for purposes of drag-and-drop operations.
    /// - Parameter newValue: true if this UIElement can be a drop target for purposes of drag-and-drop operations; otherwise, false. The default is false.
    public func allowDrop(_ value: Swift.Bool) throws {
        try _iuielement.put_AllowDrop(value)
    }

    /// Gets or sets a value that determines whether this UIElement can be a drop target for purposes of drag-and-drop operations.
    public var allowDrop_: Swift.Bool {
        get {
            try! self.allowDrop
        }
        set {
            try! self.allowDrop(newValue)
        }
    }

    /// A value that indicates that rendered content should be cached as a composited bitmap when possible. If you specify a value of CacheMode, rendering operations from RenderTransform and Opacity execute on the graphics processing unit (GPU), if available. The default is null, which does not enable a cached composition mode.
    public var cacheMode: MicrosoftUIXamlMedia_CacheMode {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_CacheMode())
        }
    }

    /// Sets a value that indicates that rendered content should be cached as a composited bitmap when possible.
    /// - Parameter newValue: A value that indicates that rendered content should be cached as a composited bitmap when possible. If you specify a value of CacheMode, rendering operations from RenderTransform and Opacity execute on the graphics processing unit (GPU), if available. The default is null, which does not enable a cached composition mode.
    public func cacheMode(_ value: MicrosoftUIXamlMedia_CacheMode?) throws {
        try _iuielement.put_CacheMode(value)
    }

    /// Gets or sets a value that indicates that rendered content should be cached as a composited bitmap when possible.
    public var cacheMode_: MicrosoftUIXamlMedia_CacheMode! {
        get {
            try! NullResult.catch(self.cacheMode)
        }
        set {
            try! self.cacheMode(newValue)
        }
    }

    /// true if an element should be considered as a candidate for scroll anchoring; otherwise, false. The default is false.
    public var canBeScrollAnchor: Swift.Bool {
        get throws {
            try _iuielement.get_CanBeScrollAnchor()
        }
    }

    /// Sets a value that indicates whether the UIElement can be a candidate for scroll anchoring.
    /// - Parameter newValue: true if an element should be considered as a candidate for scroll anchoring; otherwise, false. The default is false.
    public func canBeScrollAnchor(_ value: Swift.Bool) throws {
        try _iuielement.put_CanBeScrollAnchor(value)
    }

    /// Gets or sets a value that indicates whether the UIElement can be a candidate for scroll anchoring.
    public var canBeScrollAnchor_: Swift.Bool {
        get {
            try! self.canBeScrollAnchor
        }
        set {
            try! self.canBeScrollAnchor(newValue)
        }
    }

    /// true if the element can be dragged as data in a drag-and-drop operation; otherwise, false. The default is false.
    public var canDrag: Swift.Bool {
        get throws {
            try _iuielement.get_CanDrag()
        }
    }

    /// Sets a value that indicates whether the element can be dragged as data in a drag-and-drop operation.
    /// - Parameter newValue: true if the element can be dragged as data in a drag-and-drop operation; otherwise, false. The default is false.
    public func canDrag(_ value: Swift.Bool) throws {
        try _iuielement.put_CanDrag(value)
    }

    /// Gets or sets a value that indicates whether the element can be dragged as data in a drag-and-drop operation.
    public var canDrag_: Swift.Bool {
        get {
            try! self.canDrag
        }
        set {
            try! self.canDrag(newValue)
        }
    }

    /// The center point of the element, which is the point about which rotation or scaling occurs.
    public var centerPoint: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement.get_CenterPoint()
        }
    }

    /// Sets the center point of the element, which is the point about which rotation or scaling occurs. Affects the rendering position of the element.
    /// - Parameter newValue: The center point of the element, which is the point about which rotation or scaling occurs.
    public func centerPoint(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _iuielement.put_CenterPoint(value)
    }

    /// Gets or sets the center point of the element, which is the point about which rotation or scaling occurs. Affects the rendering position of the element.
    public var centerPoint_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.centerPoint
        }
        set {
            try! self.centerPoint(newValue)
        }
    }

    /// The rectangle geometry to be used for clipping area sizing. The default value is null (no clipping).
    public var clip: MicrosoftUIXamlMedia_RectangleGeometry {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_Clip())
        }
    }

    /// Sets the RectangleGeometry used to define the outline of the contents of a UIElement.
    /// - Parameter newValue: The rectangle geometry to be used for clipping area sizing. The default value is null (no clipping).
    public func clip(_ value: MicrosoftUIXamlMedia_RectangleGeometry?) throws {
        try _iuielement.put_Clip(value)
    }

    /// Gets or sets the RectangleGeometry used to define the outline of the contents of a UIElement.
    public var clip_: MicrosoftUIXamlMedia_RectangleGeometry! {
        get {
            try! NullResult.catch(self.clip)
        }
        set {
            try! self.clip(newValue)
        }
    }

    /// A value of the enumeration. The default is Inherit, but see Remarks.
    public var compositeMode: MicrosoftUIXamlMedia_ElementCompositeMode {
        get throws {
            try _iuielement.get_CompositeMode()
        }
    }

    /// Sets a property that declares alternate composition and blending modes for the element in its parent layout and window. This is relevant for elements that are involved in a mixed XAML / Microsoft DirectX UI.
    /// - Parameter newValue: A value of the enumeration. The default is Inherit, but see Remarks.
    public func compositeMode(_ value: MicrosoftUIXamlMedia_ElementCompositeMode) throws {
        try _iuielement.put_CompositeMode(value)
    }

    /// Gets or sets a property that declares alternate composition and blending modes for the element in its parent layout and window. This is relevant for elements that are involved in a mixed XAML / Microsoft DirectX UI.
    public var compositeMode_: MicrosoftUIXamlMedia_ElementCompositeMode {
        get {
            try! self.compositeMode
        }
        set {
            try! self.compositeMode(newValue)
        }
    }

    /// The flyout associated with this element, if any; otherwise, null. The default is null.
    public var contextFlyout: MicrosoftUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_ContextFlyout())
        }
    }

    /// Sets the flyout associated with this element.
    /// - Parameter newValue: The flyout associated with this element, if any; otherwise, null. The default is null.
    public func contextFlyout(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _iuielement.put_ContextFlyout(value)
    }

    /// Gets or sets the flyout associated with this element.
    public var contextFlyout_: MicrosoftUIXamlControlsPrimitives_FlyoutBase! {
        get {
            try! NullResult.catch(self.contextFlyout)
        }
        set {
            try! self.contextFlyout(newValue)
        }
    }

    /// The size that this UIElement computed during the measure pass of the layout process.
    public var desiredSize: WindowsFoundation_Size {
        get throws {
            try _iuielement.get_DesiredSize()
        }
    }

    /// Gets the size that this UIElement computed during the measure pass of the layout process.
    public var desiredSize_: WindowsFoundation_Size {
        try! self.desiredSize
    }

    /// true to dismiss the access key display when an access key is invoked; otherwise, false.
    public var exitDisplayModeOnAccessKeyInvoked: Swift.Bool {
        get throws {
            try _iuielement.get_ExitDisplayModeOnAccessKeyInvoked()
        }
    }

    /// Sets a value that specifies whether the access key display is dismissed when an access key is invoked.
    /// - Parameter newValue: true to dismiss the access key display when an access key is invoked; otherwise, false.
    public func exitDisplayModeOnAccessKeyInvoked(_ value: Swift.Bool) throws {
        try _iuielement.put_ExitDisplayModeOnAccessKeyInvoked(value)
    }

    /// Gets or sets a value that specifies whether the access key display is dismissed when an access key is invoked.
    public var exitDisplayModeOnAccessKeyInvoked_: Swift.Bool {
        get {
            try! self.exitDisplayModeOnAccessKeyInvoked
        }
        set {
            try! self.exitDisplayModeOnAccessKeyInvoked(newValue)
        }
    }

    /// A value of the enumeration. A value of Unfocused indicates that the control does not have focus.
    public var focusState: MicrosoftUIXaml_FocusState {
        get throws {
            try _iuielement.get_FocusState()
        }
    }

    /// Gets a value that specifies whether this control has focus, and the mode by which focus was obtained.
    public var focusState_: MicrosoftUIXaml_FocusState {
        try! self.focusState
    }

    /// A value of the enumeration that indicates whether the framework automatically adjusts the element's visual properties when high contrast themes are enabled. The default is Application.
    public var highContrastAdjustment: MicrosoftUIXaml_ElementHighContrastAdjustment {
        get throws {
            try _iuielement.get_HighContrastAdjustment()
        }
    }

    /// Sets a value that indicates whether the framework automatically adjusts the element's visual properties when high contrast themes are enabled.
    /// - Parameter newValue: A value of the enumeration that indicates whether the framework automatically adjusts the element's visual properties when high contrast themes are enabled. The default is Application.
    public func highContrastAdjustment(_ value: MicrosoftUIXaml_ElementHighContrastAdjustment) throws {
        try _iuielement.put_HighContrastAdjustment(value)
    }

    /// Gets or sets a value that indicates whether the framework automatically adjusts the element's visual properties when high contrast themes are enabled.
    public var highContrastAdjustment_: MicrosoftUIXaml_ElementHighContrastAdjustment {
        get {
            try! self.highContrastAdjustment
        }
        set {
            try! self.highContrastAdjustment(newValue)
        }
    }

    /// true if an element defines its own scope; otherwise, false.
    public var isAccessKeyScope: Swift.Bool {
        get throws {
            try _iuielement.get_IsAccessKeyScope()
        }
    }

    /// Sets a value that indicates whether an element defines its own access key scope.
    /// - Parameter newValue: true if an element defines its own scope; otherwise, false.
    public func isAccessKeyScope(_ value: Swift.Bool) throws {
        try _iuielement.put_IsAccessKeyScope(value)
    }

    /// Gets or sets a value that indicates whether an element defines its own access key scope.
    public var isAccessKeyScope_: Swift.Bool {
        get {
            try! self.isAccessKeyScope
        }
        set {
            try! self.isAccessKeyScope(newValue)
        }
    }

    /// true if a DoubleTapped event can originate from this element; otherwise, false.
    public var isDoubleTapEnabled: Swift.Bool {
        get throws {
            try _iuielement.get_IsDoubleTapEnabled()
        }
    }

    /// Sets a value that determines whether the DoubleTapped event can originate from that element.
    /// - Parameter newValue: true if a DoubleTapped event can originate from this element; otherwise, false.
    public func isDoubleTapEnabled(_ value: Swift.Bool) throws {
        try _iuielement.put_IsDoubleTapEnabled(value)
    }

    /// Gets or sets a value that determines whether the DoubleTapped event can originate from that element.
    public var isDoubleTapEnabled_: Swift.Bool {
        get {
            try! self.isDoubleTapEnabled
        }
        set {
            try! self.isDoubleTapEnabled(newValue)
        }
    }

    /// true if the contained area of this UIElement can be used for hit testing; otherwise, false. The default is true.
    public var isHitTestVisible: Swift.Bool {
        get throws {
            try _iuielement.get_IsHitTestVisible()
        }
    }

    /// Sets whether the contained area of this UIElement can return true values for hit testing.
    /// - Parameter newValue: true if the contained area of this UIElement can be used for hit testing; otherwise, false. The default is true.
    public func isHitTestVisible(_ value: Swift.Bool) throws {
        try _iuielement.put_IsHitTestVisible(value)
    }

    /// Gets or sets whether the contained area of this UIElement can return true values for hit testing.
    public var isHitTestVisible_: Swift.Bool {
        get {
            try! self.isHitTestVisible
        }
        set {
            try! self.isHitTestVisible(newValue)
        }
    }

    /// true if a Holding event can originate from this element; otherwise, false.
    public var isHoldingEnabled: Swift.Bool {
        get throws {
            try _iuielement.get_IsHoldingEnabled()
        }
    }

    /// Sets a value that determines whether the Holding event can originate from that element.
    /// - Parameter newValue: true if a Holding event can originate from this element; otherwise, false.
    public func isHoldingEnabled(_ value: Swift.Bool) throws {
        try _iuielement.put_IsHoldingEnabled(value)
    }

    /// Gets or sets a value that determines whether the Holding event can originate from that element.
    public var isHoldingEnabled_: Swift.Bool {
        get {
            try! self.isHoldingEnabled
        }
        set {
            try! self.isHoldingEnabled(newValue)
        }
    }

    /// true if a RightTapped event can originate from this element; otherwise, false.
    public var isRightTapEnabled: Swift.Bool {
        get throws {
            try _iuielement.get_IsRightTapEnabled()
        }
    }

    /// Sets a value that determines whether the RightTapped event can originate from that element.
    /// - Parameter newValue: true if a RightTapped event can originate from this element; otherwise, false.
    public func isRightTapEnabled(_ value: Swift.Bool) throws {
        try _iuielement.put_IsRightTapEnabled(value)
    }

    /// Gets or sets a value that determines whether the RightTapped event can originate from that element.
    public var isRightTapEnabled_: Swift.Bool {
        get {
            try! self.isRightTapEnabled
        }
        set {
            try! self.isRightTapEnabled(newValue)
        }
    }

    /// True, if the control is included in tab navigation. Otherwise, false. The default is true.
    public var isTabStop: Swift.Bool {
        get throws {
            try _iuielement.get_IsTabStop()
        }
    }

    /// Sets a value that indicates whether a control is included in tab navigation.
    /// - Parameter newValue: True, if the control is included in tab navigation. Otherwise, false. The default is true.
    public func isTabStop(_ value: Swift.Bool) throws {
        try _iuielement.put_IsTabStop(value)
    }

    /// Gets or sets a value that indicates whether a control is included in tab navigation.
    public var isTabStop_: Swift.Bool {
        get {
            try! self.isTabStop
        }
        set {
            try! self.isTabStop(newValue)
        }
    }

    /// true if a Tapped event can originate from this element; otherwise, false.
    public var isTapEnabled: Swift.Bool {
        get throws {
            try _iuielement.get_IsTapEnabled()
        }
    }

    /// Sets a value that determines whether the Tapped event can originate from that element.
    /// - Parameter newValue: true if a Tapped event can originate from this element; otherwise, false.
    public func isTapEnabled(_ value: Swift.Bool) throws {
        try _iuielement.put_IsTapEnabled(value)
    }

    /// Gets or sets a value that determines whether the Tapped event can originate from that element.
    public var isTapEnabled_: Swift.Bool {
        get {
            try! self.isTapEnabled
        }
        set {
            try! self.isTapEnabled(newValue)
        }
    }

    /// The number of pixels to move the Key Tip. Positive values move it right. Negative values move it left.
    public var keyTipHorizontalOffset: Swift.Double {
        get throws {
            try _iuielement.get_KeyTipHorizontalOffset()
        }
    }

    /// Sets a value that indicates how far left or right the Key Tip is placed in relation to the UIElement.
    /// - Parameter newValue: The number of pixels to move the Key Tip. Positive values move it right. Negative values move it left.
    public func keyTipHorizontalOffset(_ value: Swift.Double) throws {
        try _iuielement.put_KeyTipHorizontalOffset(value)
    }

    /// Gets or sets a value that indicates how far left or right the Key Tip is placed in relation to the UIElement.
    public var keyTipHorizontalOffset_: Swift.Double {
        get {
            try! self.keyTipHorizontalOffset
        }
        set {
            try! self.keyTipHorizontalOffset(newValue)
        }
    }

    /// A value of the enumeration. The default is Auto.
    public var keyTipPlacementMode: MicrosoftUIXamlInput_KeyTipPlacementMode {
        get throws {
            try _iuielement.get_KeyTipPlacementMode()
        }
    }

    /// Sets a value that indicates where the access key Key Tip is placed in relation to the boundary of the UIElement.
    /// - Parameter newValue: A value of the enumeration. The default is Auto.
    public func keyTipPlacementMode(_ value: MicrosoftUIXamlInput_KeyTipPlacementMode) throws {
        try _iuielement.put_KeyTipPlacementMode(value)
    }

    /// Gets or sets a value that indicates where the access key Key Tip is placed in relation to the boundary of the UIElement.
    public var keyTipPlacementMode_: MicrosoftUIXamlInput_KeyTipPlacementMode {
        get {
            try! self.keyTipPlacementMode
        }
        set {
            try! self.keyTipPlacementMode(newValue)
        }
    }

    /// The element targeted by the Key Tip.
    public var keyTipTarget: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_KeyTipTarget())
        }
    }

    /// Sets a value that indicates the element targeted by the access key Key Tip.
    /// - Parameter newValue: The element targeted by the Key Tip.
    public func keyTipTarget(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _iuielement.put_KeyTipTarget(value)
    }

    /// Gets or sets a value that indicates the element targeted by the access key Key Tip.
    public var keyTipTarget_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.keyTipTarget)
        }
        set {
            try! self.keyTipTarget(newValue)
        }
    }

    /// The number of pixels to move the Key Tip. Positive values move it down. Negative values move it up.
    public var keyTipVerticalOffset: Swift.Double {
        get throws {
            try _iuielement.get_KeyTipVerticalOffset()
        }
    }

    /// Sets a value that indicates how far up or down the Key Tip is placed in relation to the UI element.
    /// - Parameter newValue: The number of pixels to move the Key Tip. Positive values move it down. Negative values move it up.
    public func keyTipVerticalOffset(_ value: Swift.Double) throws {
        try _iuielement.put_KeyTipVerticalOffset(value)
    }

    /// Gets or sets a value that indicates how far up or down the Key Tip is placed in relation to the UI element.
    public var keyTipVerticalOffset_: Swift.Double {
        get {
            try! self.keyTipVerticalOffset
        }
        set {
            try! self.keyTipVerticalOffset(newValue)
        }
    }

    /// A value of the enumeration. The default is Auto.
    public var keyboardAcceleratorPlacementMode: MicrosoftUIXamlInput_KeyboardAcceleratorPlacementMode {
        get throws {
            try _iuielement.get_KeyboardAcceleratorPlacementMode()
        }
    }

    /// Sets a value that indicates whether the control tooltip displays the key combination for its associated keyboard accelerator.
    /// - Parameter newValue: A value of the enumeration. The default is Auto.
    public func keyboardAcceleratorPlacementMode(_ value: MicrosoftUIXamlInput_KeyboardAcceleratorPlacementMode) throws {
        try _iuielement.put_KeyboardAcceleratorPlacementMode(value)
    }

    /// Gets or sets a value that indicates whether the control tooltip displays the key combination for its associated keyboard accelerator.
    public var keyboardAcceleratorPlacementMode_: MicrosoftUIXamlInput_KeyboardAcceleratorPlacementMode {
        get {
            try! self.keyboardAcceleratorPlacementMode
        }
        set {
            try! self.keyboardAcceleratorPlacementMode(newValue)
        }
    }

    /// The control tooltip that displays the accelerator key combination.
    public var keyboardAcceleratorPlacementTarget: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_KeyboardAcceleratorPlacementTarget())
        }
    }

    /// Sets a value that indicates the control tooltip that displays the accelerator key combination.
    /// - Parameter newValue: The control tooltip that displays the accelerator key combination.
    public func keyboardAcceleratorPlacementTarget(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _iuielement.put_KeyboardAcceleratorPlacementTarget(value)
    }

    /// Gets or sets a value that indicates the control tooltip that displays the accelerator key combination.
    public var keyboardAcceleratorPlacementTarget_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.keyboardAcceleratorPlacementTarget)
        }
        set {
            try! self.keyboardAcceleratorPlacementTarget(newValue)
        }
    }

    /// The collection of KeyboardAccelerator objects.
    public var keyboardAccelerators: WindowsFoundationCollections_IVector<MicrosoftUIXamlInput_KeyboardAccelerator?> {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_KeyboardAccelerators())
        }
    }

    /// Gets the collection of key combinations that invoke an action using the keyboard.

    /// Accelerators are typically assigned to buttons or menu items.

    /// !Example of a menu showing keyboard accelerators for various menu items<br/>
    /// Example of a menu showing keyboard accelerators for various menu items
    public var keyboardAccelerators_: WindowsFoundationCollections_IVector<MicrosoftUIXamlInput_KeyboardAccelerator?>! {
        try! NullResult.catch(self.keyboardAccelerators)
    }

    /// The collection of XamlLight elements that apply to a UIElement.
    public var lights: WindowsFoundationCollections_IVector<MicrosoftUIXamlMedia_XamlLight?> {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_Lights())
        }
    }

    /// Gets the collection of XamlLight objects attached to this element.
    public var lights_: WindowsFoundationCollections_IVector<MicrosoftUIXamlMedia_XamlLight?>! {
        try! NullResult.catch(self.lights)
    }

    /// A value or values of the enumeration. The default is typically System, but this can vary on specific controls and elements. See Remarks.
    public var manipulationMode: MicrosoftUIXamlInput_ManipulationModes {
        get throws {
            try _iuielement.get_ManipulationMode()
        }
    }

    /// Sets the ManipulationModes value used for UIElement behavior and interaction with gestures. Setting this value enables handling the manipulation events from this element in app code.
    /// - Parameter newValue: A value or values of the enumeration. The default is typically System, but this can vary on specific controls and elements. See Remarks.
    public func manipulationMode(_ value: MicrosoftUIXamlInput_ManipulationModes) throws {
        try _iuielement.put_ManipulationMode(value)
    }

    /// Gets or sets the ManipulationModes value used for UIElement behavior and interaction with gestures. Setting this value enables handling the manipulation events from this element in app code.
    public var manipulationMode_: MicrosoftUIXamlInput_ManipulationModes {
        get {
            try! self.manipulationMode
        }
        set {
            try! self.manipulationMode(newValue)
        }
    }

    /// A value between 0 and 1.0 that declares the opacity factor, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.
    public var opacity: Swift.Double {
        get throws {
            try _iuielement.get_Opacity()
        }
    }

    /// Sets the degree of the object's opacity.
    /// - Parameter newValue: A value between 0 and 1.0 that declares the opacity factor, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.
    public func opacity(_ value: Swift.Double) throws {
        try _iuielement.put_Opacity(value)
    }

    /// Gets or sets the degree of the object's opacity.
    public var opacity_: Swift.Double {
        get {
            try! self.opacity
        }
        set {
            try! self.opacity(newValue)
        }
    }

    /// Gets the ScalarTransition that animates changes to the Opacity property.
    public var opacityTransition: MicrosoftUIXaml_ScalarTransition {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_OpacityTransition())
        }
    }

    /// Sets the ScalarTransition that animates changes to the Opacity property.
    public func opacityTransition(_ value: MicrosoftUIXaml_ScalarTransition?) throws {
        try _iuielement.put_OpacityTransition(value)
    }

    /// Gets or sets the ScalarTransition that animates changes to the Opacity property.
    public var opacityTransition_: MicrosoftUIXaml_ScalarTransition! {
        get {
            try! NullResult.catch(self.opacityTransition)
        }
        set {
            try! self.opacityTransition(newValue)
        }
    }

    /// The collection of captured pointers, each represented as a Pointer object.
    public var pointerCaptures: WindowsFoundationCollections_IVectorView<MicrosoftUIXamlInput_Pointer?> {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_PointerCaptures())
        }
    }

    /// Gets the set of all captured pointers, represented as Pointer values.
    public var pointerCaptures_: WindowsFoundationCollections_IVectorView<MicrosoftUIXamlInput_Pointer?>! {
        try! NullResult.catch(self.pointerCaptures)
    }

    /// A 3-D projection effect applied to the element.
    public var projection: MicrosoftUIXamlMedia_Projection {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_Projection())
        }
    }

    /// Sets the perspective projection (3-D effect) to apply when rendering this element.
    /// - Parameter newValue: A 3-D projection effect applied to the element.
    public func projection(_ value: MicrosoftUIXamlMedia_Projection?) throws {
        try _iuielement.put_Projection(value)
    }

    /// Gets or sets the perspective projection (3-D effect) to apply when rendering this element.
    public var projection_: MicrosoftUIXamlMedia_Projection! {
        get {
            try! NullResult.catch(self.projection)
        }
        set {
            try! self.projection(newValue)
        }
    }

    /// A value that represents the number of raw (physical) pixels for each view pixel. The default is 1.0.
    public var rasterizationScale: Swift.Double {
        get throws {
            try _iuielement.get_RasterizationScale()
        }
    }

    /// Gets a value that represents the number of raw (physical) pixels for each view pixel.
    /// - Parameter newValue: A value that represents the number of raw (physical) pixels for each view pixel. The default is 1.0.
    public func rasterizationScale(_ value: Swift.Double) throws {
        try _iuielement.put_RasterizationScale(value)
    }

    /// Gets a value that represents the number of raw (physical) pixels for each view pixel.
    public var rasterizationScale_: Swift.Double {
        get {
            try! self.rasterizationScale
        }
        set {
            try! self.rasterizationScale(newValue)
        }
    }

    /// The rendered size for this object. There is no default value.
    public var renderSize: WindowsFoundation_Size {
        get throws {
            try _iuielement.get_RenderSize()
        }
    }

    /// Gets the final render size of a UIElement. Use is not recommended, see Remarks.
    public var renderSize_: WindowsFoundation_Size {
        try! self.renderSize
    }

    /// Describes the specifics of the desired render transform. The default value is null.
    public var renderTransform: MicrosoftUIXamlMedia_Transform {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_RenderTransform())
        }
    }

    /// Sets transform information that affects the rendering position of a UIElement.
    /// - Parameter newValue: Describes the specifics of the desired render transform. The default value is null.
    public func renderTransform(_ value: MicrosoftUIXamlMedia_Transform?) throws {
        try _iuielement.put_RenderTransform(value)
    }

    /// Gets or sets transform information that affects the rendering position of a UIElement.
    public var renderTransform_: MicrosoftUIXamlMedia_Transform! {
        get {
            try! NullResult.catch(self.renderTransform)
        }
        set {
            try! self.renderTransform(newValue)
        }
    }

    /// The origin point of the render transform. The default value is a Point with value 0,0.
    public var renderTransformOrigin: WindowsFoundation_Point {
        get throws {
            try _iuielement.get_RenderTransformOrigin()
        }
    }

    /// Sets the origin point of any possible render transform declared by RenderTransform, relative to the bounds of the UIElement.
    /// - Parameter newValue: The origin point of the render transform. The default value is a Point with value 0,0.
    public func renderTransformOrigin(_ value: WindowsFoundation_Point) throws {
        try _iuielement.put_RenderTransformOrigin(value)
    }

    /// Gets or sets the origin point of any possible render transform declared by RenderTransform, relative to the bounds of the UIElement.
    public var renderTransformOrigin_: WindowsFoundation_Point {
        get {
            try! self.renderTransformOrigin
        }
        set {
            try! self.renderTransformOrigin(newValue)
        }
    }

    /// The angle of clockwise rotation, in degrees.
    public var rotation: Swift.Float {
        get throws {
            try _iuielement.get_Rotation()
        }
    }

    /// Sets the angle of clockwise rotation, in degrees. Rotates relative to the RotationAxis and the CenterPoint. Affects the rendering position of the element.
    /// - Parameter newValue: The angle of clockwise rotation, in degrees.
    public func rotation(_ value: Swift.Float) throws {
        try _iuielement.put_Rotation(value)
    }

    /// Gets or sets the angle of clockwise rotation, in degrees. Rotates relative to the RotationAxis and the CenterPoint. Affects the rendering position of the element.
    public var rotation_: Swift.Float {
        get {
            try! self.rotation
        }
        set {
            try! self.rotation(newValue)
        }
    }

    /// The axis to rotate the element around.
    public var rotationAxis: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement.get_RotationAxis()
        }
    }

    /// Sets the axis to rotate the element around.
    /// - Parameter newValue: The axis to rotate the element around.
    public func rotationAxis(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _iuielement.put_RotationAxis(value)
    }

    /// Gets or sets the axis to rotate the element around.
    public var rotationAxis_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.rotationAxis
        }
        set {
            try! self.rotationAxis(newValue)
        }
    }

    /// The ScalarTransition that animates changes to the Rotation property.
    public var rotationTransition: MicrosoftUIXaml_ScalarTransition {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_RotationTransition())
        }
    }

    /// Sets the ScalarTransition that animates changes to the Rotation property.
    /// - Parameter newValue: The ScalarTransition that animates changes to the Rotation property.
    public func rotationTransition(_ value: MicrosoftUIXaml_ScalarTransition?) throws {
        try _iuielement.put_RotationTransition(value)
    }

    /// Gets or sets the ScalarTransition that animates changes to the Rotation property.
    public var rotationTransition_: MicrosoftUIXaml_ScalarTransition! {
        get {
            try! NullResult.catch(self.rotationTransition)
        }
        set {
            try! self.rotationTransition(newValue)
        }
    }

    /// The scale of the element, relative to the element's CenterPoint.
    public var scale: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement.get_Scale()
        }
    }

    /// Sets the scale of the element. Scales relative to the element's CenterPoint. Affects the rendering position of the element.
    /// - Parameter newValue: The scale of the element, relative to the element's CenterPoint.
    public func scale(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _iuielement.put_Scale(value)
    }

    /// Gets or sets the scale of the element. Scales relative to the element's CenterPoint. Affects the rendering position of the element.
    public var scale_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.scale
        }
        set {
            try! self.scale(newValue)
        }
    }

    /// The Vector3Transition that animates changes to the Scale property.
    public var scaleTransition: MicrosoftUIXaml_Vector3Transition {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_ScaleTransition())
        }
    }

    /// Sets the Vector3Transition that animates changes to the Scale property.
    /// - Parameter newValue: The Vector3Transition that animates changes to the Scale property.
    public func scaleTransition(_ value: MicrosoftUIXaml_Vector3Transition?) throws {
        try _iuielement.put_ScaleTransition(value)
    }

    /// Gets or sets the Vector3Transition that animates changes to the Scale property.
    public var scaleTransition_: MicrosoftUIXaml_Vector3Transition! {
        get {
            try! NullResult.catch(self.scaleTransition)
        }
        set {
            try! self.scaleTransition(newValue)
        }
    }

    /// The shadow effect cast by the element.
    public var shadow: MicrosoftUIXamlMedia_Shadow {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_Shadow())
        }
    }

    /// Sets the shadow effect cast by the element.
    /// - Parameter newValue: The shadow effect cast by the element.
    public func shadow(_ value: MicrosoftUIXamlMedia_Shadow?) throws {
        try _iuielement.put_Shadow(value)
    }

    /// Gets or sets the shadow effect cast by the element.
    public var shadow_: MicrosoftUIXamlMedia_Shadow! {
        get {
            try! NullResult.catch(self.shadow)
        }
        set {
            try! self.shadow(newValue)
        }
    }

    /// A value of the enumeration. The default is Local.
    public var tabFocusNavigation: MicrosoftUIXamlInput_KeyboardNavigationMode {
        get throws {
            try _iuielement.get_TabFocusNavigation()
        }
    }

    /// Sets a value that modifies how tabbing and TabIndex work for this control.
    /// - Parameter newValue: A value of the enumeration. The default is Local.
    public func tabFocusNavigation(_ value: MicrosoftUIXamlInput_KeyboardNavigationMode) throws {
        try _iuielement.put_TabFocusNavigation(value)
    }

    /// Gets or sets a value that modifies how tabbing and TabIndex work for this control.
    public var tabFocusNavigation_: MicrosoftUIXamlInput_KeyboardNavigationMode {
        get {
            try! self.tabFocusNavigation
        }
        set {
            try! self.tabFocusNavigation(newValue)
        }
    }

    /// A value that determines the order of logical navigation for a device. The default value is MaxValue with the tab order based on declaration order in the XAML or child collections.
    public var tabIndex: Swift.Int32 {
        get throws {
            try _iuielement.get_TabIndex()
        }
    }

    /// Sets a value that determines the order in which elements receive focus when the user navigates through controls using the _Tab_ key.
    /// - Parameter newValue: A value that determines the order of logical navigation for a device. The default value is MaxValue with the tab order based on declaration order in the XAML or child collections.
    public func tabIndex(_ value: Swift.Int32) throws {
        try _iuielement.put_TabIndex(value)
    }

    /// Gets or sets a value that determines the order in which elements receive focus when the user navigates through controls using the _Tab_ key.
    public var tabIndex_: Swift.Int32 {
        get {
            try! self.tabIndex
        }
        set {
            try! self.tabIndex(newValue)
        }
    }

    /// The 3-D transform effect to apply when rendering this element. The default is null.
    public var transform3D: MicrosoftUIXamlMediaMedia3D_Transform3D {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_Transform3D())
        }
    }

    /// Sets the 3-D transform effect to apply when rendering this element.
    /// - Parameter newValue: The 3-D transform effect to apply when rendering this element. The default is null.
    public func transform3D(_ value: MicrosoftUIXamlMediaMedia3D_Transform3D?) throws {
        try _iuielement.put_Transform3D(value)
    }

    /// Gets or sets the 3-D transform effect to apply when rendering this element.
    public var transform3D_: MicrosoftUIXamlMediaMedia3D_Transform3D! {
        get {
            try! NullResult.catch(self.transform3D)
        }
        set {
            try! self.transform3D(newValue)
        }
    }

    /// The transformation matrix to apply to the element.
    public var transformMatrix: WindowsFoundationNumerics_Matrix4x4 {
        get throws {
            try _iuielement.get_TransformMatrix()
        }
    }

    /// Sets the transformation matrix to apply to the element.
    /// - Parameter newValue: The transformation matrix to apply to the element.
    public func transformMatrix(_ value: WindowsFoundationNumerics_Matrix4x4) throws {
        try _iuielement.put_TransformMatrix(value)
    }

    /// Gets or sets the transformation matrix to apply to the element.
    public var transformMatrix_: WindowsFoundationNumerics_Matrix4x4 {
        get {
            try! self.transformMatrix
        }
        set {
            try! self.transformMatrix(newValue)
        }
    }

    /// The strongly typed collection of Transition style elements that apply to a UIElement.
    public var transitions: MicrosoftUIXamlMediaAnimation_TransitionCollection {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_Transitions())
        }
    }

    /// Sets the collection of Transition style elements that apply to a UIElement.
    /// - Parameter newValue: The strongly typed collection of Transition style elements that apply to a UIElement.
    public func transitions(_ value: MicrosoftUIXamlMediaAnimation_TransitionCollection?) throws {
        try _iuielement.put_Transitions(value)
    }

    /// Gets or sets the collection of Transition style elements that apply to a UIElement.
    public var transitions_: MicrosoftUIXamlMediaAnimation_TransitionCollection! {
        get {
            try! NullResult.catch(self.transitions)
        }
        set {
            try! self.transitions(newValue)
        }
    }

    /// The x, y, and z rendering position of the element.
    public var translation: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _iuielement.get_Translation()
        }
    }

    /// Sets the x, y, and z rendering position of the element.
    /// - Parameter newValue: The x, y, and z rendering position of the element.
    public func translation(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _iuielement.put_Translation(value)
    }

    /// Gets or sets the x, y, and z rendering position of the element.
    public var translation_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.translation
        }
        set {
            try! self.translation(newValue)
        }
    }

    /// The Vector3Transition that animates changes to the Translation property.
    public var translationTransition: MicrosoftUIXaml_Vector3Transition {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_TranslationTransition())
        }
    }

    /// Sets the Vector3Transition that animates changes to the Translation property.
    /// - Parameter newValue: The Vector3Transition that animates changes to the Translation property.
    public func translationTransition(_ value: MicrosoftUIXaml_Vector3Transition?) throws {
        try _iuielement.put_TranslationTransition(value)
    }

    /// Gets or sets the Vector3Transition that animates changes to the Translation property.
    public var translationTransition_: MicrosoftUIXaml_Vector3Transition! {
        get {
            try! NullResult.catch(self.translationTransition)
        }
        set {
            try! self.translationTransition(newValue)
        }
    }

    /// true if rendering and layout should use layout rounding to whole pixels; otherwise, false. The default is true.
    public var useLayoutRounding: Swift.Bool {
        get throws {
            try _iuielement.get_UseLayoutRounding()
        }
    }

    /// Sets a value that determines whether rendering for the object and its visual subtree should use rounding behavior that aligns rendering to whole pixels.
    /// - Parameter newValue: true if rendering and layout should use layout rounding to whole pixels; otherwise, false. The default is true.
    public func useLayoutRounding(_ value: Swift.Bool) throws {
        try _iuielement.put_UseLayoutRounding(value)
    }

    /// Gets or sets a value that determines whether rendering for the object and its visual subtree should use rounding behavior that aligns rendering to whole pixels.
    public var useLayoutRounding_: Swift.Bool {
        get {
            try! self.useLayoutRounding
        }
        set {
            try! self.useLayoutRounding(newValue)
        }
    }

    /// True, if the control uses focus visuals drawn by the system. False, if the control uses focus visuals defined in the ControlTemplate.

    /// The default is false (see Remarks.
    public var useSystemFocusVisuals: Swift.Bool {
        get throws {
            try _iuielement.get_UseSystemFocusVisuals()
        }
    }

    /// Sets a value that indicates whether the control uses focus visuals drawn by the system or focus visuals defined in the control template.
    /// - Parameter newValue: True, if the control uses focus visuals drawn by the system. False, if the control uses focus visuals defined in the ControlTemplate.

    /// The default is false (see Remarks.
    public func useSystemFocusVisuals(_ value: Swift.Bool) throws {
        try _iuielement.put_UseSystemFocusVisuals(value)
    }

    /// Gets or sets a value that indicates whether the control uses focus visuals drawn by the system or focus visuals defined in the control template.
    public var useSystemFocusVisuals_: Swift.Bool {
        get {
            try! self.useSystemFocusVisuals
        }
        set {
            try! self.useSystemFocusVisuals(newValue)
        }
    }

    /// A value of the enumeration. The default value is Visible.
    public var visibility: MicrosoftUIXaml_Visibility {
        get throws {
            try _iuielement.get_Visibility()
        }
    }

    /// Sets the visibility of a UIElement. A UIElement that is not visible is not rendered and does not communicate its desired size to layout.
    /// - Parameter newValue: A value of the enumeration. The default value is Visible.
    public func visibility(_ value: MicrosoftUIXaml_Visibility) throws {
        try _iuielement.put_Visibility(value)
    }

    /// Gets or sets the visibility of a UIElement. A UIElement that is not visible is not rendered and does not communicate its desired size to layout.
    public var visibility_: MicrosoftUIXaml_Visibility {
        get {
            try! self.visibility
        }
        set {
            try! self.visibility(newValue)
        }
    }

    /// The object that gets focus when a user presses down on the Directional Pad (D-pad).
    public var xyfocusDown: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_XYFocusDown())
        }
    }

    /// Sets the object that gets focus when a user presses down on the Directional Pad (D-pad) of a game controller.
    /// - Parameter newValue: The object that gets focus when a user presses down on the Directional Pad (D-pad).
    public func xyfocusDown(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _iuielement.put_XYFocusDown(value)
    }

    /// Gets or sets the object that gets focus when a user presses down on the Directional Pad (D-pad) of a game controller.
    public var xyfocusDown_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.xyfocusDown)
        }
        set {
            try! self.xyfocusDown(newValue)
        }
    }

    /// A value of the enumeration. The default is Auto.
    public var xyfocusDownNavigationStrategy: MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        get throws {
            try _iuielement.get_XYFocusDownNavigationStrategy()
        }
    }

    /// Sets a value that specifies the strategy used to determine the target element of a down navigation.
    /// - Parameter newValue: A value of the enumeration. The default is Auto.
    public func xyfocusDownNavigationStrategy(_ value: MicrosoftUIXamlInput_XYFocusNavigationStrategy) throws {
        try _iuielement.put_XYFocusDownNavigationStrategy(value)
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of a down navigation.
    public var xyfocusDownNavigationStrategy_: MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        get {
            try! self.xyfocusDownNavigationStrategy
        }
        set {
            try! self.xyfocusDownNavigationStrategy(newValue)
        }
    }

    /// A value of the enumeration. The default is Auto.
    public var xyfocusKeyboardNavigation: MicrosoftUIXamlInput_XYFocusKeyboardNavigationMode {
        get throws {
            try _iuielement.get_XYFocusKeyboardNavigation()
        }
    }

    /// Sets a value that enables or disables navigation using the keyboard directional arrows.
    /// - Parameter newValue: A value of the enumeration. The default is Auto.
    public func xyfocusKeyboardNavigation(_ value: MicrosoftUIXamlInput_XYFocusKeyboardNavigationMode) throws {
        try _iuielement.put_XYFocusKeyboardNavigation(value)
    }

    /// Gets or sets a value that enables or disables navigation using the keyboard directional arrows.
    public var xyfocusKeyboardNavigation_: MicrosoftUIXamlInput_XYFocusKeyboardNavigationMode {
        get {
            try! self.xyfocusKeyboardNavigation
        }
        set {
            try! self.xyfocusKeyboardNavigation(newValue)
        }
    }

    /// The object that gets focus when a user presses left on the Directional Pad (D-pad).
    public var xyfocusLeft: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_XYFocusLeft())
        }
    }

    /// Sets the object that gets focus when a user presses left on the Directional Pad (D-pad) of a game controller.
    /// - Parameter newValue: The object that gets focus when a user presses left on the Directional Pad (D-pad).
    public func xyfocusLeft(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _iuielement.put_XYFocusLeft(value)
    }

    /// Gets or sets the object that gets focus when a user presses left on the Directional Pad (D-pad) of a game controller.
    public var xyfocusLeft_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.xyfocusLeft)
        }
        set {
            try! self.xyfocusLeft(newValue)
        }
    }

    /// A value of the enumeration. The default is Auto.
    public var xyfocusLeftNavigationStrategy: MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        get throws {
            try _iuielement.get_XYFocusLeftNavigationStrategy()
        }
    }

    /// Sets a value that specifies the strategy used to determine the target element of a left navigation.
    /// - Parameter newValue: A value of the enumeration. The default is Auto.
    public func xyfocusLeftNavigationStrategy(_ value: MicrosoftUIXamlInput_XYFocusNavigationStrategy) throws {
        try _iuielement.put_XYFocusLeftNavigationStrategy(value)
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of a left navigation.
    public var xyfocusLeftNavigationStrategy_: MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        get {
            try! self.xyfocusLeftNavigationStrategy
        }
        set {
            try! self.xyfocusLeftNavigationStrategy(newValue)
        }
    }

    /// The object that gets focus when a user presses right on the Directional Pad (D-pad).
    public var xyfocusRight: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_XYFocusRight())
        }
    }

    /// Sets the object that gets focus when a user presses right on the Directional Pad (D-pad) of a game controller.
    /// - Parameter newValue: The object that gets focus when a user presses right on the Directional Pad (D-pad).
    public func xyfocusRight(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _iuielement.put_XYFocusRight(value)
    }

    /// Gets or sets the object that gets focus when a user presses right on the Directional Pad (D-pad) of a game controller.
    public var xyfocusRight_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.xyfocusRight)
        }
        set {
            try! self.xyfocusRight(newValue)
        }
    }

    /// A value of the enumeration. The default is Auto.
    public var xyfocusRightNavigationStrategy: MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        get throws {
            try _iuielement.get_XYFocusRightNavigationStrategy()
        }
    }

    /// Sets a value that specifies the strategy used to determine the target element of a right navigation.
    /// - Parameter newValue: A value of the enumeration. The default is Auto.
    public func xyfocusRightNavigationStrategy(_ value: MicrosoftUIXamlInput_XYFocusNavigationStrategy) throws {
        try _iuielement.put_XYFocusRightNavigationStrategy(value)
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of a right navigation.
    public var xyfocusRightNavigationStrategy_: MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        get {
            try! self.xyfocusRightNavigationStrategy
        }
        set {
            try! self.xyfocusRightNavigationStrategy(newValue)
        }
    }

    /// The object that gets focus when a user presses up on the Directional Pad (D-pad).
    public var xyfocusUp: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_XYFocusUp())
        }
    }

    /// Sets the object that gets focus when a user presses up on the Directional Pad (D-pad) of a game controller.
    /// - Parameter newValue: The object that gets focus when a user presses up on the Directional Pad (D-pad).
    public func xyfocusUp(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _iuielement.put_XYFocusUp(value)
    }

    /// Gets or sets the object that gets focus when a user presses up on the Directional Pad (D-pad) of a game controller.
    public var xyfocusUp_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.xyfocusUp)
        }
        set {
            try! self.xyfocusUp(newValue)
        }
    }

    /// A value of the enumeration. The default is Auto.
    public var xyfocusUpNavigationStrategy: MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        get throws {
            try _iuielement.get_XYFocusUpNavigationStrategy()
        }
    }

    /// Sets a value that specifies the strategy used to determine the target element of an up navigation.
    /// - Parameter newValue: A value of the enumeration. The default is Auto.
    public func xyfocusUpNavigationStrategy(_ value: MicrosoftUIXamlInput_XYFocusNavigationStrategy) throws {
        try _iuielement.put_XYFocusUpNavigationStrategy(value)
    }

    /// Gets or sets a value that specifies the strategy used to determine the target element of an up navigation.
    public var xyfocusUpNavigationStrategy_: MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        get {
            try! self.xyfocusUpNavigationStrategy
        }
        set {
            try! self.xyfocusUpNavigationStrategy(newValue)
        }
    }

    /// The XamlRoot in which this element is being viewed. The default is null.
    public var xamlRoot: MicrosoftUIXaml_XamlRoot {
        get throws {
            try COM.NullResult.unwrap(_iuielement.get_XamlRoot())
        }
    }

    /// Sets the XamlRoot in which this element is being viewed.
    /// - Parameter newValue: The XamlRoot in which this element is being viewed. The default is null.
    public func xamlRoot(_ value: MicrosoftUIXaml_XamlRoot?) throws {
        try _iuielement.put_XamlRoot(value)
    }

    /// Gets or sets the XamlRoot in which this element is being viewed.
    public var xamlRoot_: MicrosoftUIXaml_XamlRoot! {
        get {
            try! NullResult.catch(self.xamlRoot)
        }
        set {
            try! self.xamlRoot(newValue)
        }
    }

    /// The cursor that displays when the pointer is over this element.
    public var protectedCursor: MicrosoftUIInput_InputCursor {
        get throws {
            try COM.NullResult.unwrap(_iuielementProtected.get_ProtectedCursor())
        }
    }

    /// Sets the cursor that displays when the pointer is over this element. Defaults to null, indicating no change to the cursor.
    /// - Parameter newValue: The cursor that displays when the pointer is over this element.
    public func protectedCursor(_ value: MicrosoftUIInput_InputCursor?) throws {
        try _iuielementProtected.put_ProtectedCursor(value)
    }

    /// Gets or sets the cursor that displays when the pointer is over this element. Defaults to null, indicating no change to the cursor.
    public var protectedCursor_: MicrosoftUIInput_InputCursor! {
        get {
            try! NullResult.catch(self.protectedCursor)
        }
        set {
            try! self.protectedCursor(newValue)
        }
    }

    /// When implemented in a derived class, returns class-specific AutomationPeer implementations for the Microsoft UI Automation infrastructure.
    /// - Returns: The class-specific AutomationPeer subclass to return.
    open func onCreateAutomationPeer() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iuielementOverrides.onCreateAutomationPeer())
    }

    /// Override this method to implement how layout and logic should behave when items are removed from a class-specific content or children property.
    open func onDisconnectVisualChildren() throws {
        try _iuielementOverrides.onDisconnectVisualChildren()
    }

    /// Enables a UIElement subclass to expose child elements that assist with resolving touch targeting.
    /// - Parameter point: The point being touched.
    /// - Parameter boundingRect: The bounds used for touch tolerance.
    /// - Returns: A set of point sets. These represent the vertices of sub elements that are intersected by the given touch point (plus tolerance).
    open func findSubElementsForTouchTargeting(_ point: WindowsFoundation_Point, _ boundingRect: WindowsFoundation_Rect) throws -> WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IIterable<WindowsFoundation_Point>?> {
        try COM.NullResult.unwrap(_iuielementOverrides.findSubElementsForTouchTargeting(point, boundingRect))
    }

    /// Enables a UIElement subclass to expose child elements that take part in Tab focus.
    /// - Returns: A collection of the UIElement's child elements that take part in Tab focus.
    open func getChildrenInTabFocusOrder() throws -> WindowsFoundationCollections_IIterable<MicrosoftUIXaml_DependencyObject?> {
        try COM.NullResult.unwrap(_iuielementOverrides.getChildrenInTabFocusOrder())
    }

    /// Called when a keyboard shortcut (or accelerator) is processed in your app. Override this method to handle how your app responds when a keyboard accelerator is invoked.
    /// - Parameter args: The KeyboardAcceleratorInvokedEventArgs.
    open func onKeyboardAcceleratorInvoked(_ args: MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs?) throws {
        try _iuielementOverrides.onKeyboardAcceleratorInvoked(args)
    }

    /// Called just before a keyboard shortcut (or accelerator) is processed in your app. Invoked whenever application code or internal processes call ProcessKeyboardAccelerators. Override this method to influence the default accelerator handling.
    /// - Parameter args: The ProcessKeyboardAcceleratorEventArgs.
    open func onProcessKeyboardAccelerators(_ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        try _iuielementOverrides.onProcessKeyboardAccelerators(args)
    }

    /// Called before the BringIntoViewRequested event occurs.
    /// - Parameter e: The data for the event.
    open func onBringIntoViewRequested(_ e: MicrosoftUIXaml_BringIntoViewRequestedEventArgs?) throws {
        try _iuielementOverrides.onBringIntoViewRequested(e)
    }

    /// When overridden in a derived class, defines a property that can be animated.
    /// - Parameter propertyName: The property that can be animated.
    /// - Parameter animationPropertyInfo: Information about the property to be animated.
    open func populatePropertyInfoOverride(_ propertyName: Swift.String, _ animationPropertyInfo: MicrosoftUIComposition_AnimationPropertyInfo?) throws {
        try _iuielementOverrides.populatePropertyInfoOverride(propertyName, animationPropertyInfo)
    }

    // MARK: Microsoft.UI.Composition.IAnimationObject members

    /// Defines a property that can be animated.
    /// - Parameter propertyName: The property that can be animated.
    /// - Parameter propertyInfo: Information about the property to be animated.
    public func populatePropertyInfo(_ propertyName: Swift.String, _ propertyInfo: MicrosoftUIComposition_AnimationPropertyInfo?) throws {
        try _ianimationObject.populatePropertyInfo(propertyName, propertyInfo)
    }

    // MARK: Microsoft.UI.Composition.IVisualElement2 members

    /// Retrieves the Visual that the element resolves to.
    /// - Returns: The Visual that the element resolves to.
    public func getVisualInternal() throws -> MicrosoftUIComposition_Visual {
        try COM.NullResult.unwrap(_ivisualElement2.getVisualInternal())
    }

    /// Resumes direct manipulation processing (system-defined panning/zooming) on any ScrollViewer parent that contains the current UIElement.
    /// - Parameter value: The active touch point that initiated the manipulation.
    /// - Returns: true if a ScrollViewer parent exists and setting the value resulted in resuming the panning/zooming action. false if calling the method results in no action.
    public static func tryStartDirectManipulation(_ value: MicrosoftUIXamlInput_Pointer?) throws -> Swift.Bool {
        try _iuielementStatics.tryStartDirectManipulation(value)
    }

    /// Registers an element as representing a scrollable viewport.
    /// - Parameter element: The element to register as a scrollable viewport.
    public static func registerAsScrollPort(_ element: MicrosoftUIXaml_UIElement?) throws {
        try _iuielementStatics.registerAsScrollPort(element)
    }

    /// The identifier for the AccessKey dependency property.
    public static var accessKeyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_AccessKeyProperty())
        }
    }

    /// Identifies for the AccessKey dependency property.
    public static var accessKeyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.accessKeyProperty)
    }

    /// The identifier for the AccessKeyScopeOwner dependency property.
    public static var accessKeyScopeOwnerProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_AccessKeyScopeOwnerProperty())
        }
    }

    /// Identifies for the AccessKeyScopeOwner dependency property.
    public static var accessKeyScopeOwnerProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.accessKeyScopeOwnerProperty)
    }

    /// The identifier for the AllowDrop dependency property.
    public static var allowDropProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_AllowDropProperty())
        }
    }

    /// Identifies the AllowDrop dependency property.
    public static var allowDropProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.allowDropProperty)
    }

    /// The identifier for the BringIntoViewRequested routed event.
    public static var bringIntoViewRequestedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_BringIntoViewRequestedEvent())
        }
    }

    /// Gets the identifier for the BringIntoViewRequested routed event.
    public static var bringIntoViewRequestedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.bringIntoViewRequestedEvent)
    }

    /// The identifier for the CacheMode dependency property.
    public static var cacheModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_CacheModeProperty())
        }
    }

    /// Identifies the CacheMode dependency property.
    public static var cacheModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.cacheModeProperty)
    }

    /// The identifier for the CanBeScrollAnchor dependency property.
    public static var canBeScrollAnchorProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_CanBeScrollAnchorProperty())
        }
    }

    /// Identifies the CanBeScrollAnchor dependency property.
    public static var canBeScrollAnchorProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.canBeScrollAnchorProperty)
    }

    /// The identifier for the CanDrag dependency property.
    public static var canDragProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_CanDragProperty())
        }
    }

    /// Identifies the CanDrag dependency property.
    public static var canDragProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.canDragProperty)
    }

    /// The identifier for the CharacterReceived routed event.
    public static var characterReceivedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_CharacterReceivedEvent())
        }
    }

    /// Gets the identifier for the CharacterReceived routed event.
    public static var characterReceivedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.characterReceivedEvent)
    }

    /// The identifier for the Clip dependency property.
    public static var clipProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ClipProperty())
        }
    }

    /// Identifies the Clip dependency property.
    public static var clipProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.clipProperty)
    }

    /// The identifier for the CompositeMode dependency property.
    public static var compositeModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_CompositeModeProperty())
        }
    }

    /// Identifies the CompositeMode dependency property.
    public static var compositeModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.compositeModeProperty)
    }

    /// The identifier for the ContextFlyout dependency property.
    public static var contextFlyoutProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ContextFlyoutProperty())
        }
    }

    /// Identifies for the ContextFlyout dependency property.
    public static var contextFlyoutProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.contextFlyoutProperty)
    }

    /// The identifier for the ContextRequested routed event.
    public static var contextRequestedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ContextRequestedEvent())
        }
    }

    /// Gets the identifier for the ContextRequested routed event.
    public static var contextRequestedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.contextRequestedEvent)
    }

    /// The identifier for the DoubleTapped routed event.
    public static var doubleTappedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DoubleTappedEvent())
        }
    }

    /// Gets the identifier for the DoubleTapped routed event.
    public static var doubleTappedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.doubleTappedEvent)
    }

    /// The identifier for the DragEnter routed event.
    public static var dragEnterEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DragEnterEvent())
        }
    }

    /// Gets the identifier for the DragEnter routed event.
    public static var dragEnterEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.dragEnterEvent)
    }

    /// The identifier for the DragLeave routed event.
    public static var dragLeaveEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DragLeaveEvent())
        }
    }

    /// Gets the identifier for the DragLeave routed event.
    public static var dragLeaveEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.dragLeaveEvent)
    }

    /// The identifier for the DragOver routed event.
    public static var dragOverEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DragOverEvent())
        }
    }

    /// Gets the identifier for the DragOver routed event.
    public static var dragOverEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.dragOverEvent)
    }

    /// The identifier for the Drop routed event.
    public static var dropEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_DropEvent())
        }
    }

    /// Gets the identifier for the Drop routed event.
    public static var dropEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.dropEvent)
    }

    /// The identifier for the ExitDisplayModeOnAccessKeyInvoked dependency property.
    public static var exitDisplayModeOnAccessKeyInvokedProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ExitDisplayModeOnAccessKeyInvokedProperty())
        }
    }

    /// Identifies the ExitDisplayModeOnAccessKeyInvoked dependency property.
    public static var exitDisplayModeOnAccessKeyInvokedProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.exitDisplayModeOnAccessKeyInvokedProperty)
    }

    /// The identifier for the FocusState dependency property.
    public static var focusStateProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_FocusStateProperty())
        }
    }

    /// Identifies the FocusState dependency property.
    public static var focusStateProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.focusStateProperty)
    }

    /// The identifier for the GettingFocus routed event.
    public static var gettingFocusEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_GettingFocusEvent())
        }
    }

    /// Gets the identifier for the GettingFocus routed event.
    public static var gettingFocusEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.gettingFocusEvent)
    }

    /// The identifier for the HighContrastAdjustment dependency property.
    public static var highContrastAdjustmentProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_HighContrastAdjustmentProperty())
        }
    }

    /// Identifies the HighContrastAdjustment dependency property.
    public static var highContrastAdjustmentProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.highContrastAdjustmentProperty)
    }

    /// The identifier for the Holding routed event.
    public static var holdingEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_HoldingEvent())
        }
    }

    /// Gets the identifier for the Holding routed event.
    public static var holdingEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.holdingEvent)
    }

    /// The identifier for the IsAccessKeyScope dependency property.
    public static var isAccessKeyScopeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsAccessKeyScopeProperty())
        }
    }

    /// Identifies for the IsAccessKeyScope dependency property.
    public static var isAccessKeyScopeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isAccessKeyScopeProperty)
    }

    /// The identifier for the IsDoubleTapEnabled dependency property.
    public static var isDoubleTapEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsDoubleTapEnabledProperty())
        }
    }

    /// Identifies the IsDoubleTapEnabled dependency property.
    public static var isDoubleTapEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isDoubleTapEnabledProperty)
    }

    /// The identifier for the IsHitTestVisible dependency property.
    public static var isHitTestVisibleProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsHitTestVisibleProperty())
        }
    }

    /// Identifies the IsHitTestVisible dependency property.
    public static var isHitTestVisibleProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isHitTestVisibleProperty)
    }

    /// The identifier for the IsHoldingEnabled dependency property.
    public static var isHoldingEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsHoldingEnabledProperty())
        }
    }

    /// Identifies the IsHoldingEnabled dependency property.
    public static var isHoldingEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isHoldingEnabledProperty)
    }

    /// The identifier for the IsRightTapEnabled dependency property.
    public static var isRightTapEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsRightTapEnabledProperty())
        }
    }

    /// Identifies the IsRightTapEnabled dependency property.
    public static var isRightTapEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isRightTapEnabledProperty)
    }

    /// The identifier for the UIElement.IsTabStop dependency property.
    public static var isTabStopProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsTabStopProperty())
        }
    }

    /// Identifies the UIElement.IsTabStop dependency property.
    public static var isTabStopProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isTabStopProperty)
    }

    /// The identifier for the IsTapEnabled dependency property.
    public static var isTapEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_IsTapEnabledProperty())
        }
    }

    /// Identifies the IsTapEnabled dependency property.
    public static var isTapEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isTapEnabledProperty)
    }

    /// The identifier for the KeyDown routed event.
    public static var keyDownEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyDownEvent())
        }
    }

    /// Gets the identifier for the KeyDown routed event.
    public static var keyDownEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.keyDownEvent)
    }

    /// The identifier for the KeyTipHorizontalOffset dependency property.
    public static var keyTipHorizontalOffsetProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyTipHorizontalOffsetProperty())
        }
    }

    /// Identifies the KeyTipHorizontalOffset dependency property.
    public static var keyTipHorizontalOffsetProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.keyTipHorizontalOffsetProperty)
    }

    /// The identifier for the KeyTipPlacementMode dependency property.
    public static var keyTipPlacementModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyTipPlacementModeProperty())
        }
    }

    /// Identifies the KeyTipPlacementMode dependency property.
    public static var keyTipPlacementModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.keyTipPlacementModeProperty)
    }

    /// The identifier for the KeyTipTarget dependency property.
    public static var keyTipTargetProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyTipTargetProperty())
        }
    }

    /// Identifies the KeyTipTarget dependency property.
    public static var keyTipTargetProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.keyTipTargetProperty)
    }

    /// The identifier for the KeyTipVerticalOffset dependency property.
    public static var keyTipVerticalOffsetProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyTipVerticalOffsetProperty())
        }
    }

    /// Identifies the KeyTipVerticalOffset dependency property.
    public static var keyTipVerticalOffsetProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.keyTipVerticalOffsetProperty)
    }

    /// The identifier for the KeyUp routed event.
    public static var keyUpEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyUpEvent())
        }
    }

    /// Gets the identifier for the KeyUp routed event.
    public static var keyUpEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.keyUpEvent)
    }

    /// The identifier for the KeyboardAcceleratorPlacementMode dependency property.
    public static var keyboardAcceleratorPlacementModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyboardAcceleratorPlacementModeProperty())
        }
    }

    /// Identifies the KeyboardAcceleratorPlacementMode dependency property.
    public static var keyboardAcceleratorPlacementModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.keyboardAcceleratorPlacementModeProperty)
    }

    /// The identifier for the KeyboardAcceleratorPlacementTarget dependency property.
    public static var keyboardAcceleratorPlacementTargetProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_KeyboardAcceleratorPlacementTargetProperty())
        }
    }

    /// Identifies the KeyboardAcceleratorPlacementTarget dependency property.
    public static var keyboardAcceleratorPlacementTargetProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.keyboardAcceleratorPlacementTargetProperty)
    }

    /// The identifier for the Lights dependency property.
    public static var lightsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_LightsProperty())
        }
    }

    /// Identifies the Lights dependency property.
    public static var lightsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.lightsProperty)
    }

    /// The identifier for the LosingFocus routed event.
    public static var losingFocusEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_LosingFocusEvent())
        }
    }

    /// Gets the identifier for the LosingFocus routed event.
    public static var losingFocusEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.losingFocusEvent)
    }

    /// The identifier for the ManipulationCompleted routed event.
    public static var manipulationCompletedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationCompletedEvent())
        }
    }

    /// Gets the identifier for the ManipulationCompleted routed event.
    public static var manipulationCompletedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.manipulationCompletedEvent)
    }

    /// The identifier for the ManipulationDelta routed event.
    public static var manipulationDeltaEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationDeltaEvent())
        }
    }

    /// Gets the identifier for the ManipulationDelta routed event.
    public static var manipulationDeltaEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.manipulationDeltaEvent)
    }

    /// The identifier for the ManipulationInertiaStarting routed event.
    public static var manipulationInertiaStartingEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationInertiaStartingEvent())
        }
    }

    /// Gets the identifier for the ManipulationInertiaStarting routed event.
    public static var manipulationInertiaStartingEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.manipulationInertiaStartingEvent)
    }

    /// The identifier for the ManipulationMode dependency property.
    public static var manipulationModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationModeProperty())
        }
    }

    /// Identifies the ManipulationMode dependency property.
    public static var manipulationModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.manipulationModeProperty)
    }

    /// The identifier for the ManipulationStarted routed event.
    public static var manipulationStartedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationStartedEvent())
        }
    }

    /// Gets the identifier for the ManipulationStarted routed event.
    public static var manipulationStartedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.manipulationStartedEvent)
    }

    /// The identifier for the ManipulationStarting routed event.
    public static var manipulationStartingEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ManipulationStartingEvent())
        }
    }

    /// Gets the identifier for the ManipulationStarting routed event.
    public static var manipulationStartingEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.manipulationStartingEvent)
    }

    /// The identifier for the NoFocusCandidateFound routed event.
    public static var noFocusCandidateFoundEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_NoFocusCandidateFoundEvent())
        }
    }

    /// Gets the identifier for the NoFocusCandidateFound routed event.
    public static var noFocusCandidateFoundEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.noFocusCandidateFoundEvent)
    }

    /// The identifier for the IsHitTestVisible dependency property.
    public static var opacityProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_OpacityProperty())
        }
    }

    /// Identifies the IsHitTestVisible dependency property.
    public static var opacityProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.opacityProperty)
    }

    /// The identifier for the PointerCanceled routed event.
    public static var pointerCanceledEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerCanceledEvent())
        }
    }

    /// Gets the identifier for the PointerCanceled routed event.
    public static var pointerCanceledEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.pointerCanceledEvent)
    }

    /// The identifier for the PointerCaptureLost routed event.
    public static var pointerCaptureLostEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerCaptureLostEvent())
        }
    }

    /// Gets the identifier for the PointerCaptureLost routed event.
    public static var pointerCaptureLostEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.pointerCaptureLostEvent)
    }

    /// The identifier for the PointerCaptures dependency property.
    public static var pointerCapturesProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerCapturesProperty())
        }
    }

    /// Identifies the PointerCaptures dependency property.
    public static var pointerCapturesProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.pointerCapturesProperty)
    }

    /// The identifier for the PointerEntered routed event.
    public static var pointerEnteredEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerEnteredEvent())
        }
    }

    /// Gets the identifier for the PointerEntered routed event.
    public static var pointerEnteredEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.pointerEnteredEvent)
    }

    /// The identifier for the PointerExited routed event.
    public static var pointerExitedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerExitedEvent())
        }
    }

    /// Gets the identifier for the PointerExited routed event.
    public static var pointerExitedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.pointerExitedEvent)
    }

    /// The identifier for the PointerMoved routed event.
    public static var pointerMovedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerMovedEvent())
        }
    }

    /// Gets the identifier for the PointerMoved routed event.
    public static var pointerMovedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.pointerMovedEvent)
    }

    /// The identifier for the PointerPressed routed event.
    public static var pointerPressedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerPressedEvent())
        }
    }

    /// Gets the identifier for the PointerPressed routed event.
    public static var pointerPressedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.pointerPressedEvent)
    }

    /// The identifier for the PointerReleased routed event.
    public static var pointerReleasedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerReleasedEvent())
        }
    }

    /// Gets the identifier for the PointerReleased routed event.
    public static var pointerReleasedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.pointerReleasedEvent)
    }

    /// The identifier for the PointerWheelChanged routed event.
    public static var pointerWheelChangedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PointerWheelChangedEvent())
        }
    }

    /// Gets the identifier for the PointerWheelChanged routed event.
    public static var pointerWheelChangedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.pointerWheelChangedEvent)
    }

    /// The identifier for the PreviewKeyDown routed event.
    public static var previewKeyDownEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PreviewKeyDownEvent())
        }
    }

    /// Gets the identifier for the PreviewKeyDown routed event.
    public static var previewKeyDownEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.previewKeyDownEvent)
    }

    /// The identifier for the PreviewKeyUp routed event.
    public static var previewKeyUpEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_PreviewKeyUpEvent())
        }
    }

    /// Gets the identifier for the PreviewKeyUp routed event.
    public static var previewKeyUpEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.previewKeyUpEvent)
    }

    /// The identifier for the Projection dependency property.
    public static var projectionProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ProjectionProperty())
        }
    }

    /// Identifies the Projection dependency property.
    public static var projectionProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.projectionProperty)
    }

    /// The identifier for the RenderTransformOrigin dependency property.
    public static var renderTransformOriginProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_RenderTransformOriginProperty())
        }
    }

    /// Identifies the RenderTransformOrigin dependency property.
    public static var renderTransformOriginProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.renderTransformOriginProperty)
    }

    /// The identifier for the RenderTransform dependency property.
    public static var renderTransformProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_RenderTransformProperty())
        }
    }

    /// Identifies the RenderTransform dependency property.
    public static var renderTransformProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.renderTransformProperty)
    }

    /// The identifier for the RightTapped routed event.
    public static var rightTappedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_RightTappedEvent())
        }
    }

    /// Gets the identifier for the RightTapped routed event.
    public static var rightTappedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.rightTappedEvent)
    }

    /// The identifier for the Shadow dependency property.
    public static var shadowProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_ShadowProperty())
        }
    }

    /// Identifies the Shadow dependency property.
    public static var shadowProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.shadowProperty)
    }

    /// The identifier for the TabFocusNavigation dependency property.
    public static var tabFocusNavigationProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_TabFocusNavigationProperty())
        }
    }

    /// Identifies the TabFocusNavigation dependency property.
    public static var tabFocusNavigationProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.tabFocusNavigationProperty)
    }

    /// The identifier for the TabIndex dependency property.
    public static var tabIndexProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_TabIndexProperty())
        }
    }

    /// Identifies the TabIndex dependency property.
    public static var tabIndexProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.tabIndexProperty)
    }

    /// The identifier for the Tapped routed event.
    public static var tappedEvent: MicrosoftUIXaml_RoutedEvent {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_TappedEvent())
        }
    }

    /// Gets the identifier for the Tapped routed event.
    public static var tappedEvent_: MicrosoftUIXaml_RoutedEvent! {
        try! NullResult.catch(Self.tappedEvent)
    }

    /// The identifier for the Transform3D dependency property.
    public static var transform3DProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_Transform3DProperty())
        }
    }

    /// Identifies the Transform3D dependency property.
    public static var transform3DProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.transform3DProperty)
    }

    /// The identifier for the Transitions dependency property.
    public static var transitionsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_TransitionsProperty())
        }
    }

    /// Identifies the Transitions dependency property.
    public static var transitionsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.transitionsProperty)
    }

    /// The identifier for the UseLayoutRounding dependency property.
    public static var useLayoutRoundingProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_UseLayoutRoundingProperty())
        }
    }

    /// Identifies the UseLayoutRounding dependency property.
    public static var useLayoutRoundingProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.useLayoutRoundingProperty)
    }

    /// The identifier for the UseSystemFocusVisuals dependency property.
    public static var useSystemFocusVisualsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_UseSystemFocusVisualsProperty())
        }
    }

    /// Identifies the UseSystemFocusVisuals dependency property.
    public static var useSystemFocusVisualsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.useSystemFocusVisualsProperty)
    }

    /// The identifier for the Visibility dependency property.
    public static var visibilityProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_VisibilityProperty())
        }
    }

    /// Identifies the Visibility dependency property.
    public static var visibilityProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.visibilityProperty)
    }

    /// The identifier for the XYFocusDownNavigationStrategy dependency property.
    public static var xyfocusDownNavigationStrategyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_XYFocusDownNavigationStrategyProperty())
        }
    }

    /// Identifies the XYFocusDownNavigationStrategy dependency property.
    public static var xyfocusDownNavigationStrategyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.xyfocusDownNavigationStrategyProperty)
    }

    /// The identifier for the XYFocusDown dependency property.
    public static var xyfocusDownProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_XYFocusDownProperty())
        }
    }

    /// Identifies the XYFocusDown dependency property.
    public static var xyfocusDownProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.xyfocusDownProperty)
    }

    /// The identifier for the XYFocusKeyboardNavigation dependency property.
    public static var xyfocusKeyboardNavigationProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_XYFocusKeyboardNavigationProperty())
        }
    }

    /// Identifies the XYFocusKeyboardNavigation dependency property.
    public static var xyfocusKeyboardNavigationProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.xyfocusKeyboardNavigationProperty)
    }

    /// The identifier for the XYFocusLeftNavigationStrategy dependency property.
    public static var xyfocusLeftNavigationStrategyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_XYFocusLeftNavigationStrategyProperty())
        }
    }

    /// Identifies the XYFocusLeftNavigationStrategy dependency property.
    public static var xyfocusLeftNavigationStrategyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.xyfocusLeftNavigationStrategyProperty)
    }

    /// The identifier for the XYFocusLeft dependency property.
    public static var xyfocusLeftProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_XYFocusLeftProperty())
        }
    }

    /// Identifies the XYFocusLeft dependency property.
    public static var xyfocusLeftProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.xyfocusLeftProperty)
    }

    /// The identifier for the XYFocusRightNavigationStrategy dependency property.
    public static var xyfocusRightNavigationStrategyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_XYFocusRightNavigationStrategyProperty())
        }
    }

    /// Identifies the XYFocusRightNavigationStrategy dependency property.
    public static var xyfocusRightNavigationStrategyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.xyfocusRightNavigationStrategyProperty)
    }

    /// The identifier for the XYFocusRight dependency property.
    public static var xyfocusRightProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_XYFocusRightProperty())
        }
    }

    /// Identifies the XYFocusRight dependency property.
    public static var xyfocusRightProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.xyfocusRightProperty)
    }

    /// The identifier for the XYFocusUpNavigationStrategy dependency property.
    public static var xyfocusUpNavigationStrategyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_XYFocusUpNavigationStrategyProperty())
        }
    }

    /// Identifies the XYFocusUpNavigationStrategy dependency property.
    public static var xyfocusUpNavigationStrategyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.xyfocusUpNavigationStrategyProperty)
    }

    /// The identifier for the XYFocusUp dependency property.
    public static var xyfocusUpProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iuielementStatics.get_XYFocusUpProperty())
        }
    }

    /// Identifies the XYFocusUp dependency property.
    public static var xyfocusUpProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.xyfocusUpProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IUIElement>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIUIElement: COM.COMReference<SWRT_MicrosoftUIXaml_IUIElement>.Optional = .none

    internal var _iuielement: COM.COMInterop<SWRT_MicrosoftUIXaml_IUIElement> {
        get throws {
            try _lazyIUIElement.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IUIElement.self)).cast()
            }
        }
    }

    private var _lazyIUIElementProtected: COM.COMReference<SWRT_MicrosoftUIXaml_IUIElementProtected>.Optional = .none

    internal var _iuielementProtected: COM.COMInterop<SWRT_MicrosoftUIXaml_IUIElementProtected> {
        get throws {
            try _lazyIUIElementProtected.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IUIElementProtected.self)).cast()
            }
        }
    }

    private var _lazyIUIElementOverrides: COM.COMReference<SWRT_MicrosoftUIXaml_IUIElementOverrides>.Optional = .none

    internal var _iuielementOverrides: COM.COMInterop<SWRT_MicrosoftUIXaml_IUIElementOverrides> {
        get throws {
            try _lazyIUIElementOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IUIElementOverrides.self)).cast()
            }
        }
    }

    private var _lazyIAnimationObject: COM.COMReference<SWRT_MicrosoftUIComposition_IAnimationObject>.Optional = .none

    internal var _ianimationObject: COM.COMInterop<SWRT_MicrosoftUIComposition_IAnimationObject> {
        get throws {
            try _lazyIAnimationObject.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_IAnimationObject.self)).cast()
            }
        }
    }

    private var _lazyIVisualElement: COM.COMReference<SWRT_MicrosoftUIComposition_IVisualElement>.Optional = .none

    internal var _ivisualElement: COM.COMInterop<SWRT_MicrosoftUIComposition_IVisualElement> {
        get throws {
            try _lazyIVisualElement.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_IVisualElement.self)).cast()
            }
        }
    }

    private var _lazyIVisualElement2: COM.COMReference<SWRT_MicrosoftUIComposition_IVisualElement2>.Optional = .none

    internal var _ivisualElement2: COM.COMInterop<SWRT_MicrosoftUIComposition_IVisualElement2> {
        get throws {
            try _lazyIVisualElement2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_IVisualElement2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.UIElement")
            }
        }
    }

    private static var _lazyIUIElementFactory: COM.COMReference<SWRT_MicrosoftUIXaml_IUIElementFactory>.Optional = .none

    internal static var _iuielementFactory: COM.COMInterop<SWRT_MicrosoftUIXaml_IUIElementFactory> {
        get throws {
            try _lazyIUIElementFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IUIElementFactory.self)).cast()
            }
        }
    }

    private static var _lazyIUIElementStatics: COM.COMReference<SWRT_MicrosoftUIXaml_IUIElementStatics>.Optional = .none

    internal static var _iuielementStatics: COM.COMInterop<SWRT_MicrosoftUIXaml_IUIElementStatics> {
        get throws {
            try _lazyIUIElementStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IUIElementStatics.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _iuielementOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_MicrosoftUIXaml_IUIElementOverrides.self) {
            if !_iuielementOverrides_outer.isInitialized {
                _iuielementOverrides_outer.initialize(embedder: self,
                    virtualTable: &MicrosoftUIXaml_UIElementBinding.VirtualTables.iuielementOverrides)
            }
            return .init(_iuielementOverrides_outer.toCOM())
        }
        return .none
    }
}