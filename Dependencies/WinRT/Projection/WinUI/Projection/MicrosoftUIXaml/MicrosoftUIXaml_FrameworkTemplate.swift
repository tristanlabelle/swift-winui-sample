// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Creates an element tree of elements. FrameworkTemplate is a base class for classes that have specific templating behavior, including ControlTemplate and DataTemplate.
open class MicrosoftUIXaml_FrameworkTemplate: MicrosoftUIXaml_DependencyObject, @unchecked Sendable {
    /// Provides base class initialization behavior for FrameworkTemplate-derived classes.
    public override init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXaml_FrameworkTemplate.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._iframeworkTemplateFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkTemplate>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIFrameworkTemplate: COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkTemplate>.Optional = .none

    internal var _iframeworkTemplate: COM.COMInterop<SWRT_MicrosoftUIXaml_IFrameworkTemplate> {
        get throws {
            try _lazyIFrameworkTemplate.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IFrameworkTemplate.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.FrameworkTemplate")
            }
        }
    }

    private static var _lazyIFrameworkTemplateFactory: COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkTemplateFactory>.Optional = .none

    internal static var _iframeworkTemplateFactory: COM.COMInterop<SWRT_MicrosoftUIXaml_IFrameworkTemplateFactory> {
        get throws {
            try _lazyIFrameworkTemplateFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IFrameworkTemplateFactory.self)).cast()
            }
        }
    }
}