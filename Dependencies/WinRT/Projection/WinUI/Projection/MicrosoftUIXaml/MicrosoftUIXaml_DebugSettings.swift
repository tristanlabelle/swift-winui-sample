// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Declares how certain aspects of the app behave when it is run in a debug environment
public final class MicrosoftUIXaml_DebugSettings: WindowsRuntime.WinRTImport<MicrosoftUIXaml_DebugSettingsBinding>, @unchecked Sendable {
    /// Occurs when a Binding cannot be resolved.
    @discardableResult
    public func bindingFailed(adding handler: MicrosoftUIXaml_BindingFailedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_BindingFailed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).bindingFailed(removing: token) })
    }

    public func bindingFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_BindingFailed(token)
    }

    /// true to display the overlay debug counters; otherwise, false.
    public var enableFrameRateCounter: Swift.Bool {
        get throws {
            try _interop.get_EnableFrameRateCounter()
        }
    }

    /// Sets a value that indicates whether to display frame-rate and per-frame CPU usage info. These display as an overlay of counters in the window chrome while the app runs.
    /// - Parameter newValue: true to display the overlay debug counters; otherwise, false.
    public func enableFrameRateCounter(_ value: Swift.Bool) throws {
        try _interop.put_EnableFrameRateCounter(value)
    }

    /// Gets or sets a value that indicates whether to display frame-rate and per-frame CPU usage info. These display as an overlay of counters in the window chrome while the app runs.
    public var enableFrameRateCounter_: Swift.Bool {
        get {
            try! self.enableFrameRateCounter
        }
        set {
            try! self.enableFrameRateCounter(newValue)
        }
    }

    /// true if XAML errors cause an immediate FailFast rather than returning an error; otherwise, false. The default is false.
    public var failFastOnErrors: Swift.Bool {
        get throws {
            try _interop.get_FailFastOnErrors()
        }
    }

    /// Sets a value that indicates whether XAML errors cause an immediate FailFast rather than returning an error.
    /// - Parameter newValue: true if XAML errors cause an immediate FailFast rather than returning an error; otherwise, false. The default is false.
    public func failFastOnErrors(_ value: Swift.Bool) throws {
        try _interop.put_FailFastOnErrors(value)
    }

    /// Gets or sets a value that indicates whether XAML errors cause an immediate FailFast rather than returning an error.
    public var failFastOnErrors_: Swift.Bool {
        get {
            try! self.failFastOnErrors
        }
        set {
            try! self.failFastOnErrors(newValue)
        }
    }

    /// true to engage the binding tracing feature of Microsoft Visual Studio; otherwise, false. The default is true.
    public var isBindingTracingEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsBindingTracingEnabled()
        }
    }

    /// Sets a value that indicates whether to engage the binding tracing feature of Microsoft Visual Studio when the app runs. When engaged and a binding error occurs, the BindingFailed event is raised and error information is logged in the native debug output.
    /// - Parameter newValue: true to engage the binding tracing feature of Microsoft Visual Studio; otherwise, false. The default is true.
    public func isBindingTracingEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsBindingTracingEnabled(value)
    }

    /// Gets or sets a value that indicates whether to engage the binding tracing feature of Microsoft Visual Studio when the app runs. When engaged and a binding error occurs, the BindingFailed event is raised and error information is logged in the native debug output.
    public var isBindingTracingEnabled_: Swift.Bool {
        get {
            try! self.isBindingTracingEnabled
        }
        set {
            try! self.isBindingTracingEnabled(newValue)
        }
    }

    /// true to engage the text performance visualization feature of Microsoft Visual Studio; otherwise, false.
    public var isTextPerformanceVisualizationEnabled: Swift.Bool {
        get throws {
            try _interop.get_IsTextPerformanceVisualizationEnabled()
        }
    }

    /// Sets a value that indicates whether to engage the text performance visualization feature of Microsoft Visual Studio when the app runs.
    /// - Parameter newValue: true to engage the text performance visualization feature of Microsoft Visual Studio; otherwise, false.
    public func isTextPerformanceVisualizationEnabled(_ value: Swift.Bool) throws {
        try _interop.put_IsTextPerformanceVisualizationEnabled(value)
    }

    /// Gets or sets a value that indicates whether to engage the text performance visualization feature of Microsoft Visual Studio when the app runs.
    public var isTextPerformanceVisualizationEnabled_: Swift.Bool {
        get {
            try! self.isTextPerformanceVisualizationEnabled
        }
        set {
            try! self.isTextPerformanceVisualizationEnabled(newValue)
        }
    }

    /// Occurs when a reference to a XAML resource cannot be resolved.
    @discardableResult
    public func xamlResourceReferenceFailed(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_DebugSettings?, MicrosoftUIXaml_XamlResourceReferenceFailedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idebugSettings2.add_XamlResourceReferenceFailed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).xamlResourceReferenceFailed(removing: token) })
    }

    public func xamlResourceReferenceFailed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idebugSettings2.remove_XamlResourceReferenceFailed(token)
    }

    /// true to engage the XAML resource reference tracing feature of Microsoft Visual Studio; otherwise, false. The default is true.
    public var isXamlResourceReferenceTracingEnabled: Swift.Bool {
        get throws {
            try _idebugSettings2.get_IsXamlResourceReferenceTracingEnabled()
        }
    }

    /// Sets a value that indicates whether to engage the XAML resource reference tracing feature of Microsoft Visual Studio when the app runs. When engaged and a XAML resource reference error occurs, the XamlResourceReferenceFailed event is raised and error information is logged in the native debug output.
    /// - Parameter newValue: true to engage the XAML resource reference tracing feature of Microsoft Visual Studio; otherwise, false. The default is true.
    public func isXamlResourceReferenceTracingEnabled(_ value: Swift.Bool) throws {
        try _idebugSettings2.put_IsXamlResourceReferenceTracingEnabled(value)
    }

    /// Gets or sets a value that indicates whether to engage the XAML resource reference tracing feature of Microsoft Visual Studio when the app runs. When engaged and a XAML resource reference error occurs, the XamlResourceReferenceFailed event is raised and error information is logged in the native debug output.
    public var isXamlResourceReferenceTracingEnabled_: Swift.Bool {
        get {
            try! self.isXamlResourceReferenceTracingEnabled
        }
        set {
            try! self.isXamlResourceReferenceTracingEnabled(newValue)
        }
    }

    /// A value of the enumeration that indicates the level of layout cycle tracing events that trigger a debugger breakpoint. The default is None.
    public var layoutCycleDebugBreakLevel: MicrosoftUIXaml_LayoutCycleDebugBreakLevel {
        get throws {
            try _idebugSettings3.get_LayoutCycleDebugBreakLevel()
        }
    }

    /// Sets a value that indicates the level of layout cycle tracing events that trigger a debugger breakpoint.
    /// - Parameter newValue: A value of the enumeration that indicates the level of layout cycle tracing events that trigger a debugger breakpoint. The default is None.
    public func layoutCycleDebugBreakLevel(_ value: MicrosoftUIXaml_LayoutCycleDebugBreakLevel) throws {
        try _idebugSettings3.put_LayoutCycleDebugBreakLevel(value)
    }

    /// Gets or sets a value that indicates the level of layout cycle tracing events that trigger a debugger breakpoint.
    public var layoutCycleDebugBreakLevel_: MicrosoftUIXaml_LayoutCycleDebugBreakLevel {
        get {
            try! self.layoutCycleDebugBreakLevel
        }
        set {
            try! self.layoutCycleDebugBreakLevel(newValue)
        }
    }

    /// A value of the enumeration that indicates whether layout cycle tracing is written to the native debugger and the level of detail that is recorded. The default is None.
    public var layoutCycleTracingLevel: MicrosoftUIXaml_LayoutCycleTracingLevel {
        get throws {
            try _idebugSettings3.get_LayoutCycleTracingLevel()
        }
    }

    /// Sets a value that indicates whether layout cycle tracing is written to the native debugger and the level of detail that is recorded.
    /// - Parameter newValue: A value of the enumeration that indicates whether layout cycle tracing is written to the native debugger and the level of detail that is recorded. The default is None.
    public func layoutCycleTracingLevel(_ value: MicrosoftUIXaml_LayoutCycleTracingLevel) throws {
        try _idebugSettings3.put_LayoutCycleTracingLevel(value)
    }

    /// Gets or sets a value that indicates whether layout cycle tracing is written to the native debugger and the level of detail that is recorded.
    public var layoutCycleTracingLevel_: MicrosoftUIXaml_LayoutCycleTracingLevel {
        get {
            try! self.layoutCycleTracingLevel
        }
        set {
            try! self.layoutCycleTracingLevel(newValue)
        }
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IDebugSettings>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIDebugSettings2: COM.COMReference<SWRT_MicrosoftUIXaml_IDebugSettings2>.Optional = .none

    internal var _idebugSettings2: COM.COMInterop<SWRT_MicrosoftUIXaml_IDebugSettings2> {
        get throws {
            try _lazyIDebugSettings2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXaml_IDebugSettings2.self)).cast()
            }
        }
    }

    private var _lazyIDebugSettings3: COM.COMReference<SWRT_MicrosoftUIXaml_IDebugSettings3>.Optional = .none

    internal var _idebugSettings3: COM.COMInterop<SWRT_MicrosoftUIXaml_IDebugSettings3> {
        get throws {
            try _lazyIDebugSettings3.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXaml_IDebugSettings3.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.DebugSettings")
            }
        }
    }
}