// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides data for drag-and-drop events.
public final class MicrosoftUIXaml_DragEventArgs: MicrosoftUIXaml_RoutedEventArgs, @unchecked Sendable {
    /// Supports asynchronous drag-and-drop operations by creating and returning a DragOperationDeferral object.
    /// - Returns: A deferral object that you can use to identify when the generation of the data package is complete.
    public func getDeferral() throws -> MicrosoftUIXaml_DragOperationDeferral {
        try COM.NullResult.unwrap(_idragEventArgs.getDeferral())
    }

    /// Returns a drop point that is relative to a specified UIElement.
    /// - Parameter relativeTo: The UIElement for which to get a relative drop point.
    /// - Returns: A point in the coordinate system that is relative to the element specified in relativeTo.
    public func getPosition(_ relativeTo: MicrosoftUIXaml_UIElement?) throws -> WindowsFoundation_Point {
        try _idragEventArgs.getPosition(relativeTo)
    }

    /// A value or bitwise combination of values that specifies which operations can be accepted by the target of the drag event.
    public var acceptedOperation: WindowsApplicationModelDataTransfer_DataPackageOperation {
        get throws {
            try _idragEventArgs.get_AcceptedOperation()
        }
    }

    /// Sets a value that specifies which operations (none, move, copy, and/or link) can be accepted by the target of the drag event.
    /// - Parameter newValue: A value or bitwise combination of values that specifies which operations can be accepted by the target of the drag event.
    public func acceptedOperation(_ value: WindowsApplicationModelDataTransfer_DataPackageOperation) throws {
        try _idragEventArgs.put_AcceptedOperation(value)
    }

    /// Gets or sets a value that specifies which operations (none, move, copy, and/or link) can be accepted by the target of the drag event.
    public var acceptedOperation_: WindowsApplicationModelDataTransfer_DataPackageOperation {
        get {
            try! self.acceptedOperation
        }
        set {
            try! self.acceptedOperation(newValue)
        }
    }

    /// A value or bitwise combination of values that specifies which operations are allowed by the source of the drag event.
    public var allowedOperations: WindowsApplicationModelDataTransfer_DataPackageOperation {
        get throws {
            try _idragEventArgs.get_AllowedOperations()
        }
    }

    /// Gets a value that specifies which operations (none, move, copy, and/or link) are allowed by the source of the drag event.
    public var allowedOperations_: WindowsApplicationModelDataTransfer_DataPackageOperation {
        try! self.allowedOperations
    }

    /// The data object that contains data payload that is associated with the corresponding drag event.
    public var data: WindowsApplicationModelDataTransfer_DataPackage {
        get throws {
            try COM.NullResult.unwrap(_idragEventArgs.get_Data())
        }
    }

    /// Sets a data object (DataPackage that contains the data associated with the corresponding drag event. This value is not useful in all event cases; specifically, the event must be handled by a valid drop target.
    /// - Parameter newValue: The data object that contains data payload that is associated with the corresponding drag event.
    public func data(_ value: WindowsApplicationModelDataTransfer_DataPackage?) throws {
        try _idragEventArgs.put_Data(value)
    }

    /// Gets or sets a data object (DataPackage that contains the data associated with the corresponding drag event. This value is not useful in all event cases; specifically, the event must be handled by a valid drop target.
    public var data_: WindowsApplicationModelDataTransfer_DataPackage! {
        get {
            try! NullResult.catch(self.data)
        }
        set {
            try! self.data(newValue)
        }
    }

    /// A read-only copy of the Data object.
    public var dataView: WindowsApplicationModelDataTransfer_DataPackageView {
        get throws {
            try COM.NullResult.unwrap(_idragEventArgs.get_DataView())
        }
    }

    /// Gets a read-only copy of the Data object.
    public var dataView_: WindowsApplicationModelDataTransfer_DataPackageView! {
        try! NullResult.catch(self.dataView)
    }

    /// The visual representation of the data being dragged. The default is null.
    public var dragUIOverride: MicrosoftUIXaml_DragUIOverride {
        get throws {
            try COM.NullResult.unwrap(_idragEventArgs.get_DragUIOverride())
        }
    }

    /// Gets the visual representation of the data being dragged.
    public var dragUIOverride_: MicrosoftUIXaml_DragUIOverride! {
        try! NullResult.catch(self.dragUIOverride)
    }

    /// true if the event is marked handled; otherwise, false. The default value is false.
    public var handled: Swift.Bool {
        get throws {
            try _idragEventArgs.get_Handled()
        }
    }

    /// Sets a value that indicates the present state of the event handling for a routed event as it travels the route.
    /// - Parameter newValue: true if the event is marked handled; otherwise, false. The default value is false.
    public func handled(_ value: Swift.Bool) throws {
        try _idragEventArgs.put_Handled(value)
    }

    /// Gets or sets a value that indicates the present state of the event handling for a routed event as it travels the route.
    public var handled_: Swift.Bool {
        get {
            try! self.handled
        }
        set {
            try! self.handled(newValue)
        }
    }

    /// One or more members of the DragDropModifiers flag enumeration.
    public var modifiers: WindowsApplicationModelDataTransferDragDrop_DragDropModifiers {
        get throws {
            try _idragEventArgs.get_Modifiers()
        }
    }

    /// Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.
    public var modifiers_: WindowsApplicationModelDataTransferDragDrop_DragDropModifiers {
        try! self.modifiers
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IDragEventArgs>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIDragEventArgs: COM.COMReference<SWRT_MicrosoftUIXaml_IDragEventArgs>.Optional = .none

    internal var _idragEventArgs: COM.COMInterop<SWRT_MicrosoftUIXaml_IDragEventArgs> {
        get throws {
            try _lazyIDragEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXaml_IDragEventArgs.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.DragEventArgs")
            }
        }
    }
}