// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public class MicrosoftUIXaml_UIElementBinding: WindowsRuntime.ComposableClassBinding {
    public typealias SwiftObject = MicrosoftUIXaml_UIElement
    public typealias ABIStruct = SWRT_MicrosoftUIXaml_IUIElement

    public static let typeName = "Microsoft.UI.Xaml.UIElement"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        MicrosoftUIXaml_UIElement(_wrapping: consume reference)
    }

    internal enum VirtualTables {
        internal static var iuielementOverrides = SWRT_MicrosoftUIXaml_IUIElementOverrides_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            OnCreateAutomationPeer: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.onCreateAutomationPeer())
                _result.pointee = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(_result_swift)
            } },
            OnDisconnectVisualChildren: { this in _implement(this) { this in
                try this.onDisconnectVisualChildren()
            } },
            FindSubElementsForTouchTargeting: { this, point, boundingRect, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let point_swift = WindowsFoundation_Point.fromABI(point)
                let boundingRect_swift = WindowsFoundation_Rect.fromABI(boundingRect)
                let _result_swift = try COM.NullResult.`catch`(try this.findSubElementsForTouchTargeting(point_swift, boundingRect_swift))
                _result.pointee = try WindowsFoundationCollections_IIterableBinding.IIterable_Point.toABI(_result_swift)
            } },
            GetChildrenInTabFocusOrder: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getChildrenInTabFocusOrder())
                _result.pointee = try WindowsFoundationCollections_IIterableBinding.DependencyObject.toABI(_result_swift)
            } },
            OnKeyboardAcceleratorInvoked: { this, args in _implement(this) { this in
                let args_swift = MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgsBinding.fromABI(args)
                try this.onKeyboardAcceleratorInvoked(args_swift)
            } },
            OnProcessKeyboardAccelerators: { this, args in _implement(this) { this in
                let args_swift = MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.fromABI(args)
                try this.onProcessKeyboardAccelerators(args_swift)
            } },
            OnBringIntoViewRequested: { this, e in _implement(this) { this in
                let e_swift = MicrosoftUIXaml_BringIntoViewRequestedEventArgsBinding.fromABI(e)
                try this.onBringIntoViewRequested(e_swift)
            } },
            PopulatePropertyInfoOverride: { this, propertyName, animationPropertyInfo in _implement(this) { this in
                let propertyName_swift = WindowsRuntime.StringBinding.fromABI(propertyName)
                let animationPropertyInfo_swift = MicrosoftUIComposition_AnimationPropertyInfoBinding.fromABI(animationPropertyInfo)
                try this.populatePropertyInfoOverride(propertyName_swift, animationPropertyInfo_swift)
            } }
        )
    }
}