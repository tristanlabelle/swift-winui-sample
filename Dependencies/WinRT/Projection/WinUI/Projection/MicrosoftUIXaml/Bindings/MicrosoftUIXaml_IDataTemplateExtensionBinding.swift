// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public enum MicrosoftUIXaml_IDataTemplateExtensionBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftUIXaml_IDataTemplateExtension
    public typealias ABIStruct = SWRT_MicrosoftUIXaml_IDataTemplateExtension

    public static let typeName = "Microsoft.UI.Xaml.IDataTemplateExtension"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftUIXaml_IDataTemplateExtensionBinding>, MicrosoftUIXaml_IDataTemplateExtensionProtocol {
        public func resetTemplate() throws {
            try _interop.resetTemplate()
        }

        public func processBinding(_ phase: Swift.UInt32) throws -> Swift.Bool {
            try _interop.processBinding(phase)
        }

        public func processBindings(_ arg: MicrosoftUIXamlControls_ContainerContentChangingEventArgs?) throws -> Swift.Int32 {
            try _interop.processBindings(arg)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIXaml_IDataTemplateExtension_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        ResetTemplate: { this in _implement(this) { this in
            try this.resetTemplate()
        } },
        ProcessBinding: { this, phase, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.processBinding(phase)
        } },
        ProcessBindings: { this, arg, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let arg_swift = MicrosoftUIXamlControls_ContainerContentChangingEventArgsBinding.fromABI(arg)
            _result.pointee = try this.processBindings(arg_swift)
        } }
    )
}