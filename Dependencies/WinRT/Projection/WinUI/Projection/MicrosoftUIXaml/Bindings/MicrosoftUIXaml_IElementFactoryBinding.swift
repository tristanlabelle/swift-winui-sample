// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public enum MicrosoftUIXaml_IElementFactoryBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftUIXaml_IElementFactory
    public typealias ABIStruct = SWRT_MicrosoftUIXaml_IElementFactory

    public static let typeName = "Microsoft.UI.Xaml.IElementFactory"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftUIXaml_IElementFactoryBinding>, MicrosoftUIXaml_IElementFactoryProtocol {
        public func getElement(_ args: MicrosoftUIXaml_ElementFactoryGetArgs?) throws -> MicrosoftUIXaml_UIElement {
            try COM.NullResult.unwrap(_interop.getElement(args))
        }

        public func recycleElement(_ args: MicrosoftUIXaml_ElementFactoryRecycleArgs?) throws {
            try _interop.recycleElement(args)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIXaml_IElementFactory_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        GetElement: { this, args, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let args_swift = MicrosoftUIXaml_ElementFactoryGetArgsBinding.fromABI(args)
            let _result_swift = try COM.NullResult.`catch`(try this.getElement(args_swift))
            _result.pointee = try MicrosoftUIXaml_UIElementBinding.toABI(_result_swift)
        } },
        RecycleElement: { this, args in _implement(this) { this in
            let args_swift = MicrosoftUIXaml_ElementFactoryRecycleArgsBinding.fromABI(args)
            try this.recycleElement(args_swift)
        } }
    )
}