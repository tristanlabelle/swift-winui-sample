// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides data for the UIElement.BringIntoViewRequested event.
public final class MicrosoftUIXaml_BringIntoViewRequestedEventArgs: MicrosoftUIXaml_RoutedEventArgs, @unchecked Sendable {
    /// true to animate the scrolling; otherwise, false.
    public var animationDesired: Swift.Bool {
        get throws {
            try _ibringIntoViewRequestedEventArgs.get_AnimationDesired()
        }
    }

    /// Sets a value that specifies whether the scrolling should be animated.
    /// - Parameter newValue: true to animate the scrolling; otherwise, false.
    public func animationDesired(_ value: Swift.Bool) throws {
        try _ibringIntoViewRequestedEventArgs.put_AnimationDesired(value)
    }

    /// Gets or sets a value that specifies whether the scrolling should be animated.
    public var animationDesired_: Swift.Bool {
        get {
            try! self.animationDesired
        }
        set {
            try! self.animationDesired(newValue)
        }
    }

    /// true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public var handled: Swift.Bool {
        get throws {
            try _ibringIntoViewRequestedEventArgs.get_Handled()
        }
    }

    /// Sets a value that marks the routed event as handled. A true value prevents most handlers along the event route from handling the same event again.
    /// - Parameter newValue: true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public func handled(_ value: Swift.Bool) throws {
        try _ibringIntoViewRequestedEventArgs.put_Handled(value)
    }

    /// Gets or sets a value that marks the routed event as handled. A true value prevents most handlers along the event route from handling the same event again.
    public var handled_: Swift.Bool {
        get {
            try! self.handled
        }
        set {
            try! self.handled(newValue)
        }
    }

    /// The requested horizontal alignment ratio between 0.0 and 1.0, or NaN. See Remarks.
    public var horizontalAlignmentRatio: Swift.Double {
        get throws {
            try _ibringIntoViewRequestedEventArgs.get_HorizontalAlignmentRatio()
        }
    }

    /// Gets the requested horizontal alignment ratio which controls the alignment of the vertical axis of the TargetRect with respect to the vertical axis of the viewport.
    public var horizontalAlignmentRatio_: Swift.Double {
        try! self.horizontalAlignmentRatio
    }

    /// The horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    public var horizontalOffset: Swift.Double {
        get throws {
            try _ibringIntoViewRequestedEventArgs.get_HorizontalOffset()
        }
    }

    /// Sets the horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    /// - Parameter newValue: The horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    public func horizontalOffset(_ value: Swift.Double) throws {
        try _ibringIntoViewRequestedEventArgs.put_HorizontalOffset(value)
    }

    /// Gets or sets the horizontal distance to add to the viewport-relative position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
    public var horizontalOffset_: Swift.Double {
        get {
            try! self.horizontalOffset
        }
        set {
            try! self.horizontalOffset(newValue)
        }
    }

    /// The element that should be made visible in response to the event.
    public var targetElement: MicrosoftUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_ibringIntoViewRequestedEventArgs.get_TargetElement())
        }
    }

    /// Sets the element that should be made visible in response to the event.
    /// - Parameter newValue: The element that should be made visible in response to the event.
    public func targetElement(_ value: MicrosoftUIXaml_UIElement?) throws {
        try _ibringIntoViewRequestedEventArgs.put_TargetElement(value)
    }

    /// Gets or sets the element that should be made visible in response to the event.
    public var targetElement_: MicrosoftUIXaml_UIElement! {
        get {
            try! NullResult.catch(self.targetElement)
        }
        set {
            try! self.targetElement(newValue)
        }
    }

    /// The Rect in the TargetElement’s coordinate space to bring into view.
    public var targetRect: WindowsFoundation_Rect {
        get throws {
            try _ibringIntoViewRequestedEventArgs.get_TargetRect()
        }
    }

    /// Sets the Rect in the TargetElement’s coordinate space to bring into view.
    /// - Parameter newValue: The Rect in the TargetElement’s coordinate space to bring into view.
    public func targetRect(_ value: WindowsFoundation_Rect) throws {
        try _ibringIntoViewRequestedEventArgs.put_TargetRect(value)
    }

    /// Gets or sets the Rect in the TargetElement’s coordinate space to bring into view.
    public var targetRect_: WindowsFoundation_Rect {
        get {
            try! self.targetRect
        }
        set {
            try! self.targetRect(newValue)
        }
    }

    /// The requested vertical alignment ratio between 0.0 and 1.0, or NaN. See Remarks.
    public var verticalAlignmentRatio: Swift.Double {
        get throws {
            try _ibringIntoViewRequestedEventArgs.get_VerticalAlignmentRatio()
        }
    }

    /// Gets the requested vertical alignment ratio which controls the alignment of the horizontal axis of the TargetRect with respect to the horizontal axis of the viewport.
    public var verticalAlignmentRatio_: Swift.Double {
        try! self.verticalAlignmentRatio
    }

    /// The vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    public var verticalOffset: Swift.Double {
        get throws {
            try _ibringIntoViewRequestedEventArgs.get_VerticalOffset()
        }
    }

    /// Sets the vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    /// - Parameter newValue: The vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    public func verticalOffset(_ value: Swift.Double) throws {
        try _ibringIntoViewRequestedEventArgs.put_VerticalOffset(value)
    }

    /// Gets or sets the vertical distance to add to the viewport-relative position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
    public var verticalOffset_: Swift.Double {
        get {
            try! self.verticalOffset
        }
        set {
            try! self.verticalOffset(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IBringIntoViewRequestedEventArgs>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIBringIntoViewRequestedEventArgs: COM.COMReference<SWRT_MicrosoftUIXaml_IBringIntoViewRequestedEventArgs>.Optional = .none

    internal var _ibringIntoViewRequestedEventArgs: COM.COMInterop<SWRT_MicrosoftUIXaml_IBringIntoViewRequestedEventArgs> {
        get throws {
            try _lazyIBringIntoViewRequestedEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXaml_IBringIntoViewRequestedEventArgs.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs")
            }
        }
    }
}