// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides a base element class for Windows Runtime UI objects. FrameworkElement defines common API that support UI interaction and the automatic layout system. FrameworkElementÂ also defines API related to data binding, defining and examining the object tree, and tracking object lifetime.
open class MicrosoftUIXaml_FrameworkElement: MicrosoftUIXaml_UIElement, @unchecked Sendable {
    /// Provides base class initialization behavior for FrameworkElement-derived classes.
    public init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXaml_FrameworkElement.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._iframeworkElementFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Retrieves an object that has the specified identifier name.
    /// - Parameter name: The name of the requested object.
    /// - Returns: The requested object. This can be null if no matching object was found in the current XAML namescope.
    public func findName(_ name: Swift.String) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iframeworkElement.findName(name))
    }

    /// Attaches a binding to a FrameworkElement, using the provided binding object.
    /// - Parameter dp: The dependency property identifier of the property that is data bound.
    /// - Parameter binding: The binding to use for the property.
    public func setBinding(_ dp: MicrosoftUIXaml_DependencyProperty?, _ binding: MicrosoftUIXamlData_BindingBase?) throws {
        try _iframeworkElement.setBinding(dp, binding)
    }

    /// Returns the BindingExpression that represents the binding on the specified property.
    /// - Parameter dp: The identifier for the target dependency property to get the binding from.
    /// - Returns: A BindingExpression if the target property has an active binding on this object; otherwise, returns null.
    public func getBindingExpression(_ dp: MicrosoftUIXaml_DependencyProperty?) throws -> MicrosoftUIXamlData_BindingExpression {
        try COM.NullResult.unwrap(_iframeworkElement.getBindingExpression(dp))
    }

    /// Occurs when the ActualTheme property value has changed.
    @discardableResult
    public func actualThemeChanged(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_ActualThemeChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).actualThemeChanged(removing: token) })
    }

    public func actualThemeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_ActualThemeChanged(token)
    }

    /// Occurs when the value of the FrameworkElement.DataContext property changes.
    @discardableResult
    public func dataContextChanged(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, MicrosoftUIXaml_DataContextChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_DataContextChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).dataContextChanged(removing: token) })
    }

    public func dataContextChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_DataContextChanged(token)
    }

    /// Occurs when the FrameworkElement's effective viewport changes.
    @discardableResult
    public func effectiveViewportChanged(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, MicrosoftUIXaml_EffectiveViewportChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_EffectiveViewportChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).effectiveViewportChanged(removing: token) })
    }

    public func effectiveViewportChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_EffectiveViewportChanged(token)
    }

    /// Occurs when the layout of the visual tree changes, due to layout-relevant properties changing value or some other action that refreshes the layout.
    @discardableResult
    public func layoutUpdated(adding handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_LayoutUpdated(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).layoutUpdated(removing: token) })
    }

    public func layoutUpdated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_LayoutUpdated(token)
    }

    /// Occurs when a FrameworkElement has been constructed and added to the object tree, and is ready for interaction.
    @discardableResult
    public func loaded(adding handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_Loaded(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).loaded(removing: token) })
    }

    public func loaded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_Loaded(token)
    }

    /// Occurs when a FrameworkElement begins to load.
    @discardableResult
    public func loading(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_Loading(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).loading(removing: token) })
    }

    public func loading(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_Loading(token)
    }

    /// Occurs when either the ActualHeight or the ActualWidth property changes value on a FrameworkElement.
    @discardableResult
    public func sizeChanged(adding handler: MicrosoftUIXaml_SizeChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_SizeChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).sizeChanged(removing: token) })
    }

    public func sizeChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_SizeChanged(token)
    }

    /// Occurs when this object is no longer connected to the main object tree.
    @discardableResult
    public func unloaded(adding handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _iframeworkElement.add_Unloaded(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).unloaded(removing: token) })
    }

    public func unloaded(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _iframeworkElement.remove_Unloaded(token)
    }

    /// The height, in pixels, of the object. The default is 0. The default might be encountered if the object has not been loaded and hasn't yet been involved in a layout pass that renders the UI.
    public var actualHeight: Swift.Double {
        get throws {
            try _iframeworkElement.get_ActualHeight()
        }
    }

    /// Gets the rendered height of a FrameworkElement. See Remarks.
    public var actualHeight_: Swift.Double {
        try! self.actualHeight
    }

    /// A value of the enumeration, for example Light.
    public var actualTheme: MicrosoftUIXaml_ElementTheme {
        get throws {
            try _iframeworkElement.get_ActualTheme()
        }
    }

    /// Gets the UI theme that is currently used by the element, which might be different than the RequestedTheme.
    public var actualTheme_: MicrosoftUIXaml_ElementTheme {
        try! self.actualTheme
    }

    /// The width, in pixels, of the object. The default is 0. The default might be encountered if the object has not been loaded and hasn't yet been involved in a layout pass that renders the UI.
    public var actualWidth: Swift.Double {
        get throws {
            try _iframeworkElement.get_ActualWidth()
        }
    }

    /// Gets the rendered width of a FrameworkElement. See Remarks.
    public var actualWidth_: Swift.Double {
        try! self.actualWidth
    }

    /// true if the element gets focus when a user interacts with it; otherwise, false.
    public var allowFocusOnInteraction: Swift.Bool {
        get throws {
            try _iframeworkElement.get_AllowFocusOnInteraction()
        }
    }

    /// Sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    /// - Parameter newValue: true if the element gets focus when a user interacts with it; otherwise, false.
    public func allowFocusOnInteraction(_ value: Swift.Bool) throws {
        try _iframeworkElement.put_AllowFocusOnInteraction(value)
    }

    /// Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
    public var allowFocusOnInteraction_: Swift.Bool {
        get {
            try! self.allowFocusOnInteraction
        }
        set {
            try! self.allowFocusOnInteraction(newValue)
        }
    }

    /// true if a disabled control can receive focus; otherwise, false.
    public var allowFocusWhenDisabled: Swift.Bool {
        get throws {
            try _iframeworkElement.get_AllowFocusWhenDisabled()
        }
    }

    /// Sets whether a disabled control can receive focus.
    /// - Parameter newValue: true if a disabled control can receive focus; otherwise, false.
    public func allowFocusWhenDisabled(_ value: Swift.Bool) throws {
        try _iframeworkElement.put_AllowFocusWhenDisabled(value)
    }

    /// Gets or sets whether a disabled control can receive focus.
    public var allowFocusWhenDisabled_: Swift.Bool {
        get {
            try! self.allowFocusWhenDisabled
        }
        set {
            try! self.allowFocusWhenDisabled(newValue)
        }
    }

    /// The base Uniform Resource Identifier (URI) for an object at XAML load time.
    public var baseUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_BaseUri())
        }
    }

    /// Gets a Uniform Resource Identifier (URI) that represents the base URI for an XAML-constructed object at XAML load time. This property is useful for URI resolution at run time.
    public var baseUri_: WindowsFoundation_Uri! {
        try! NullResult.catch(self.baseUri)
    }

    /// The object to use as data context.
    public var dataContext: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_DataContext())
        }
    }

    /// Sets the data context for a FrameworkElement. A common use of a data context is when a FrameworkElement uses the {Binding} markup extension and participates in data binding.
    /// - Parameter newValue: The object to use as data context.
    public func dataContext(_ value: WindowsRuntime.IInspectable?) throws {
        try _iframeworkElement.put_DataContext(value)
    }

    /// Gets or sets the data context for a FrameworkElement. A common use of a data context is when a FrameworkElement uses the {Binding} markup extension and participates in data binding.
    public var dataContext_: WindowsRuntime.IInspectable! {
        get {
            try! NullResult.catch(self.dataContext)
        }
        set {
            try! self.dataContext(newValue)
        }
    }

    /// The direction that text and other UI elements flow within their parent element, as a value of the enumeration. The default value is LeftToRight.
    public var flowDirection: MicrosoftUIXaml_FlowDirection {
        get throws {
            try _iframeworkElement.get_FlowDirection()
        }
    }

    /// Sets the direction in which text and other UI elements flow within any parent element that controls their layout. This property can be set to either LeftToRight or RightToLeft. Setting FlowDirection to RightToLeft on any element sets the alignment to the right, the reading order to right-to-left and the layout of the control to flow from right to left.
    /// - Parameter newValue: The direction that text and other UI elements flow within their parent element, as a value of the enumeration. The default value is LeftToRight.
    public func flowDirection(_ value: MicrosoftUIXaml_FlowDirection) throws {
        try _iframeworkElement.put_FlowDirection(value)
    }

    /// Gets or sets the direction in which text and other UI elements flow within any parent element that controls their layout. This property can be set to either LeftToRight or RightToLeft. Setting FlowDirection to RightToLeft on any element sets the alignment to the right, the reading order to right-to-left and the layout of the control to flow from right to left.
    public var flowDirection_: MicrosoftUIXaml_FlowDirection {
        get {
            try! self.flowDirection
        }
        set {
            try! self.flowDirection(newValue)
        }
    }

    /// Provides margin values for the focus visual. The default is a Thickness with all properties (dimensions) equal to 0. A different runtime default is often provided by individual control templates.
    public var focusVisualMargin: MicrosoftUIXaml_Thickness {
        get throws {
            try _iframeworkElement.get_FocusVisualMargin()
        }
    }

    /// Sets the outer margin of the focus visual for a FrameworkElement.
    /// - Parameter newValue: Provides margin values for the focus visual. The default is a Thickness with all properties (dimensions) equal to 0. A different runtime default is often provided by individual control templates.
    public func focusVisualMargin(_ value: MicrosoftUIXaml_Thickness) throws {
        try _iframeworkElement.put_FocusVisualMargin(value)
    }

    /// Gets or sets the outer margin of the focus visual for a FrameworkElement.
    public var focusVisualMargin_: MicrosoftUIXaml_Thickness {
        get {
            try! self.focusVisualMargin
        }
        set {
            try! self.focusVisualMargin(newValue)
        }
    }

    /// The brush used to draw the outer border of a HighVisibility focus visual.
    public var focusVisualPrimaryBrush: MicrosoftUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_FocusVisualPrimaryBrush())
        }
    }

    /// Sets the brush used to draw the outer border of a HighVisibility or Reveal focus visual for a FrameworkElement.
    /// - Parameter newValue: The brush used to draw the outer border of a HighVisibility focus visual.
    public func focusVisualPrimaryBrush(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        try _iframeworkElement.put_FocusVisualPrimaryBrush(value)
    }

    /// Gets or sets the brush used to draw the outer border of a HighVisibility or Reveal focus visual for a FrameworkElement.
    public var focusVisualPrimaryBrush_: MicrosoftUIXamlMedia_Brush! {
        get {
            try! NullResult.catch(self.focusVisualPrimaryBrush)
        }
        set {
            try! self.focusVisualPrimaryBrush(newValue)
        }
    }

    /// The thickness of the outer border of a HighVisibility focus visual. The default is 2.
    public var focusVisualPrimaryThickness: MicrosoftUIXaml_Thickness {
        get throws {
            try _iframeworkElement.get_FocusVisualPrimaryThickness()
        }
    }

    /// Sets the thickness of the outer border of a HighVisibility or Reveal focus visual for a FrameworkElement.
    /// - Parameter newValue: The thickness of the outer border of a HighVisibility focus visual. The default is 2.
    public func focusVisualPrimaryThickness(_ value: MicrosoftUIXaml_Thickness) throws {
        try _iframeworkElement.put_FocusVisualPrimaryThickness(value)
    }

    /// Gets or sets the thickness of the outer border of a HighVisibility or Reveal focus visual for a FrameworkElement.
    public var focusVisualPrimaryThickness_: MicrosoftUIXaml_Thickness {
        get {
            try! self.focusVisualPrimaryThickness
        }
        set {
            try! self.focusVisualPrimaryThickness(newValue)
        }
    }

    /// The brush used to draw the inner border of a HighVisibility focus visual.
    public var focusVisualSecondaryBrush: MicrosoftUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_FocusVisualSecondaryBrush())
        }
    }

    /// Sets the brush used to draw the inner border of a HighVisibility or Reveal focus visual for a FrameworkElement.
    /// - Parameter newValue: The brush used to draw the inner border of a HighVisibility focus visual.
    public func focusVisualSecondaryBrush(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        try _iframeworkElement.put_FocusVisualSecondaryBrush(value)
    }

    /// Gets or sets the brush used to draw the inner border of a HighVisibility or Reveal focus visual for a FrameworkElement.
    public var focusVisualSecondaryBrush_: MicrosoftUIXamlMedia_Brush! {
        get {
            try! NullResult.catch(self.focusVisualSecondaryBrush)
        }
        set {
            try! self.focusVisualSecondaryBrush(newValue)
        }
    }

    /// The thickness of the inner border of a HighVisibility focus visual. The default value is 1.
    public var focusVisualSecondaryThickness: MicrosoftUIXaml_Thickness {
        get throws {
            try _iframeworkElement.get_FocusVisualSecondaryThickness()
        }
    }

    /// Sets the thickness of the inner border of a HighVisibility or Reveal focus visual for a FrameworkElement.
    /// - Parameter newValue: The thickness of the inner border of a HighVisibility focus visual. The default value is 1.
    public func focusVisualSecondaryThickness(_ value: MicrosoftUIXaml_Thickness) throws {
        try _iframeworkElement.put_FocusVisualSecondaryThickness(value)
    }

    /// Gets or sets the thickness of the inner border of a HighVisibility or Reveal focus visual for a FrameworkElement.
    public var focusVisualSecondaryThickness_: MicrosoftUIXaml_Thickness {
        get {
            try! self.focusVisualSecondaryThickness
        }
        set {
            try! self.focusVisualSecondaryThickness(newValue)
        }
    }

    /// The height, in pixels, of the object. The default is NaN value, this value must be equal to or greater than 0.
    public var height: Swift.Double {
        get throws {
            try _iframeworkElement.get_Height()
        }
    }

    /// Sets the suggested height of a FrameworkElement.
    /// - Parameter newValue: The height, in pixels, of the object. The default is NaN value, this value must be equal to or greater than 0.
    public func height(_ value: Swift.Double) throws {
        try _iframeworkElement.put_Height(value)
    }

    /// Gets or sets the suggested height of a FrameworkElement.
    public var height_: Swift.Double {
        get {
            try! self.height
        }
        set {
            try! self.height(newValue)
        }
    }

    /// A horizontal alignment setting, as a value of the enumeration. The default is Stretch.
    public var horizontalAlignment: MicrosoftUIXaml_HorizontalAlignment {
        get throws {
            try _iframeworkElement.get_HorizontalAlignment()
        }
    }

    /// Sets the horizontal alignment characteristics that are applied to a FrameworkElement when it is composed in a layout parent, such as a panel or items control.
    /// - Parameter newValue: A horizontal alignment setting, as a value of the enumeration. The default is Stretch.
    public func horizontalAlignment(_ value: MicrosoftUIXaml_HorizontalAlignment) throws {
        try _iframeworkElement.put_HorizontalAlignment(value)
    }

    /// Gets or sets the horizontal alignment characteristics that are applied to a FrameworkElement when it is composed in a layout parent, such as a panel or items control.
    public var horizontalAlignment_: MicrosoftUIXaml_HorizontalAlignment {
        get {
            try! self.horizontalAlignment
        }
        set {
            try! self.horizontalAlignment(newValue)
        }
    }

    /// true if the element has been added to the element tree and is ready for interaction; otherwise, false.
    public var isLoaded: Swift.Bool {
        get throws {
            try _iframeworkElement.get_IsLoaded()
        }
    }

    /// Gets a value that indicates whether the element has been added to the element tree and is ready for interaction.
    public var isLoaded_: Swift.Bool {
        try! self.isLoaded
    }

    /// A string specifying language and culture that follows the Internet Engineering Task Force (IETF)  BCP 47 standards. For example, U.S. English is "en-US".
    public var language: Swift.String {
        get throws {
            try _iframeworkElement.get_Language()
        }
    }

    /// Sets localization/globalization language information that applies to a FrameworkElement, and also to all child elements of the current FrameworkElement in the object representation and in UI.
    /// - Parameter newValue: A string specifying language and culture that follows the Internet Engineering Task Force (IETF)  BCP 47 standards. For example, U.S. English is "en-US".
    public func language(_ value: Swift.String) throws {
        try _iframeworkElement.put_Language(value)
    }

    /// Gets or sets localization/globalization language information that applies to a FrameworkElement, and also to all child elements of the current FrameworkElement in the object representation and in UI.
    public var language_: Swift.String {
        get {
            try! self.language
        }
        set {
            try! self.language(newValue)
        }
    }

    /// Provides margin values for the object. The default value is a default Thickness with all properties (dimensions) equal to 0.
    public var margin: MicrosoftUIXaml_Thickness {
        get throws {
            try _iframeworkElement.get_Margin()
        }
    }

    /// Sets the outer margin of a FrameworkElement.
    /// - Parameter newValue: Provides margin values for the object. The default value is a default Thickness with all properties (dimensions) equal to 0.
    public func margin(_ value: MicrosoftUIXaml_Thickness) throws {
        try _iframeworkElement.put_Margin(value)
    }

    /// Gets or sets the outer margin of a FrameworkElement.
    public var margin_: MicrosoftUIXaml_Thickness {
        get {
            try! self.margin
        }
        set {
            try! self.margin(newValue)
        }
    }

    /// The maximum height of the object, in pixels. The default value is PositiveInfinity is also valid.
    public var maxHeight: Swift.Double {
        get throws {
            try _iframeworkElement.get_MaxHeight()
        }
    }

    /// Sets the maximum height constraint of a FrameworkElement.
    /// - Parameter newValue: The maximum height of the object, in pixels. The default value is PositiveInfinity is also valid.
    public func maxHeight(_ value: Swift.Double) throws {
        try _iframeworkElement.put_MaxHeight(value)
    }

    /// Gets or sets the maximum height constraint of a FrameworkElement.
    public var maxHeight_: Swift.Double {
        get {
            try! self.maxHeight
        }
        set {
            try! self.maxHeight(newValue)
        }
    }

    /// The maximum width of the object, in pixels. The default is PositiveInfinity is also valid.
    public var maxWidth: Swift.Double {
        get throws {
            try _iframeworkElement.get_MaxWidth()
        }
    }

    /// Sets the maximum width constraint of a FrameworkElement.
    /// - Parameter newValue: The maximum width of the object, in pixels. The default is PositiveInfinity is also valid.
    public func maxWidth(_ value: Swift.Double) throws {
        try _iframeworkElement.put_MaxWidth(value)
    }

    /// Gets or sets the maximum width constraint of a FrameworkElement.
    public var maxWidth_: Swift.Double {
        get {
            try! self.maxWidth
        }
        set {
            try! self.maxWidth(newValue)
        }
    }

    /// The minimum height of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, PositiveInfinity is not valid.
    public var minHeight: Swift.Double {
        get throws {
            try _iframeworkElement.get_MinHeight()
        }
    }

    /// Sets the minimum height constraint of a FrameworkElement.
    /// - Parameter newValue: The minimum height of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, PositiveInfinity is not valid.
    public func minHeight(_ value: Swift.Double) throws {
        try _iframeworkElement.put_MinHeight(value)
    }

    /// Gets or sets the minimum height constraint of a FrameworkElement.
    public var minHeight_: Swift.Double {
        get {
            try! self.minHeight
        }
        set {
            try! self.minHeight(newValue)
        }
    }

    /// The minimum width of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, PositiveInfinity is not valid.
    public var minWidth: Swift.Double {
        get throws {
            try _iframeworkElement.get_MinWidth()
        }
    }

    /// Sets the minimum width constraint of a FrameworkElement.
    /// - Parameter newValue: The minimum width of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, PositiveInfinity is not valid.
    public func minWidth(_ value: Swift.Double) throws {
        try _iframeworkElement.put_MinWidth(value)
    }

    /// Gets or sets the minimum width constraint of a FrameworkElement.
    public var minWidth_: Swift.Double {
        get {
            try! self.minWidth
        }
        set {
            try! self.minWidth(newValue)
        }
    }

    /// The name of the object, which must be a string that is valid in the XamlName grammar (see table in x:Name attribute. The default is an empty string.
    public var name: Swift.String {
        get throws {
            try _iframeworkElement.get_Name()
        }
    }

    /// Sets the identifying name of the object. When a XAML processor creates the object tree from XAML markup, run-time code can refer to the XAML-declared object by this name.
    /// - Parameter newValue: The name of the object, which must be a string that is valid in the XamlName grammar (see table in x:Name attribute. The default is an empty string.
    public func name(_ value: Swift.String) throws {
        try _iframeworkElement.put_Name(value)
    }

    /// Gets or sets the identifying name of the object. When a XAML processor creates the object tree from XAML markup, run-time code can refer to the XAML-declared object by this name.
    public var name_: Swift.String {
        get {
            try! self.name
        }
        set {
            try! self.name(newValue)
        }
    }

    /// The parent object of this object in the object tree.
    public var parent: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Parent())
        }
    }

    /// Gets the parent object of this FrameworkElement in the object tree.
    public var parent_: MicrosoftUIXaml_DependencyObject! {
        try! NullResult.catch(self.parent)
    }

    /// A value of the enumeration, for example Light.
    public var requestedTheme: MicrosoftUIXaml_ElementTheme {
        get throws {
            try _iframeworkElement.get_RequestedTheme()
        }
    }

    /// Sets the UI theme that is used by the UIElement (and its child elements) for resource determination. The UI theme you specify with RequestedTheme can override the app-level RequestedTheme.
    /// - Parameter newValue: A value of the enumeration, for example Light.
    public func requestedTheme(_ value: MicrosoftUIXaml_ElementTheme) throws {
        try _iframeworkElement.put_RequestedTheme(value)
    }

    /// Gets or sets the UI theme that is used by the UIElement (and its child elements) for resource determination. The UI theme you specify with RequestedTheme can override the app-level RequestedTheme.
    public var requestedTheme_: MicrosoftUIXaml_ElementTheme {
        get {
            try! self.requestedTheme
        }
        set {
            try! self.requestedTheme(newValue)
        }
    }

    /// The current locally defined dictionary of resources, where each resource can be accessed by its key.
    public var resources: MicrosoftUIXaml_ResourceDictionary {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Resources())
        }
    }

    /// Gets the locally defined resource dictionary. In XAML, you can establish resource items as child object elements of a frameworkElement.Resources property element, through XAML implicit collection syntax.
    /// - Parameter newValue: The current locally defined dictionary of resources, where each resource can be accessed by its key.
    public func resources(_ value: MicrosoftUIXaml_ResourceDictionary?) throws {
        try _iframeworkElement.put_Resources(value)
    }

    /// Gets the locally defined resource dictionary. In XAML, you can establish resource items as child object elements of a frameworkElement.Resources property element, through XAML implicit collection syntax.
    public var resources_: MicrosoftUIXaml_ResourceDictionary! {
        get {
            try! NullResult.catch(self.resources)
        }
        set {
            try! self.resources(newValue)
        }
    }

    /// The applied style for the object, if present; otherwise, null. The default for a default-constructed FrameworkElement is null.
    public var style: MicrosoftUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Style())
        }
    }

    /// Sets an instance Style that is applied for this object during layout and rendering.
    /// - Parameter newValue: The applied style for the object, if present; otherwise, null. The default for a default-constructed FrameworkElement is null.
    public func style(_ value: MicrosoftUIXaml_Style?) throws {
        try _iframeworkElement.put_Style(value)
    }

    /// Gets or sets an instance Style that is applied for this object during layout and rendering.
    public var style_: MicrosoftUIXaml_Style! {
        get {
            try! NullResult.catch(self.style)
        }
        set {
            try! self.style(newValue)
        }
    }

    /// The intended arbitrary object value. This property has no default value.
    public var tag: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Tag())
        }
    }

    /// Sets an arbitrary object value that can be used to store custom information about this object.
    /// - Parameter newValue: The intended arbitrary object value. This property has no default value.
    public func tag(_ value: WindowsRuntime.IInspectable?) throws {
        try _iframeworkElement.put_Tag(value)
    }

    /// Gets or sets an arbitrary object value that can be used to store custom information about this object.
    public var tag_: WindowsRuntime.IInspectable! {
        get {
            try! NullResult.catch(self.tag)
        }
        set {
            try! self.tag(newValue)
        }
    }

    /// The collection of triggers for animations that are defined for this object.
    public var triggers: MicrosoftUIXaml_TriggerCollection {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElement.get_Triggers())
        }
    }

    /// Gets the collection of triggers for animations that are defined for a FrameworkElement. Not commonly used. See Remarks.
    public var triggers_: MicrosoftUIXaml_TriggerCollection! {
        try! NullResult.catch(self.triggers)
    }

    /// A vertical alignment setting, as a value of the enumeration. The default is Stretch.
    public var verticalAlignment: MicrosoftUIXaml_VerticalAlignment {
        get throws {
            try _iframeworkElement.get_VerticalAlignment()
        }
    }

    /// Sets the vertical alignment characteristics that are applied to a FrameworkElement when it is composed in a parent object such as a panel or items control.
    /// - Parameter newValue: A vertical alignment setting, as a value of the enumeration. The default is Stretch.
    public func verticalAlignment(_ value: MicrosoftUIXaml_VerticalAlignment) throws {
        try _iframeworkElement.put_VerticalAlignment(value)
    }

    /// Gets or sets the vertical alignment characteristics that are applied to a FrameworkElement when it is composed in a parent object such as a panel or items control.
    public var verticalAlignment_: MicrosoftUIXaml_VerticalAlignment {
        get {
            try! self.verticalAlignment
        }
        set {
            try! self.verticalAlignment(newValue)
        }
    }

    /// The width of the object, in pixels. The default is NaN value, this value must be equal to or greater than 0.

    public var width: Swift.Double {
        get throws {
            try _iframeworkElement.get_Width()
        }
    }

    /// Sets the width of a FrameworkElement.
    /// - Parameter newValue: The width of the object, in pixels. The default is NaN value, this value must be equal to or greater than 0.

    public func width(_ value: Swift.Double) throws {
        try _iframeworkElement.put_Width(value)
    }

    /// Gets or sets the width of a FrameworkElement.
    public var width_: Swift.Double {
        get {
            try! self.width
        }
        set {
            try! self.width(newValue)
        }
    }

    /// Invalidates the viewport state for a UIElement that is used to calculate the effective viewport.
    public func invalidateViewport() throws {
        try _iframeworkElementProtected.invalidateViewport()
    }

    /// Provides the behavior for the "Measure" pass of the layout cycle. Classes can override this method to define their own "Measure" pass behavior.
    /// - Parameter availableSize: The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.
    /// - Returns: The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects or based on other considerations such as a fixed container size.
    open func measureOverride(_ availableSize: WindowsFoundation_Size) throws -> WindowsFoundation_Size {
        try _iframeworkElementOverrides.measureOverride(availableSize)
    }

    /// Provides the behavior for the "Arrange" pass of layout. Classes can override this method to define their own "Arrange" pass behavior.
    /// - Parameter finalSize: The final area within the parent that this object should use to arrange itself and its children.
    /// - Returns: The actual size that is used after the element is arranged in layout.
    open func arrangeOverride(_ finalSize: WindowsFoundation_Size) throws -> WindowsFoundation_Size {
        try _iframeworkElementOverrides.arrangeOverride(finalSize)
    }

    /// Invoked whenever application code or internal processes (such as a rebuilding layout pass) call ApplyTemplate. In simplest terms, this means the method is called just before a UI element displays in your app. Override this method to influence the default post-template logic of a class.
    open func onApplyTemplate() throws {
        try _iframeworkElementOverrides.onApplyTemplate()
    }

    /// When implemented in a derived class, enables per-state construction of a visual tree for a control template in code, rather than by loading XAML for all states at control startup.
    /// - Parameter stateName: The state to transition to.
    /// - Parameter useTransitions: true to use a VisualTransition to transition between states. false to skip using transitions and go directly to the requested state. The default is false.
    /// - Returns: true if the control successfully transitions to the new state, or was already using that state; otherwise, false.
    open func goToElementStateCore(_ stateName: Swift.String, _ useTransitions: Swift.Bool) throws -> Swift.Bool {
        try _iframeworkElementOverrides.goToElementStateCore(stateName, useTransitions)
    }

    /// Removes the specified element from the XAML visual tree in a way that it can be undeferred later.
    /// - Parameter element: The element to remove from the XAML visual tree.
    public static func deferTree(_ element: MicrosoftUIXaml_DependencyObject?) throws {
        try _iframeworkElementStatics.deferTree(element)
    }

    /// The identifier for the ActualHeight Â dependency property.
    public static var actualHeightProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_ActualHeightProperty())
        }
    }

    /// Identifies the ActualHeight Â dependency property. See Remarks.
    public static var actualHeightProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.actualHeightProperty)
    }

    /// The identifier for the ActualThemeÂ dependency property.
    public static var actualThemeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_ActualThemeProperty())
        }
    }

    /// Identifies the ActualThemeÂ dependency property.
    public static var actualThemeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.actualThemeProperty)
    }

    /// The identifier for the ActualWidth Â dependency property.
    public static var actualWidthProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_ActualWidthProperty())
        }
    }

    /// Identifies the ActualWidth Â dependency property. See Remarks.
    public static var actualWidthProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.actualWidthProperty)
    }

    /// The identifier for the AllowFocusOnInteraction dependency property.
    public static var allowFocusOnInteractionProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_AllowFocusOnInteractionProperty())
        }
    }

    /// Identifies for the AllowFocusOnInteraction dependency property.
    public static var allowFocusOnInteractionProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.allowFocusOnInteractionProperty)
    }

    /// The identifier for the AllowFocusWhenDisabled Â dependency property.
    public static var allowFocusWhenDisabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_AllowFocusWhenDisabledProperty())
        }
    }

    /// Identifies the AllowFocusWhenDisabled Â dependency property.
    public static var allowFocusWhenDisabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.allowFocusWhenDisabledProperty)
    }

    /// The DataContext Â dependency property identifier.
    public static var dataContextProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_DataContextProperty())
        }
    }

    /// Identifies the DataContext Â dependency property.
    public static var dataContextProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.dataContextProperty)
    }

    /// The FlowDirection dependency property identifier.
    public static var flowDirectionProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_FlowDirectionProperty())
        }
    }

    /// Identifies the FlowDirectionÂ dependency property.
    public static var flowDirectionProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.flowDirectionProperty)
    }

    /// The identifier for the FocusVisualMargin Â dependency property.
    public static var focusVisualMarginProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_FocusVisualMarginProperty())
        }
    }

    /// Identifies the FocusVisualMargin Â dependency property.
    public static var focusVisualMarginProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.focusVisualMarginProperty)
    }

    /// The identifier for the FocusVisualPrimaryBrush dependency property.
    public static var focusVisualPrimaryBrushProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_FocusVisualPrimaryBrushProperty())
        }
    }

    /// Identifies the FocusVisualPrimaryBrush dependency property.
    public static var focusVisualPrimaryBrushProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.focusVisualPrimaryBrushProperty)
    }

    /// The identifier for the FocusVisualPrimaryThickness dependency property.
    public static var focusVisualPrimaryThicknessProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_FocusVisualPrimaryThicknessProperty())
        }
    }

    /// Identifies the FocusVisualPrimaryThickness dependency property.
    public static var focusVisualPrimaryThicknessProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.focusVisualPrimaryThicknessProperty)
    }

    /// The identifier for the FocusVisualSecondaryBrush dependency property.
    public static var focusVisualSecondaryBrushProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_FocusVisualSecondaryBrushProperty())
        }
    }

    /// Identifies the FocusVisualSecondaryBrush dependency property.
    public static var focusVisualSecondaryBrushProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.focusVisualSecondaryBrushProperty)
    }

    /// The identifier for the FocusVisualSecondaryThickness dependency property.
    public static var focusVisualSecondaryThicknessProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_FocusVisualSecondaryThicknessProperty())
        }
    }

    /// Identifies the FocusVisualSecondaryThickness dependency property.
    public static var focusVisualSecondaryThicknessProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.focusVisualSecondaryThicknessProperty)
    }

    /// The identifier for the Height dependency property.
    public static var heightProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_HeightProperty())
        }
    }

    /// Identifies the Height dependency property.
    public static var heightProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.heightProperty)
    }

    /// The HorizontalAlignment dependency property identifier.
    public static var horizontalAlignmentProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_HorizontalAlignmentProperty())
        }
    }

    /// Identifies the HorizontalAlignment dependency property.
    public static var horizontalAlignmentProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.horizontalAlignmentProperty)
    }

    /// The identifier for the Language dependency property.
    public static var languageProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_LanguageProperty())
        }
    }

    /// Identifies the Language dependency property.
    public static var languageProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.languageProperty)
    }

    /// The MarginÂ dependency property identifier.
    public static var marginProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MarginProperty())
        }
    }

    /// Identifies the Margin dependency property.
    public static var marginProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.marginProperty)
    }

    /// The identifier for the MaxHeightÂ dependency property.
    public static var maxHeightProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MaxHeightProperty())
        }
    }

    /// Identifies the MaxHeight dependency property.
    public static var maxHeightProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.maxHeightProperty)
    }

    /// The identifier for the MaxWidth dependency property.
    public static var maxWidthProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MaxWidthProperty())
        }
    }

    /// Identifies the MaxWidth dependency property.
    public static var maxWidthProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.maxWidthProperty)
    }

    /// The identifier for the MinHeight dependency property.
    public static var minHeightProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MinHeightProperty())
        }
    }

    /// Identifies the MinHeight dependency property.
    public static var minHeightProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.minHeightProperty)
    }

    /// The identifier for the MinWidthÂ dependency property.
    public static var minWidthProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_MinWidthProperty())
        }
    }

    /// Identifies the MinWidth dependency property.
    public static var minWidthProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.minWidthProperty)
    }

    /// The identifier for the Name dependency property.
    public static var nameProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_NameProperty())
        }
    }

    /// Identifies the Name dependency property.
    public static var nameProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.nameProperty)
    }

    /// The identifier for the RequestedTheme dependency property.
    public static var requestedThemeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_RequestedThemeProperty())
        }
    }

    /// Identifies the RequestedTheme dependency property.
    public static var requestedThemeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.requestedThemeProperty)
    }

    /// The identifier for the Style dependency property.
    public static var styleProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_StyleProperty())
        }
    }

    /// Identifies the Style dependency property.
    public static var styleProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.styleProperty)
    }

    /// The identifier for the Tag dependency property.
    public static var tagProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_TagProperty())
        }
    }

    /// Identifies the Tag dependency property.
    public static var tagProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.tagProperty)
    }

    /// The VerticalAlignment dependency property identifier.
    public static var verticalAlignmentProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_VerticalAlignmentProperty())
        }
    }

    /// Identifies the VerticalAlignment dependency property.
    public static var verticalAlignmentProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.verticalAlignmentProperty)
    }

    /// The identifier for the Width Â dependency property.
    public static var widthProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_iframeworkElementStatics.get_WidthProperty())
        }
    }

    /// Identifies the Width Â dependency property.
    public static var widthProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.widthProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkElement>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIFrameworkElement: COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkElement>.Optional = .none

    internal var _iframeworkElement: COM.COMInterop<SWRT_MicrosoftUIXaml_IFrameworkElement> {
        get throws {
            try _lazyIFrameworkElement.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IFrameworkElement.self)).cast()
            }
        }
    }

    private var _lazyIFrameworkElementProtected: COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkElementProtected>.Optional = .none

    internal var _iframeworkElementProtected: COM.COMInterop<SWRT_MicrosoftUIXaml_IFrameworkElementProtected> {
        get throws {
            try _lazyIFrameworkElementProtected.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IFrameworkElementProtected.self)).cast()
            }
        }
    }

    private var _lazyIFrameworkElementOverrides: COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkElementOverrides>.Optional = .none

    internal var _iframeworkElementOverrides: COM.COMInterop<SWRT_MicrosoftUIXaml_IFrameworkElementOverrides> {
        get throws {
            try _lazyIFrameworkElementOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IFrameworkElementOverrides.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.FrameworkElement")
            }
        }
    }

    private static var _lazyIFrameworkElementFactory: COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkElementFactory>.Optional = .none

    internal static var _iframeworkElementFactory: COM.COMInterop<SWRT_MicrosoftUIXaml_IFrameworkElementFactory> {
        get throws {
            try _lazyIFrameworkElementFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IFrameworkElementFactory.self)).cast()
            }
        }
    }

    private static var _lazyIFrameworkElementStatics: COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkElementStatics>.Optional = .none

    internal static var _iframeworkElementStatics: COM.COMInterop<SWRT_MicrosoftUIXaml_IFrameworkElementStatics> {
        get throws {
            try _lazyIFrameworkElementStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_IFrameworkElementStatics.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _iframeworkElementOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_MicrosoftUIXaml_IFrameworkElementOverrides.self) {
            if !_iframeworkElementOverrides_outer.isInitialized {
                _iframeworkElementOverrides_outer.initialize(embedder: self,
                    virtualTable: &MicrosoftUIXaml_FrameworkElementBinding.VirtualTables.iframeworkElementOverrides)
            }
            return .init(_iframeworkElementOverrides_outer.toCOM())
        }
        return .none
    }
}