// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides data for the UnhandledException event.
public final class MicrosoftUIXaml_UnhandledExceptionEventArgs: WindowsRuntime.WinRTImport<MicrosoftUIXaml_UnhandledExceptionEventArgsBinding>, @unchecked Sendable {
    /// The HRESULT code or a mapped common language runtime (CLR) System.Exception.
    public var exception: COM.HResult {
        get throws {
            try _interop.get_Exception()
        }
    }

    /// Gets the HRESULT code associated with the unhandled exception.
    public var exception_: COM.HResult {
        try! self.exception
    }

    /// true to mark the exception as handled, which indicates that the event system should not process it further; otherwise, false.
    public var handled: Swift.Bool {
        get throws {
            try _interop.get_Handled()
        }
    }

    /// Sets a value that indicates whether the exception is handled.
    /// - Parameter newValue: true to mark the exception as handled, which indicates that the event system should not process it further; otherwise, false.
    public func handled(_ value: Swift.Bool) throws {
        try _interop.put_Handled(value)
    }

    /// Gets or sets a value that indicates whether the exception is handled.
    public var handled_: Swift.Bool {
        get {
            try! self.handled
        }
        set {
            try! self.handled(newValue)
        }
    }

    /// The message string, which may be useful for debugging.
    public var message: Swift.String {
        get throws {
            try _interop.get_Message()
        }
    }

    /// Gets the message string as passed by the originating unhandled exception.
    public var message_: Swift.String {
        try! self.message
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_IUnhandledExceptionEventArgs>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.UnhandledExceptionEventArgs")
            }
        }
    }
}