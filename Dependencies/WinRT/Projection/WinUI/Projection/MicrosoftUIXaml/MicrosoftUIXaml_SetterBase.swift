// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents the base class for value setters.
open class MicrosoftUIXaml_SetterBase: MicrosoftUIXaml_DependencyObject, @unchecked Sendable {
    /// true if this object is in an immutable state; otherwise, false.
    public var isSealed: Swift.Bool {
        get throws {
            try _isetterBase.get_IsSealed()
        }
    }

    /// Gets a value that indicates whether this object is in an immutable state.
    public var isSealed_: Swift.Bool {
        try! self.isSealed
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXaml_ISetterBase>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyISetterBase: COM.COMReference<SWRT_MicrosoftUIXaml_ISetterBase>.Optional = .none

    internal var _isetterBase: COM.COMInterop<SWRT_MicrosoftUIXaml_ISetterBase> {
        get throws {
            try _lazyISetterBase.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_ISetterBase.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.SetterBase")
            }
        }
    }

    private static var _lazyISetterBaseFactory: COM.COMReference<SWRT_MicrosoftUIXaml_ISetterBaseFactory>.Optional = .none

    internal static var _isetterBaseFactory: COM.COMInterop<SWRT_MicrosoftUIXaml_ISetterBaseFactory> {
        get throws {
            try _lazyISetterBaseFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXaml_ISetterBaseFactory.self)).cast()
            }
        }
    }
}