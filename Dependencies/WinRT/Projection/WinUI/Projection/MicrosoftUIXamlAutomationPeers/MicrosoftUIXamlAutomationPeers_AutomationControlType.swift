// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Specifies the control type that is exposed to the Microsoft UI Automation client. Used by GetAutomationControlType.
public struct MicrosoftUIXamlAutomationPeers_AutomationControlType: CStyleEnum {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// A button control.
    public static let button = Self()

    /// A calendar control, such as a date picker.
    public static let calendar = Self(rawValue: 1)

    /// A check box control.
    public static let checkBox = Self(rawValue: 2)

    /// A combo box control.
    public static let comboBox = Self(rawValue: 3)

    /// An edit control, such as a text box.
    public static let edit = Self(rawValue: 4)

    /// A hyperlink control.
    public static let hyperlink = Self(rawValue: 5)

    /// An image control.
    public static let image = Self(rawValue: 6)

    /// A list item control, which is a child item of a list control.
    public static let listItem = Self(rawValue: 7)

    /// A list control, such as a list box.
    public static let list = Self(rawValue: 8)

    /// A menu control, such as a top-level menu in an application window.
    public static let menu = Self(rawValue: 9)

    /// A menu bar control, which generally contains a set of top-level menus.
    public static let menuBar = Self(rawValue: 10)

    /// A menu item control.
    public static let menuItem = Self(rawValue: 11)

    /// A progress bar control, which visually indicates the progress of a lengthy operation.
    public static let progressBar = Self(rawValue: 12)

    /// A radio button control, which is a selection mechanism allowing exactly one selected item in a group.
    public static let radioButton = Self(rawValue: 13)

    /// A scroll bar control, such as a scroll bar in an application window.
    public static let scrollBar = Self(rawValue: 14)

    /// A slider control.
    public static let slider = Self(rawValue: 15)

    /// A spinner control.
    public static let spinner = Self(rawValue: 16)

    /// A status bar control.
    public static let statusBar = Self(rawValue: 17)

    /// A tab control.
    public static let tab = Self(rawValue: 18)

    /// A tab item control, which represents a page of a tab control.
    public static let tabItem = Self(rawValue: 19)

    /// An edit control, such as a text box or rich text box.
    public static let text = Self(rawValue: 20)

    /// A toolbar, such as the control that contains a set of command buttons in an application window.
    public static let toolBar = Self(rawValue: 21)

    /// A tooltip control, an informational window that appears as a result of moving the pointer over a control or sometimes when tabbing to a control using the keyboard.
    public static let toolTip = Self(rawValue: 22)

    /// A tree control.
    public static let tree = Self(rawValue: 23)

    /// A node in a tree control.
    public static let treeItem = Self(rawValue: 24)

    /// A control that is not one of the defined control types.
    public static let custom = Self(rawValue: 25)

    /// A group control, which acts as a container for other controls.
    public static let group = Self(rawValue: 26)

    /// The control in a scrollbar that can be dragged to a different position.
    public static let thumb = Self(rawValue: 27)

    /// A data grid control.
    public static let dataGrid = Self(rawValue: 28)

    /// A data item control.
    public static let dataItem = Self(rawValue: 29)

    /// A document control.
    public static let document = Self(rawValue: 30)

    /// A split button, which is a button that performs a default action and can also expand to a list of other possible actions.
    public static let splitButton = Self(rawValue: 31)

    /// A window frame, which contains child objects.
    public static let window = Self(rawValue: 32)

    /// A pane control.
    public static let pane = Self(rawValue: 33)

    /// A header control, which is a container for the labels of rows and columns of information.
    public static let header = Self(rawValue: 34)

    /// A header item, which is the label for a row or column of information.
    public static let headerItem = Self(rawValue: 35)

    /// A table.
    public static let table = Self(rawValue: 36)

    /// The caption bar on a window.
    public static let titleBar = Self(rawValue: 37)

    /// A separator, which creates a visual division within controls such as menus and toolbars.
    public static let separator = Self(rawValue: 38)

    /// A semantic zoom control.
    public static let semanticZoom = Self(rawValue: 39)

    /// A container control that holds app UI components for commanding and experiences.
    public static let appBar = Self(rawValue: 40)

    /// An items control that displays one item at a time, and enables "flip" behavior for traversing its collection of items.
    public static let flipView = Self(rawValue: 41)
}