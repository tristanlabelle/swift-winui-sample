// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides a base class that exposes the automation peer for an associated owner class to Microsoft UI Automation.
open class MicrosoftUIXamlAutomationPeers_AutomationPeer: MicrosoftUIXaml_DependencyObject, @unchecked Sendable {
    /// Provides base class initialization behavior for AutomationPeer derived classes.
    public override init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlAutomationPeers_AutomationPeer.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._iautomationPeerFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Gets the control pattern that is associated with the specified PatternInterface.
    /// - Parameter patternInterface: A value from the PatternInterface enumeration.
    /// - Returns: The object that implements the pattern interface; null if the peer does not support this interface.
    public func getPattern(_ patternInterface: MicrosoftUIXamlAutomationPeers_PatternInterface) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeer.getPattern(patternInterface))
    }

    /// Raises an automation event.
    /// - Parameter eventId: The event identifier for the event to raise, as a value of the enumeration. See AutomationEvents.
    public func raiseAutomationEvent(_ eventId: MicrosoftUIXamlAutomationPeers_AutomationEvents) throws {
        try _iautomationPeer.raiseAutomationEvent(eventId)
    }

    /// Raises an event to notify the automation client of a changed property value.
    /// - Parameter automationProperty: The property that changed.
    /// - Parameter oldValue: The previous value of the property.
    /// - Parameter newValue: The new value of the property.
    public func raisePropertyChangedEvent(_ automationProperty: MicrosoftUIXamlAutomation_AutomationProperty?, _ oldValue: WindowsRuntime.IInspectable?, _ newValue: WindowsRuntime.IInspectable?) throws {
        try _iautomationPeer.raisePropertyChangedEvent(automationProperty, oldValue, newValue)
    }

    /// Gets the accelerator key combinations for the object that is associated with the UI Automation peer.
    /// - Returns: The accelerator key.
    public func getAcceleratorKey() throws -> Swift.String {
        try _iautomationPeer.getAcceleratorKey()
    }

    /// Gets the access key for the element that is associated with the automation peer.
    /// - Returns: The access key.
    public func getAccessKey() throws -> Swift.String {
        try _iautomationPeer.getAccessKey()
    }

    /// Gets the control type for the element that is associated with the UI Automation peer.
    /// - Returns: The control type.
    public func getAutomationControlType() throws -> MicrosoftUIXamlAutomationPeers_AutomationControlType {
        try _iautomationPeer.getAutomationControlType()
    }

    /// Gets the AutomationId of the element that is associated with the automation peer.
    /// - Returns: The automation identifier.
    public func getAutomationId() throws -> Swift.String {
        try _iautomationPeer.getAutomationId()
    }

    /// Gets the Rect object that represents the screen coordinates of the element that is associated with the automation peer.
    /// - Returns: The bounding rectangle.
    public func getBoundingRectangle() throws -> WindowsFoundation_Rect {
        try _iautomationPeer.getBoundingRectangle()
    }

    /// Gets the collection of child elements that are represented in the UI Automation tree as immediate child elements of the automation peer.
    /// - Returns: The collection of AutomationPeer objects for child elements.
    public func getChildren() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeer.getChildren())
    }

    /// Gets the element in the specified direction within the UI automation tree.
    /// - Parameter direction: The specified direction.
    /// - Returns: The element in the specified direction within the UI automation tree.
    public func navigate(_ direction: MicrosoftUIXamlAutomationPeers_AutomationNavigationDirection) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeer.navigate(direction))
    }

    /// Gets a name that is used with AutomationControlType, to differentiate the control that is represented by this AutomationPeer.
    /// - Returns: The class name.
    public func getClassName() throws -> Swift.String {
        try _iautomationPeer.getClassName()
    }

    /// Gets a point on the element that is associated with the automation peer that responds to a mouse click.
    /// - Returns: A point in the clickable area of the element.
    public func getClickablePoint() throws -> WindowsFoundation_Point {
        try _iautomationPeer.getClickablePoint()
    }

    /// Gets text that describes the functionality of the control that is associated with the automation peer.
    /// - Returns: The help text.
    public func getHelpText() throws -> Swift.String {
        try _iautomationPeer.getHelpText()
    }

    /// Gets text that conveys the visual status of the element that is associated with this automation peer.
    /// - Returns: The item status.
    public func getItemStatus() throws -> Swift.String {
        try _iautomationPeer.getItemStatus()
    }

    /// Gets a string that describes what kind of item an element represents.
    /// - Returns: The kind of item.
    public func getItemType() throws -> Swift.String {
        try _iautomationPeer.getItemType()
    }

    /// Gets the AutomationPeer for the UIElement that is targeted to the element.
    /// - Returns: The AutomationPeer for the element that is targeted by the UIElement.
    public func getLabeledBy() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeer.getLabeledBy())
    }

    /// Gets a localized string that represents the AutomationControlType value for the control that is associated with this automation peer.
    /// - Returns: The type of the control.
    public func getLocalizedControlType() throws -> Swift.String {
        try _iautomationPeer.getLocalizedControlType()
    }

    /// Gets text that describes the element that is associated with this automation peer. The Microsoft UI Automation  Name value is the primary identifier used by most assistive technology when they represent your app's UI by interacting with the Microsoft UI Automation framework.
    /// - Returns: The name of the element that is the peer's owner, as used by assistive technology and other Microsoft UI Automation clients.
    public func getName() throws -> Swift.String {
        try _iautomationPeer.getName()
    }

    /// Gets a value that indicates the explicit control orientation, if any.
    /// - Returns: The orientation of the control as a value of the enumeration.
    public func getOrientation() throws -> MicrosoftUIXamlAutomationPeers_AutomationOrientation {
        try _iautomationPeer.getOrientation()
    }

    /// Gets a value that indicates whether the element that is associated with this automation peer currently has keyboard focus.
    /// - Returns: true if the element has keyboard focus; otherwise, false.
    public func hasKeyboardFocus() throws -> Swift.Bool {
        try _iautomationPeer.hasKeyboardFocus()
    }

    /// Gets a value that indicates whether the element that is associated with this automation peer contains data that is presented to the user.
    /// - Returns: true if the element is a content element; otherwise, false.
    public func isContentElement() throws -> Swift.Bool {
        try _iautomationPeer.isContentElement()
    }

    /// Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.
    /// - Returns: true if the element is a control; otherwise, false.
    public func isControlElement() throws -> Swift.Bool {
        try _iautomationPeer.isControlElement()
    }

    /// Gets a value that indicates whether the element associated with this automation peer supports interaction.
    /// - Returns: true if the element supports interaction; otherwise, false.
    public func isEnabled() throws -> Swift.Bool {
        try _iautomationPeer.isEnabled()
    }

    /// Gets a value that indicates whether the element can accept keyboard focus.
    /// - Returns: true if the element can accept keyboard focus; otherwise, false.
    public func isKeyboardFocusable() throws -> Swift.Bool {
        try _iautomationPeer.isKeyboardFocusable()
    }

    /// Gets a value that indicates whether an element is off the screen.
    /// - Returns: true if the element is not on the screen; otherwise, false.
    public func isOffscreen() throws -> Swift.Bool {
        try _iautomationPeer.isOffscreen()
    }

    /// Gets a value that indicates whether the element contains sensitive content.
    /// - Returns: true if the element contains sensitive content such as a password; otherwise, false.
    public func isPassword() throws -> Swift.Bool {
        try _iautomationPeer.isPassword()
    }

    /// Gets a value that indicates whether the element that is associated with this peer must be completed on a form.
    /// - Returns: true if the element must be completed; otherwise, false.
    public func isRequiredForForm() throws -> Swift.Bool {
        try _iautomationPeer.isRequiredForForm()
    }

    /// Sets the keyboard focus on the element that is associated with this automation peer.
    public func setFocus() throws {
        try _iautomationPeer.setFocus()
    }

    /// Gets the AutomationPeer that is the parent of this AutomationPeer.
    /// - Returns: The parent automation peer.
    public func getParent() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeer.getParent())
    }

    /// Triggers recalculation of the main properties of the AutomationPeer and raises the PropertyChanged notification to the automation client if the properties have changed.
    public func invalidatePeer() throws {
        try _iautomationPeer.invalidatePeer()
    }

    /// Gets an AutomationPeer from the specified point.
    /// - Parameter point: The relative position of the target UI element in the UI.
    /// - Returns: The AutomationPeer for the UI element at the specified point.
    public func getPeerFromPoint(_ point: WindowsFoundation_Point) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeer.getPeerFromPoint(point))
    }

    /// Gets an element from the specified point.
    /// - Parameter pointInWindowCoordinates: The specified point.
    /// - Returns: The element at the specified point.
    public func getElementFromPoint(_ pointInWindowCoordinates: WindowsFoundation_Point) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeer.getElementFromPoint(pointInWindowCoordinates))
    }

    /// Gets the element that currently has the focus.
    /// - Returns: The element that currently has the focus.
    public func getFocusedElement() throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeer.getFocusedElement())
    }

    /// Gets the live setting notification behavior information for the object that is associated with the UI Automation peer.
    /// - Returns: A value of the enumeration.
    public func getLiveSetting() throws -> MicrosoftUIXamlAutomationPeers_AutomationLiveSetting {
        try _iautomationPeer.getLiveSetting()
    }

    /// Shows the available context menu for the owner element.
    public func showContextMenu() throws {
        try _iautomationPeer.showContextMenu()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetControlledPeers or an equivalent Microsoft UI Automation client API such as getting a property value as identified by UIA_ControllerForPropertyId.
    /// - Returns: A list of the controlled peers for the current automation peer.
    public func getControlledPeers() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeer.getControlledPeers())
    }

    /// Gets a reference to the list of UI automation annotations for the current automation peer.
    /// - Returns: The list of UI automation annotations.
    public func getAnnotations() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?> {
        try COM.NullResult.unwrap(_iautomationPeer.getAnnotations())
    }

    /// Sets the AutomationPeer that is the parent of this AutomationPeer.
    /// - Parameter peer: The parent automation peer.
    public func setParent(_ peer: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        try _iautomationPeer.setParent(peer)
    }

    public func raiseTextEditTextChangedEvent(_ automationTextEditChangeType: MicrosoftUIXamlAutomation_AutomationTextEditChangeType, _ changedData: WindowsFoundationCollections_IVectorView<Swift.String>?) throws {
        try _iautomationPeer.raiseTextEditTextChangedEvent(automationTextEditChangeType, changedData)
    }

    /// Returns the 1-based integer for the ordinal position in the set for the element that is associated with the automation peer.
    /// - Returns: The 1-based integer for the ordinal position in the set.
    public func getPositionInSet() throws -> Swift.Int32 {
        try _iautomationPeer.getPositionInSet()
    }

    /// Returns the 1-based integer for the size of the set where the element that is associated with the automation peer is located.
    /// - Returns: The 1-based integer for the size of the set.
    public func getSizeOfSet() throws -> Swift.Int32 {
        try _iautomationPeer.getSizeOfSet()
    }

    /// Returns the 1-based integer for the level (hierarchy) of the element that is associated with the automation peer.
    /// - Returns: The 1-based integer for the level of the element.
    public func getLevel() throws -> Swift.Int32 {
        try _iautomationPeer.getLevel()
    }

    /// Raises an event to notify the Microsoft UI Automation core that the tree structure has changed.
    /// - Parameter structureChangeType: The type of change that has occurred.
    /// - Parameter child: The element to which the change has been made.
    public func raiseStructureChangedEvent(_ structureChangeType: MicrosoftUIXamlAutomationPeers_AutomationStructureChangeType, _ child: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        try _iautomationPeer.raiseStructureChangedEvent(structureChangeType, child)
    }

    /// Gets the landmark type for this automation peer.
    /// - Returns: The landmark type for this automation peer.
    public func getLandmarkType() throws -> MicrosoftUIXamlAutomationPeers_AutomationLandmarkType {
        try _iautomationPeer.getLandmarkType()
    }

    /// Gets a localized string that represents the AutomationLandmarkType value for the element that is associated with this automation peer.
    /// - Returns: The landmark type of the element.
    public func getLocalizedLandmarkType() throws -> Swift.String {
        try _iautomationPeer.getLocalizedLandmarkType()
    }

    /// Gets a Boolean value that indicates whether the automation element represents peripheral UI.
    /// - Returns: A Boolean value that indicates whether the automation element represents peripheral UI.
    public func isPeripheral() throws -> Swift.Bool {
        try _iautomationPeer.isPeripheral()
    }

    /// Gets a Boolean value that indicates whether the entered or selected value is valid for the form rule associated with the automation element.
    /// - Returns: A Boolean value that indicates whether the entered or selected value is valid for the form rule associated with the automation element. The default return value is true.
    public func isDataValidForForm() throws -> Swift.Bool {
        try _iautomationPeer.isDataValidForForm()
    }

    /// Gets a localized string that describes the actual visual appearance or contents of something such as an image or image control.
    /// - Returns: A localized string that describes the actual visual appearance or contents of something such as an image or image control.
    public func getFullDescription() throws -> Swift.String {
        try _iautomationPeer.getFullDescription()
    }

    /// Calls GetCultureCore to get the culture value for the element that is associated with the automation peer.
    /// - Returns: The value of the culture property for the element that is associated with the automation peer.
    public func getCulture() throws -> Swift.Int32 {
        try _iautomationPeer.getCulture()
    }

    /// Initiates a notification event.
    /// - Parameter notificationKind: Specifies the type of the notification.
    /// - Parameter notificationProcessing: Specifies the order in which to process the notification.
    /// - Parameter displayString: A display string describing the event.
    /// - Parameter activityId: A unique non-localized string to identify an action or group of actions. Use this to pass additional information to the event handler.
    public func raiseNotificationEvent(_ notificationKind: MicrosoftUIXamlAutomationPeers_AutomationNotificationKind, _ notificationProcessing: MicrosoftUIXamlAutomationPeers_AutomationNotificationProcessing, _ displayString: Swift.String, _ activityId: Swift.String) throws {
        try _iautomationPeer.raiseNotificationEvent(notificationKind, notificationProcessing, displayString, activityId)
    }

    /// Gets the heading level of the UI Automation element that is associated with this automation peer.
    /// - Returns: The text heading level.
    public func getHeadingLevel() throws -> MicrosoftUIXamlAutomationPeers_AutomationHeadingLevel {
        try _iautomationPeer.getHeadingLevel()
    }

    /// Gets a value that indicates whether the element associated with this automation peer is a dialog window.
    /// - Returns: true if the element is a dialog; otherwise, false.
    public func isDialog() throws -> Swift.Bool {
        try _iautomationPeer.isDialog()
    }

    /// The AutomationPeer that is the source of events.
    public var eventsSource: MicrosoftUIXamlAutomationPeers_AutomationPeer {
        get throws {
            try COM.NullResult.unwrap(_iautomationPeer.get_EventsSource())
        }
    }

    /// Sets an AutomationPeer that is reported to the automation client as the source for all the events that come from this AutomationPeer. See Remarks.
    /// - Parameter newValue: The AutomationPeer that is the source of events.
    public func eventsSource(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        try _iautomationPeer.put_EventsSource(value)
    }

    /// Gets or sets an AutomationPeer that is reported to the automation client as the source for all the events that come from this AutomationPeer. See Remarks.
    public var eventsSource_: MicrosoftUIXamlAutomationPeers_AutomationPeer! {
        get {
            try! NullResult.catch(self.eventsSource)
        }
        set {
            try! self.eventsSource(newValue)
        }
    }

    /// Gets an AutomationPeer for the specified IRawElementProviderSimple proxy.
    /// - Parameter provider: The class that implements IRawElementProviderSimple.
    /// - Returns: The AutomationPeer.
    public func peerFromProvider(_ provider: MicrosoftUIXamlAutomationProvider_IRawElementProviderSimple?) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeerProtected.peerFromProvider(provider))
    }

    /// Gets the IRawElementProviderSimple proxy for the specified AutomationPeer.
    /// - Parameter peer: The automation peer.
    /// - Returns: The proxy.
    public func providerFromPeer(_ peer: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws -> MicrosoftUIXamlAutomationProvider_IRawElementProviderSimple {
        try COM.NullResult.unwrap(_iautomationPeerProtected.providerFromPeer(peer))
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetPattern or an equivalent Microsoft UI Automation client API.
    /// - Parameter patternInterface: A value from the PatternInterface enumeration.
    /// - Returns: The object that implements the pattern interface; null if the peer does not support this interface.
    open func getPatternCore(_ patternInterface: MicrosoftUIXamlAutomationPeers_PatternInterface) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getPatternCore(patternInterface))
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetAcceleratorKey or an equivalent Microsoft UI Automation client API.
    /// - Returns: The accelerator key.
    open func getAcceleratorKeyCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getAcceleratorKeyCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetAccessKey or an equivalent Microsoft UI Automation client API.
    /// - Returns: The access key.
    open func getAccessKeyCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getAccessKeyCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetAutomationControlType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The control type.
    open func getAutomationControlTypeCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationControlType {
        try _iautomationPeerOverrides.getAutomationControlTypeCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetAutomationId or an equivalent Microsoft UI Automation client API.
    /// - Returns: The automation identifier.
    open func getAutomationIdCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getAutomationIdCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetBoundingRectangle or an equivalent Microsoft UI Automation client API.
    /// - Returns: The bounding rectangle.
    open func getBoundingRectangleCore() throws -> WindowsFoundation_Rect {
        try _iautomationPeerOverrides.getBoundingRectangleCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetChildren or an equivalent Microsoft UI Automation client API.
    /// - Returns: The collection of AutomationPeer objects for child elements.
    open func getChildrenCore() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getChildrenCore())
    }

    /// Provides the peer’s behavior when a Microsoft UI Automation client calls Navigate or an equivalent Microsoft UI Automation client API.
    /// - Parameter direction: The specified direction.
    /// - Returns: The element in the specified direction within the UI automation tree.
    open func navigateCore(_ direction: MicrosoftUIXamlAutomationPeers_AutomationNavigationDirection) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.navigateCore(direction))
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetClassName or an equivalent Microsoft UI Automation client API.
    /// - Returns: The class name.
    open func getClassNameCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getClassNameCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetClickablePoint or an equivalent Microsoft UI Automation client API.
    /// - Returns: A point within the clickable area of the element.
    open func getClickablePointCore() throws -> WindowsFoundation_Point {
        try _iautomationPeerOverrides.getClickablePointCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetHelpText or an equivalent Microsoft UI Automation client API.
    /// - Returns: The help text.
    open func getHelpTextCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getHelpTextCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetItemStatus or an equivalent Microsoft UI Automation client API.
    /// - Returns: The item status.
    open func getItemStatusCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getItemStatusCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetItemType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The kind of item.
    open func getItemTypeCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getItemTypeCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLabeledBy or an equivalent Microsoft UI Automation client API.
    /// - Returns: The AutomationPeer for the element that is targeted by the UIElement.
    open func getLabeledByCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getLabeledByCore())
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLocalizedControlType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The type of the control, as a string that is localized to be suitable for direct presentation to users by assistive technology.
    open func getLocalizedControlTypeCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getLocalizedControlTypeCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetName or an equivalent Microsoft UI Automation client API.
    /// - Returns: The name as used by assistive technology and other Microsoft UI Automation clients.
    open func getNameCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getNameCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetOrientation or an equivalent Microsoft UI Automation client API.
    /// - Returns: The orientation of the control.
    open func getOrientationCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationOrientation {
        try _iautomationPeerOverrides.getOrientationCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls HasKeyboardFocus or an equivalent Microsoft UI Automation client API.
    /// - Returns: true if the element has keyboard focus; otherwise, false.
    open func hasKeyboardFocusCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.hasKeyboardFocusCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsContentElement or an equivalent Microsoft UI Automation client API.
    /// - Returns: true if the element is a content element; otherwise, false.
    open func isContentElementCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isContentElementCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsControlElement or an equivalent Microsoft UI Automation client API.
    /// - Returns: true if the element is a control; otherwise, false.
    open func isControlElementCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isControlElementCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsEnabled or an equivalent Microsoft UI Automation client API.
    /// - Returns: true if the element can be interacted with; otherwise, false.
    open func isEnabledCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isEnabledCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsKeyboardFocusable or an equivalent Microsoft UI Automation client API.
    /// - Returns: true if the element can accept keyboard focus; otherwise, false.
    open func isKeyboardFocusableCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isKeyboardFocusableCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsOffscreen or an equivalent Microsoft UI Automation client API.
    /// - Returns: true if the element is not on the screen; otherwise, false.
    open func isOffscreenCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isOffscreenCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsPassword or an equivalent Microsoft UI Automation client API.
    /// - Returns: true if the element contains sensitive content; otherwise, false.
    open func isPasswordCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isPasswordCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsRequiredForForm or an equivalent Microsoft UI Automation client API.
    /// - Returns: true if the element must be completed; otherwise, false.
    open func isRequiredForFormCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isRequiredForFormCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls SetFocus or an equivalent Microsoft UI Automation client API.
    open func setFocusCore() throws {
        try _iautomationPeerOverrides.setFocusCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetPeerFromPoint or an equivalent Microsoft UI Automation client API.
    /// - Parameter point: The relative position of the target UI element in the UI.
    /// - Returns: The AutomationPeer for the UI element at the specified point.
    open func getPeerFromPointCore(_ point: WindowsFoundation_Point) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getPeerFromPointCore(point))
    }

    /// Provides the behavior of the peer when a Microsoft UI Automation client calls GetElementFromPoint or an equivalent Microsoft UI Automation client API.
    /// - Parameter pointInWindowCoordinates: The specified point.
    /// - Returns: The behavior of the peer.
    open func getElementFromPointCore(_ pointInWindowCoordinates: WindowsFoundation_Point) throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getElementFromPointCore(pointInWindowCoordinates))
    }

    /// Provides the behavior of the peer when a Microsoft UI Automation client calls GetFocusedElement or an equivalent Microsoft UI Automation client API.
    /// - Returns: The behavior of the peer.
    open func getFocusedElementCore() throws -> WindowsRuntime.IInspectable {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getFocusedElementCore())
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLiveSetting or an equivalent Microsoft UI Automation client API.
    /// - Returns: A value of the enumeration that reports the live setting notification behavior for a peer implementation.
    open func getLiveSettingCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationLiveSetting {
        try _iautomationPeerOverrides.getLiveSettingCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls ShowContextMenu or an equivalent Microsoft UI Automation client API.
    open func showContextMenuCore() throws {
        try _iautomationPeerOverrides.showContextMenuCore()
    }

    /// Gets a list of the controlled peers for the current automation peer.
    /// - Returns: A list of the controlled peers for the current automation peer.
    open func getControlledPeersCore() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getControlledPeersCore())
    }

    /// Provides the behavior of the peer when a Microsoft UI Automation client calls GetAnnotations or an equivalent Microsoft UI Automation client API.
    /// - Returns: The behavior of the peer.
    open func getAnnotationsCore() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getAnnotationsCore())
    }

    /// Provides the peer’s behavior when a Microsoft UI Automation client calls GetPositionInSet or an equivalent Microsoft UI Automation client API.
    /// - Returns: The peer’s behavior.
    open func getPositionInSetCore() throws -> Swift.Int32 {
        try _iautomationPeerOverrides.getPositionInSetCore()
    }

    /// Provides the peer’s behavior when a Microsoft UI Automation client calls GetSizeOfSet or an equivalent Microsoft UI Automation client API.
    /// - Returns: The peer’s behavior.
    open func getSizeOfSetCore() throws -> Swift.Int32 {
        try _iautomationPeerOverrides.getSizeOfSetCore()
    }

    /// Provides the behavior of the peer when a Microsoft UI Automation client calls GetLevel or an equivalent Microsoft UI Automation client API.
    /// - Returns: The behavior of the peer.
    open func getLevelCore() throws -> Swift.Int32 {
        try _iautomationPeerOverrides.getLevelCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLandmarkType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The landmark type.
    open func getLandmarkTypeCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationLandmarkType {
        try _iautomationPeerOverrides.getLandmarkTypeCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetLocalizedLandmarkType or an equivalent Microsoft UI Automation client API.
    /// - Returns: The landmark type of the peer, as a string that is localized to be suitable for direct presentation to users by assistive technology.
    open func getLocalizedLandmarkTypeCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getLocalizedLandmarkTypeCore()
    }

    /// Provides the peer’s behavior when a Microsoft UI Automation client accesses IsPeripheral or an equivalent Microsoft UI Automation client API.
    /// - Returns: A Boolean value that indicates whether the automation element represents peripheral UI.
    open func isPeripheralCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isPeripheralCore()
    }

    /// Provides the peer’s behavior when a Microsoft UI Automation client accesses IsDataValidForForm or an equivalent Microsoft UI Automation client API.
    /// - Returns: A Boolean value that indicates whether the entered or selected value is valid for the form rule associated with the automation element.
    open func isDataValidForFormCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isDataValidForFormCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetFullDescription or an equivalent Microsoft UI Automation client API.
    /// - Returns: A localized string that describes the actual visual appearance or contents of something such as an image or image control.
    open func getFullDescriptionCore() throws -> Swift.String {
        try _iautomationPeerOverrides.getFullDescriptionCore()
    }

    /// Gets a collection of elements that provide more information about the automation element.
    /// - Returns: A collection of elements that provide more information about the automation element.
    open func getDescribedByCore() throws -> WindowsFoundationCollections_IIterable<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getDescribedByCore())
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls AutomationProperties.GetFlowsTo or an equivalent Microsoft UI Automation client API.
    /// - Returns: A list of automation elements that suggests the reading order after the current automation element.
    open func getFlowsToCore() throws -> WindowsFoundationCollections_IIterable<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getFlowsToCore())
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls AutomationProperties.GetFlowsFrom or an equivalent Microsoft UI Automation client API.
    /// - Returns: A list of automation elements that suggests the reading order before the current automation element.
    open func getFlowsFromCore() throws -> WindowsFoundationCollections_IIterable<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
        try COM.NullResult.unwrap(_iautomationPeerOverrides.getFlowsFromCore())
    }

    /// Gets the culture value for the element that is associated with the automation peer.
    /// - Returns: The value of the culture property for the element that is associated with the automation peer.
    open func getCultureCore() throws -> Swift.Int32 {
        try _iautomationPeerOverrides.getCultureCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls GetHeadingLevel or an equivalent Microsoft UI Automation client API.
    /// - Returns: The heading level.
    open func getHeadingLevelCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationHeadingLevel {
        try _iautomationPeerOverrides.getHeadingLevelCore()
    }

    /// Provides the peer's behavior when a Microsoft UI Automation client calls IsDialog or an equivalent Microsoft UI Automation client API.
    /// - Returns: true if the element is a dialog; otherwise, false.
    open func isDialogCore() throws -> Swift.Bool {
        try _iautomationPeerOverrides.isDialogCore()
    }

    /// Gets a value that indicates whether Microsoft UI Automation reports that a client is listening for the specified event.
    /// - Parameter eventId: One of the enumeration values.
    /// - Returns: true if Microsoft UI Automation reports a client is listening for the specified event; otherwise, false.
    public static func listenerExists(_ eventId: MicrosoftUIXamlAutomationPeers_AutomationEvents) throws -> Swift.Bool {
        try _iautomationPeerStatics.listenerExists(eventId)
    }

    /// Generates a runtime identifier for the element that is associated with the automation peer.
    /// - Returns: The runtime identifier for the element .
    public static func generateRawElementProviderRuntimeId() throws -> MicrosoftUIXamlAutomationPeers_RawElementProviderRuntimeId {
        try _iautomationPeerStatics.generateRawElementProviderRuntimeId()
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIAutomationPeer: COM.COMReference<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>.Optional = .none

    internal var _iautomationPeer: COM.COMInterop<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer> {
        get throws {
            try _lazyIAutomationPeer.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer.self)).cast()
            }
        }
    }

    private var _lazyIAutomationPeerProtected: COM.COMReference<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerProtected>.Optional = .none

    internal var _iautomationPeerProtected: COM.COMInterop<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerProtected> {
        get throws {
            try _lazyIAutomationPeerProtected.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerProtected.self)).cast()
            }
        }
    }

    private var _lazyIAutomationPeerOverrides: COM.COMReference<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerOverrides>.Optional = .none

    internal var _iautomationPeerOverrides: COM.COMInterop<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerOverrides> {
        get throws {
            try _lazyIAutomationPeerOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerOverrides.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Automation.Peers.AutomationPeer")
            }
        }
    }

    private static var _lazyIAutomationPeerFactory: COM.COMReference<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerFactory>.Optional = .none

    internal static var _iautomationPeerFactory: COM.COMInterop<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerFactory> {
        get throws {
            try _lazyIAutomationPeerFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerFactory.self)).cast()
            }
        }
    }

    private static var _lazyIAutomationPeerStatics: COM.COMReference<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerStatics>.Optional = .none

    internal static var _iautomationPeerStatics: COM.COMInterop<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerStatics> {
        get throws {
            try _lazyIAutomationPeerStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerStatics.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _iautomationPeerOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerOverrides.self) {
            if !_iautomationPeerOverrides_outer.isInitialized {
                _iautomationPeerOverrides_outer.initialize(embedder: self,
                    virtualTable: &MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.VirtualTables.iautomationPeerOverrides)
            }
            return .init(_iautomationPeerOverrides_outer.toCOM())
        }
        return .none
    }
}