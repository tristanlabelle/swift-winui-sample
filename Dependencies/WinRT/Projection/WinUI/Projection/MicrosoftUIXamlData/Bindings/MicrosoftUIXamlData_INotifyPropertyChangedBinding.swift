// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public enum MicrosoftUIXamlData_INotifyPropertyChangedBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftUIXamlData_INotifyPropertyChanged
    public typealias ABIStruct = SWRT_MicrosoftUIXamlData_INotifyPropertyChanged

    public static let typeName = "Microsoft.UI.Xaml.Data.INotifyPropertyChanged"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftUIXamlData_INotifyPropertyChangedBinding>, MicrosoftUIXamlData_INotifyPropertyChangedProtocol {
        @discardableResult
        public func propertyChanged(adding handler: MicrosoftUIXamlData_PropertyChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
            let _token = try _interop.add_PropertyChanged(handler)
            return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).propertyChanged(removing: token) })
        }

        public func propertyChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
            try _interop.remove_PropertyChanged(token)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIXamlData_INotifyPropertyChanged_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        add_PropertyChanged: { this, handler, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let handler_swift = MicrosoftUIXamlData_PropertyChangedEventHandlerBinding.fromABI(handler)
            let _result_swift = try this.propertyChanged(adding: handler_swift).token
            _result.pointee = WindowsRuntime.EventRegistrationToken.toABI(_result_swift)
        } },
        remove_PropertyChanged: { this, token in _implement(this) { this in
            let token_swift = WindowsRuntime.EventRegistrationToken.fromABI(token)
            try this.propertyChanged(removing: token_swift)
        } }
    )
}