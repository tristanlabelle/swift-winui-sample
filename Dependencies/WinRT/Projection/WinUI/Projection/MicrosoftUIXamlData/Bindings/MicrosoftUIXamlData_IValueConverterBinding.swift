// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public enum MicrosoftUIXamlData_IValueConverterBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftUIXamlData_IValueConverter
    public typealias ABIStruct = SWRT_MicrosoftUIXamlData_IValueConverter

    public static let typeName = "Microsoft.UI.Xaml.Data.IValueConverter"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftUIXamlData_IValueConverterBinding>, MicrosoftUIXamlData_IValueConverterProtocol {
        public func convert(_ value: WindowsRuntime.IInspectable?, _ targetType: WindowsUIXamlInterop_TypeName, _ parameter: WindowsRuntime.IInspectable?, _ language: Swift.String) throws -> WindowsRuntime.IInspectable {
            try COM.NullResult.unwrap(_interop.convert(value, targetType, parameter, language))
        }

        public func convertBack(_ value: WindowsRuntime.IInspectable?, _ targetType: WindowsUIXamlInterop_TypeName, _ parameter: WindowsRuntime.IInspectable?, _ language: Swift.String) throws -> WindowsRuntime.IInspectable {
            try COM.NullResult.unwrap(_interop.convertBack(value, targetType, parameter, language))
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIXamlData_IValueConverter_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        Convert: { this, value, targetType, parameter, language, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let value_swift = WindowsRuntime.IInspectableBinding.fromABI(value)
            let targetType_swift = WindowsUIXamlInterop_TypeName.fromABI(targetType)
            let parameter_swift = WindowsRuntime.IInspectableBinding.fromABI(parameter)
            let language_swift = WindowsRuntime.StringBinding.fromABI(language)
            let _result_swift = try COM.NullResult.`catch`(try this.convert(value_swift, targetType_swift, parameter_swift, language_swift))
            _result.pointee = try WindowsRuntime.IInspectableBinding.toABI(_result_swift)
        } },
        ConvertBack: { this, value, targetType, parameter, language, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let value_swift = WindowsRuntime.IInspectableBinding.fromABI(value)
            let targetType_swift = WindowsUIXamlInterop_TypeName.fromABI(targetType)
            let parameter_swift = WindowsRuntime.IInspectableBinding.fromABI(parameter)
            let language_swift = WindowsRuntime.StringBinding.fromABI(language)
            let _result_swift = try COM.NullResult.`catch`(try this.convertBack(value_swift, targetType_swift, parameter_swift, language_swift))
            _result.pointee = try WindowsRuntime.IInspectableBinding.toABI(_result_swift)
        } }
    )
}