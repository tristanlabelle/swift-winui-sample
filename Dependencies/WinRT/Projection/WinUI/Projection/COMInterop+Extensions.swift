// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

// MARK: Microsoft.UI.Xaml.IApplicationInitializationCallback

public func uuidof(_: SWRT_MicrosoftUIXaml_ApplicationInitializationCallback.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD8EEF1C9, 0x1234, 0x56F1, 0x9963, 0x45DD9C80A661)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_ApplicationInitializationCallback {
    public func invoke(_ p: MicrosoftUIXaml_ApplicationInitializationCallbackParams?) throws {
        var p_abi = try MicrosoftUIXaml_ApplicationInitializationCallbackParamsBinding.toABI(p)
        defer { MicrosoftUIXaml_ApplicationInitializationCallbackParamsBinding.release(&p_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, p_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IBindingFailedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXaml_BindingFailedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA3160AB0, 0xA8A9, 0x5F38, 0xAF17, 0x5CD91A2B33F5)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_BindingFailedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXaml_BindingFailedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXaml_BindingFailedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_BindingFailedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.ICreateDefaultValueCallback

public func uuidof(_: SWRT_MicrosoftUIXaml_CreateDefaultValueCallback.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7F808C05, 0x2AC4, 0x5AD9, 0xAC8A, 0x26890333D81E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_CreateDefaultValueCallback {
    public func invoke() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IDependencyPropertyChangedCallback

public func uuidof(_: SWRT_MicrosoftUIXaml_DependencyPropertyChangedCallback.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF055BB21, 0x219B, 0x5B0C, 0x805D, 0xBCAEDAE15458)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_DependencyPropertyChangedCallback {
    public func invoke(_ sender: MicrosoftUIXaml_DependencyObject?, _ dp: MicrosoftUIXaml_DependencyProperty?) throws {
        var sender_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(sender)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&sender_abi) }
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, dp_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IDependencyPropertyChangedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXaml_DependencyPropertyChangedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4BE8DC75, 0x373D, 0x5F4E, 0xA0B4, 0x54B9EEAFB4A9)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_DependencyPropertyChangedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXaml_DependencyPropertyChangedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXaml_DependencyPropertyChangedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_DependencyPropertyChangedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IDragEventHandler

public func uuidof(_: SWRT_MicrosoftUIXaml_DragEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x277AFC83, 0xCB67, 0x56C8, 0xB601, 0x1B9C0F1C3D32)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_DragEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXaml_DragEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXaml_DragEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_DragEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IExceptionRoutedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXaml_ExceptionRoutedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x45FBB85D, 0x54F9, 0x5A2A, 0x8A38, 0x00A3B7761F96)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_ExceptionRoutedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXaml_ExceptionRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXaml_ExceptionRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_ExceptionRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IApplication

public func uuidof(_: SWRT_MicrosoftUIXaml_IApplication.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x06A8F4E7, 0x1146, 0x55AF, 0x820D, 0xEBD55643B021)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IApplication {
    public func get_Resources() throws -> MicrosoftUIXaml_ResourceDictionary? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IResourceDictionary>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Resources(this, &_result))
        return MicrosoftUIXaml_ResourceDictionaryBinding.fromABI(consuming: &_result)
    }

    public func put_Resources(_ value: MicrosoftUIXaml_ResourceDictionary?) throws {
        var value_abi = try MicrosoftUIXaml_ResourceDictionaryBinding.toABI(value)
        defer { MicrosoftUIXaml_ResourceDictionaryBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Resources(this, value_abi))
    }

    public func get_DebugSettings() throws -> MicrosoftUIXaml_DebugSettings? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDebugSettings>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DebugSettings(this, &_result))
        return MicrosoftUIXaml_DebugSettingsBinding.fromABI(consuming: &_result)
    }

    public func get_RequestedTheme() throws -> MicrosoftUIXaml_ApplicationTheme {
        var _result: SWRT_MicrosoftUIXaml_ApplicationTheme = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RequestedTheme(this, &_result))
        return MicrosoftUIXaml_ApplicationTheme.fromABI(_result)
    }

    public func put_RequestedTheme(_ value: MicrosoftUIXaml_ApplicationTheme) throws {
        let value_abi = MicrosoftUIXaml_ApplicationTheme.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RequestedTheme(this, value_abi))
    }

    public func get_FocusVisualKind() throws -> MicrosoftUIXaml_FocusVisualKind {
        var _result: SWRT_MicrosoftUIXaml_FocusVisualKind = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualKind(this, &_result))
        return MicrosoftUIXaml_FocusVisualKind.fromABI(_result)
    }

    public func put_FocusVisualKind(_ value: MicrosoftUIXaml_FocusVisualKind) throws {
        let value_abi = MicrosoftUIXaml_FocusVisualKind.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FocusVisualKind(this, value_abi))
    }

    public func get_HighContrastAdjustment() throws -> MicrosoftUIXaml_ApplicationHighContrastAdjustment {
        var _result: SWRT_MicrosoftUIXaml_ApplicationHighContrastAdjustment = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HighContrastAdjustment(this, &_result))
        return MicrosoftUIXaml_ApplicationHighContrastAdjustment.fromABI(_result)
    }

    public func put_HighContrastAdjustment(_ value: MicrosoftUIXaml_ApplicationHighContrastAdjustment) throws {
        let value_abi = MicrosoftUIXaml_ApplicationHighContrastAdjustment.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HighContrastAdjustment(this, value_abi))
    }

    public func add_UnhandledException(_ handler: MicrosoftUIXaml_UnhandledExceptionEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_UnhandledExceptionEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_UnhandledExceptionEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_UnhandledException(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_UnhandledException(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_UnhandledException(this, token_abi))
    }

    public func exit() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Exit(this))
    }
}

// MARK: Microsoft.UI.Xaml.IApplication2

public func uuidof(_: SWRT_MicrosoftUIXaml_IApplication2.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x469E6D36, 0x2E11, 0x5B06, 0x9E0A, 0xC5EEF0CF8F12)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IApplication2 {
    public func add_ResourceManagerRequested(_ handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_ResourceManagerRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.Object_ResourceManagerRequestedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.Object_ResourceManagerRequestedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ResourceManagerRequested(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ResourceManagerRequested(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ResourceManagerRequested(this, token_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IApplication3

public func uuidof(_: SWRT_MicrosoftUIXaml_IApplication3.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xBE941595, 0x61FE, 0x5B36, 0xA3D3, 0x962A647D7C6F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IApplication3 {
    public func get_DispatcherShutdownMode() throws -> MicrosoftUIXaml_DispatcherShutdownMode {
        var _result: SWRT_MicrosoftUIXaml_DispatcherShutdownMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DispatcherShutdownMode(this, &_result))
        return MicrosoftUIXaml_DispatcherShutdownMode.fromABI(_result)
    }

    public func put_DispatcherShutdownMode(_ value: MicrosoftUIXaml_DispatcherShutdownMode) throws {
        let value_abi = MicrosoftUIXaml_DispatcherShutdownMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DispatcherShutdownMode(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IApplicationFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IApplicationFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9FD96657, 0x5294, 0x5A65, 0xA1DB, 0x4FEA143597DA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IApplicationFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IApplication> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IApplication>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IApplicationInitializationCallbackParams

public func uuidof(_: SWRT_MicrosoftUIXaml_IApplicationInitializationCallbackParams.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1B1906EA, 0x5B7B, 0x5876, 0x81AB, 0x7C2281AC3D20)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IApplicationInitializationCallbackParams {
}

// MARK: Microsoft.UI.Xaml.IApplicationOverrides

public func uuidof(_: SWRT_MicrosoftUIXaml_IApplicationOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA33E81EF, 0xC665, 0x503B, 0x8827, 0xD27EF1720A06)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IApplicationOverrides {
    public func onLaunched(_ args: MicrosoftUIXaml_LaunchActivatedEventArgs?) throws {
        var args_abi = try MicrosoftUIXaml_LaunchActivatedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_LaunchActivatedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnLaunched(this, args_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IApplicationStatics

public func uuidof(_: SWRT_MicrosoftUIXaml_IApplicationStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4E0D09F5, 0x4358, 0x512C, 0xA987, 0x503B52848E95)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IApplicationStatics {
    public func get_Current() throws -> MicrosoftUIXaml_Application? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IApplication>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXaml_ApplicationBinding.fromABI(consuming: &_result)
    }

    public func start(_ callback: MicrosoftUIXaml_ApplicationInitializationCallback?) throws {
        var callback_abi = try MicrosoftUIXaml_ApplicationInitializationCallbackBinding.toABI(callback)
        defer { MicrosoftUIXaml_ApplicationInitializationCallbackBinding.release(&callback_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Start(this, callback_abi))
    }

    public func loadComponent(_ component: WindowsRuntime.IInspectable?, _ resourceLocator: WindowsFoundation_Uri?) throws {
        var component_abi = try WindowsRuntime.IInspectableBinding.toABI(component)
        defer { WindowsRuntime.IInspectableBinding.release(&component_abi) }
        var resourceLocator_abi = try WindowsFoundation_UriBinding.toABI(resourceLocator)
        defer { WindowsFoundation_UriBinding.release(&resourceLocator_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.LoadComponent(this, component_abi, resourceLocator_abi))
    }

    public func loadComponentWithResourceLocation(_ component: WindowsRuntime.IInspectable?, _ resourceLocator: WindowsFoundation_Uri?, _ componentResourceLocation: MicrosoftUIXamlControlsPrimitives_ComponentResourceLocation) throws {
        var component_abi = try WindowsRuntime.IInspectableBinding.toABI(component)
        defer { WindowsRuntime.IInspectableBinding.release(&component_abi) }
        var resourceLocator_abi = try WindowsFoundation_UriBinding.toABI(resourceLocator)
        defer { WindowsFoundation_UriBinding.release(&resourceLocator_abi) }
        let componentResourceLocation_abi = MicrosoftUIXamlControlsPrimitives_ComponentResourceLocation.toABI(componentResourceLocation)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.LoadComponentWithResourceLocation(this, component_abi, resourceLocator_abi, componentResourceLocation_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IBindingFailedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IBindingFailedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA7BF50F3, 0xDBC0, 0x5B44, 0xBE74, 0x56E8F80FD716)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IBindingFailedEventArgs {
    public func get_Message() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Message(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IBringIntoViewOptions

public func uuidof(_: SWRT_MicrosoftUIXaml_IBringIntoViewOptions.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEEB4A447, 0xEB9E, 0x5003, 0xA479, 0xB9E3A886B708)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IBringIntoViewOptions {
    public func get_AnimationDesired() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AnimationDesired(this, &_result))
        return _result
    }

    public func put_AnimationDesired(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AnimationDesired(this, value))
    }

    public func get_TargetRect() throws -> WindowsFoundation_Rect? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IReference>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TargetRect(this, &_result))
        return WindowsRuntime.IReferenceToOptionalBinding<WindowsFoundation_Rect>.fromABI(consuming: &_result)
    }

    public func put_TargetRect(_ value: WindowsFoundation_Rect?) throws {
        var value_abi = try WindowsRuntime.IReferenceToOptionalBinding<WindowsFoundation_Rect>.toABI(value)
        defer { WindowsRuntime.IReferenceToOptionalBinding<WindowsFoundation_Rect>.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TargetRect(this, value_abi))
    }

    public func get_HorizontalAlignmentRatio() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalAlignmentRatio(this, &_result))
        return _result
    }

    public func put_HorizontalAlignmentRatio(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HorizontalAlignmentRatio(this, value))
    }

    public func get_VerticalAlignmentRatio() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VerticalAlignmentRatio(this, &_result))
        return _result
    }

    public func put_VerticalAlignmentRatio(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_VerticalAlignmentRatio(this, value))
    }

    public func get_HorizontalOffset() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalOffset(this, &_result))
        return _result
    }

    public func put_HorizontalOffset(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HorizontalOffset(this, value))
    }

    public func get_VerticalOffset() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VerticalOffset(this, &_result))
        return _result
    }

    public func put_VerticalOffset(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_VerticalOffset(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IBringIntoViewRequestedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x807DE8F9, 0xB1DC, 0x5A63, 0x8101, 0x5EE966841A27)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IBringIntoViewRequestedEventArgs {
    public func get_TargetElement() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TargetElement(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func put_TargetElement(_ value: MicrosoftUIXaml_UIElement?) throws {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TargetElement(this, value_abi))
    }

    public func get_AnimationDesired() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AnimationDesired(this, &_result))
        return _result
    }

    public func put_AnimationDesired(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AnimationDesired(this, value))
    }

    public func get_TargetRect() throws -> WindowsFoundation_Rect {
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TargetRect(this, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }

    public func put_TargetRect(_ value: WindowsFoundation_Rect) throws {
        let value_abi = WindowsFoundation_Rect.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TargetRect(this, value_abi))
    }

    public func get_HorizontalAlignmentRatio() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalAlignmentRatio(this, &_result))
        return _result
    }

    public func get_VerticalAlignmentRatio() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VerticalAlignmentRatio(this, &_result))
        return _result
    }

    public func get_HorizontalOffset() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalOffset(this, &_result))
        return _result
    }

    public func put_HorizontalOffset(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HorizontalOffset(this, value))
    }

    public func get_VerticalOffset() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VerticalOffset(this, &_result))
        return _result
    }

    public func put_VerticalOffset(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_VerticalOffset(this, value))
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.IBrushTransition

public func uuidof(_: SWRT_MicrosoftUIXaml_IBrushTransition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA996A7BA, 0x4567, 0x5963, 0xA112, 0x76E3C0000204)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IBrushTransition {
    public func get_Duration() throws -> WindowsFoundation_TimeSpan {
        var _result: SWRT_WindowsFoundation_TimeSpan = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Duration(this, &_result))
        return WindowsFoundation_TimeSpan.fromABI(_result)
    }

    public func put_Duration(_ value: WindowsFoundation_TimeSpan) throws {
        let value_abi = WindowsFoundation_TimeSpan.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Duration(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IBrushTransitionFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IBrushTransitionFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x13735998, 0xC3B6, 0x5C24, 0xB40A, 0x7B166A6FFC2C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IBrushTransitionFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IBrushTransition> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IBrushTransition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IDataContextChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IDataContextChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA1BE80F4, 0xCF83, 0x5022, 0xB113, 0x9233F1D4FAFA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDataContextChangedEventArgs {
    public func get_NewValue() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_NewValue(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.IDataTemplate

public func uuidof(_: SWRT_MicrosoftUIXaml_IDataTemplate.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x08FA70FA, 0xEE75, 0x5E92, 0xA101, 0xF52D0E1E9FAB)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDataTemplate {
    public func loadContent() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.LoadContent(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IDataTemplateExtension

public func uuidof(_: SWRT_MicrosoftUIXaml_IDataTemplateExtension.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x351E63C4, 0x8FA3, 0x5CC3, 0xB073, 0x7F84BAA6485D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDataTemplateExtension {
    public func resetTemplate() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ResetTemplate(this))
    }

    public func processBinding(_ phase: Swift.UInt32) throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ProcessBinding(this, phase, &_result))
        return _result
    }

    public func processBindings(_ arg: MicrosoftUIXamlControls_ContainerContentChangingEventArgs?) throws -> Swift.Int32 {
        var arg_abi = try MicrosoftUIXamlControls_ContainerContentChangingEventArgsBinding.toABI(arg)
        defer { MicrosoftUIXamlControls_ContainerContentChangingEventArgsBinding.release(&arg_abi) }
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ProcessBindings(this, arg_abi, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.IDataTemplateFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IDataTemplateFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD8E8249D, 0x305B, 0x5CA5, 0xACF8, 0x3E1BEFFD0219)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDataTemplateFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IDataTemplate> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IDataTemplateStatics

public func uuidof(_: SWRT_MicrosoftUIXaml_IDataTemplateStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCF6ADA69, 0x4BF1, 0x5F2D, 0x8BDB, 0x09EA1A26F975)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDataTemplateStatics {
    public func get_ExtensionInstanceProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ExtensionInstanceProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getExtensionInstance(_ element: MicrosoftUIXaml_FrameworkElement?) throws -> MicrosoftUIXaml_IDataTemplateExtension? {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplateExtension>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetExtensionInstance(this, element_abi, &_result))
        return MicrosoftUIXaml_IDataTemplateExtensionBinding.fromABI(consuming: &_result)
    }

    public func setExtensionInstance(_ element: MicrosoftUIXaml_FrameworkElement?, _ value: MicrosoftUIXaml_IDataTemplateExtension?) throws {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        var value_abi = try MicrosoftUIXaml_IDataTemplateExtensionBinding.toABI(value)
        defer { MicrosoftUIXaml_IDataTemplateExtensionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetExtensionInstance(this, element_abi, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IDebugSettings

public func uuidof(_: SWRT_MicrosoftUIXaml_IDebugSettings.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4004943B, 0x2509, 0x5476, 0xBBA2, 0x3FE05ECF615D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDebugSettings {
    public func get_EnableFrameRateCounter() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_EnableFrameRateCounter(this, &_result))
        return _result
    }

    public func put_EnableFrameRateCounter(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_EnableFrameRateCounter(this, value))
    }

    public func get_IsBindingTracingEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsBindingTracingEnabled(this, &_result))
        return _result
    }

    public func put_IsBindingTracingEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsBindingTracingEnabled(this, value))
    }

    public func get_IsTextPerformanceVisualizationEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextPerformanceVisualizationEnabled(this, &_result))
        return _result
    }

    public func put_IsTextPerformanceVisualizationEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsTextPerformanceVisualizationEnabled(this, value))
    }

    public func get_FailFastOnErrors() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FailFastOnErrors(this, &_result))
        return _result
    }

    public func put_FailFastOnErrors(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FailFastOnErrors(this, value))
    }

    public func add_BindingFailed(_ handler: MicrosoftUIXaml_BindingFailedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_BindingFailedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_BindingFailedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_BindingFailed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_BindingFailed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_BindingFailed(this, token_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IDebugSettings2

public func uuidof(_: SWRT_MicrosoftUIXaml_IDebugSettings2.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6DFB6F51, 0xD2F8, 0x59C4, 0x8BCA, 0x4410929577D0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDebugSettings2 {
    public func get_IsXamlResourceReferenceTracingEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsXamlResourceReferenceTracingEnabled(this, &_result))
        return _result
    }

    public func put_IsXamlResourceReferenceTracingEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsXamlResourceReferenceTracingEnabled(this, value))
    }

    public func add_XamlResourceReferenceFailed(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_DebugSettings?, MicrosoftUIXaml_XamlResourceReferenceFailedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.DebugSettings_XamlResourceReferenceFailedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.DebugSettings_XamlResourceReferenceFailedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_XamlResourceReferenceFailed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_XamlResourceReferenceFailed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_XamlResourceReferenceFailed(this, token_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IDebugSettings3

public func uuidof(_: SWRT_MicrosoftUIXaml_IDebugSettings3.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x36135BD5, 0x3917, 0x5C8D, 0xA3C6, 0x2FC89A503F26)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDebugSettings3 {
    public func get_LayoutCycleTracingLevel() throws -> MicrosoftUIXaml_LayoutCycleTracingLevel {
        var _result: SWRT_MicrosoftUIXaml_LayoutCycleTracingLevel = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LayoutCycleTracingLevel(this, &_result))
        return MicrosoftUIXaml_LayoutCycleTracingLevel.fromABI(_result)
    }

    public func put_LayoutCycleTracingLevel(_ value: MicrosoftUIXaml_LayoutCycleTracingLevel) throws {
        let value_abi = MicrosoftUIXaml_LayoutCycleTracingLevel.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_LayoutCycleTracingLevel(this, value_abi))
    }

    public func get_LayoutCycleDebugBreakLevel() throws -> MicrosoftUIXaml_LayoutCycleDebugBreakLevel {
        var _result: SWRT_MicrosoftUIXaml_LayoutCycleDebugBreakLevel = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LayoutCycleDebugBreakLevel(this, &_result))
        return MicrosoftUIXaml_LayoutCycleDebugBreakLevel.fromABI(_result)
    }

    public func put_LayoutCycleDebugBreakLevel(_ value: MicrosoftUIXaml_LayoutCycleDebugBreakLevel) throws {
        let value_abi = MicrosoftUIXaml_LayoutCycleDebugBreakLevel.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_LayoutCycleDebugBreakLevel(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IDependencyObject

public func uuidof(_: SWRT_MicrosoftUIXaml_IDependencyObject.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE7BEAEE7, 0x160E, 0x50F7, 0x8789, 0xD63463F979FA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDependencyObject {
    public func getValue(_ dp: MicrosoftUIXaml_DependencyProperty?) throws -> WindowsRuntime.IInspectable? {
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetValue(this, dp_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func setValue(_ dp: MicrosoftUIXaml_DependencyProperty?, _ value: WindowsRuntime.IInspectable?) throws {
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetValue(this, dp_abi, value_abi))
    }

    public func clearValue(_ dp: MicrosoftUIXaml_DependencyProperty?) throws {
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ClearValue(this, dp_abi))
    }

    public func readLocalValue(_ dp: MicrosoftUIXaml_DependencyProperty?) throws -> WindowsRuntime.IInspectable? {
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReadLocalValue(this, dp_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func getAnimationBaseValue(_ dp: MicrosoftUIXaml_DependencyProperty?) throws -> WindowsRuntime.IInspectable? {
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAnimationBaseValue(this, dp_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func registerPropertyChangedCallback(_ dp: MicrosoftUIXaml_DependencyProperty?, _ callback: MicrosoftUIXaml_DependencyPropertyChangedCallback?) throws -> Swift.Int64 {
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        var callback_abi = try MicrosoftUIXaml_DependencyPropertyChangedCallbackBinding.toABI(callback)
        defer { MicrosoftUIXaml_DependencyPropertyChangedCallbackBinding.release(&callback_abi) }
        var _result: Swift.Int64 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RegisterPropertyChangedCallback(this, dp_abi, callback_abi, &_result))
        return _result
    }

    public func unregisterPropertyChangedCallback(_ dp: MicrosoftUIXaml_DependencyProperty?, _ token: Swift.Int64) throws {
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.UnregisterPropertyChangedCallback(this, dp_abi, token))
    }

    public func get_Dispatcher() throws -> WindowsUICore_CoreDispatcher? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsUICore_ICoreDispatcher>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Dispatcher(this, &_result))
        return WindowsUICore_CoreDispatcherBinding.fromABI(consuming: &_result)
    }

    public func get_DispatcherQueue() throws -> MicrosoftUIDispatching_DispatcherQueue? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIDispatching_IDispatcherQueue>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DispatcherQueue(this, &_result))
        return MicrosoftUIDispatching_DispatcherQueueBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IDependencyObjectFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IDependencyObjectFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x936B614C, 0x475F, 0x5D7D, 0xB3F7, 0xBF1FBEA28126)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDependencyObjectFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IDependencyObject> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IDependencyProperty

public func uuidof(_: SWRT_MicrosoftUIXaml_IDependencyProperty.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x960EAB49, 0x9672, 0x58A0, 0x995B, 0x3A42E5EA6278)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDependencyProperty {
    public func getMetadata(_ forType: WindowsUIXamlInterop_TypeName) throws -> MicrosoftUIXaml_PropertyMetadata? {
        var forType_abi = try WindowsUIXamlInterop_TypeName.toABI(forType)
        defer { WindowsUIXamlInterop_TypeName.release(&forType_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IPropertyMetadata>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMetadata(this, forType_abi, &_result))
        return MicrosoftUIXaml_PropertyMetadataBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IDependencyPropertyChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x84EAD020, 0x7849, 0x5E98, 0x8030, 0x488A80D164EC)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDependencyPropertyChangedEventArgs {
    public func get_Property() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Property(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_OldValue() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OldValue(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func get_NewValue() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_NewValue(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IDependencyPropertyStatics

public func uuidof(_: SWRT_MicrosoftUIXaml_IDependencyPropertyStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x61DDC651, 0x0383, 0x5D6F, 0x98CE, 0x5C046AAAAA8F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDependencyPropertyStatics {
    public func get_UnsetValue() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UnsetValue(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func register(_ name: Swift.String, _ propertyType: WindowsUIXamlInterop_TypeName, _ ownerType: WindowsUIXamlInterop_TypeName, _ typeMetadata: MicrosoftUIXaml_PropertyMetadata?) throws -> MicrosoftUIXaml_DependencyProperty? {
        var name_abi = try WindowsRuntime.StringBinding.toABI(name)
        defer { WindowsRuntime.StringBinding.release(&name_abi) }
        var propertyType_abi = try WindowsUIXamlInterop_TypeName.toABI(propertyType)
        defer { WindowsUIXamlInterop_TypeName.release(&propertyType_abi) }
        var ownerType_abi = try WindowsUIXamlInterop_TypeName.toABI(ownerType)
        defer { WindowsUIXamlInterop_TypeName.release(&ownerType_abi) }
        var typeMetadata_abi = try MicrosoftUIXaml_PropertyMetadataBinding.toABI(typeMetadata)
        defer { MicrosoftUIXaml_PropertyMetadataBinding.release(&typeMetadata_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Register(this, name_abi, propertyType_abi, ownerType_abi, typeMetadata_abi, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func registerAttached(_ name: Swift.String, _ propertyType: WindowsUIXamlInterop_TypeName, _ ownerType: WindowsUIXamlInterop_TypeName, _ defaultMetadata: MicrosoftUIXaml_PropertyMetadata?) throws -> MicrosoftUIXaml_DependencyProperty? {
        var name_abi = try WindowsRuntime.StringBinding.toABI(name)
        defer { WindowsRuntime.StringBinding.release(&name_abi) }
        var propertyType_abi = try WindowsUIXamlInterop_TypeName.toABI(propertyType)
        defer { WindowsUIXamlInterop_TypeName.release(&propertyType_abi) }
        var ownerType_abi = try WindowsUIXamlInterop_TypeName.toABI(ownerType)
        defer { WindowsUIXamlInterop_TypeName.release(&ownerType_abi) }
        var defaultMetadata_abi = try MicrosoftUIXaml_PropertyMetadataBinding.toABI(defaultMetadata)
        defer { MicrosoftUIXaml_PropertyMetadataBinding.release(&defaultMetadata_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RegisterAttached(this, name_abi, propertyType_abi, ownerType_abi, defaultMetadata_abi, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IDragEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IDragEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x47AC5757, 0xE4BC, 0x52BA, 0x8AB9, 0x1BF81AAD7900)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDragEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_Data() throws -> WindowsApplicationModelDataTransfer_DataPackage? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsApplicationModelDataTransfer_IDataPackage>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Data(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageBinding.fromABI(consuming: &_result)
    }

    public func put_Data(_ value: WindowsApplicationModelDataTransfer_DataPackage?) throws {
        var value_abi = try WindowsApplicationModelDataTransfer_DataPackageBinding.toABI(value)
        defer { WindowsApplicationModelDataTransfer_DataPackageBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Data(this, value_abi))
    }

    public func get_DataView() throws -> WindowsApplicationModelDataTransfer_DataPackageView? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsApplicationModelDataTransfer_IDataPackageView>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DataView(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageViewBinding.fromABI(consuming: &_result)
    }

    public func get_DragUIOverride() throws -> MicrosoftUIXaml_DragUIOverride? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDragUIOverride>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DragUIOverride(this, &_result))
        return MicrosoftUIXaml_DragUIOverrideBinding.fromABI(consuming: &_result)
    }

    public func get_Modifiers() throws -> WindowsApplicationModelDataTransferDragDrop_DragDropModifiers {
        var _result: SWRT_WindowsApplicationModelDataTransferDragDrop_DragDropModifiers = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Modifiers(this, &_result))
        return WindowsApplicationModelDataTransferDragDrop_DragDropModifiers.fromABI(_result)
    }

    public func get_AcceptedOperation() throws -> WindowsApplicationModelDataTransfer_DataPackageOperation {
        var _result: SWRT_WindowsApplicationModelDataTransfer_DataPackageOperation = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AcceptedOperation(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageOperation.fromABI(_result)
    }

    public func put_AcceptedOperation(_ value: WindowsApplicationModelDataTransfer_DataPackageOperation) throws {
        let value_abi = WindowsApplicationModelDataTransfer_DataPackageOperation.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AcceptedOperation(this, value_abi))
    }

    public func get_AllowedOperations() throws -> WindowsApplicationModelDataTransfer_DataPackageOperation {
        var _result: SWRT_WindowsApplicationModelDataTransfer_DataPackageOperation = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowedOperations(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageOperation.fromABI(_result)
    }

    public func getDeferral() throws -> MicrosoftUIXaml_DragOperationDeferral? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDragOperationDeferral>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetDeferral(this, &_result))
        return MicrosoftUIXaml_DragOperationDeferralBinding.fromABI(consuming: &_result)
    }

    public func getPosition(_ relativeTo: MicrosoftUIXaml_UIElement?) throws -> WindowsFoundation_Point {
        var relativeTo_abi = try MicrosoftUIXaml_UIElementBinding.toABI(relativeTo)
        defer { MicrosoftUIXaml_UIElementBinding.release(&relativeTo_abi) }
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPosition(this, relativeTo_abi, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.IDragOperationDeferral

public func uuidof(_: SWRT_MicrosoftUIXaml_IDragOperationDeferral.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x462C1880, 0xFC6A, 0x5035, 0x8ABF, 0x564BACB78158)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDragOperationDeferral {
    public func complete() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Complete(this))
    }
}

// MARK: Microsoft.UI.Xaml.IDragStartingEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IDragStartingEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xAD17BACE, 0x9613, 0x5666, 0xA31B, 0x79A73FBA77CF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDragStartingEventArgs {
    public func get_Cancel() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Cancel(this, &_result))
        return _result
    }

    public func put_Cancel(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Cancel(this, value))
    }

    public func get_Data() throws -> WindowsApplicationModelDataTransfer_DataPackage? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsApplicationModelDataTransfer_IDataPackage>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Data(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageBinding.fromABI(consuming: &_result)
    }

    public func get_DragUI() throws -> MicrosoftUIXaml_DragUI? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDragUI>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DragUI(this, &_result))
        return MicrosoftUIXaml_DragUIBinding.fromABI(consuming: &_result)
    }

    public func get_AllowedOperations() throws -> WindowsApplicationModelDataTransfer_DataPackageOperation {
        var _result: SWRT_WindowsApplicationModelDataTransfer_DataPackageOperation = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowedOperations(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageOperation.fromABI(_result)
    }

    public func put_AllowedOperations(_ value: WindowsApplicationModelDataTransfer_DataPackageOperation) throws {
        let value_abi = WindowsApplicationModelDataTransfer_DataPackageOperation.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AllowedOperations(this, value_abi))
    }

    public func getDeferral() throws -> MicrosoftUIXaml_DragOperationDeferral? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDragOperationDeferral>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetDeferral(this, &_result))
        return MicrosoftUIXaml_DragOperationDeferralBinding.fromABI(consuming: &_result)
    }

    public func getPosition(_ relativeTo: MicrosoftUIXaml_UIElement?) throws -> WindowsFoundation_Point {
        var relativeTo_abi = try MicrosoftUIXaml_UIElementBinding.toABI(relativeTo)
        defer { MicrosoftUIXaml_UIElementBinding.release(&relativeTo_abi) }
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPosition(this, relativeTo_abi, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.IDragUI

public func uuidof(_: SWRT_MicrosoftUIXaml_IDragUI.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x35F170E0, 0x93BF, 0x58DA, 0x877A, 0x8EC77D8D9F00)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDragUI {
    public func setContentFromBitmapImage(_ bitmapImage: MicrosoftUIXamlMediaImaging_BitmapImage?) throws {
        var bitmapImage_abi = try MicrosoftUIXamlMediaImaging_BitmapImageBinding.toABI(bitmapImage)
        defer { MicrosoftUIXamlMediaImaging_BitmapImageBinding.release(&bitmapImage_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetContentFromBitmapImage(this, bitmapImage_abi))
    }

    public func setContentFromBitmapImageWithAnchorPoint(_ bitmapImage: MicrosoftUIXamlMediaImaging_BitmapImage?, _ anchorPoint: WindowsFoundation_Point) throws {
        var bitmapImage_abi = try MicrosoftUIXamlMediaImaging_BitmapImageBinding.toABI(bitmapImage)
        defer { MicrosoftUIXamlMediaImaging_BitmapImageBinding.release(&bitmapImage_abi) }
        let anchorPoint_abi = WindowsFoundation_Point.toABI(anchorPoint)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetContentFromBitmapImageWithAnchorPoint(this, bitmapImage_abi, anchorPoint_abi))
    }

    public func setContentFromSoftwareBitmap(_ softwareBitmap: WindowsGraphicsImaging_SoftwareBitmap?) throws {
        var softwareBitmap_abi = try WindowsGraphicsImaging_SoftwareBitmapBinding.toABI(softwareBitmap)
        defer { WindowsGraphicsImaging_SoftwareBitmapBinding.release(&softwareBitmap_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetContentFromSoftwareBitmap(this, softwareBitmap_abi))
    }

    public func setContentFromSoftwareBitmapWithAnchorPoint(_ softwareBitmap: WindowsGraphicsImaging_SoftwareBitmap?, _ anchorPoint: WindowsFoundation_Point) throws {
        var softwareBitmap_abi = try WindowsGraphicsImaging_SoftwareBitmapBinding.toABI(softwareBitmap)
        defer { WindowsGraphicsImaging_SoftwareBitmapBinding.release(&softwareBitmap_abi) }
        let anchorPoint_abi = WindowsFoundation_Point.toABI(anchorPoint)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetContentFromSoftwareBitmapWithAnchorPoint(this, softwareBitmap_abi, anchorPoint_abi))
    }

    public func setContentFromDataPackage() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetContentFromDataPackage(this))
    }
}

// MARK: Microsoft.UI.Xaml.IDragUIOverride

public func uuidof(_: SWRT_MicrosoftUIXaml_IDragUIOverride.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3260B18B, 0x70DF, 0x5DF2, 0xB98A, 0x56BEB0601F79)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDragUIOverride {
    public func get_Caption() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Caption(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_Caption(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Caption(this, value_abi))
    }

    public func get_IsContentVisible() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsContentVisible(this, &_result))
        return _result
    }

    public func put_IsContentVisible(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsContentVisible(this, value))
    }

    public func get_IsCaptionVisible() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsCaptionVisible(this, &_result))
        return _result
    }

    public func put_IsCaptionVisible(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsCaptionVisible(this, value))
    }

    public func get_IsGlyphVisible() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsGlyphVisible(this, &_result))
        return _result
    }

    public func put_IsGlyphVisible(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsGlyphVisible(this, value))
    }

    public func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    public func setContentFromBitmapImage(_ bitmapImage: MicrosoftUIXamlMediaImaging_BitmapImage?) throws {
        var bitmapImage_abi = try MicrosoftUIXamlMediaImaging_BitmapImageBinding.toABI(bitmapImage)
        defer { MicrosoftUIXamlMediaImaging_BitmapImageBinding.release(&bitmapImage_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetContentFromBitmapImage(this, bitmapImage_abi))
    }

    public func setContentFromBitmapImageWithAnchorPoint(_ bitmapImage: MicrosoftUIXamlMediaImaging_BitmapImage?, _ anchorPoint: WindowsFoundation_Point) throws {
        var bitmapImage_abi = try MicrosoftUIXamlMediaImaging_BitmapImageBinding.toABI(bitmapImage)
        defer { MicrosoftUIXamlMediaImaging_BitmapImageBinding.release(&bitmapImage_abi) }
        let anchorPoint_abi = WindowsFoundation_Point.toABI(anchorPoint)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetContentFromBitmapImageWithAnchorPoint(this, bitmapImage_abi, anchorPoint_abi))
    }

    public func setContentFromSoftwareBitmap(_ softwareBitmap: WindowsGraphicsImaging_SoftwareBitmap?) throws {
        var softwareBitmap_abi = try WindowsGraphicsImaging_SoftwareBitmapBinding.toABI(softwareBitmap)
        defer { WindowsGraphicsImaging_SoftwareBitmapBinding.release(&softwareBitmap_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetContentFromSoftwareBitmap(this, softwareBitmap_abi))
    }

    public func setContentFromSoftwareBitmapWithAnchorPoint(_ softwareBitmap: WindowsGraphicsImaging_SoftwareBitmap?, _ anchorPoint: WindowsFoundation_Point) throws {
        var softwareBitmap_abi = try WindowsGraphicsImaging_SoftwareBitmapBinding.toABI(softwareBitmap)
        defer { WindowsGraphicsImaging_SoftwareBitmapBinding.release(&softwareBitmap_abi) }
        let anchorPoint_abi = WindowsFoundation_Point.toABI(anchorPoint)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetContentFromSoftwareBitmapWithAnchorPoint(this, softwareBitmap_abi, anchorPoint_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IDropCompletedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IDropCompletedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE700082D, 0xC640, 0x5D44, 0xB23A, 0xF213DFBEB245)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IDropCompletedEventArgs {
    public func get_DropResult() throws -> WindowsApplicationModelDataTransfer_DataPackageOperation {
        var _result: SWRT_WindowsApplicationModelDataTransfer_DataPackageOperation = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DropResult(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageOperation.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IEffectiveViewportChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x636E8159, 0x2D82, 0x538A, 0x8483, 0xCD576E41D0DF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IEffectiveViewportChangedEventArgs {
    public func get_EffectiveViewport() throws -> WindowsFoundation_Rect {
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_EffectiveViewport(this, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }

    public func get_MaxViewport() throws -> WindowsFoundation_Rect {
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxViewport(this, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }

    public func get_BringIntoViewDistanceX() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BringIntoViewDistanceX(this, &_result))
        return _result
    }

    public func get_BringIntoViewDistanceY() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BringIntoViewDistanceY(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.IElementFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IElementFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x75FABA47, 0x2CF2, 0x54AE, 0x91E6, 0x0581556FDDAA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IElementFactory {
    public func getElement(_ args: MicrosoftUIXaml_ElementFactoryGetArgs?) throws -> MicrosoftUIXaml_UIElement? {
        var args_abi = try MicrosoftUIXaml_ElementFactoryGetArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_ElementFactoryGetArgsBinding.release(&args_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetElement(this, args_abi, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func recycleElement(_ args: MicrosoftUIXaml_ElementFactoryRecycleArgs?) throws {
        var args_abi = try MicrosoftUIXaml_ElementFactoryRecycleArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_ElementFactoryRecycleArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RecycleElement(this, args_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IElementFactoryGetArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IElementFactoryGetArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB7017D68, 0xEC9E, 0x5435, 0xB078, 0xBE6F906F0953)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IElementFactoryGetArgs {
    public func get_Data() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Data(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_Data(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Data(this, value_abi))
    }

    public func get_Parent() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Parent(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func put_Parent(_ value: MicrosoftUIXaml_UIElement?) throws {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Parent(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IElementFactoryGetArgsFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IElementFactoryGetArgsFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA88E401B, 0x9FE5, 0x5960, 0x87A3, 0x89A3CFE2531C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IElementFactoryGetArgsFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IElementFactoryGetArgs> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IElementFactoryGetArgs>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IElementFactoryRecycleArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IElementFactoryRecycleArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x46E444F7, 0x05D3, 0x5C5E, 0x9B7A, 0x5541F63E4EF9)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IElementFactoryRecycleArgs {
    public func get_Element() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Element(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func put_Element(_ value: MicrosoftUIXaml_UIElement?) throws {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Element(this, value_abi))
    }

    public func get_Parent() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Parent(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func put_Parent(_ value: MicrosoftUIXaml_UIElement?) throws {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Parent(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IElementFactoryRecycleArgsFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IElementFactoryRecycleArgsFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x30EE194A, 0xFE4D, 0x53E7, 0xA84A, 0xCD34FAB0D4EF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IElementFactoryRecycleArgsFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IElementFactoryRecycleArgs> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IElementFactoryRecycleArgs>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IExceptionRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IExceptionRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE8BCB6D2, 0xD3F5, 0x5393, 0xA84F, 0xDFCD44A2DF34)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IExceptionRoutedEventArgs {
    public func get_ErrorMessage() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ErrorMessage(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IExceptionRoutedEventArgsFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IExceptionRoutedEventArgsFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE1E71FB6, 0x2AD0, 0x5189, 0x8D96, 0x33BAE488C5FB)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IExceptionRoutedEventArgsFactory {
}

// MARK: Microsoft.UI.Xaml.IFrameworkElement

public func uuidof(_: SWRT_MicrosoftUIXaml_IFrameworkElement.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFE08F13D, 0xDC6A, 0x5495, 0xAD44, 0xC2D8D21863B0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IFrameworkElement {
    public func get_Triggers() throws -> MicrosoftUIXaml_TriggerCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_TriggerBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Triggers(this, &_result))
        return MicrosoftUIXaml_TriggerCollectionBinding.fromABI(consuming: &_result)
    }

    public func get_Resources() throws -> MicrosoftUIXaml_ResourceDictionary? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IResourceDictionary>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Resources(this, &_result))
        return MicrosoftUIXaml_ResourceDictionaryBinding.fromABI(consuming: &_result)
    }

    public func put_Resources(_ value: MicrosoftUIXaml_ResourceDictionary?) throws {
        var value_abi = try MicrosoftUIXaml_ResourceDictionaryBinding.toABI(value)
        defer { MicrosoftUIXaml_ResourceDictionaryBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Resources(this, value_abi))
    }

    public func get_Tag() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Tag(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_Tag(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Tag(this, value_abi))
    }

    public func get_Language() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Language(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_Language(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Language(this, value_abi))
    }

    public func get_ActualWidth() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualWidth(this, &_result))
        return _result
    }

    public func get_ActualHeight() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualHeight(this, &_result))
        return _result
    }

    public func get_Width() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Width(this, &_result))
        return _result
    }

    public func put_Width(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Width(this, value))
    }

    public func get_Height() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Height(this, &_result))
        return _result
    }

    public func put_Height(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Height(this, value))
    }

    public func get_MinWidth() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MinWidth(this, &_result))
        return _result
    }

    public func put_MinWidth(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_MinWidth(this, value))
    }

    public func get_MaxWidth() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxWidth(this, &_result))
        return _result
    }

    public func put_MaxWidth(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_MaxWidth(this, value))
    }

    public func get_MinHeight() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MinHeight(this, &_result))
        return _result
    }

    public func put_MinHeight(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_MinHeight(this, value))
    }

    public func get_MaxHeight() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxHeight(this, &_result))
        return _result
    }

    public func put_MaxHeight(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_MaxHeight(this, value))
    }

    public func get_HorizontalAlignment() throws -> MicrosoftUIXaml_HorizontalAlignment {
        var _result: SWRT_MicrosoftUIXaml_HorizontalAlignment = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalAlignment(this, &_result))
        return MicrosoftUIXaml_HorizontalAlignment.fromABI(_result)
    }

    public func put_HorizontalAlignment(_ value: MicrosoftUIXaml_HorizontalAlignment) throws {
        let value_abi = MicrosoftUIXaml_HorizontalAlignment.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HorizontalAlignment(this, value_abi))
    }

    public func get_VerticalAlignment() throws -> MicrosoftUIXaml_VerticalAlignment {
        var _result: SWRT_MicrosoftUIXaml_VerticalAlignment = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VerticalAlignment(this, &_result))
        return MicrosoftUIXaml_VerticalAlignment.fromABI(_result)
    }

    public func put_VerticalAlignment(_ value: MicrosoftUIXaml_VerticalAlignment) throws {
        let value_abi = MicrosoftUIXaml_VerticalAlignment.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_VerticalAlignment(this, value_abi))
    }

    public func get_Margin() throws -> MicrosoftUIXaml_Thickness {
        var _result: SWRT_MicrosoftUIXaml_Thickness = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Margin(this, &_result))
        return MicrosoftUIXaml_Thickness.fromABI(_result)
    }

    public func put_Margin(_ value: MicrosoftUIXaml_Thickness) throws {
        let value_abi = MicrosoftUIXaml_Thickness.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Margin(this, value_abi))
    }

    public func get_Name() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Name(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_Name(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Name(this, value_abi))
    }

    public func get_BaseUri() throws -> WindowsFoundation_Uri? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IUriRuntimeClass>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BaseUri(this, &_result))
        return WindowsFoundation_UriBinding.fromABI(consuming: &_result)
    }

    public func get_DataContext() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DataContext(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_DataContext(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DataContext(this, value_abi))
    }

    public func get_AllowFocusOnInteraction() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusOnInteraction(this, &_result))
        return _result
    }

    public func put_AllowFocusOnInteraction(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AllowFocusOnInteraction(this, value))
    }

    public func get_FocusVisualMargin() throws -> MicrosoftUIXaml_Thickness {
        var _result: SWRT_MicrosoftUIXaml_Thickness = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualMargin(this, &_result))
        return MicrosoftUIXaml_Thickness.fromABI(_result)
    }

    public func put_FocusVisualMargin(_ value: MicrosoftUIXaml_Thickness) throws {
        let value_abi = MicrosoftUIXaml_Thickness.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FocusVisualMargin(this, value_abi))
    }

    public func get_FocusVisualSecondaryThickness() throws -> MicrosoftUIXaml_Thickness {
        var _result: SWRT_MicrosoftUIXaml_Thickness = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualSecondaryThickness(this, &_result))
        return MicrosoftUIXaml_Thickness.fromABI(_result)
    }

    public func put_FocusVisualSecondaryThickness(_ value: MicrosoftUIXaml_Thickness) throws {
        let value_abi = MicrosoftUIXaml_Thickness.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FocusVisualSecondaryThickness(this, value_abi))
    }

    public func get_FocusVisualPrimaryThickness() throws -> MicrosoftUIXaml_Thickness {
        var _result: SWRT_MicrosoftUIXaml_Thickness = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualPrimaryThickness(this, &_result))
        return MicrosoftUIXaml_Thickness.fromABI(_result)
    }

    public func put_FocusVisualPrimaryThickness(_ value: MicrosoftUIXaml_Thickness) throws {
        let value_abi = MicrosoftUIXaml_Thickness.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FocusVisualPrimaryThickness(this, value_abi))
    }

    public func get_FocusVisualSecondaryBrush() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualSecondaryBrush(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_FocusVisualSecondaryBrush(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FocusVisualSecondaryBrush(this, value_abi))
    }

    public func get_FocusVisualPrimaryBrush() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualPrimaryBrush(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_FocusVisualPrimaryBrush(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FocusVisualPrimaryBrush(this, value_abi))
    }

    public func get_AllowFocusWhenDisabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusWhenDisabled(this, &_result))
        return _result
    }

    public func put_AllowFocusWhenDisabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AllowFocusWhenDisabled(this, value))
    }

    public func get_Style() throws -> MicrosoftUIXaml_Style? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Style(this, &_result))
        return MicrosoftUIXaml_StyleBinding.fromABI(consuming: &_result)
    }

    public func put_Style(_ value: MicrosoftUIXaml_Style?) throws {
        var value_abi = try MicrosoftUIXaml_StyleBinding.toABI(value)
        defer { MicrosoftUIXaml_StyleBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Style(this, value_abi))
    }

    public func get_Parent() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Parent(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func get_FlowDirection() throws -> MicrosoftUIXaml_FlowDirection {
        var _result: SWRT_MicrosoftUIXaml_FlowDirection = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FlowDirection(this, &_result))
        return MicrosoftUIXaml_FlowDirection.fromABI(_result)
    }

    public func put_FlowDirection(_ value: MicrosoftUIXaml_FlowDirection) throws {
        let value_abi = MicrosoftUIXaml_FlowDirection.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FlowDirection(this, value_abi))
    }

    public func get_RequestedTheme() throws -> MicrosoftUIXaml_ElementTheme {
        var _result: SWRT_MicrosoftUIXaml_ElementTheme = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RequestedTheme(this, &_result))
        return MicrosoftUIXaml_ElementTheme.fromABI(_result)
    }

    public func put_RequestedTheme(_ value: MicrosoftUIXaml_ElementTheme) throws {
        let value_abi = MicrosoftUIXaml_ElementTheme.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RequestedTheme(this, value_abi))
    }

    public func get_IsLoaded() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsLoaded(this, &_result))
        return _result
    }

    public func get_ActualTheme() throws -> MicrosoftUIXaml_ElementTheme {
        var _result: SWRT_MicrosoftUIXaml_ElementTheme = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualTheme(this, &_result))
        return MicrosoftUIXaml_ElementTheme.fromABI(_result)
    }

    public func add_Loaded(_ handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_RoutedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_RoutedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Loaded(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Loaded(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Loaded(this, token_abi))
    }

    public func add_Unloaded(_ handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_RoutedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_RoutedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Unloaded(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Unloaded(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Unloaded(this, token_abi))
    }

    public func add_DataContextChanged(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, MicrosoftUIXaml_DataContextChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.FrameworkElement_DataContextChangedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.FrameworkElement_DataContextChangedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DataContextChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DataContextChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DataContextChanged(this, token_abi))
    }

    public func add_SizeChanged(_ handler: MicrosoftUIXaml_SizeChangedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_SizeChangedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_SizeChangedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_SizeChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_SizeChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_SizeChanged(this, token_abi))
    }

    public func add_LayoutUpdated(_ handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_EventHandlerBinding.Object.toABI(handler)
        defer { WindowsFoundation_EventHandlerBinding.Object.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_LayoutUpdated(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_LayoutUpdated(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_LayoutUpdated(this, token_abi))
    }

    public func add_Loading(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.FrameworkElement_Object.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.FrameworkElement_Object.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Loading(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Loading(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Loading(this, token_abi))
    }

    public func add_ActualThemeChanged(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.FrameworkElement_Object.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.FrameworkElement_Object.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ActualThemeChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ActualThemeChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ActualThemeChanged(this, token_abi))
    }

    public func add_EffectiveViewportChanged(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, MicrosoftUIXaml_EffectiveViewportChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.FrameworkElement_EffectiveViewportChangedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.FrameworkElement_EffectiveViewportChangedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_EffectiveViewportChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_EffectiveViewportChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_EffectiveViewportChanged(this, token_abi))
    }

    public func findName(_ name: Swift.String) throws -> WindowsRuntime.IInspectable? {
        var name_abi = try WindowsRuntime.StringBinding.toABI(name)
        defer { WindowsRuntime.StringBinding.release(&name_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.FindName(this, name_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func setBinding(_ dp: MicrosoftUIXaml_DependencyProperty?, _ binding: MicrosoftUIXamlData_BindingBase?) throws {
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        var binding_abi = try MicrosoftUIXamlData_BindingBaseBinding.toABI(binding)
        defer { MicrosoftUIXamlData_BindingBaseBinding.release(&binding_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetBinding(this, dp_abi, binding_abi))
    }

    public func getBindingExpression(_ dp: MicrosoftUIXaml_DependencyProperty?) throws -> MicrosoftUIXamlData_BindingExpression? {
        var dp_abi = try MicrosoftUIXaml_DependencyPropertyBinding.toABI(dp)
        defer { MicrosoftUIXaml_DependencyPropertyBinding.release(&dp_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IBindingExpression>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetBindingExpression(this, dp_abi, &_result))
        return MicrosoftUIXamlData_BindingExpressionBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IFrameworkElementFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IFrameworkElementFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xBD3F2272, 0x3EFA, 0x5F92, 0xB759, 0x90B1CC3E784C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IFrameworkElementFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkElement> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IFrameworkElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IFrameworkElementOverrides

public func uuidof(_: SWRT_MicrosoftUIXaml_IFrameworkElementOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFFC6FD98, 0xF38C, 0x5904, 0x9CE4, 0x97A3427CF4BA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IFrameworkElementOverrides {
    public func measureOverride(_ availableSize: WindowsFoundation_Size) throws -> WindowsFoundation_Size {
        let availableSize_abi = WindowsFoundation_Size.toABI(availableSize)
        var _result: SWRT_WindowsFoundation_Size = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MeasureOverride(this, availableSize_abi, &_result))
        return WindowsFoundation_Size.fromABI(_result)
    }

    public func arrangeOverride(_ finalSize: WindowsFoundation_Size) throws -> WindowsFoundation_Size {
        let finalSize_abi = WindowsFoundation_Size.toABI(finalSize)
        var _result: SWRT_WindowsFoundation_Size = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ArrangeOverride(this, finalSize_abi, &_result))
        return WindowsFoundation_Size.fromABI(_result)
    }

    public func onApplyTemplate() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnApplyTemplate(this))
    }

    public func goToElementStateCore(_ stateName: Swift.String, _ useTransitions: Swift.Bool) throws -> Swift.Bool {
        var stateName_abi = try WindowsRuntime.StringBinding.toABI(stateName)
        defer { WindowsRuntime.StringBinding.release(&stateName_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GoToElementStateCore(this, stateName_abi, useTransitions, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.IFrameworkElementProtected

public func uuidof(_: SWRT_MicrosoftUIXaml_IFrameworkElementProtected.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE59A3DB0, 0x91E5, 0x5903, 0x9CAF, 0xD1BB9F458BF2)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IFrameworkElementProtected {
    public func invalidateViewport() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InvalidateViewport(this))
    }
}

// MARK: Microsoft.UI.Xaml.IFrameworkElementStatics

public func uuidof(_: SWRT_MicrosoftUIXaml_IFrameworkElementStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x894E2704, 0x14E7, 0x569A, 0xB21E, 0xAFC7DF7145A1)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IFrameworkElementStatics {
    public func get_TagProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TagProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_LanguageProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LanguageProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ActualWidthProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualWidthProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ActualHeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualHeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_WidthProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_WidthProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_HeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MinWidthProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MinWidthProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MaxWidthProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxWidthProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MinHeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MinHeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MaxHeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxHeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_HorizontalAlignmentProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalAlignmentProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_VerticalAlignmentProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VerticalAlignmentProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MarginProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MarginProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_NameProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_NameProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_DataContextProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DataContextProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AllowFocusOnInteractionProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusOnInteractionProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FocusVisualMarginProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualMarginProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FocusVisualSecondaryThicknessProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualSecondaryThicknessProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FocusVisualPrimaryThicknessProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualPrimaryThicknessProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FocusVisualSecondaryBrushProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualSecondaryBrushProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FocusVisualPrimaryBrushProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusVisualPrimaryBrushProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AllowFocusWhenDisabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusWhenDisabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_StyleProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_StyleProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FlowDirectionProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FlowDirectionProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_RequestedThemeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RequestedThemeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ActualThemeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualThemeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func deferTree(_ element: MicrosoftUIXaml_DependencyObject?) throws {
        var element_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(element)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.DeferTree(this, element_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IFrameworkTemplate

public func uuidof(_: SWRT_MicrosoftUIXaml_IFrameworkTemplate.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0084C7C2, 0xDE48, 0x5B0B, 0x8A5A, 0xE4FB76B7F7D1)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IFrameworkTemplate {
}

// MARK: Microsoft.UI.Xaml.IFrameworkTemplateFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IFrameworkTemplateFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x616DD6DB, 0xB064, 0x561D, 0xB162, 0x46CEB45DC562)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IFrameworkTemplateFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IFrameworkTemplate> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IFrameworkTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.ILaunchActivatedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_ILaunchActivatedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD505CEA9, 0x1BCB, 0x5B29, 0xA8BE, 0x944E00F06F78)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_ILaunchActivatedEventArgs {
    public func get_Arguments() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Arguments(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func get_UWPLaunchActivatedEventArgs() throws -> WindowsApplicationModelActivation_LaunchActivatedEventArgs? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsApplicationModelActivation_ILaunchActivatedEventArgs>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UWPLaunchActivatedEventArgs(this, &_result))
        return WindowsApplicationModelActivation_LaunchActivatedEventArgsBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IPropertyMetadata

public func uuidof(_: SWRT_MicrosoftUIXaml_IPropertyMetadata.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB3644425, 0x9464, 0x5434, 0xB0AE, 0xAFF8D3159FE1)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IPropertyMetadata {
    public func get_DefaultValue() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DefaultValue(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func get_CreateDefaultValueCallback() throws -> MicrosoftUIXaml_CreateDefaultValueCallback? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_CreateDefaultValueCallback>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CreateDefaultValueCallback(this, &_result))
        return MicrosoftUIXaml_CreateDefaultValueCallbackBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IPropertyMetadataFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IPropertyMetadataFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9F420906, 0x111A, 0x5465, 0x91EE, 0xBED14B3E7FEC)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IPropertyMetadataFactory {
    public func createInstanceWithDefaultValue(_ defaultValue: WindowsRuntime.IInspectable?, _ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IPropertyMetadata> {
        var defaultValue_abi = try WindowsRuntime.IInspectableBinding.toABI(defaultValue)
        defer { WindowsRuntime.IInspectableBinding.release(&defaultValue_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IPropertyMetadata>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstanceWithDefaultValue(this, defaultValue_abi, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }

    public func createInstanceWithDefaultValueAndCallback(_ defaultValue: WindowsRuntime.IInspectable?, _ propertyChangedCallback: MicrosoftUIXaml_PropertyChangedCallback?, _ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IPropertyMetadata> {
        var defaultValue_abi = try WindowsRuntime.IInspectableBinding.toABI(defaultValue)
        defer { WindowsRuntime.IInspectableBinding.release(&defaultValue_abi) }
        var propertyChangedCallback_abi = try MicrosoftUIXaml_PropertyChangedCallbackBinding.toABI(propertyChangedCallback)
        defer { MicrosoftUIXaml_PropertyChangedCallbackBinding.release(&propertyChangedCallback_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IPropertyMetadata>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstanceWithDefaultValueAndCallback(this, defaultValue_abi, propertyChangedCallback_abi, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IPropertyMetadataStatics

public func uuidof(_: SWRT_MicrosoftUIXaml_IPropertyMetadataStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x37B8ADD4, 0x7A4A, 0x5CF7, 0xA174, 0x235182CD082E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IPropertyMetadataStatics {
    public func createWithDefaultValue(_ defaultValue: WindowsRuntime.IInspectable?) throws -> MicrosoftUIXaml_PropertyMetadata? {
        var defaultValue_abi = try WindowsRuntime.IInspectableBinding.toABI(defaultValue)
        defer { WindowsRuntime.IInspectableBinding.release(&defaultValue_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IPropertyMetadata>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateWithDefaultValue(this, defaultValue_abi, &_result))
        return MicrosoftUIXaml_PropertyMetadataBinding.fromABI(consuming: &_result)
    }

    public func createWithDefaultValueAndCallback(_ defaultValue: WindowsRuntime.IInspectable?, _ propertyChangedCallback: MicrosoftUIXaml_PropertyChangedCallback?) throws -> MicrosoftUIXaml_PropertyMetadata? {
        var defaultValue_abi = try WindowsRuntime.IInspectableBinding.toABI(defaultValue)
        defer { WindowsRuntime.IInspectableBinding.release(&defaultValue_abi) }
        var propertyChangedCallback_abi = try MicrosoftUIXaml_PropertyChangedCallbackBinding.toABI(propertyChangedCallback)
        defer { MicrosoftUIXaml_PropertyChangedCallbackBinding.release(&propertyChangedCallback_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IPropertyMetadata>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateWithDefaultValueAndCallback(this, defaultValue_abi, propertyChangedCallback_abi, &_result))
        return MicrosoftUIXaml_PropertyMetadataBinding.fromABI(consuming: &_result)
    }

    public func createWithFactory(_ createDefaultValueCallback: MicrosoftUIXaml_CreateDefaultValueCallback?) throws -> MicrosoftUIXaml_PropertyMetadata? {
        var createDefaultValueCallback_abi = try MicrosoftUIXaml_CreateDefaultValueCallbackBinding.toABI(createDefaultValueCallback)
        defer { MicrosoftUIXaml_CreateDefaultValueCallbackBinding.release(&createDefaultValueCallback_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IPropertyMetadata>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateWithFactory(this, createDefaultValueCallback_abi, &_result))
        return MicrosoftUIXaml_PropertyMetadataBinding.fromABI(consuming: &_result)
    }

    public func createWithFactoryAndCallback(_ createDefaultValueCallback: MicrosoftUIXaml_CreateDefaultValueCallback?, _ propertyChangedCallback: MicrosoftUIXaml_PropertyChangedCallback?) throws -> MicrosoftUIXaml_PropertyMetadata? {
        var createDefaultValueCallback_abi = try MicrosoftUIXaml_CreateDefaultValueCallbackBinding.toABI(createDefaultValueCallback)
        defer { MicrosoftUIXaml_CreateDefaultValueCallbackBinding.release(&createDefaultValueCallback_abi) }
        var propertyChangedCallback_abi = try MicrosoftUIXaml_PropertyChangedCallbackBinding.toABI(propertyChangedCallback)
        defer { MicrosoftUIXaml_PropertyChangedCallbackBinding.release(&propertyChangedCallback_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IPropertyMetadata>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateWithFactoryAndCallback(this, createDefaultValueCallback_abi, propertyChangedCallback_abi, &_result))
        return MicrosoftUIXaml_PropertyMetadataBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IPropertyPath

public func uuidof(_: SWRT_MicrosoftUIXaml_IPropertyPath.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8B0712F6, 0x9E57, 0x53B0, 0x80B1, 0x966A79F60B96)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IPropertyPath {
    public func get_Path() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Path(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IPropertyPathFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IPropertyPathFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x08A8CCAB, 0x7FF8, 0x5CEC, 0xBD3C, 0x72C98804D989)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IPropertyPathFactory {
    public func createInstance(_ path: Swift.String) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IPropertyPath> {
        var path_abi = try WindowsRuntime.StringBinding.toABI(path)
        defer { WindowsRuntime.StringBinding.release(&path_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IPropertyPath>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, path_abi, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IResourceDictionary

public func uuidof(_: SWRT_MicrosoftUIXaml_IResourceDictionary.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1B690975, 0xA710, 0x5783, 0xA6E1, 0x15836F6186C2)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IResourceDictionary {
    public func get_Source() throws -> WindowsFoundation_Uri? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IUriRuntimeClass>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Source(this, &_result))
        return WindowsFoundation_UriBinding.fromABI(consuming: &_result)
    }

    public func put_Source(_ value: WindowsFoundation_Uri?) throws {
        var value_abi = try WindowsFoundation_UriBinding.toABI(value)
        defer { WindowsFoundation_UriBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Source(this, value_abi))
    }

    public func get_MergedDictionaries() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXaml_ResourceDictionary?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_ResourceDictionary>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MergedDictionaries(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.ResourceDictionary.fromABI(consuming: &_result)
    }

    public func get_ThemeDictionaries() throws -> WindowsFoundationCollections_IMap<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IMap_IInspectable_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ThemeDictionaries(this, &_result))
        return WindowsFoundationCollections_IMapBinding.Object_Object.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IResourceDictionaryFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IResourceDictionaryFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEA22A48F, 0xAB71, 0x56F6, 0xA392, 0xD82310C8AA7B)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IResourceDictionaryFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IResourceDictionary> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IResourceDictionary>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IResourceManagerRequestedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IResourceManagerRequestedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC35F4CF1, 0xFCD6, 0x5C6B, 0x9BE2, 0x4CFAEFB68B2A)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IResourceManagerRequestedEventArgs {
    public func get_CustomResourceManager() throws -> MicrosoftWindowsApplicationModelResources_IResourceManager? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftWindowsApplicationModelResources_IResourceManager>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CustomResourceManager(this, &_result))
        return MicrosoftWindowsApplicationModelResources_IResourceManagerBinding.fromABI(consuming: &_result)
    }

    public func put_CustomResourceManager(_ value: MicrosoftWindowsApplicationModelResources_IResourceManager?) throws {
        var value_abi = try MicrosoftWindowsApplicationModelResources_IResourceManagerBinding.toABI(value)
        defer { MicrosoftWindowsApplicationModelResources_IResourceManagerBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CustomResourceManager(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IRoutedEvent

public func uuidof(_: SWRT_MicrosoftUIXaml_IRoutedEvent.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB2B432BC, 0xEFCA, 0x575E, 0x9D2A, 0x703F8B9C380F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IRoutedEvent {
}

// MARK: Microsoft.UI.Xaml.IRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0908C407, 0x1C7D, 0x5DE3, 0x9C50, 0xD971C62EC8EC)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IRoutedEventArgs {
    public func get_OriginalSource() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OriginalSource(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IRoutedEventArgsFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IRoutedEventArgsFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x914B02C7, 0x076B, 0x5B89, 0x98E7, 0x6C373379E9AF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IRoutedEventArgsFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IRoutedEventArgs> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEventArgs>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IScalarTransition

public func uuidof(_: SWRT_MicrosoftUIXaml_IScalarTransition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC2DA2AC8, 0x814C, 0x5889, 0xB2F4, 0x4EBE4B001EE3)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IScalarTransition {
    public func get_Duration() throws -> WindowsFoundation_TimeSpan {
        var _result: SWRT_WindowsFoundation_TimeSpan = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Duration(this, &_result))
        return WindowsFoundation_TimeSpan.fromABI(_result)
    }

    public func put_Duration(_ value: WindowsFoundation_TimeSpan) throws {
        let value_abi = WindowsFoundation_TimeSpan.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Duration(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IScalarTransitionFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IScalarTransitionFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA1650CF8, 0xA15B, 0x54FC, 0xB595, 0xC52491318F58)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IScalarTransitionFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IScalarTransition> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IScalarTransition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.ISetterBase

public func uuidof(_: SWRT_MicrosoftUIXaml_ISetterBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5A7C1347, 0xCDA3, 0x55BE, 0xBFEF, 0x5C7582213980)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_ISetterBase {
    public func get_IsSealed() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSealed(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.ISetterBaseCollection

public func uuidof(_: SWRT_MicrosoftUIXaml_ISetterBaseCollection.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x63BF7C0F, 0xB290, 0x5C0C, 0x9185, 0x3338CD350D7F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_ISetterBaseCollection {
    public func get_IsSealed() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSealed(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.ISetterBaseFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_ISetterBaseFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x780A1D2F, 0xC4BE, 0x5707, 0x8A8A, 0x4550DC22583E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_ISetterBaseFactory {
}

// MARK: Microsoft.UI.Xaml.ISizeChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_ISizeChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFE76324E, 0x6DFB, 0x58B1, 0x9DCD, 0x886CA8F9A2EA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_ISizeChangedEventArgs {
    public func get_PreviousSize() throws -> WindowsFoundation_Size {
        var _result: SWRT_WindowsFoundation_Size = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PreviousSize(this, &_result))
        return WindowsFoundation_Size.fromABI(_result)
    }

    public func get_NewSize() throws -> WindowsFoundation_Size {
        var _result: SWRT_WindowsFoundation_Size = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_NewSize(this, &_result))
        return WindowsFoundation_Size.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.IStyle

public func uuidof(_: SWRT_MicrosoftUIXaml_IStyle.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x65E1D164, 0x572F, 0x5B0E, 0xA80F, 0x9C02441FAC49)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IStyle {
    public func get_IsSealed() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSealed(this, &_result))
        return _result
    }

    public func get_Setters() throws -> MicrosoftUIXaml_SetterBaseCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_ISetterBaseCollection>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Setters(this, &_result))
        return MicrosoftUIXaml_SetterBaseCollectionBinding.fromABI(consuming: &_result)
    }

    public func get_TargetType() throws -> WindowsUIXamlInterop_TypeName {
        var _result: SWRT_WindowsUIXamlInterop_TypeName = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TargetType(this, &_result))
        return WindowsUIXamlInterop_TypeName.fromABI(consuming: &_result)
    }

    public func put_TargetType(_ value: WindowsUIXamlInterop_TypeName) throws {
        var value_abi = try WindowsUIXamlInterop_TypeName.toABI(value)
        defer { WindowsUIXamlInterop_TypeName.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TargetType(this, value_abi))
    }

    public func get_BasedOn() throws -> MicrosoftUIXaml_Style? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BasedOn(this, &_result))
        return MicrosoftUIXaml_StyleBinding.fromABI(consuming: &_result)
    }

    public func put_BasedOn(_ value: MicrosoftUIXaml_Style?) throws {
        var value_abi = try MicrosoftUIXaml_StyleBinding.toABI(value)
        defer { MicrosoftUIXaml_StyleBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_BasedOn(this, value_abi))
    }

    public func seal() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Seal(this))
    }
}

// MARK: Microsoft.UI.Xaml.IStyleFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IStyleFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC2D924A2, 0x3862, 0x517C, 0xB083, 0x9A9120D7302D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IStyleFactory {
    public func createInstance(_ targetType: WindowsUIXamlInterop_TypeName) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IStyle> {
        var targetType_abi = try WindowsUIXamlInterop_TypeName.toABI(targetType)
        defer { WindowsUIXamlInterop_TypeName.release(&targetType_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, targetType_abi, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.ITriggerBase

public func uuidof(_: SWRT_MicrosoftUIXaml_ITriggerBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD37DA89D, 0x0D71, 0x58CF, 0xA901, 0x99A7D3E5E434)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_ITriggerBase {
}

// MARK: Microsoft.UI.Xaml.ITriggerBaseFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_ITriggerBaseFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x23088EAA, 0x17EC, 0x51B2, 0xB181, 0x5BEDFA8B8FA4)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_ITriggerBaseFactory {
}

// MARK: Microsoft.UI.Xaml.IUIElement

public func uuidof(_: SWRT_MicrosoftUIXaml_IUIElement.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC3C01020, 0x320C, 0x5CF6, 0x9D24, 0xD396BBFA4D8B)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IUIElement {
    public func get_DesiredSize() throws -> WindowsFoundation_Size {
        var _result: SWRT_WindowsFoundation_Size = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DesiredSize(this, &_result))
        return WindowsFoundation_Size.fromABI(_result)
    }

    public func get_AllowDrop() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowDrop(this, &_result))
        return _result
    }

    public func put_AllowDrop(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AllowDrop(this, value))
    }

    public func get_Opacity() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Opacity(this, &_result))
        return _result
    }

    public func put_Opacity(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Opacity(this, value))
    }

    public func get_Clip() throws -> MicrosoftUIXamlMedia_RectangleGeometry? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IRectangleGeometry>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Clip(this, &_result))
        return MicrosoftUIXamlMedia_RectangleGeometryBinding.fromABI(consuming: &_result)
    }

    public func put_Clip(_ value: MicrosoftUIXamlMedia_RectangleGeometry?) throws {
        var value_abi = try MicrosoftUIXamlMedia_RectangleGeometryBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_RectangleGeometryBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Clip(this, value_abi))
    }

    public func get_RenderTransform() throws -> MicrosoftUIXamlMedia_Transform? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ITransform>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RenderTransform(this, &_result))
        return MicrosoftUIXamlMedia_TransformBinding.fromABI(consuming: &_result)
    }

    public func put_RenderTransform(_ value: MicrosoftUIXamlMedia_Transform?) throws {
        var value_abi = try MicrosoftUIXamlMedia_TransformBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_TransformBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RenderTransform(this, value_abi))
    }

    public func get_Projection() throws -> MicrosoftUIXamlMedia_Projection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IProjection>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Projection(this, &_result))
        return MicrosoftUIXamlMedia_ProjectionBinding.fromABI(consuming: &_result)
    }

    public func put_Projection(_ value: MicrosoftUIXamlMedia_Projection?) throws {
        var value_abi = try MicrosoftUIXamlMedia_ProjectionBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_ProjectionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Projection(this, value_abi))
    }

    public func get_Transform3D() throws -> MicrosoftUIXamlMediaMedia3D_Transform3D? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3D>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Transform3D(this, &_result))
        return MicrosoftUIXamlMediaMedia3D_Transform3DBinding.fromABI(consuming: &_result)
    }

    public func put_Transform3D(_ value: MicrosoftUIXamlMediaMedia3D_Transform3D?) throws {
        var value_abi = try MicrosoftUIXamlMediaMedia3D_Transform3DBinding.toABI(value)
        defer { MicrosoftUIXamlMediaMedia3D_Transform3DBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Transform3D(this, value_abi))
    }

    public func get_RenderTransformOrigin() throws -> WindowsFoundation_Point {
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RenderTransformOrigin(this, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }

    public func put_RenderTransformOrigin(_ value: WindowsFoundation_Point) throws {
        let value_abi = WindowsFoundation_Point.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RenderTransformOrigin(this, value_abi))
    }

    public func get_IsHitTestVisible() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsHitTestVisible(this, &_result))
        return _result
    }

    public func put_IsHitTestVisible(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsHitTestVisible(this, value))
    }

    public func get_Visibility() throws -> MicrosoftUIXaml_Visibility {
        var _result: SWRT_MicrosoftUIXaml_Visibility = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Visibility(this, &_result))
        return MicrosoftUIXaml_Visibility.fromABI(_result)
    }

    public func put_Visibility(_ value: MicrosoftUIXaml_Visibility) throws {
        let value_abi = MicrosoftUIXaml_Visibility.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Visibility(this, value_abi))
    }

    public func get_RenderSize() throws -> WindowsFoundation_Size {
        var _result: SWRT_WindowsFoundation_Size = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RenderSize(this, &_result))
        return WindowsFoundation_Size.fromABI(_result)
    }

    public func get_UseLayoutRounding() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UseLayoutRounding(this, &_result))
        return _result
    }

    public func put_UseLayoutRounding(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_UseLayoutRounding(this, value))
    }

    public func get_Transitions() throws -> MicrosoftUIXamlMediaAnimation_TransitionCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Transitions(this, &_result))
        return MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.fromABI(consuming: &_result)
    }

    public func put_Transitions(_ value: MicrosoftUIXamlMediaAnimation_TransitionCollection?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Transitions(this, value_abi))
    }

    public func get_CacheMode() throws -> MicrosoftUIXamlMedia_CacheMode? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ICacheMode>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CacheMode(this, &_result))
        return MicrosoftUIXamlMedia_CacheModeBinding.fromABI(consuming: &_result)
    }

    public func put_CacheMode(_ value: MicrosoftUIXamlMedia_CacheMode?) throws {
        var value_abi = try MicrosoftUIXamlMedia_CacheModeBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_CacheModeBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CacheMode(this, value_abi))
    }

    public func get_IsTapEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTapEnabled(this, &_result))
        return _result
    }

    public func put_IsTapEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsTapEnabled(this, value))
    }

    public func get_IsDoubleTapEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsDoubleTapEnabled(this, &_result))
        return _result
    }

    public func put_IsDoubleTapEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsDoubleTapEnabled(this, value))
    }

    public func get_CanDrag() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanDrag(this, &_result))
        return _result
    }

    public func put_CanDrag(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CanDrag(this, value))
    }

    public func get_IsRightTapEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsRightTapEnabled(this, &_result))
        return _result
    }

    public func put_IsRightTapEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsRightTapEnabled(this, value))
    }

    public func get_IsHoldingEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsHoldingEnabled(this, &_result))
        return _result
    }

    public func put_IsHoldingEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsHoldingEnabled(this, value))
    }

    public func get_ManipulationMode() throws -> MicrosoftUIXamlInput_ManipulationModes {
        var _result: SWRT_MicrosoftUIXamlInput_ManipulationModes = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ManipulationMode(this, &_result))
        return MicrosoftUIXamlInput_ManipulationModes.fromABI(_result)
    }

    public func put_ManipulationMode(_ value: MicrosoftUIXamlInput_ManipulationModes) throws {
        let value_abi = MicrosoftUIXamlInput_ManipulationModes.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ManipulationMode(this, value_abi))
    }

    public func get_PointerCaptures() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlInput_Pointer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlInput_Pointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerCaptures(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.Pointer.fromABI(consuming: &_result)
    }

    public func get_ContextFlyout() throws -> MicrosoftUIXamlControlsPrimitives_FlyoutBase? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContextFlyout(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.fromABI(consuming: &_result)
    }

    public func put_ContextFlyout(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutBase?) throws {
        var value_abi = try MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.toABI(value)
        defer { MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ContextFlyout(this, value_abi))
    }

    public func get_CompositeMode() throws -> MicrosoftUIXamlMedia_ElementCompositeMode {
        var _result: SWRT_MicrosoftUIXamlMedia_ElementCompositeMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CompositeMode(this, &_result))
        return MicrosoftUIXamlMedia_ElementCompositeMode.fromABI(_result)
    }

    public func put_CompositeMode(_ value: MicrosoftUIXamlMedia_ElementCompositeMode) throws {
        let value_abi = MicrosoftUIXamlMedia_ElementCompositeMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CompositeMode(this, value_abi))
    }

    public func get_Lights() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlMedia_XamlLight?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMedia_XamlLight>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Lights(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.XamlLight.fromABI(consuming: &_result)
    }

    public func get_CanBeScrollAnchor() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanBeScrollAnchor(this, &_result))
        return _result
    }

    public func put_CanBeScrollAnchor(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CanBeScrollAnchor(this, value))
    }

    public func get_ExitDisplayModeOnAccessKeyInvoked() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ExitDisplayModeOnAccessKeyInvoked(this, &_result))
        return _result
    }

    public func put_ExitDisplayModeOnAccessKeyInvoked(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ExitDisplayModeOnAccessKeyInvoked(this, value))
    }

    public func get_IsAccessKeyScope() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsAccessKeyScope(this, &_result))
        return _result
    }

    public func put_IsAccessKeyScope(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsAccessKeyScope(this, value))
    }

    public func get_AccessKeyScopeOwner() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AccessKeyScopeOwner(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_AccessKeyScopeOwner(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AccessKeyScopeOwner(this, value_abi))
    }

    public func get_AccessKey() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AccessKey(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_AccessKey(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AccessKey(this, value_abi))
    }

    public func get_KeyTipPlacementMode() throws -> MicrosoftUIXamlInput_KeyTipPlacementMode {
        var _result: SWRT_MicrosoftUIXamlInput_KeyTipPlacementMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipPlacementMode(this, &_result))
        return MicrosoftUIXamlInput_KeyTipPlacementMode.fromABI(_result)
    }

    public func put_KeyTipPlacementMode(_ value: MicrosoftUIXamlInput_KeyTipPlacementMode) throws {
        let value_abi = MicrosoftUIXamlInput_KeyTipPlacementMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_KeyTipPlacementMode(this, value_abi))
    }

    public func get_KeyTipHorizontalOffset() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipHorizontalOffset(this, &_result))
        return _result
    }

    public func put_KeyTipHorizontalOffset(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_KeyTipHorizontalOffset(this, value))
    }

    public func get_KeyTipVerticalOffset() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipVerticalOffset(this, &_result))
        return _result
    }

    public func put_KeyTipVerticalOffset(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_KeyTipVerticalOffset(this, value))
    }

    public func get_KeyTipTarget() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipTarget(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_KeyTipTarget(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_KeyTipTarget(this, value_abi))
    }

    public func get_XYFocusKeyboardNavigation() throws -> MicrosoftUIXamlInput_XYFocusKeyboardNavigationMode {
        var _result: SWRT_MicrosoftUIXamlInput_XYFocusKeyboardNavigationMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusKeyboardNavigation(this, &_result))
        return MicrosoftUIXamlInput_XYFocusKeyboardNavigationMode.fromABI(_result)
    }

    public func put_XYFocusKeyboardNavigation(_ value: MicrosoftUIXamlInput_XYFocusKeyboardNavigationMode) throws {
        let value_abi = MicrosoftUIXamlInput_XYFocusKeyboardNavigationMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XYFocusKeyboardNavigation(this, value_abi))
    }

    public func get_XYFocusUpNavigationStrategy() throws -> MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        var _result: SWRT_MicrosoftUIXamlInput_XYFocusNavigationStrategy = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusUpNavigationStrategy(this, &_result))
        return MicrosoftUIXamlInput_XYFocusNavigationStrategy.fromABI(_result)
    }

    public func put_XYFocusUpNavigationStrategy(_ value: MicrosoftUIXamlInput_XYFocusNavigationStrategy) throws {
        let value_abi = MicrosoftUIXamlInput_XYFocusNavigationStrategy.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XYFocusUpNavigationStrategy(this, value_abi))
    }

    public func get_XYFocusDownNavigationStrategy() throws -> MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        var _result: SWRT_MicrosoftUIXamlInput_XYFocusNavigationStrategy = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusDownNavigationStrategy(this, &_result))
        return MicrosoftUIXamlInput_XYFocusNavigationStrategy.fromABI(_result)
    }

    public func put_XYFocusDownNavigationStrategy(_ value: MicrosoftUIXamlInput_XYFocusNavigationStrategy) throws {
        let value_abi = MicrosoftUIXamlInput_XYFocusNavigationStrategy.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XYFocusDownNavigationStrategy(this, value_abi))
    }

    public func get_XYFocusLeftNavigationStrategy() throws -> MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        var _result: SWRT_MicrosoftUIXamlInput_XYFocusNavigationStrategy = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusLeftNavigationStrategy(this, &_result))
        return MicrosoftUIXamlInput_XYFocusNavigationStrategy.fromABI(_result)
    }

    public func put_XYFocusLeftNavigationStrategy(_ value: MicrosoftUIXamlInput_XYFocusNavigationStrategy) throws {
        let value_abi = MicrosoftUIXamlInput_XYFocusNavigationStrategy.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XYFocusLeftNavigationStrategy(this, value_abi))
    }

    public func get_XYFocusRightNavigationStrategy() throws -> MicrosoftUIXamlInput_XYFocusNavigationStrategy {
        var _result: SWRT_MicrosoftUIXamlInput_XYFocusNavigationStrategy = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusRightNavigationStrategy(this, &_result))
        return MicrosoftUIXamlInput_XYFocusNavigationStrategy.fromABI(_result)
    }

    public func put_XYFocusRightNavigationStrategy(_ value: MicrosoftUIXamlInput_XYFocusNavigationStrategy) throws {
        let value_abi = MicrosoftUIXamlInput_XYFocusNavigationStrategy.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XYFocusRightNavigationStrategy(this, value_abi))
    }

    public func get_KeyboardAccelerators() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlInput_KeyboardAccelerator?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlInput_KeyboardAccelerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyboardAccelerators(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.KeyboardAccelerator.fromABI(consuming: &_result)
    }

    public func get_KeyboardAcceleratorPlacementTarget() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyboardAcceleratorPlacementTarget(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_KeyboardAcceleratorPlacementTarget(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_KeyboardAcceleratorPlacementTarget(this, value_abi))
    }

    public func get_KeyboardAcceleratorPlacementMode() throws -> MicrosoftUIXamlInput_KeyboardAcceleratorPlacementMode {
        var _result: SWRT_MicrosoftUIXamlInput_KeyboardAcceleratorPlacementMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyboardAcceleratorPlacementMode(this, &_result))
        return MicrosoftUIXamlInput_KeyboardAcceleratorPlacementMode.fromABI(_result)
    }

    public func put_KeyboardAcceleratorPlacementMode(_ value: MicrosoftUIXamlInput_KeyboardAcceleratorPlacementMode) throws {
        let value_abi = MicrosoftUIXamlInput_KeyboardAcceleratorPlacementMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_KeyboardAcceleratorPlacementMode(this, value_abi))
    }

    public func get_HighContrastAdjustment() throws -> MicrosoftUIXaml_ElementHighContrastAdjustment {
        var _result: SWRT_MicrosoftUIXaml_ElementHighContrastAdjustment = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HighContrastAdjustment(this, &_result))
        return MicrosoftUIXaml_ElementHighContrastAdjustment.fromABI(_result)
    }

    public func put_HighContrastAdjustment(_ value: MicrosoftUIXaml_ElementHighContrastAdjustment) throws {
        let value_abi = MicrosoftUIXaml_ElementHighContrastAdjustment.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HighContrastAdjustment(this, value_abi))
    }

    public func get_TabFocusNavigation() throws -> MicrosoftUIXamlInput_KeyboardNavigationMode {
        var _result: SWRT_MicrosoftUIXamlInput_KeyboardNavigationMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TabFocusNavigation(this, &_result))
        return MicrosoftUIXamlInput_KeyboardNavigationMode.fromABI(_result)
    }

    public func put_TabFocusNavigation(_ value: MicrosoftUIXamlInput_KeyboardNavigationMode) throws {
        let value_abi = MicrosoftUIXamlInput_KeyboardNavigationMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TabFocusNavigation(this, value_abi))
    }

    public func get_OpacityTransition() throws -> MicrosoftUIXaml_ScalarTransition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IScalarTransition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OpacityTransition(this, &_result))
        return MicrosoftUIXaml_ScalarTransitionBinding.fromABI(consuming: &_result)
    }

    public func put_OpacityTransition(_ value: MicrosoftUIXaml_ScalarTransition?) throws {
        var value_abi = try MicrosoftUIXaml_ScalarTransitionBinding.toABI(value)
        defer { MicrosoftUIXaml_ScalarTransitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_OpacityTransition(this, value_abi))
    }

    public func get_Translation() throws -> WindowsFoundationNumerics_Vector3 {
        var _result: SWRT_WindowsFoundationNumerics_Vector3 = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Translation(this, &_result))
        return WindowsFoundationNumerics_Vector3.fromABI(_result)
    }

    public func put_Translation(_ value: WindowsFoundationNumerics_Vector3) throws {
        let value_abi = WindowsFoundationNumerics_Vector3.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Translation(this, value_abi))
    }

    public func get_TranslationTransition() throws -> MicrosoftUIXaml_Vector3Transition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IVector3Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TranslationTransition(this, &_result))
        return MicrosoftUIXaml_Vector3TransitionBinding.fromABI(consuming: &_result)
    }

    public func put_TranslationTransition(_ value: MicrosoftUIXaml_Vector3Transition?) throws {
        var value_abi = try MicrosoftUIXaml_Vector3TransitionBinding.toABI(value)
        defer { MicrosoftUIXaml_Vector3TransitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TranslationTransition(this, value_abi))
    }

    public func get_Rotation() throws -> Swift.Float {
        var _result: Swift.Float = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Rotation(this, &_result))
        return _result
    }

    public func put_Rotation(_ value: Swift.Float) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Rotation(this, value))
    }

    public func get_RotationTransition() throws -> MicrosoftUIXaml_ScalarTransition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IScalarTransition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RotationTransition(this, &_result))
        return MicrosoftUIXaml_ScalarTransitionBinding.fromABI(consuming: &_result)
    }

    public func put_RotationTransition(_ value: MicrosoftUIXaml_ScalarTransition?) throws {
        var value_abi = try MicrosoftUIXaml_ScalarTransitionBinding.toABI(value)
        defer { MicrosoftUIXaml_ScalarTransitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RotationTransition(this, value_abi))
    }

    public func get_Scale() throws -> WindowsFoundationNumerics_Vector3 {
        var _result: SWRT_WindowsFoundationNumerics_Vector3 = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Scale(this, &_result))
        return WindowsFoundationNumerics_Vector3.fromABI(_result)
    }

    public func put_Scale(_ value: WindowsFoundationNumerics_Vector3) throws {
        let value_abi = WindowsFoundationNumerics_Vector3.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Scale(this, value_abi))
    }

    public func get_ScaleTransition() throws -> MicrosoftUIXaml_Vector3Transition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IVector3Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ScaleTransition(this, &_result))
        return MicrosoftUIXaml_Vector3TransitionBinding.fromABI(consuming: &_result)
    }

    public func put_ScaleTransition(_ value: MicrosoftUIXaml_Vector3Transition?) throws {
        var value_abi = try MicrosoftUIXaml_Vector3TransitionBinding.toABI(value)
        defer { MicrosoftUIXaml_Vector3TransitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ScaleTransition(this, value_abi))
    }

    public func get_TransformMatrix() throws -> WindowsFoundationNumerics_Matrix4x4 {
        var _result: SWRT_WindowsFoundationNumerics_Matrix4x4 = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TransformMatrix(this, &_result))
        return WindowsFoundationNumerics_Matrix4x4.fromABI(_result)
    }

    public func put_TransformMatrix(_ value: WindowsFoundationNumerics_Matrix4x4) throws {
        let value_abi = WindowsFoundationNumerics_Matrix4x4.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TransformMatrix(this, value_abi))
    }

    public func get_CenterPoint() throws -> WindowsFoundationNumerics_Vector3 {
        var _result: SWRT_WindowsFoundationNumerics_Vector3 = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CenterPoint(this, &_result))
        return WindowsFoundationNumerics_Vector3.fromABI(_result)
    }

    public func put_CenterPoint(_ value: WindowsFoundationNumerics_Vector3) throws {
        let value_abi = WindowsFoundationNumerics_Vector3.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CenterPoint(this, value_abi))
    }

    public func get_RotationAxis() throws -> WindowsFoundationNumerics_Vector3 {
        var _result: SWRT_WindowsFoundationNumerics_Vector3 = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RotationAxis(this, &_result))
        return WindowsFoundationNumerics_Vector3.fromABI(_result)
    }

    public func put_RotationAxis(_ value: WindowsFoundationNumerics_Vector3) throws {
        let value_abi = WindowsFoundationNumerics_Vector3.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RotationAxis(this, value_abi))
    }

    public func get_ActualOffset() throws -> WindowsFoundationNumerics_Vector3 {
        var _result: SWRT_WindowsFoundationNumerics_Vector3 = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualOffset(this, &_result))
        return WindowsFoundationNumerics_Vector3.fromABI(_result)
    }

    public func get_ActualSize() throws -> WindowsFoundationNumerics_Vector2 {
        var _result: SWRT_WindowsFoundationNumerics_Vector2 = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualSize(this, &_result))
        return WindowsFoundationNumerics_Vector2.fromABI(_result)
    }

    public func get_XamlRoot() throws -> MicrosoftUIXaml_XamlRoot? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IXamlRoot>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XamlRoot(this, &_result))
        return MicrosoftUIXaml_XamlRootBinding.fromABI(consuming: &_result)
    }

    public func put_XamlRoot(_ value: MicrosoftUIXaml_XamlRoot?) throws {
        var value_abi = try MicrosoftUIXaml_XamlRootBinding.toABI(value)
        defer { MicrosoftUIXaml_XamlRootBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XamlRoot(this, value_abi))
    }

    public func get_Shadow() throws -> MicrosoftUIXamlMedia_Shadow? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IShadow>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Shadow(this, &_result))
        return MicrosoftUIXamlMedia_ShadowBinding.fromABI(consuming: &_result)
    }

    public func put_Shadow(_ value: MicrosoftUIXamlMedia_Shadow?) throws {
        var value_abi = try MicrosoftUIXamlMedia_ShadowBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_ShadowBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Shadow(this, value_abi))
    }

    public func get_RasterizationScale() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RasterizationScale(this, &_result))
        return _result
    }

    public func put_RasterizationScale(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RasterizationScale(this, value))
    }

    public func get_FocusState() throws -> MicrosoftUIXaml_FocusState {
        var _result: SWRT_MicrosoftUIXaml_FocusState = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusState(this, &_result))
        return MicrosoftUIXaml_FocusState.fromABI(_result)
    }

    public func get_UseSystemFocusVisuals() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UseSystemFocusVisuals(this, &_result))
        return _result
    }

    public func put_UseSystemFocusVisuals(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_UseSystemFocusVisuals(this, value))
    }

    public func get_XYFocusLeft() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusLeft(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_XYFocusLeft(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XYFocusLeft(this, value_abi))
    }

    public func get_XYFocusRight() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusRight(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_XYFocusRight(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XYFocusRight(this, value_abi))
    }

    public func get_XYFocusUp() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusUp(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_XYFocusUp(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XYFocusUp(this, value_abi))
    }

    public func get_XYFocusDown() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusDown(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_XYFocusDown(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XYFocusDown(this, value_abi))
    }

    public func get_IsTabStop() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTabStop(this, &_result))
        return _result
    }

    public func put_IsTabStop(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsTabStop(this, value))
    }

    public func get_TabIndex() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TabIndex(this, &_result))
        return _result
    }

    public func put_TabIndex(_ value: Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TabIndex(this, value))
    }

    public func add_KeyUp(_ handler: MicrosoftUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_KeyEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_KeyEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_KeyUp(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_KeyUp(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_KeyUp(this, token_abi))
    }

    public func add_KeyDown(_ handler: MicrosoftUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_KeyEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_KeyEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_KeyDown(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_KeyDown(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_KeyDown(this, token_abi))
    }

    public func add_GotFocus(_ handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_RoutedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_RoutedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_GotFocus(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_GotFocus(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_GotFocus(this, token_abi))
    }

    public func add_LostFocus(_ handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_RoutedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_RoutedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_LostFocus(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_LostFocus(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_LostFocus(this, token_abi))
    }

    public func add_DragStarting(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_DragStartingEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_DragStartingEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_DragStartingEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DragStarting(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DragStarting(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DragStarting(this, token_abi))
    }

    public func add_DropCompleted(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_DropCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_DropCompletedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_DropCompletedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DropCompleted(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DropCompleted(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DropCompleted(this, token_abi))
    }

    public func add_CharacterReceived(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_CharacterReceivedRoutedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_CharacterReceivedRoutedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_CharacterReceived(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_CharacterReceived(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_CharacterReceived(this, token_abi))
    }

    public func add_DragEnter(_ handler: MicrosoftUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_DragEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_DragEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DragEnter(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DragEnter(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DragEnter(this, token_abi))
    }

    public func add_DragLeave(_ handler: MicrosoftUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_DragEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_DragEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DragLeave(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DragLeave(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DragLeave(this, token_abi))
    }

    public func add_DragOver(_ handler: MicrosoftUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_DragEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_DragEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DragOver(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DragOver(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DragOver(this, token_abi))
    }

    public func add_Drop(_ handler: MicrosoftUIXaml_DragEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_DragEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_DragEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Drop(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Drop(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Drop(this, token_abi))
    }

    public func add_PointerPressed(_ handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_PointerEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_PointerEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PointerPressed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PointerPressed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PointerPressed(this, token_abi))
    }

    public func add_PointerMoved(_ handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_PointerEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_PointerEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PointerMoved(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PointerMoved(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PointerMoved(this, token_abi))
    }

    public func add_PointerReleased(_ handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_PointerEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_PointerEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PointerReleased(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PointerReleased(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PointerReleased(this, token_abi))
    }

    public func add_PointerEntered(_ handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_PointerEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_PointerEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PointerEntered(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PointerEntered(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PointerEntered(this, token_abi))
    }

    public func add_PointerExited(_ handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_PointerEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_PointerEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PointerExited(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PointerExited(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PointerExited(this, token_abi))
    }

    public func add_PointerCaptureLost(_ handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_PointerEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_PointerEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PointerCaptureLost(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PointerCaptureLost(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PointerCaptureLost(this, token_abi))
    }

    public func add_PointerCanceled(_ handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_PointerEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_PointerEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PointerCanceled(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PointerCanceled(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PointerCanceled(this, token_abi))
    }

    public func add_PointerWheelChanged(_ handler: MicrosoftUIXamlInput_PointerEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_PointerEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_PointerEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PointerWheelChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PointerWheelChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PointerWheelChanged(this, token_abi))
    }

    public func add_Tapped(_ handler: MicrosoftUIXamlInput_TappedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_TappedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_TappedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Tapped(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Tapped(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Tapped(this, token_abi))
    }

    public func add_DoubleTapped(_ handler: MicrosoftUIXamlInput_DoubleTappedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_DoubleTappedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_DoubleTappedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DoubleTapped(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DoubleTapped(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DoubleTapped(this, token_abi))
    }

    public func add_Holding(_ handler: MicrosoftUIXamlInput_HoldingEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_HoldingEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_HoldingEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Holding(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Holding(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Holding(this, token_abi))
    }

    public func add_ContextRequested(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_ContextRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_ContextRequestedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_ContextRequestedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ContextRequested(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ContextRequested(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ContextRequested(this, token_abi))
    }

    public func add_ContextCanceled(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_RoutedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_RoutedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_RoutedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ContextCanceled(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ContextCanceled(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ContextCanceled(this, token_abi))
    }

    public func add_RightTapped(_ handler: MicrosoftUIXamlInput_RightTappedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_RightTappedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_RightTappedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_RightTapped(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_RightTapped(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_RightTapped(this, token_abi))
    }

    public func add_ManipulationStarting(_ handler: MicrosoftUIXamlInput_ManipulationStartingEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_ManipulationStartingEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_ManipulationStartingEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ManipulationStarting(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ManipulationStarting(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ManipulationStarting(this, token_abi))
    }

    public func add_ManipulationInertiaStarting(_ handler: MicrosoftUIXamlInput_ManipulationInertiaStartingEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_ManipulationInertiaStartingEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_ManipulationInertiaStartingEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ManipulationInertiaStarting(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ManipulationInertiaStarting(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ManipulationInertiaStarting(this, token_abi))
    }

    public func add_ManipulationStarted(_ handler: MicrosoftUIXamlInput_ManipulationStartedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_ManipulationStartedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_ManipulationStartedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ManipulationStarted(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ManipulationStarted(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ManipulationStarted(this, token_abi))
    }

    public func add_ManipulationDelta(_ handler: MicrosoftUIXamlInput_ManipulationDeltaEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_ManipulationDeltaEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_ManipulationDeltaEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ManipulationDelta(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ManipulationDelta(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ManipulationDelta(this, token_abi))
    }

    public func add_ManipulationCompleted(_ handler: MicrosoftUIXamlInput_ManipulationCompletedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_ManipulationCompletedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_ManipulationCompletedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ManipulationCompleted(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ManipulationCompleted(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ManipulationCompleted(this, token_abi))
    }

    public func add_AccessKeyDisplayRequested(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_AccessKeyDisplayRequestedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_AccessKeyDisplayRequestedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_AccessKeyDisplayRequested(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_AccessKeyDisplayRequested(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_AccessKeyDisplayRequested(this, token_abi))
    }

    public func add_AccessKeyDisplayDismissed(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_AccessKeyDisplayDismissedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_AccessKeyDisplayDismissedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_AccessKeyDisplayDismissed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_AccessKeyDisplayDismissed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_AccessKeyDisplayDismissed(this, token_abi))
    }

    public func add_AccessKeyInvoked(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_AccessKeyInvokedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_AccessKeyInvokedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_AccessKeyInvokedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_AccessKeyInvoked(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_AccessKeyInvoked(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_AccessKeyInvoked(this, token_abi))
    }

    public func add_ProcessKeyboardAccelerators(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_ProcessKeyboardAcceleratorEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_ProcessKeyboardAcceleratorEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ProcessKeyboardAccelerators(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ProcessKeyboardAccelerators(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ProcessKeyboardAccelerators(this, token_abi))
    }

    public func add_GettingFocus(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_GettingFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_GettingFocusEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_GettingFocusEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_GettingFocus(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_GettingFocus(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_GettingFocus(this, token_abi))
    }

    public func add_LosingFocus(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_LosingFocusEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_LosingFocusEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_LosingFocusEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_LosingFocus(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_LosingFocus(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_LosingFocus(this, token_abi))
    }

    public func add_NoFocusCandidateFound(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_NoFocusCandidateFoundEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_NoFocusCandidateFoundEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_NoFocusCandidateFound(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_NoFocusCandidateFound(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_NoFocusCandidateFound(this, token_abi))
    }

    public func add_PreviewKeyDown(_ handler: MicrosoftUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_KeyEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_KeyEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PreviewKeyDown(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PreviewKeyDown(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PreviewKeyDown(this, token_abi))
    }

    public func add_PreviewKeyUp(_ handler: MicrosoftUIXamlInput_KeyEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlInput_KeyEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlInput_KeyEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PreviewKeyUp(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PreviewKeyUp(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PreviewKeyUp(this, token_abi))
    }

    public func add_BringIntoViewRequested(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_BringIntoViewRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.UIElement_BringIntoViewRequestedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.UIElement_BringIntoViewRequestedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_BringIntoViewRequested(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_BringIntoViewRequested(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_BringIntoViewRequested(this, token_abi))
    }

    public func measure(_ availableSize: WindowsFoundation_Size) throws {
        let availableSize_abi = WindowsFoundation_Size.toABI(availableSize)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Measure(this, availableSize_abi))
    }

    public func arrange(_ finalRect: WindowsFoundation_Rect) throws {
        let finalRect_abi = WindowsFoundation_Rect.toABI(finalRect)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Arrange(this, finalRect_abi))
    }

    public func capturePointer(_ value: MicrosoftUIXamlInput_Pointer?) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlInput_PointerBinding.toABI(value)
        defer { MicrosoftUIXamlInput_PointerBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CapturePointer(this, value_abi, &_result))
        return _result
    }

    public func releasePointerCapture(_ value: MicrosoftUIXamlInput_Pointer?) throws {
        var value_abi = try MicrosoftUIXamlInput_PointerBinding.toABI(value)
        defer { MicrosoftUIXamlInput_PointerBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReleasePointerCapture(this, value_abi))
    }

    public func releasePointerCaptures() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReleasePointerCaptures(this))
    }

    public func addHandler(_ routedEvent: MicrosoftUIXaml_RoutedEvent?, _ handler: WindowsRuntime.IInspectable?, _ handledEventsToo: Swift.Bool) throws {
        var routedEvent_abi = try MicrosoftUIXaml_RoutedEventBinding.toABI(routedEvent)
        defer { MicrosoftUIXaml_RoutedEventBinding.release(&routedEvent_abi) }
        var handler_abi = try WindowsRuntime.IInspectableBinding.toABI(handler)
        defer { WindowsRuntime.IInspectableBinding.release(&handler_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.AddHandler(this, routedEvent_abi, handler_abi, handledEventsToo))
    }

    public func removeHandler(_ routedEvent: MicrosoftUIXaml_RoutedEvent?, _ handler: WindowsRuntime.IInspectable?) throws {
        var routedEvent_abi = try MicrosoftUIXaml_RoutedEventBinding.toABI(routedEvent)
        defer { MicrosoftUIXaml_RoutedEventBinding.release(&routedEvent_abi) }
        var handler_abi = try WindowsRuntime.IInspectableBinding.toABI(handler)
        defer { WindowsRuntime.IInspectableBinding.release(&handler_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveHandler(this, routedEvent_abi, handler_abi))
    }

    public func transformToVisual(_ visual: MicrosoftUIXaml_UIElement?) throws -> MicrosoftUIXamlMedia_GeneralTransform? {
        var visual_abi = try MicrosoftUIXaml_UIElementBinding.toABI(visual)
        defer { MicrosoftUIXaml_UIElementBinding.release(&visual_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IGeneralTransform>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TransformToVisual(this, visual_abi, &_result))
        return MicrosoftUIXamlMedia_GeneralTransformBinding.fromABI(consuming: &_result)
    }

    public func invalidateMeasure() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InvalidateMeasure(this))
    }

    public func invalidateArrange() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InvalidateArrange(this))
    }

    public func updateLayout() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.UpdateLayout(this))
    }

    public func cancelDirectManipulations() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CancelDirectManipulations(this, &_result))
        return _result
    }

    public func startDragAsync(_ pointerPoint: MicrosoftUIInput_PointerPoint?) throws -> WindowsFoundation_IAsyncOperation<WindowsApplicationModelDataTransfer_DataPackageOperation>? {
        var pointerPoint_abi = try MicrosoftUIInput_PointerPointBinding.toABI(pointerPoint)
        defer { MicrosoftUIInput_PointerPointBinding.release(&pointerPoint_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IAsyncOperation_WindowsApplicationModelDataTransfer_DataPackageOperation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.StartDragAsync(this, pointerPoint_abi, &_result))
        return WindowsFoundation_IAsyncOperationBinding.DataPackageOperation.fromABI(consuming: &_result)
    }

    public func startBringIntoView() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.StartBringIntoView(this))
    }

    public func startBringIntoViewWithOptions(_ options: MicrosoftUIXaml_BringIntoViewOptions?) throws {
        var options_abi = try MicrosoftUIXaml_BringIntoViewOptionsBinding.toABI(options)
        defer { MicrosoftUIXaml_BringIntoViewOptionsBinding.release(&options_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.StartBringIntoViewWithOptions(this, options_abi))
    }

    public func tryInvokeKeyboardAccelerator(_ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        var args_abi = try MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryInvokeKeyboardAccelerator(this, args_abi))
    }

    public func focus(_ value: MicrosoftUIXaml_FocusState) throws -> Swift.Bool {
        let value_abi = MicrosoftUIXaml_FocusState.toABI(value)
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Focus(this, value_abi, &_result))
        return _result
    }

    public func startAnimation(_ animation: MicrosoftUIComposition_ICompositionAnimationBase?) throws {
        var animation_abi = try MicrosoftUIComposition_ICompositionAnimationBaseBinding.toABI(animation)
        defer { MicrosoftUIComposition_ICompositionAnimationBaseBinding.release(&animation_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.StartAnimation(this, animation_abi))
    }

    public func stopAnimation(_ animation: MicrosoftUIComposition_ICompositionAnimationBase?) throws {
        var animation_abi = try MicrosoftUIComposition_ICompositionAnimationBaseBinding.toABI(animation)
        defer { MicrosoftUIComposition_ICompositionAnimationBaseBinding.release(&animation_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.StopAnimation(this, animation_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IUIElementFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IUIElementFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x14D1D309, 0xADD0, 0x5CCB, 0xB946, 0x77488CD70F87)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IUIElementFactory {
}

// MARK: Microsoft.UI.Xaml.IUIElementOverrides

public func uuidof(_: SWRT_MicrosoftUIXaml_IUIElementOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9034F41E, 0xAB7B, 0x59E7, 0x8168, 0x50DE6B689DDE)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IUIElementOverrides {
    public func onCreateAutomationPeer() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnCreateAutomationPeer(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    public func onDisconnectVisualChildren() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnDisconnectVisualChildren(this))
    }

    public func findSubElementsForTouchTargeting(_ point: WindowsFoundation_Point, _ boundingRect: WindowsFoundation_Rect) throws -> WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IIterable<WindowsFoundation_Point>?>? {
        let point_abi = WindowsFoundation_Point.toABI(point)
        let boundingRect_abi = WindowsFoundation_Rect.toABI(boundingRect)
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IIterable_WindowsFoundation_Point>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.FindSubElementsForTouchTargeting(this, point_abi, boundingRect_abi, &_result))
        return WindowsFoundationCollections_IIterableBinding.IIterable_Point.fromABI(consuming: &_result)
    }

    public func getChildrenInTabFocusOrder() throws -> WindowsFoundationCollections_IIterable<MicrosoftUIXaml_DependencyObject?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_DependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetChildrenInTabFocusOrder(this, &_result))
        return WindowsFoundationCollections_IIterableBinding.DependencyObject.fromABI(consuming: &_result)
    }

    public func onKeyboardAcceleratorInvoked(_ args: MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs?) throws {
        var args_abi = try MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnKeyboardAcceleratorInvoked(this, args_abi))
    }

    public func onProcessKeyboardAccelerators(_ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        var args_abi = try MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnProcessKeyboardAccelerators(this, args_abi))
    }

    public func onBringIntoViewRequested(_ e: MicrosoftUIXaml_BringIntoViewRequestedEventArgs?) throws {
        var e_abi = try MicrosoftUIXaml_BringIntoViewRequestedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_BringIntoViewRequestedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnBringIntoViewRequested(this, e_abi))
    }

    public func populatePropertyInfoOverride(_ propertyName: Swift.String, _ animationPropertyInfo: MicrosoftUIComposition_AnimationPropertyInfo?) throws {
        var propertyName_abi = try WindowsRuntime.StringBinding.toABI(propertyName)
        defer { WindowsRuntime.StringBinding.release(&propertyName_abi) }
        var animationPropertyInfo_abi = try MicrosoftUIComposition_AnimationPropertyInfoBinding.toABI(animationPropertyInfo)
        defer { MicrosoftUIComposition_AnimationPropertyInfoBinding.release(&animationPropertyInfo_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.PopulatePropertyInfoOverride(this, propertyName_abi, animationPropertyInfo_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IUIElementProtected

public func uuidof(_: SWRT_MicrosoftUIXaml_IUIElementProtected.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8F69B9E9, 0x1F00, 0x5834, 0x9BF1, 0xA9257BED39F0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IUIElementProtected {
    public func get_ProtectedCursor() throws -> MicrosoftUIInput_InputCursor? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIInput_IInputCursor>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ProtectedCursor(this, &_result))
        return MicrosoftUIInput_InputCursorBinding.fromABI(consuming: &_result)
    }

    public func put_ProtectedCursor(_ value: MicrosoftUIInput_InputCursor?) throws {
        var value_abi = try MicrosoftUIInput_InputCursorBinding.toABI(value)
        defer { MicrosoftUIInput_InputCursorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ProtectedCursor(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IUIElementStatics

public func uuidof(_: SWRT_MicrosoftUIXaml_IUIElementStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD2921D87, 0x3584, 0x5E22, 0x8A3A, 0xC2C78DAB4F6E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IUIElementStatics {
    public func get_KeyDownEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyDownEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_KeyUpEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyUpEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PointerEnteredEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerEnteredEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PointerPressedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerPressedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PointerMovedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerMovedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PointerReleasedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerReleasedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PointerExitedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerExitedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PointerCaptureLostEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerCaptureLostEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PointerCanceledEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerCanceledEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PointerWheelChangedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerWheelChangedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_TappedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TappedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_DoubleTappedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DoubleTappedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_HoldingEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HoldingEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_RightTappedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RightTappedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_ManipulationStartingEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ManipulationStartingEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_ManipulationInertiaStartingEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ManipulationInertiaStartingEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_ManipulationStartedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ManipulationStartedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_ManipulationDeltaEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ManipulationDeltaEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_ManipulationCompletedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ManipulationCompletedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_DragEnterEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DragEnterEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_DragLeaveEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DragLeaveEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_DragOverEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DragOverEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_DropEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DropEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_GettingFocusEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_GettingFocusEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_LosingFocusEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LosingFocusEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_NoFocusCandidateFoundEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_NoFocusCandidateFoundEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PreviewKeyDownEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PreviewKeyDownEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_CharacterReceivedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CharacterReceivedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_PreviewKeyUpEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PreviewKeyUpEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_BringIntoViewRequestedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BringIntoViewRequestedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_ContextRequestedEvent() throws -> MicrosoftUIXaml_RoutedEvent? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IRoutedEvent>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContextRequestedEvent(this, &_result))
        return MicrosoftUIXaml_RoutedEventBinding.fromABI(consuming: &_result)
    }

    public func get_AllowDropProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowDropProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_OpacityProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OpacityProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ClipProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ClipProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_RenderTransformProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RenderTransformProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ProjectionProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ProjectionProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_Transform3DProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Transform3DProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_RenderTransformOriginProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RenderTransformOriginProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsHitTestVisibleProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsHitTestVisibleProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_VisibilityProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VisibilityProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_UseLayoutRoundingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UseLayoutRoundingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TransitionsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TransitionsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CacheModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CacheModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsTapEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTapEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsDoubleTapEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsDoubleTapEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CanDragProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanDragProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsRightTapEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsRightTapEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsHoldingEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsHoldingEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ManipulationModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ManipulationModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_PointerCapturesProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerCapturesProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ContextFlyoutProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContextFlyoutProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CompositeModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CompositeModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_LightsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LightsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CanBeScrollAnchorProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanBeScrollAnchorProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ExitDisplayModeOnAccessKeyInvokedProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ExitDisplayModeOnAccessKeyInvokedProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsAccessKeyScopeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsAccessKeyScopeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AccessKeyScopeOwnerProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AccessKeyScopeOwnerProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AccessKeyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AccessKeyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_KeyTipPlacementModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipPlacementModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_KeyTipHorizontalOffsetProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipHorizontalOffsetProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_KeyTipVerticalOffsetProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipVerticalOffsetProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_KeyTipTargetProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipTargetProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_XYFocusKeyboardNavigationProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusKeyboardNavigationProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_XYFocusUpNavigationStrategyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusUpNavigationStrategyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_XYFocusDownNavigationStrategyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusDownNavigationStrategyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_XYFocusLeftNavigationStrategyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusLeftNavigationStrategyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_XYFocusRightNavigationStrategyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusRightNavigationStrategyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_KeyboardAcceleratorPlacementTargetProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyboardAcceleratorPlacementTargetProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_KeyboardAcceleratorPlacementModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyboardAcceleratorPlacementModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_HighContrastAdjustmentProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HighContrastAdjustmentProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TabFocusNavigationProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TabFocusNavigationProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ShadowProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ShadowProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FocusStateProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusStateProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_UseSystemFocusVisualsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UseSystemFocusVisualsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_XYFocusLeftProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusLeftProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_XYFocusRightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusRightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_XYFocusUpProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusUpProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_XYFocusDownProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XYFocusDownProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsTabStopProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTabStopProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TabIndexProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TabIndexProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func tryStartDirectManipulation(_ value: MicrosoftUIXamlInput_Pointer?) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlInput_PointerBinding.toABI(value)
        defer { MicrosoftUIXamlInput_PointerBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryStartDirectManipulation(this, value_abi, &_result))
        return _result
    }

    public func registerAsScrollPort(_ element: MicrosoftUIXaml_UIElement?) throws {
        var element_abi = try MicrosoftUIXaml_UIElementBinding.toABI(element)
        defer { MicrosoftUIXaml_UIElementBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RegisterAsScrollPort(this, element_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IUnhandledExceptionEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IUnhandledExceptionEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x59EAEBA9, 0x8F9C, 0x5BE7, 0x9B3B, 0x820960FAA220)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IUnhandledExceptionEventArgs {
    public func get_Exception() throws -> COM.HResult {
        var _result: SWRT_HResult = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Exception(this, &_result))
        return COM.HResultBinding.fromABI(_result)
    }

    public func get_Message() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Message(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.IVector3Transition

public func uuidof(_: SWRT_MicrosoftUIXaml_IVector3Transition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0C408BB9, 0xF9A2, 0x55D7, 0x8AED, 0x143D36D603F2)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IVector3Transition {
    public func get_Duration() throws -> WindowsFoundation_TimeSpan {
        var _result: SWRT_WindowsFoundation_TimeSpan = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Duration(this, &_result))
        return WindowsFoundation_TimeSpan.fromABI(_result)
    }

    public func put_Duration(_ value: WindowsFoundation_TimeSpan) throws {
        let value_abi = WindowsFoundation_TimeSpan.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Duration(this, value_abi))
    }

    public func get_Components() throws -> MicrosoftUIXaml_Vector3TransitionComponents {
        var _result: SWRT_MicrosoftUIXaml_Vector3TransitionComponents = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Components(this, &_result))
        return MicrosoftUIXaml_Vector3TransitionComponents.fromABI(_result)
    }

    public func put_Components(_ value: MicrosoftUIXaml_Vector3TransitionComponents) throws {
        let value_abi = MicrosoftUIXaml_Vector3TransitionComponents.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Components(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IVector3TransitionFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IVector3TransitionFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA3A084FC, 0xB965, 0x534B, 0x900F, 0x78E288129232)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IVector3TransitionFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IVector3Transition> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IVector3Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IWindow

public func uuidof(_: SWRT_MicrosoftUIXaml_IWindow.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x61F0EC79, 0x5D52, 0x56B5, 0x86FB, 0x40FA4AF288B0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IWindow {
    public func get_Bounds() throws -> WindowsFoundation_Rect {
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Bounds(this, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }

    public func get_Visible() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Visible(this, &_result))
        return _result
    }

    public func get_Content() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Content(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func put_Content(_ value: MicrosoftUIXaml_UIElement?) throws {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Content(this, value_abi))
    }

    public func get_CoreWindow() throws -> WindowsUICore_CoreWindow? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsUICore_ICoreWindow>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CoreWindow(this, &_result))
        return WindowsUICore_CoreWindowBinding.fromABI(consuming: &_result)
    }

    public func get_Compositor() throws -> MicrosoftUIComposition_Compositor? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIComposition_ICompositor>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Compositor(this, &_result))
        return MicrosoftUIComposition_CompositorBinding.fromABI(consuming: &_result)
    }

    public func get_Dispatcher() throws -> WindowsUICore_CoreDispatcher? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsUICore_ICoreDispatcher>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Dispatcher(this, &_result))
        return WindowsUICore_CoreDispatcherBinding.fromABI(consuming: &_result)
    }

    public func get_DispatcherQueue() throws -> MicrosoftUIDispatching_DispatcherQueue? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIDispatching_IDispatcherQueue>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DispatcherQueue(this, &_result))
        return MicrosoftUIDispatching_DispatcherQueueBinding.fromABI(consuming: &_result)
    }

    public func get_Title() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Title(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_Title(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Title(this, value_abi))
    }

    public func get_ExtendsContentIntoTitleBar() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ExtendsContentIntoTitleBar(this, &_result))
        return _result
    }

    public func put_ExtendsContentIntoTitleBar(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ExtendsContentIntoTitleBar(this, value))
    }

    public func add_Activated(_ handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowActivatedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.Object_WindowActivatedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.Object_WindowActivatedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Activated(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Activated(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Activated(this, token_abi))
    }

    public func add_Closed(_ handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.Object_WindowEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.Object_WindowEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Closed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Closed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Closed(this, token_abi))
    }

    public func add_SizeChanged(_ handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowSizeChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.Object_WindowSizeChangedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.Object_WindowSizeChangedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_SizeChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_SizeChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_SizeChanged(this, token_abi))
    }

    public func add_VisibilityChanged(_ handler: WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowVisibilityChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.Object_WindowVisibilityChangedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.Object_WindowVisibilityChangedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_VisibilityChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_VisibilityChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_VisibilityChanged(this, token_abi))
    }

    public func activate() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Activate(this))
    }

    public func close() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Close(this))
    }

    public func setTitleBar(_ titleBar: MicrosoftUIXaml_UIElement?) throws {
        var titleBar_abi = try MicrosoftUIXaml_UIElementBinding.toABI(titleBar)
        defer { MicrosoftUIXaml_UIElementBinding.release(&titleBar_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetTitleBar(this, titleBar_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IWindow2

public func uuidof(_: SWRT_MicrosoftUIXaml_IWindow2.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x42FEBAA5, 0x1C32, 0x522A, 0xA591, 0x57618C6F665D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IWindow2 {
    public func get_SystemBackdrop() throws -> MicrosoftUIXamlMedia_SystemBackdrop? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ISystemBackdrop>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SystemBackdrop(this, &_result))
        return MicrosoftUIXamlMedia_SystemBackdropBinding.fromABI(consuming: &_result)
    }

    public func put_SystemBackdrop(_ value: MicrosoftUIXamlMedia_SystemBackdrop?) throws {
        var value_abi = try MicrosoftUIXamlMedia_SystemBackdropBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_SystemBackdropBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SystemBackdrop(this, value_abi))
    }

    public func get_AppWindow() throws -> MicrosoftUIWindowing_AppWindow? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIWindowing_IAppWindow>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AppWindow(this, &_result))
        return MicrosoftUIWindowing_AppWindowBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IWindowActivatedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IWindowActivatedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC723A5EA, 0x82C4, 0x5DD6, 0x861B, 0x70EF573B88D6)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IWindowActivatedEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_WindowActivationState() throws -> MicrosoftUIXaml_WindowActivationState {
        var _result: SWRT_MicrosoftUIXaml_WindowActivationState = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_WindowActivationState(this, &_result))
        return MicrosoftUIXaml_WindowActivationState.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.IWindowEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IWindowEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1140827C, 0xFE0A, 0x5268, 0xBC2B, 0xF4492C2CCB49)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IWindowEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.IWindowFactory

public func uuidof(_: SWRT_MicrosoftUIXaml_IWindowFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF0441536, 0xAFEF, 0x5222, 0x918F, 0x324A9B2DEC75)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IWindowFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXaml_IWindow> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IWindow>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.IWindowSizeChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IWindowSizeChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x542F6F2C, 0x4B64, 0x5C72, 0xA7A5, 0x3A7E0664B8FF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IWindowSizeChangedEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_Size() throws -> WindowsFoundation_Size {
        var _result: SWRT_WindowsFoundation_Size = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return WindowsFoundation_Size.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.IWindowStatics

public func uuidof(_: SWRT_MicrosoftUIXaml_IWindowStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8CC985E3, 0xA41A, 0x5DF4, 0xB531, 0xD3A1788D86C5)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IWindowStatics {
    public func get_Current() throws -> MicrosoftUIXaml_Window? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IWindow>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXaml_WindowBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IWindowVisibilityChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7BB24A6D, 0x070C, 0x5CB6, 0x8E9C, 0x547905BE8265)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IWindowVisibilityChangedEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_Visible() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Visible(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.IXamlResourceReferenceFailedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IXamlResourceReferenceFailedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1B175EE6, 0xD08B, 0x50FF, 0x8F89, 0xA1FF27EDEF66)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IXamlResourceReferenceFailedEventArgs {
    public func get_Message() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Message(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IXamlRoot

public func uuidof(_: SWRT_MicrosoftUIXaml_IXamlRoot.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x60CB215A, 0xAD15, 0x520A, 0x8B01, 0x4416824F0441)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IXamlRoot {
    public func get_Content() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Content(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func get_Size() throws -> WindowsFoundation_Size {
        var _result: SWRT_WindowsFoundation_Size = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return WindowsFoundation_Size.fromABI(_result)
    }

    public func get_RasterizationScale() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RasterizationScale(this, &_result))
        return _result
    }

    public func get_IsHostVisible() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsHostVisible(this, &_result))
        return _result
    }

    public func add_Changed(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_XamlRoot?, MicrosoftUIXaml_XamlRootChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.XamlRoot_XamlRootChangedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.XamlRoot_XamlRootChangedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Changed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Changed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Changed(this, token_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IXamlRoot2

public func uuidof(_: SWRT_MicrosoftUIXaml_IXamlRoot2.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xBDEE0F42, 0x71CB, 0x50C5, 0x829B, 0x4614D98C5794)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IXamlRoot2 {
    public func get_ContentIslandEnvironment() throws -> MicrosoftUIContent_ContentIslandEnvironment? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIContent_IContentIslandEnvironment>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentIslandEnvironment(this, &_result))
        return MicrosoftUIContent_ContentIslandEnvironmentBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IXamlRoot3

public func uuidof(_: SWRT_MicrosoftUIXaml_IXamlRoot3.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB71DBF3B, 0x2E0F, 0x5DE0, 0xAC68, 0xF0C1F65114C8)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IXamlRoot3 {
    public func get_CoordinateConverter() throws -> MicrosoftUIContent_ContentCoordinateConverter? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIContent_IContentCoordinateConverter>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CoordinateConverter(this, &_result))
        return MicrosoftUIContent_ContentCoordinateConverterBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.IXamlRootChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXaml_IXamlRootChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x61D2C719, 0xF8A1, 0x515A, 0x902C, 0xCFA498BA7A7F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_IXamlRootChangedEventArgs {
}

// MARK: Microsoft.UI.Xaml.IPropertyChangedCallback

public func uuidof(_: SWRT_MicrosoftUIXaml_PropertyChangedCallback.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5FD9243A, 0x2422, 0x53C9, 0x8D6F, 0xF1BA1A0BBA9A)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_PropertyChangedCallback {
    public func invoke(_ d: MicrosoftUIXaml_DependencyObject?, _ e: MicrosoftUIXaml_DependencyPropertyChangedEventArgs?) throws {
        var d_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(d)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&d_abi) }
        var e_abi = try MicrosoftUIXaml_DependencyPropertyChangedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_DependencyPropertyChangedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, d_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IRoutedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXaml_RoutedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xDAE23D85, 0x69CA, 0x5BDF, 0x805B, 0x6161A3A215CC)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_RoutedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXaml_RoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXaml_RoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_RoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.ISizeChangedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXaml_SizeChangedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8D7B1A58, 0x14C6, 0x51C9, 0x892C, 0x9FCCE368E77D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_SizeChangedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXaml_SizeChangedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXaml_SizeChangedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_SizeChangedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.IUnhandledExceptionEventHandler

public func uuidof(_: SWRT_MicrosoftUIXaml_UnhandledExceptionEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3427C1B6, 0x5ECA, 0x5631, 0x84B8, 0x5BAE732FB67F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXaml_UnhandledExceptionEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXaml_UnhandledExceptionEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXaml_UnhandledExceptionEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_UnhandledExceptionEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Automation.IAutomationProperty

public func uuidof(_: SWRT_MicrosoftUIXamlAutomation_IAutomationProperty.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5CA6B2C8, 0xFF86, 0x5A41, 0xAA18, 0x6948FAE592CF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomation_IAutomationProperty {
}

// MARK: Microsoft.UI.Xaml.Automation.Peers.IAutomationPeer

public func uuidof(_: SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE51D3E4E, 0x34F0, 0x568C, 0x999F, 0x6277E2AFE6D7)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer {
    public func get_EventsSource() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_EventsSource(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    public func put_EventsSource(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_EventsSource(this, value_abi))
    }

    public func getPattern(_ patternInterface: MicrosoftUIXamlAutomationPeers_PatternInterface) throws -> WindowsRuntime.IInspectable? {
        let patternInterface_abi = MicrosoftUIXamlAutomationPeers_PatternInterface.toABI(patternInterface)
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPattern(this, patternInterface_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func raiseAutomationEvent(_ eventId: MicrosoftUIXamlAutomationPeers_AutomationEvents) throws {
        let eventId_abi = MicrosoftUIXamlAutomationPeers_AutomationEvents.toABI(eventId)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RaiseAutomationEvent(this, eventId_abi))
    }

    public func raisePropertyChangedEvent(_ automationProperty: MicrosoftUIXamlAutomation_AutomationProperty?, _ oldValue: WindowsRuntime.IInspectable?, _ newValue: WindowsRuntime.IInspectable?) throws {
        var automationProperty_abi = try MicrosoftUIXamlAutomation_AutomationPropertyBinding.toABI(automationProperty)
        defer { MicrosoftUIXamlAutomation_AutomationPropertyBinding.release(&automationProperty_abi) }
        var oldValue_abi = try WindowsRuntime.IInspectableBinding.toABI(oldValue)
        defer { WindowsRuntime.IInspectableBinding.release(&oldValue_abi) }
        var newValue_abi = try WindowsRuntime.IInspectableBinding.toABI(newValue)
        defer { WindowsRuntime.IInspectableBinding.release(&newValue_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RaisePropertyChangedEvent(this, automationProperty_abi, oldValue_abi, newValue_abi))
    }

    public func getAcceleratorKey() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAcceleratorKey(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getAccessKey() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAccessKey(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getAutomationControlType() throws -> MicrosoftUIXamlAutomationPeers_AutomationControlType {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationControlType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAutomationControlType(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationControlType.fromABI(_result)
    }

    public func getAutomationId() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAutomationId(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getBoundingRectangle() throws -> WindowsFoundation_Rect {
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetBoundingRectangle(this, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }

    public func getChildren() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetChildren(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.AutomationPeer.fromABI(consuming: &_result)
    }

    public func navigate(_ direction: MicrosoftUIXamlAutomationPeers_AutomationNavigationDirection) throws -> WindowsRuntime.IInspectable? {
        let direction_abi = MicrosoftUIXamlAutomationPeers_AutomationNavigationDirection.toABI(direction)
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Navigate(this, direction_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func getClassName() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetClassName(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getClickablePoint() throws -> WindowsFoundation_Point {
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetClickablePoint(this, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }

    public func getHelpText() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetHelpText(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getItemStatus() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetItemStatus(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getItemType() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetItemType(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getLabeledBy() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLabeledBy(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    public func getLocalizedControlType() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLocalizedControlType(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getName() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetName(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getOrientation() throws -> MicrosoftUIXamlAutomationPeers_AutomationOrientation {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationOrientation = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetOrientation(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationOrientation.fromABI(_result)
    }

    public func hasKeyboardFocus() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.HasKeyboardFocus(this, &_result))
        return _result
    }

    public func isContentElement() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsContentElement(this, &_result))
        return _result
    }

    public func isControlElement() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsControlElement(this, &_result))
        return _result
    }

    public func isEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsEnabled(this, &_result))
        return _result
    }

    public func isKeyboardFocusable() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsKeyboardFocusable(this, &_result))
        return _result
    }

    public func isOffscreen() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsOffscreen(this, &_result))
        return _result
    }

    public func isPassword() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsPassword(this, &_result))
        return _result
    }

    public func isRequiredForForm() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsRequiredForForm(this, &_result))
        return _result
    }

    public func setFocus() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetFocus(this))
    }

    public func getParent() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetParent(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    public func invalidatePeer() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InvalidatePeer(this))
    }

    public func getPeerFromPoint(_ point: WindowsFoundation_Point) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        let point_abi = WindowsFoundation_Point.toABI(point)
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPeerFromPoint(this, point_abi, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    public func getElementFromPoint(_ pointInWindowCoordinates: WindowsFoundation_Point) throws -> WindowsRuntime.IInspectable? {
        let pointInWindowCoordinates_abi = WindowsFoundation_Point.toABI(pointInWindowCoordinates)
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetElementFromPoint(this, pointInWindowCoordinates_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func getFocusedElement() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetFocusedElement(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func getLiveSetting() throws -> MicrosoftUIXamlAutomationPeers_AutomationLiveSetting {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationLiveSetting = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLiveSetting(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationLiveSetting.fromABI(_result)
    }

    public func showContextMenu() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ShowContextMenu(this))
    }

    public func getControlledPeers() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlAutomationPeers_AutomationPeer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlAutomationPeers_AutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetControlledPeers(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.AutomationPeer.fromABI(consuming: &_result)
    }

    public func getAnnotations() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAnnotations(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.AutomationPeerAnnotation.fromABI(consuming: &_result)
    }

    public func setParent(_ peer: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        var peer_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(peer)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&peer_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetParent(this, peer_abi))
    }

    public func raiseTextEditTextChangedEvent(_ automationTextEditChangeType: MicrosoftUIXamlAutomation_AutomationTextEditChangeType, _ changedData: WindowsFoundationCollections_IVectorView<Swift.String>?) throws {
        let automationTextEditChangeType_abi = MicrosoftUIXamlAutomation_AutomationTextEditChangeType.toABI(automationTextEditChangeType)
        var changedData_abi = try WindowsFoundationCollections_IVectorViewBinding.String.toABI(changedData)
        defer { WindowsFoundationCollections_IVectorViewBinding.String.release(&changedData_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RaiseTextEditTextChangedEvent(this, automationTextEditChangeType_abi, changedData_abi))
    }

    public func getPositionInSet() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPositionInSet(this, &_result))
        return _result
    }

    public func getSizeOfSet() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetSizeOfSet(this, &_result))
        return _result
    }

    public func getLevel() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLevel(this, &_result))
        return _result
    }

    public func raiseStructureChangedEvent(_ structureChangeType: MicrosoftUIXamlAutomationPeers_AutomationStructureChangeType, _ child: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        let structureChangeType_abi = MicrosoftUIXamlAutomationPeers_AutomationStructureChangeType.toABI(structureChangeType)
        var child_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(child)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&child_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RaiseStructureChangedEvent(this, structureChangeType_abi, child_abi))
    }

    public func getLandmarkType() throws -> MicrosoftUIXamlAutomationPeers_AutomationLandmarkType {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationLandmarkType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLandmarkType(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationLandmarkType.fromABI(_result)
    }

    public func getLocalizedLandmarkType() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLocalizedLandmarkType(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func isPeripheral() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsPeripheral(this, &_result))
        return _result
    }

    public func isDataValidForForm() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsDataValidForForm(this, &_result))
        return _result
    }

    public func getFullDescription() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetFullDescription(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getCulture() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetCulture(this, &_result))
        return _result
    }

    public func raiseNotificationEvent(_ notificationKind: MicrosoftUIXamlAutomationPeers_AutomationNotificationKind, _ notificationProcessing: MicrosoftUIXamlAutomationPeers_AutomationNotificationProcessing, _ displayString: Swift.String, _ activityId: Swift.String) throws {
        let notificationKind_abi = MicrosoftUIXamlAutomationPeers_AutomationNotificationKind.toABI(notificationKind)
        let notificationProcessing_abi = MicrosoftUIXamlAutomationPeers_AutomationNotificationProcessing.toABI(notificationProcessing)
        var displayString_abi = try WindowsRuntime.StringBinding.toABI(displayString)
        defer { WindowsRuntime.StringBinding.release(&displayString_abi) }
        var activityId_abi = try WindowsRuntime.StringBinding.toABI(activityId)
        defer { WindowsRuntime.StringBinding.release(&activityId_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RaiseNotificationEvent(this, notificationKind_abi, notificationProcessing_abi, displayString_abi, activityId_abi))
    }

    public func getHeadingLevel() throws -> MicrosoftUIXamlAutomationPeers_AutomationHeadingLevel {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationHeadingLevel = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetHeadingLevel(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationHeadingLevel.fromABI(_result)
    }

    public func isDialog() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsDialog(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Automation.Peers.IAutomationPeerAnnotation

public func uuidof(_: SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2738B92A, 0x2528, 0x5B63, 0x973D, 0xD29EB0593647)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotation {
    public func get_Type() throws -> MicrosoftUIXamlAutomation_AnnotationType {
        var _result: SWRT_MicrosoftUIXamlAutomation_AnnotationType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Type(this, &_result))
        return MicrosoftUIXamlAutomation_AnnotationType.fromABI(_result)
    }

    public func put_Type(_ value: MicrosoftUIXamlAutomation_AnnotationType) throws {
        let value_abi = MicrosoftUIXamlAutomation_AnnotationType.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Type(this, value_abi))
    }

    public func get_Peer() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Peer(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    public func put_Peer(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Peer(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Automation.Peers.IAutomationPeerAnnotationFactory

public func uuidof(_: SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotationFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x25A1A202, 0xBD68, 0x5D41, 0xA311, 0xF84AF9C8C440)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotationFactory {
    public func createInstance(_ type: MicrosoftUIXamlAutomation_AnnotationType) throws -> COM.COMReference<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotation> {
        let type_abi = MicrosoftUIXamlAutomation_AnnotationType.toABI(type)
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, type_abi, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }

    public func createWithPeerParameter(_ type: MicrosoftUIXamlAutomation_AnnotationType, _ peer: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotation> {
        let type_abi = MicrosoftUIXamlAutomation_AnnotationType.toABI(type)
        var peer_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(peer)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&peer_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateWithPeerParameter(this, type_abi, peer_abi, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Automation.Peers.IAutomationPeerAnnotationStatics

public func uuidof(_: SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotationStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC46105D7, 0x8CA3, 0x50E3, 0xA1BC, 0xB6BB2F9CE1CD)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotationStatics {
    public func get_TypeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TypeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_PeerProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PeerProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Automation.Peers.IAutomationPeerFactory

public func uuidof(_: SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA1AF86A0, 0x6EC6, 0x5BE2, 0x858F, 0x72808BE6FDDD)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Automation.Peers.IAutomationPeerOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x44F8F6DF, 0x1B60, 0x512D, 0xA295, 0xDD8C276C4618)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerOverrides {
    public func getPatternCore(_ patternInterface: MicrosoftUIXamlAutomationPeers_PatternInterface) throws -> WindowsRuntime.IInspectable? {
        let patternInterface_abi = MicrosoftUIXamlAutomationPeers_PatternInterface.toABI(patternInterface)
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPatternCore(this, patternInterface_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func getAcceleratorKeyCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAcceleratorKeyCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getAccessKeyCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAccessKeyCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getAutomationControlTypeCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationControlType {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationControlType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAutomationControlTypeCore(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationControlType.fromABI(_result)
    }

    public func getAutomationIdCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAutomationIdCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getBoundingRectangleCore() throws -> WindowsFoundation_Rect {
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetBoundingRectangleCore(this, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }

    public func getChildrenCore() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetChildrenCore(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.AutomationPeer.fromABI(consuming: &_result)
    }

    public func navigateCore(_ direction: MicrosoftUIXamlAutomationPeers_AutomationNavigationDirection) throws -> WindowsRuntime.IInspectable? {
        let direction_abi = MicrosoftUIXamlAutomationPeers_AutomationNavigationDirection.toABI(direction)
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.NavigateCore(this, direction_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func getClassNameCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetClassNameCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getClickablePointCore() throws -> WindowsFoundation_Point {
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetClickablePointCore(this, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }

    public func getHelpTextCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetHelpTextCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getItemStatusCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetItemStatusCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getItemTypeCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetItemTypeCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getLabeledByCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLabeledByCore(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    public func getLocalizedControlTypeCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLocalizedControlTypeCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getNameCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetNameCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getOrientationCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationOrientation {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationOrientation = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetOrientationCore(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationOrientation.fromABI(_result)
    }

    public func hasKeyboardFocusCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.HasKeyboardFocusCore(this, &_result))
        return _result
    }

    public func isContentElementCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsContentElementCore(this, &_result))
        return _result
    }

    public func isControlElementCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsControlElementCore(this, &_result))
        return _result
    }

    public func isEnabledCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsEnabledCore(this, &_result))
        return _result
    }

    public func isKeyboardFocusableCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsKeyboardFocusableCore(this, &_result))
        return _result
    }

    public func isOffscreenCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsOffscreenCore(this, &_result))
        return _result
    }

    public func isPasswordCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsPasswordCore(this, &_result))
        return _result
    }

    public func isRequiredForFormCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsRequiredForFormCore(this, &_result))
        return _result
    }

    public func setFocusCore() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetFocusCore(this))
    }

    public func getPeerFromPointCore(_ point: WindowsFoundation_Point) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        let point_abi = WindowsFoundation_Point.toABI(point)
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPeerFromPointCore(this, point_abi, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    public func getElementFromPointCore(_ pointInWindowCoordinates: WindowsFoundation_Point) throws -> WindowsRuntime.IInspectable? {
        let pointInWindowCoordinates_abi = WindowsFoundation_Point.toABI(pointInWindowCoordinates)
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetElementFromPointCore(this, pointInWindowCoordinates_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func getFocusedElementCore() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetFocusedElementCore(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func getLiveSettingCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationLiveSetting {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationLiveSetting = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLiveSettingCore(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationLiveSetting.fromABI(_result)
    }

    public func showContextMenuCore() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ShowContextMenuCore(this))
    }

    public func getControlledPeersCore() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlAutomationPeers_AutomationPeer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlAutomationPeers_AutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetControlledPeersCore(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.AutomationPeer.fromABI(consuming: &_result)
    }

    public func getAnnotationsCore() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAnnotationsCore(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.AutomationPeerAnnotation.fromABI(consuming: &_result)
    }

    public func getPositionInSetCore() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPositionInSetCore(this, &_result))
        return _result
    }

    public func getSizeOfSetCore() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetSizeOfSetCore(this, &_result))
        return _result
    }

    public func getLevelCore() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLevelCore(this, &_result))
        return _result
    }

    public func getLandmarkTypeCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationLandmarkType {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationLandmarkType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLandmarkTypeCore(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationLandmarkType.fromABI(_result)
    }

    public func getLocalizedLandmarkTypeCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetLocalizedLandmarkTypeCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func isPeripheralCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsPeripheralCore(this, &_result))
        return _result
    }

    public func isDataValidForFormCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsDataValidForFormCore(this, &_result))
        return _result
    }

    public func getFullDescriptionCore() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetFullDescriptionCore(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func getDescribedByCore() throws -> WindowsFoundationCollections_IIterable<MicrosoftUIXamlAutomationPeers_AutomationPeer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetDescribedByCore(this, &_result))
        return WindowsFoundationCollections_IIterableBinding.AutomationPeer.fromABI(consuming: &_result)
    }

    public func getFlowsToCore() throws -> WindowsFoundationCollections_IIterable<MicrosoftUIXamlAutomationPeers_AutomationPeer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetFlowsToCore(this, &_result))
        return WindowsFoundationCollections_IIterableBinding.AutomationPeer.fromABI(consuming: &_result)
    }

    public func getFlowsFromCore() throws -> WindowsFoundationCollections_IIterable<MicrosoftUIXamlAutomationPeers_AutomationPeer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetFlowsFromCore(this, &_result))
        return WindowsFoundationCollections_IIterableBinding.AutomationPeer.fromABI(consuming: &_result)
    }

    public func getCultureCore() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetCultureCore(this, &_result))
        return _result
    }

    public func getHeadingLevelCore() throws -> MicrosoftUIXamlAutomationPeers_AutomationHeadingLevel {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_AutomationHeadingLevel = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetHeadingLevelCore(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationHeadingLevel.fromABI(_result)
    }

    public func isDialogCore() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsDialogCore(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Automation.Peers.IAutomationPeerProtected

public func uuidof(_: SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerProtected.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9663B2C3, 0x8C1F, 0x56D4, 0xABD9, 0x268082A9E8BC)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerProtected {
    public func peerFromProvider(_ provider: MicrosoftUIXamlAutomationProvider_IRawElementProviderSimple?) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var provider_abi = try MicrosoftUIXamlAutomationProvider_IRawElementProviderSimpleBinding.toABI(provider)
        defer { MicrosoftUIXamlAutomationProvider_IRawElementProviderSimpleBinding.release(&provider_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.PeerFromProvider(this, provider_abi, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    public func providerFromPeer(_ peer: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws -> MicrosoftUIXamlAutomationProvider_IRawElementProviderSimple? {
        var peer_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(peer)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&peer_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationProvider_IIRawElementProviderSimple>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ProviderFromPeer(this, peer_abi, &_result))
        return MicrosoftUIXamlAutomationProvider_IRawElementProviderSimpleBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Automation.Peers.IAutomationPeerStatics

public func uuidof(_: SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x90B157FF, 0x18D5, 0x5623, 0x850C, 0x612CEAE576BD)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerStatics {
    public func listenerExists(_ eventId: MicrosoftUIXamlAutomationPeers_AutomationEvents) throws -> Swift.Bool {
        let eventId_abi = MicrosoftUIXamlAutomationPeers_AutomationEvents.toABI(eventId)
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ListenerExists(this, eventId_abi, &_result))
        return _result
    }

    public func generateRawElementProviderRuntimeId() throws -> MicrosoftUIXamlAutomationPeers_RawElementProviderRuntimeId {
        var _result: SWRT_MicrosoftUIXamlAutomationPeers_RawElementProviderRuntimeId = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GenerateRawElementProviderRuntimeId(this, &_result))
        return MicrosoftUIXamlAutomationPeers_RawElementProviderRuntimeId.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Automation.Provider.IIRawElementProviderSimple

public func uuidof(_: SWRT_MicrosoftUIXamlAutomationProvider_IIRawElementProviderSimple.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF90BC239, 0xADE2, 0x55C9, 0xA838, 0xA3B0579763C5)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlAutomationProvider_IIRawElementProviderSimple {
}

// MARK: Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ContextMenuOpeningEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD010FF61, 0x4067, 0x526A, 0x95A3, 0x517577BC5273)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ContextMenuOpeningEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlControls_ContextMenuEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlControls_ContextMenuEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlControls_ContextMenuEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IDragItemsStartingEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlControls_DragItemsStartingEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x55532800, 0x7617, 0x5D67, 0x80BF, 0xB98C0A41B9D6)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_DragItemsStartingEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlControls_DragItemsStartingEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlControls_DragItemsStartingEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlControls_DragItemsStartingEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IButton

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IButton.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x216C183D, 0xD07A, 0x5AA5, 0xB8A4, 0x0300A2683E87)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IButton {
    public func get_Flyout() throws -> MicrosoftUIXamlControlsPrimitives_FlyoutBase? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Flyout(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.fromABI(consuming: &_result)
    }

    public func put_Flyout(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutBase?) throws {
        var value_abi = try MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.toABI(value)
        defer { MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Flyout(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IButtonFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IButtonFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFE393422, 0xD91C, 0x57B1, 0x9A9C, 0x2C7E3F41F77C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IButtonFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IButton> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IButton>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IButtonStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IButtonStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x57823D25, 0xB26A, 0x5E0F, 0x94F6, 0xBBAE70683DC5)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IButtonStatics {
    public func get_FlyoutProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FlyoutProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IChoosingGroupHeaderContainerEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IChoosingGroupHeaderContainerEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2DB1B0B0, 0xAEE9, 0x55FA, 0x8C30, 0xC98F00643D00)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IChoosingGroupHeaderContainerEventArgs {
    public func get_GroupHeaderContainer() throws -> MicrosoftUIXamlControls_ListViewBaseHeaderItem? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IListViewBaseHeaderItem>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_GroupHeaderContainer(this, &_result))
        return MicrosoftUIXamlControls_ListViewBaseHeaderItemBinding.fromABI(consuming: &_result)
    }

    public func put_GroupHeaderContainer(_ value: MicrosoftUIXamlControls_ListViewBaseHeaderItem?) throws {
        var value_abi = try MicrosoftUIXamlControls_ListViewBaseHeaderItemBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ListViewBaseHeaderItemBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_GroupHeaderContainer(this, value_abi))
    }

    public func get_GroupIndex() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_GroupIndex(this, &_result))
        return _result
    }

    public func get_Group() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Group(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IChoosingItemContainerEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IChoosingItemContainerEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB479B9D2, 0xA63F, 0x5638, 0x9486, 0x8CCC1F40251E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IChoosingItemContainerEventArgs {
    public func get_ItemIndex() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemIndex(this, &_result))
        return _result
    }

    public func get_Item() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Item(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func get_ItemContainer() throws -> MicrosoftUIXamlControlsPrimitives_SelectorItem? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItem>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemContainer(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_SelectorItemBinding.fromABI(consuming: &_result)
    }

    public func put_ItemContainer(_ value: MicrosoftUIXamlControlsPrimitives_SelectorItem?) throws {
        var value_abi = try MicrosoftUIXamlControlsPrimitives_SelectorItemBinding.toABI(value)
        defer { MicrosoftUIXamlControlsPrimitives_SelectorItemBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ItemContainer(this, value_abi))
    }

    public func get_IsContainerPrepared() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsContainerPrepared(this, &_result))
        return _result
    }

    public func put_IsContainerPrepared(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsContainerPrepared(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IColumnDefinition

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IColumnDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x454CEA14, 0x87EC, 0x5890, 0xBB62, 0xF1D82A94758E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IColumnDefinition {
    public func get_Width() throws -> MicrosoftUIXaml_GridLength {
        var _result: SWRT_MicrosoftUIXaml_GridLength = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Width(this, &_result))
        return MicrosoftUIXaml_GridLength.fromABI(_result)
    }

    public func put_Width(_ value: MicrosoftUIXaml_GridLength) throws {
        let value_abi = MicrosoftUIXaml_GridLength.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Width(this, value_abi))
    }

    public func get_MaxWidth() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxWidth(this, &_result))
        return _result
    }

    public func put_MaxWidth(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_MaxWidth(this, value))
    }

    public func get_MinWidth() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MinWidth(this, &_result))
        return _result
    }

    public func put_MinWidth(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_MinWidth(this, value))
    }

    public func get_ActualWidth() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualWidth(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IColumnDefinitionStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IColumnDefinitionStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xABA4B755, 0xCA63, 0x5ED7, 0xAE31, 0x45F9F91920B0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IColumnDefinitionStatics {
    public func get_WidthProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_WidthProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MaxWidthProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxWidthProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MinWidthProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MinWidthProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IContainerContentChangingEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IContainerContentChangingEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF4C8C937, 0xB070, 0x53CE, 0xA76C, 0x074EE5750A71)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IContainerContentChangingEventArgs {
    public func get_ItemContainer() throws -> MicrosoftUIXamlControlsPrimitives_SelectorItem? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItem>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemContainer(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_SelectorItemBinding.fromABI(consuming: &_result)
    }

    public func get_InRecycleQueue() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_InRecycleQueue(this, &_result))
        return _result
    }

    public func get_ItemIndex() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemIndex(this, &_result))
        return _result
    }

    public func get_Item() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Item(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func get_Phase() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Phase(this, &_result))
        return _result
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func registerUpdateCallback(_ callback: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ContainerContentChangingEventArgs?>?) throws {
        var callback_abi = try WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ContainerContentChangingEventArgs.toABI(callback)
        defer { WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ContainerContentChangingEventArgs.release(&callback_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RegisterUpdateCallback(this, callback_abi))
    }

    public func registerUpdateCallbackWithPhase(_ callbackPhase: Swift.UInt32, _ callback: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ContainerContentChangingEventArgs?>?) throws {
        var callback_abi = try WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ContainerContentChangingEventArgs.toABI(callback)
        defer { WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ContainerContentChangingEventArgs.release(&callback_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RegisterUpdateCallbackWithPhase(this, callbackPhase, callback_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IContentControl

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IContentControl.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x07E81761, 0x11B2, 0x52AE, 0x8F8B, 0x4D53D2B5900A)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IContentControl {
    public func get_Content() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Content(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_Content(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Content(this, value_abi))
    }

    public func get_ContentTemplate() throws -> MicrosoftUIXaml_DataTemplate? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentTemplate(this, &_result))
        return MicrosoftUIXaml_DataTemplateBinding.fromABI(consuming: &_result)
    }

    public func put_ContentTemplate(_ value: MicrosoftUIXaml_DataTemplate?) throws {
        var value_abi = try MicrosoftUIXaml_DataTemplateBinding.toABI(value)
        defer { MicrosoftUIXaml_DataTemplateBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ContentTemplate(this, value_abi))
    }

    public func get_ContentTemplateSelector() throws -> MicrosoftUIXamlControls_DataTemplateSelector? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IDataTemplateSelector>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentTemplateSelector(this, &_result))
        return MicrosoftUIXamlControls_DataTemplateSelectorBinding.fromABI(consuming: &_result)
    }

    public func put_ContentTemplateSelector(_ value: MicrosoftUIXamlControls_DataTemplateSelector?) throws {
        var value_abi = try MicrosoftUIXamlControls_DataTemplateSelectorBinding.toABI(value)
        defer { MicrosoftUIXamlControls_DataTemplateSelectorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ContentTemplateSelector(this, value_abi))
    }

    public func get_ContentTransitions() throws -> MicrosoftUIXamlMediaAnimation_TransitionCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentTransitions(this, &_result))
        return MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.fromABI(consuming: &_result)
    }

    public func put_ContentTransitions(_ value: MicrosoftUIXamlMediaAnimation_TransitionCollection?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ContentTransitions(this, value_abi))
    }

    public func get_ContentTemplateRoot() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentTemplateRoot(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IContentControlFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IContentControlFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3DEA958E, 0x5ACD, 0x5F80, 0x8938, 0x38634F51493A)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IContentControlFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IContentControl> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IContentControl>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IContentControlOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IContentControlOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2504174A, 0x017E, 0x5A2D, 0x9C28, 0xD97C66AE9937)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IContentControlOverrides {
    public func onContentChanged(_ oldContent: WindowsRuntime.IInspectable?, _ newContent: WindowsRuntime.IInspectable?) throws {
        var oldContent_abi = try WindowsRuntime.IInspectableBinding.toABI(oldContent)
        defer { WindowsRuntime.IInspectableBinding.release(&oldContent_abi) }
        var newContent_abi = try WindowsRuntime.IInspectableBinding.toABI(newContent)
        defer { WindowsRuntime.IInspectableBinding.release(&newContent_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnContentChanged(this, oldContent_abi, newContent_abi))
    }

    public func onContentTemplateChanged(_ oldContentTemplate: MicrosoftUIXaml_DataTemplate?, _ newContentTemplate: MicrosoftUIXaml_DataTemplate?) throws {
        var oldContentTemplate_abi = try MicrosoftUIXaml_DataTemplateBinding.toABI(oldContentTemplate)
        defer { MicrosoftUIXaml_DataTemplateBinding.release(&oldContentTemplate_abi) }
        var newContentTemplate_abi = try MicrosoftUIXaml_DataTemplateBinding.toABI(newContentTemplate)
        defer { MicrosoftUIXaml_DataTemplateBinding.release(&newContentTemplate_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnContentTemplateChanged(this, oldContentTemplate_abi, newContentTemplate_abi))
    }

    public func onContentTemplateSelectorChanged(_ oldContentTemplateSelector: MicrosoftUIXamlControls_DataTemplateSelector?, _ newContentTemplateSelector: MicrosoftUIXamlControls_DataTemplateSelector?) throws {
        var oldContentTemplateSelector_abi = try MicrosoftUIXamlControls_DataTemplateSelectorBinding.toABI(oldContentTemplateSelector)
        defer { MicrosoftUIXamlControls_DataTemplateSelectorBinding.release(&oldContentTemplateSelector_abi) }
        var newContentTemplateSelector_abi = try MicrosoftUIXamlControls_DataTemplateSelectorBinding.toABI(newContentTemplateSelector)
        defer { MicrosoftUIXamlControls_DataTemplateSelectorBinding.release(&newContentTemplateSelector_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnContentTemplateSelectorChanged(this, oldContentTemplateSelector_abi, newContentTemplateSelector_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IContentControlStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IContentControlStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF25484F4, 0x2FED, 0x5A0A, 0x8864, 0x7D6D4AC43EF8)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IContentControlStatics {
    public func get_ContentProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ContentTemplateProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentTemplateProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ContentTemplateSelectorProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentTemplateSelectorProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ContentTransitionsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentTransitionsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IContextMenuEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IContextMenuEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x65637BB3, 0xE279, 0x5507, 0xBD16, 0x6F7BA6705F31)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IContextMenuEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_CursorLeft() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CursorLeft(this, &_result))
        return _result
    }

    public func get_CursorTop() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CursorTop(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IControl

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IControl.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x857D6E8A, 0xD45A, 0x5C69, 0xA99C, 0xBF6A5C54FB38)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IControl {
    public func get_IsFocusEngagementEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsFocusEngagementEnabled(this, &_result))
        return _result
    }

    public func put_IsFocusEngagementEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsFocusEngagementEnabled(this, value))
    }

    public func get_IsFocusEngaged() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsFocusEngaged(this, &_result))
        return _result
    }

    public func put_IsFocusEngaged(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsFocusEngaged(this, value))
    }

    public func get_RequiresPointer() throws -> MicrosoftUIXamlControls_RequiresPointer {
        var _result: SWRT_MicrosoftUIXamlControls_RequiresPointer = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RequiresPointer(this, &_result))
        return MicrosoftUIXamlControls_RequiresPointer.fromABI(_result)
    }

    public func put_RequiresPointer(_ value: MicrosoftUIXamlControls_RequiresPointer) throws {
        let value_abi = MicrosoftUIXamlControls_RequiresPointer.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RequiresPointer(this, value_abi))
    }

    public func get_FontSize() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontSize(this, &_result))
        return _result
    }

    public func put_FontSize(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontSize(this, value))
    }

    public func get_FontFamily() throws -> MicrosoftUIXamlMedia_FontFamily? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IFontFamily>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontFamily(this, &_result))
        return MicrosoftUIXamlMedia_FontFamilyBinding.fromABI(consuming: &_result)
    }

    public func put_FontFamily(_ value: MicrosoftUIXamlMedia_FontFamily?) throws {
        var value_abi = try MicrosoftUIXamlMedia_FontFamilyBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_FontFamilyBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontFamily(this, value_abi))
    }

    public func get_FontWeight() throws -> WindowsUIText_FontWeight {
        var _result: SWRT_WindowsUIText_FontWeight = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontWeight(this, &_result))
        return WindowsUIText_FontWeight.fromABI(_result)
    }

    public func put_FontWeight(_ value: WindowsUIText_FontWeight) throws {
        let value_abi = WindowsUIText_FontWeight.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontWeight(this, value_abi))
    }

    public func get_FontStyle() throws -> WindowsUIText_FontStyle {
        var _result: SWRT_WindowsUIText_FontStyle = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStyle(this, &_result))
        return WindowsUIText_FontStyle.fromABI(_result)
    }

    public func put_FontStyle(_ value: WindowsUIText_FontStyle) throws {
        let value_abi = WindowsUIText_FontStyle.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontStyle(this, value_abi))
    }

    public func get_FontStretch() throws -> WindowsUIText_FontStretch {
        var _result: SWRT_WindowsUIText_FontStretch = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStretch(this, &_result))
        return WindowsUIText_FontStretch.fromABI(_result)
    }

    public func put_FontStretch(_ value: WindowsUIText_FontStretch) throws {
        let value_abi = WindowsUIText_FontStretch.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontStretch(this, value_abi))
    }

    public func get_CharacterSpacing() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CharacterSpacing(this, &_result))
        return _result
    }

    public func put_CharacterSpacing(_ value: Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CharacterSpacing(this, value))
    }

    public func get_Foreground() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Foreground(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_Foreground(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Foreground(this, value_abi))
    }

    public func get_IsTextScaleFactorEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextScaleFactorEnabled(this, &_result))
        return _result
    }

    public func put_IsTextScaleFactorEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsTextScaleFactorEnabled(this, value))
    }

    public func get_IsEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsEnabled(this, &_result))
        return _result
    }

    public func put_IsEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsEnabled(this, value))
    }

    public func get_TabNavigation() throws -> MicrosoftUIXamlInput_KeyboardNavigationMode {
        var _result: SWRT_MicrosoftUIXamlInput_KeyboardNavigationMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TabNavigation(this, &_result))
        return MicrosoftUIXamlInput_KeyboardNavigationMode.fromABI(_result)
    }

    public func put_TabNavigation(_ value: MicrosoftUIXamlInput_KeyboardNavigationMode) throws {
        let value_abi = MicrosoftUIXamlInput_KeyboardNavigationMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TabNavigation(this, value_abi))
    }

    public func get_Template() throws -> MicrosoftUIXamlControls_ControlTemplate? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IControlTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Template(this, &_result))
        return MicrosoftUIXamlControls_ControlTemplateBinding.fromABI(consuming: &_result)
    }

    public func put_Template(_ value: MicrosoftUIXamlControls_ControlTemplate?) throws {
        var value_abi = try MicrosoftUIXamlControls_ControlTemplateBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ControlTemplateBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Template(this, value_abi))
    }

    public func get_Padding() throws -> MicrosoftUIXaml_Thickness {
        var _result: SWRT_MicrosoftUIXaml_Thickness = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Padding(this, &_result))
        return MicrosoftUIXaml_Thickness.fromABI(_result)
    }

    public func put_Padding(_ value: MicrosoftUIXaml_Thickness) throws {
        let value_abi = MicrosoftUIXaml_Thickness.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Padding(this, value_abi))
    }

    public func get_HorizontalContentAlignment() throws -> MicrosoftUIXaml_HorizontalAlignment {
        var _result: SWRT_MicrosoftUIXaml_HorizontalAlignment = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalContentAlignment(this, &_result))
        return MicrosoftUIXaml_HorizontalAlignment.fromABI(_result)
    }

    public func put_HorizontalContentAlignment(_ value: MicrosoftUIXaml_HorizontalAlignment) throws {
        let value_abi = MicrosoftUIXaml_HorizontalAlignment.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HorizontalContentAlignment(this, value_abi))
    }

    public func get_VerticalContentAlignment() throws -> MicrosoftUIXaml_VerticalAlignment {
        var _result: SWRT_MicrosoftUIXaml_VerticalAlignment = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VerticalContentAlignment(this, &_result))
        return MicrosoftUIXaml_VerticalAlignment.fromABI(_result)
    }

    public func put_VerticalContentAlignment(_ value: MicrosoftUIXaml_VerticalAlignment) throws {
        let value_abi = MicrosoftUIXaml_VerticalAlignment.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_VerticalContentAlignment(this, value_abi))
    }

    public func get_Background() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Background(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_Background(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Background(this, value_abi))
    }

    public func get_BackgroundSizing() throws -> MicrosoftUIXamlControls_BackgroundSizing {
        var _result: SWRT_MicrosoftUIXamlControls_BackgroundSizing = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BackgroundSizing(this, &_result))
        return MicrosoftUIXamlControls_BackgroundSizing.fromABI(_result)
    }

    public func put_BackgroundSizing(_ value: MicrosoftUIXamlControls_BackgroundSizing) throws {
        let value_abi = MicrosoftUIXamlControls_BackgroundSizing.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_BackgroundSizing(this, value_abi))
    }

    public func get_BorderThickness() throws -> MicrosoftUIXaml_Thickness {
        var _result: SWRT_MicrosoftUIXaml_Thickness = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BorderThickness(this, &_result))
        return MicrosoftUIXaml_Thickness.fromABI(_result)
    }

    public func put_BorderThickness(_ value: MicrosoftUIXaml_Thickness) throws {
        let value_abi = MicrosoftUIXaml_Thickness.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_BorderThickness(this, value_abi))
    }

    public func get_BorderBrush() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BorderBrush(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_BorderBrush(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_BorderBrush(this, value_abi))
    }

    public func get_DefaultStyleResourceUri() throws -> WindowsFoundation_Uri? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IUriRuntimeClass>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DefaultStyleResourceUri(this, &_result))
        return WindowsFoundation_UriBinding.fromABI(consuming: &_result)
    }

    public func put_DefaultStyleResourceUri(_ value: WindowsFoundation_Uri?) throws {
        var value_abi = try WindowsFoundation_UriBinding.toABI(value)
        defer { WindowsFoundation_UriBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DefaultStyleResourceUri(this, value_abi))
    }

    public func get_ElementSoundMode() throws -> MicrosoftUIXaml_ElementSoundMode {
        var _result: SWRT_MicrosoftUIXaml_ElementSoundMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ElementSoundMode(this, &_result))
        return MicrosoftUIXaml_ElementSoundMode.fromABI(_result)
    }

    public func put_ElementSoundMode(_ value: MicrosoftUIXaml_ElementSoundMode) throws {
        let value_abi = MicrosoftUIXaml_ElementSoundMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ElementSoundMode(this, value_abi))
    }

    public func get_CornerRadius() throws -> MicrosoftUIXaml_CornerRadius {
        var _result: SWRT_MicrosoftUIXaml_CornerRadius = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CornerRadius(this, &_result))
        return MicrosoftUIXaml_CornerRadius.fromABI(_result)
    }

    public func put_CornerRadius(_ value: MicrosoftUIXaml_CornerRadius) throws {
        let value_abi = MicrosoftUIXaml_CornerRadius.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CornerRadius(this, value_abi))
    }

    public func add_FocusEngaged(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_Control?, MicrosoftUIXamlControls_FocusEngagedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.Control_FocusEngagedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.Control_FocusEngagedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_FocusEngaged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_FocusEngaged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_FocusEngaged(this, token_abi))
    }

    public func add_FocusDisengaged(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_Control?, MicrosoftUIXamlControls_FocusDisengagedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.Control_FocusDisengagedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.Control_FocusDisengagedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_FocusDisengaged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_FocusDisengaged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_FocusDisengaged(this, token_abi))
    }

    public func add_IsEnabledChanged(_ handler: MicrosoftUIXaml_DependencyPropertyChangedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_DependencyPropertyChangedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_DependencyPropertyChangedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_IsEnabledChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_IsEnabledChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_IsEnabledChanged(this, token_abi))
    }

    public func removeFocusEngagement() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveFocusEngagement(this))
    }

    public func applyTemplate() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ApplyTemplate(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IControlFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IControlFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x25159233, 0x9438, 0x5534, 0xAEB9, 0x00EB059CF73F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IControlFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IControl> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IControl>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IControlOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IControlOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5F644395, 0x2177, 0x5161, 0x9F87, 0xC6C749C73A03)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IControlOverrides {
    public func onPointerEntered(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPointerEntered(this, e_abi))
    }

    public func onPointerPressed(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPointerPressed(this, e_abi))
    }

    public func onPointerMoved(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPointerMoved(this, e_abi))
    }

    public func onPointerReleased(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPointerReleased(this, e_abi))
    }

    public func onPointerExited(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPointerExited(this, e_abi))
    }

    public func onPointerCaptureLost(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPointerCaptureLost(this, e_abi))
    }

    public func onPointerCanceled(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPointerCanceled(this, e_abi))
    }

    public func onPointerWheelChanged(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPointerWheelChanged(this, e_abi))
    }

    public func onTapped(_ e: MicrosoftUIXamlInput_TappedRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_TappedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_TappedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnTapped(this, e_abi))
    }

    public func onDoubleTapped(_ e: MicrosoftUIXamlInput_DoubleTappedRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_DoubleTappedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_DoubleTappedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnDoubleTapped(this, e_abi))
    }

    public func onHolding(_ e: MicrosoftUIXamlInput_HoldingRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_HoldingRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_HoldingRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnHolding(this, e_abi))
    }

    public func onRightTapped(_ e: MicrosoftUIXamlInput_RightTappedRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_RightTappedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_RightTappedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnRightTapped(this, e_abi))
    }

    public func onManipulationStarting(_ e: MicrosoftUIXamlInput_ManipulationStartingRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_ManipulationStartingRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationStartingRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnManipulationStarting(this, e_abi))
    }

    public func onManipulationInertiaStarting(_ e: MicrosoftUIXamlInput_ManipulationInertiaStartingRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_ManipulationInertiaStartingRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationInertiaStartingRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnManipulationInertiaStarting(this, e_abi))
    }

    public func onManipulationStarted(_ e: MicrosoftUIXamlInput_ManipulationStartedRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_ManipulationStartedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationStartedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnManipulationStarted(this, e_abi))
    }

    public func onManipulationDelta(_ e: MicrosoftUIXamlInput_ManipulationDeltaRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_ManipulationDeltaRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationDeltaRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnManipulationDelta(this, e_abi))
    }

    public func onManipulationCompleted(_ e: MicrosoftUIXamlInput_ManipulationCompletedRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_ManipulationCompletedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationCompletedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnManipulationCompleted(this, e_abi))
    }

    public func onKeyUp(_ e: MicrosoftUIXamlInput_KeyRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnKeyUp(this, e_abi))
    }

    public func onKeyDown(_ e: MicrosoftUIXamlInput_KeyRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnKeyDown(this, e_abi))
    }

    public func onPreviewKeyDown(_ e: MicrosoftUIXamlInput_KeyRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPreviewKeyDown(this, e_abi))
    }

    public func onPreviewKeyUp(_ e: MicrosoftUIXamlInput_KeyRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnPreviewKeyUp(this, e_abi))
    }

    public func onGotFocus(_ e: MicrosoftUIXaml_RoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXaml_RoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_RoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnGotFocus(this, e_abi))
    }

    public func onLostFocus(_ e: MicrosoftUIXaml_RoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXaml_RoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_RoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnLostFocus(this, e_abi))
    }

    public func onCharacterReceived(_ e: MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs?) throws {
        var e_abi = try MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnCharacterReceived(this, e_abi))
    }

    public func onDragEnter(_ e: MicrosoftUIXaml_DragEventArgs?) throws {
        var e_abi = try MicrosoftUIXaml_DragEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_DragEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnDragEnter(this, e_abi))
    }

    public func onDragLeave(_ e: MicrosoftUIXaml_DragEventArgs?) throws {
        var e_abi = try MicrosoftUIXaml_DragEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_DragEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnDragLeave(this, e_abi))
    }

    public func onDragOver(_ e: MicrosoftUIXaml_DragEventArgs?) throws {
        var e_abi = try MicrosoftUIXaml_DragEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_DragEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnDragOver(this, e_abi))
    }

    public func onDrop(_ e: MicrosoftUIXaml_DragEventArgs?) throws {
        var e_abi = try MicrosoftUIXaml_DragEventArgsBinding.toABI(e)
        defer { MicrosoftUIXaml_DragEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnDrop(this, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IControlProtected

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IControlProtected.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5C750339, 0x1789, 0x5095, 0xA214, 0xDD9D0564E579)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IControlProtected {
    public func get_DefaultStyleKey() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DefaultStyleKey(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_DefaultStyleKey(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DefaultStyleKey(this, value_abi))
    }

    public func getTemplateChild(_ childName: Swift.String) throws -> MicrosoftUIXaml_DependencyObject? {
        var childName_abi = try WindowsRuntime.StringBinding.toABI(childName)
        defer { WindowsRuntime.StringBinding.release(&childName_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetTemplateChild(this, childName_abi, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IControlStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IControlStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC3AE388D, 0xAA36, 0x5E10, 0xACAC, 0x98415F47BCC7)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IControlStatics {
    public func get_IsFocusEngagementEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsFocusEngagementEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsFocusEngagedProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsFocusEngagedProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_RequiresPointerProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RequiresPointerProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontSizeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontSizeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontFamilyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontFamilyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontWeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontWeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontStyleProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStyleProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontStretchProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStretchProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CharacterSpacingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CharacterSpacingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ForegroundProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ForegroundProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsTextScaleFactorEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextScaleFactorEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TabNavigationProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TabNavigationProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TemplateProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TemplateProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_PaddingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PaddingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_HorizontalContentAlignmentProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalContentAlignmentProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_VerticalContentAlignmentProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VerticalContentAlignmentProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_BackgroundProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BackgroundProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_BackgroundSizingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BackgroundSizingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_BorderThicknessProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BorderThicknessProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_BorderBrushProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BorderBrushProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_DefaultStyleKeyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DefaultStyleKeyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_DefaultStyleResourceUriProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DefaultStyleResourceUriProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ElementSoundModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ElementSoundModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CornerRadiusProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CornerRadiusProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsTemplateFocusTargetProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTemplateFocusTargetProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getIsTemplateFocusTarget(_ element: MicrosoftUIXaml_FrameworkElement?) throws -> Swift.Bool {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetIsTemplateFocusTarget(this, element_abi, &_result))
        return _result
    }

    public func setIsTemplateFocusTarget(_ element: MicrosoftUIXaml_FrameworkElement?, _ value: Swift.Bool) throws {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetIsTemplateFocusTarget(this, element_abi, value))
    }

    public func get_IsTemplateKeyTipTargetProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTemplateKeyTipTargetProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getIsTemplateKeyTipTarget(_ element: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Bool {
        var element_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(element)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&element_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetIsTemplateKeyTipTarget(this, element_abi, &_result))
        return _result
    }

    public func setIsTemplateKeyTipTarget(_ element: MicrosoftUIXaml_DependencyObject?, _ value: Swift.Bool) throws {
        var element_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(element)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetIsTemplateKeyTipTarget(this, element_abi, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IControlTemplate

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IControlTemplate.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3A192751, 0x2106, 0x547A, 0xACA0, 0xF15AE8926EA0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IControlTemplate {
    public func get_TargetType() throws -> WindowsUIXamlInterop_TypeName {
        var _result: SWRT_WindowsUIXamlInterop_TypeName = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TargetType(this, &_result))
        return WindowsUIXamlInterop_TypeName.fromABI(consuming: &_result)
    }

    public func put_TargetType(_ value: WindowsUIXamlInterop_TypeName) throws {
        var value_abi = try WindowsUIXamlInterop_TypeName.toABI(value)
        defer { WindowsUIXamlInterop_TypeName.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TargetType(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IDataTemplateSelector

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IDataTemplateSelector.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x86CA4FA4, 0x7DE0, 0x5049, 0x82F5, 0x39EC78569028)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IDataTemplateSelector {
    public func selectTemplate(_ item: WindowsRuntime.IInspectable?, _ container: MicrosoftUIXaml_DependencyObject?) throws -> MicrosoftUIXaml_DataTemplate? {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectTemplate(this, item_abi, container_abi, &_result))
        return MicrosoftUIXaml_DataTemplateBinding.fromABI(consuming: &_result)
    }

    public func selectTemplateForItem(_ item: WindowsRuntime.IInspectable?) throws -> MicrosoftUIXaml_DataTemplate? {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectTemplateForItem(this, item_abi, &_result))
        return MicrosoftUIXaml_DataTemplateBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IDataTemplateSelectorFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x43217EDA, 0x6F7F, 0x5B80, 0xA70B, 0x944511B354AB)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IDataTemplateSelector> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IDataTemplateSelector>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IDataTemplateSelectorOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x980448CC, 0xC114, 0x5B89, 0x8E09, 0x61B0F264E592)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorOverrides {
    public func selectTemplateCore(_ item: WindowsRuntime.IInspectable?, _ container: MicrosoftUIXaml_DependencyObject?) throws -> MicrosoftUIXaml_DataTemplate? {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectTemplateCore(this, item_abi, container_abi, &_result))
        return MicrosoftUIXaml_DataTemplateBinding.fromABI(consuming: &_result)
    }

    public func selectTemplateForItemCore(_ item: WindowsRuntime.IInspectable?) throws -> MicrosoftUIXaml_DataTemplate? {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectTemplateForItemCore(this, item_abi, &_result))
        return MicrosoftUIXaml_DataTemplateBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IDragItemsCompletedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IDragItemsCompletedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC0138552, 0xF467, 0x5C3E, 0x8AF4, 0x593607762844)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IDragItemsCompletedEventArgs {
    public func get_Items() throws -> WindowsFoundationCollections_IVectorView<WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Items(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.Object.fromABI(consuming: &_result)
    }

    public func get_DropResult() throws -> WindowsApplicationModelDataTransfer_DataPackageOperation {
        var _result: SWRT_WindowsApplicationModelDataTransfer_DataPackageOperation = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DropResult(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageOperation.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IDragItemsStartingEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IDragItemsStartingEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA6938886, 0x20DF, 0x558E, 0xAC74, 0xBB5B7F2F7E90)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IDragItemsStartingEventArgs {
    public func get_Cancel() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Cancel(this, &_result))
        return _result
    }

    public func put_Cancel(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Cancel(this, value))
    }

    public func get_Items() throws -> WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Items(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.Object.fromABI(consuming: &_result)
    }

    public func get_Data() throws -> WindowsApplicationModelDataTransfer_DataPackage? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsApplicationModelDataTransfer_IDataPackage>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Data(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IFocusDisengagedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC0B4B88C, 0xC195, 0x5064, 0x84C7, 0x33CB262CB240)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IFocusDisengagedEventArgs {
}

// MARK: Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IFocusEngagedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1E71E8E4, 0x74B2, 0x50A1, 0x8F2B, 0x42C0118AB0EA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IFocusEngagedEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IGrid

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IGrid.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC4496219, 0x9014, 0x58A1, 0xB4AD, 0xC5044913A5BB)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IGrid {
    public func get_RowDefinitions() throws -> MicrosoftUIXamlControls_RowDefinitionCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_RowDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RowDefinitions(this, &_result))
        return MicrosoftUIXamlControls_RowDefinitionCollectionBinding.fromABI(consuming: &_result)
    }

    public func get_ColumnDefinitions() throws -> MicrosoftUIXamlControls_ColumnDefinitionCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_ColumnDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ColumnDefinitions(this, &_result))
        return MicrosoftUIXamlControls_ColumnDefinitionCollectionBinding.fromABI(consuming: &_result)
    }

    public func get_BackgroundSizing() throws -> MicrosoftUIXamlControls_BackgroundSizing {
        var _result: SWRT_MicrosoftUIXamlControls_BackgroundSizing = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BackgroundSizing(this, &_result))
        return MicrosoftUIXamlControls_BackgroundSizing.fromABI(_result)
    }

    public func put_BackgroundSizing(_ value: MicrosoftUIXamlControls_BackgroundSizing) throws {
        let value_abi = MicrosoftUIXamlControls_BackgroundSizing.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_BackgroundSizing(this, value_abi))
    }

    public func get_BorderBrush() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BorderBrush(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_BorderBrush(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_BorderBrush(this, value_abi))
    }

    public func get_BorderThickness() throws -> MicrosoftUIXaml_Thickness {
        var _result: SWRT_MicrosoftUIXaml_Thickness = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BorderThickness(this, &_result))
        return MicrosoftUIXaml_Thickness.fromABI(_result)
    }

    public func put_BorderThickness(_ value: MicrosoftUIXaml_Thickness) throws {
        let value_abi = MicrosoftUIXaml_Thickness.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_BorderThickness(this, value_abi))
    }

    public func get_CornerRadius() throws -> MicrosoftUIXaml_CornerRadius {
        var _result: SWRT_MicrosoftUIXaml_CornerRadius = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CornerRadius(this, &_result))
        return MicrosoftUIXaml_CornerRadius.fromABI(_result)
    }

    public func put_CornerRadius(_ value: MicrosoftUIXaml_CornerRadius) throws {
        let value_abi = MicrosoftUIXaml_CornerRadius.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CornerRadius(this, value_abi))
    }

    public func get_Padding() throws -> MicrosoftUIXaml_Thickness {
        var _result: SWRT_MicrosoftUIXaml_Thickness = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Padding(this, &_result))
        return MicrosoftUIXaml_Thickness.fromABI(_result)
    }

    public func put_Padding(_ value: MicrosoftUIXaml_Thickness) throws {
        let value_abi = MicrosoftUIXaml_Thickness.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Padding(this, value_abi))
    }

    public func get_RowSpacing() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RowSpacing(this, &_result))
        return _result
    }

    public func put_RowSpacing(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RowSpacing(this, value))
    }

    public func get_ColumnSpacing() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ColumnSpacing(this, &_result))
        return _result
    }

    public func put_ColumnSpacing(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ColumnSpacing(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IGridFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IGridFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB16BF561, 0xFC6C, 0x57C6, 0x8EBC, 0x0B06CE4513AA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IGridFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IGrid> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IGrid>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IGridStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IGridStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEF9CF81D, 0xA431, 0x50F4, 0xABF5, 0x3023FE447704)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IGridStatics {
    public func get_BackgroundSizingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BackgroundSizingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_BorderBrushProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BorderBrushProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_BorderThicknessProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BorderThicknessProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CornerRadiusProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CornerRadiusProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_PaddingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PaddingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_RowSpacingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RowSpacingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ColumnSpacingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ColumnSpacingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_RowProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RowProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getRow(_ element: MicrosoftUIXaml_FrameworkElement?) throws -> Swift.Int32 {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetRow(this, element_abi, &_result))
        return _result
    }

    public func setRow(_ element: MicrosoftUIXaml_FrameworkElement?, _ value: Swift.Int32) throws {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetRow(this, element_abi, value))
    }

    public func get_ColumnProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ColumnProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getColumn(_ element: MicrosoftUIXaml_FrameworkElement?) throws -> Swift.Int32 {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetColumn(this, element_abi, &_result))
        return _result
    }

    public func setColumn(_ element: MicrosoftUIXaml_FrameworkElement?, _ value: Swift.Int32) throws {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetColumn(this, element_abi, value))
    }

    public func get_RowSpanProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RowSpanProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getRowSpan(_ element: MicrosoftUIXaml_FrameworkElement?) throws -> Swift.Int32 {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetRowSpan(this, element_abi, &_result))
        return _result
    }

    public func setRowSpan(_ element: MicrosoftUIXaml_FrameworkElement?, _ value: Swift.Int32) throws {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetRowSpan(this, element_abi, value))
    }

    public func get_ColumnSpanProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ColumnSpanProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getColumnSpan(_ element: MicrosoftUIXaml_FrameworkElement?) throws -> Swift.Int32 {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetColumnSpan(this, element_abi, &_result))
        return _result
    }

    public func setColumnSpan(_ element: MicrosoftUIXaml_FrameworkElement?, _ value: Swift.Int32) throws {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetColumnSpan(this, element_abi, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IGroupStyle

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IGroupStyle.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA77D937E, 0x0188, 0x584C, 0xAB1D, 0x9DF1916EDC75)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IGroupStyle {
    public func get_Panel() throws -> MicrosoftUIXamlControls_ItemsPanelTemplate? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IItemsPanelTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Panel(this, &_result))
        return MicrosoftUIXamlControls_ItemsPanelTemplateBinding.fromABI(consuming: &_result)
    }

    public func put_Panel(_ value: MicrosoftUIXamlControls_ItemsPanelTemplate?) throws {
        var value_abi = try MicrosoftUIXamlControls_ItemsPanelTemplateBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ItemsPanelTemplateBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Panel(this, value_abi))
    }

    public func get_ContainerStyle() throws -> MicrosoftUIXaml_Style? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContainerStyle(this, &_result))
        return MicrosoftUIXaml_StyleBinding.fromABI(consuming: &_result)
    }

    public func put_ContainerStyle(_ value: MicrosoftUIXaml_Style?) throws {
        var value_abi = try MicrosoftUIXaml_StyleBinding.toABI(value)
        defer { MicrosoftUIXaml_StyleBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ContainerStyle(this, value_abi))
    }

    public func get_HeaderContainerStyle() throws -> MicrosoftUIXaml_Style? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeaderContainerStyle(this, &_result))
        return MicrosoftUIXaml_StyleBinding.fromABI(consuming: &_result)
    }

    public func put_HeaderContainerStyle(_ value: MicrosoftUIXaml_Style?) throws {
        var value_abi = try MicrosoftUIXaml_StyleBinding.toABI(value)
        defer { MicrosoftUIXaml_StyleBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HeaderContainerStyle(this, value_abi))
    }

    public func get_ContainerStyleSelector() throws -> MicrosoftUIXamlControls_StyleSelector? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IStyleSelector>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContainerStyleSelector(this, &_result))
        return MicrosoftUIXamlControls_StyleSelectorBinding.fromABI(consuming: &_result)
    }

    public func put_ContainerStyleSelector(_ value: MicrosoftUIXamlControls_StyleSelector?) throws {
        var value_abi = try MicrosoftUIXamlControls_StyleSelectorBinding.toABI(value)
        defer { MicrosoftUIXamlControls_StyleSelectorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ContainerStyleSelector(this, value_abi))
    }

    public func get_HeaderTemplate() throws -> MicrosoftUIXaml_DataTemplate? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeaderTemplate(this, &_result))
        return MicrosoftUIXaml_DataTemplateBinding.fromABI(consuming: &_result)
    }

    public func put_HeaderTemplate(_ value: MicrosoftUIXaml_DataTemplate?) throws {
        var value_abi = try MicrosoftUIXaml_DataTemplateBinding.toABI(value)
        defer { MicrosoftUIXaml_DataTemplateBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HeaderTemplate(this, value_abi))
    }

    public func get_HeaderTemplateSelector() throws -> MicrosoftUIXamlControls_DataTemplateSelector? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IDataTemplateSelector>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeaderTemplateSelector(this, &_result))
        return MicrosoftUIXamlControls_DataTemplateSelectorBinding.fromABI(consuming: &_result)
    }

    public func put_HeaderTemplateSelector(_ value: MicrosoftUIXamlControls_DataTemplateSelector?) throws {
        var value_abi = try MicrosoftUIXamlControls_DataTemplateSelectorBinding.toABI(value)
        defer { MicrosoftUIXamlControls_DataTemplateSelectorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HeaderTemplateSelector(this, value_abi))
    }

    public func get_HidesIfEmpty() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HidesIfEmpty(this, &_result))
        return _result
    }

    public func put_HidesIfEmpty(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HidesIfEmpty(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IGroupStyleFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IGroupStyleFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xDC884AA2, 0xE2A8, 0x57AB, 0x8CBC, 0xB1D8EC540B0C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IGroupStyleFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IGroupStyle> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IGroupStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IGroupStyleSelector

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IGroupStyleSelector.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x524F5086, 0x3E02, 0x5B71, 0xBE7C, 0x8A8FA0FEAA2C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IGroupStyleSelector {
    public func selectGroupStyle(_ group: WindowsRuntime.IInspectable?, _ level: Swift.UInt32) throws -> MicrosoftUIXamlControls_GroupStyle? {
        var group_abi = try WindowsRuntime.IInspectableBinding.toABI(group)
        defer { WindowsRuntime.IInspectableBinding.release(&group_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IGroupStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectGroupStyle(this, group_abi, level, &_result))
        return MicrosoftUIXamlControls_GroupStyleBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IGroupStyleSelectorFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IGroupStyleSelectorFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0E0699BE, 0x50C2, 0x5C15, 0xAED3, 0xE7BD663E5FAD)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IGroupStyleSelectorFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IGroupStyleSelector> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IGroupStyleSelector>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IGroupStyleSelectorOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IGroupStyleSelectorOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x80594304, 0xEBEB, 0x5A5D, 0xA794, 0xACDC214CBC94)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IGroupStyleSelectorOverrides {
    public func selectGroupStyleCore(_ group: WindowsRuntime.IInspectable?, _ level: Swift.UInt32) throws -> MicrosoftUIXamlControls_GroupStyle? {
        var group_abi = try WindowsRuntime.IInspectableBinding.toABI(group)
        defer { WindowsRuntime.IInspectableBinding.release(&group_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IGroupStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectGroupStyleCore(this, group_abi, level, &_result))
        return MicrosoftUIXamlControls_GroupStyleBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IIsTextTrimmedChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3C709B2F, 0x16BA, 0x55D2, 0xB6F6, 0xDFC54A1ED021)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IIsTextTrimmedChangedEventArgs {
}

// MARK: Microsoft.UI.Xaml.Controls.IItemClickEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IItemClickEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1CF87A70, 0x6348, 0x57EC, 0x9EAC, 0xFA0565ADC60F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IItemClickEventArgs {
    public func get_ClickedItem() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ClickedItem(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IItemContainerGenerator

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IItemContainerGenerator.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC4C5D5AE, 0xED98, 0x510F, 0xAFAE, 0x8A0AC6067A3B)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IItemContainerGenerator {
    public func add_ItemsChanged(_ handler: MicrosoftUIXamlControlsPrimitives_ItemsChangedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlControlsPrimitives_ItemsChangedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlControlsPrimitives_ItemsChangedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ItemsChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ItemsChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ItemsChanged(this, token_abi))
    }

    public func itemFromContainer(_ container: MicrosoftUIXaml_DependencyObject?) throws -> WindowsRuntime.IInspectable? {
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ItemFromContainer(this, container_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func containerFromItem(_ item: WindowsRuntime.IInspectable?) throws -> MicrosoftUIXaml_DependencyObject? {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ContainerFromItem(this, item_abi, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func indexFromContainer(_ container: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Int32 {
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexFromContainer(this, container_abi, &_result))
        return _result
    }

    public func containerFromIndex(_ index: Swift.Int32) throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ContainerFromIndex(this, index, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func getItemContainerGeneratorForPanel(_ panel: MicrosoftUIXamlControls_Panel?) throws -> MicrosoftUIXamlControls_ItemContainerGenerator? {
        var panel_abi = try MicrosoftUIXamlControls_PanelBinding.toABI(panel)
        defer { MicrosoftUIXamlControls_PanelBinding.release(&panel_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IItemContainerGenerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetItemContainerGeneratorForPanel(this, panel_abi, &_result))
        return MicrosoftUIXamlControls_ItemContainerGeneratorBinding.fromABI(consuming: &_result)
    }

    public func startAt(_ position: MicrosoftUIXamlControlsPrimitives_GeneratorPosition, _ direction: MicrosoftUIXamlControlsPrimitives_GeneratorDirection, _ allowStartAtRealizedItem: Swift.Bool) throws {
        let position_abi = MicrosoftUIXamlControlsPrimitives_GeneratorPosition.toABI(position)
        let direction_abi = MicrosoftUIXamlControlsPrimitives_GeneratorDirection.toABI(direction)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.StartAt(this, position_abi, direction_abi, allowStartAtRealizedItem))
    }

    public func stop() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Stop(this))
    }

    public func generateNext(_ isNewlyRealized: inout Swift.Bool) throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GenerateNext(this, &isNewlyRealized, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func prepareItemContainer(_ container: MicrosoftUIXaml_DependencyObject?) throws {
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.PrepareItemContainer(this, container_abi))
    }

    public func removeAll() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAll(this))
    }

    public func remove(_ position: MicrosoftUIXamlControlsPrimitives_GeneratorPosition, _ count: Swift.Int32) throws {
        let position_abi = MicrosoftUIXamlControlsPrimitives_GeneratorPosition.toABI(position)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Remove(this, position_abi, count))
    }

    public func generatorPositionFromIndex(_ itemIndex: Swift.Int32) throws -> MicrosoftUIXamlControlsPrimitives_GeneratorPosition {
        var _result: SWRT_MicrosoftUIXamlControlsPrimitives_GeneratorPosition = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GeneratorPositionFromIndex(this, itemIndex, &_result))
        return MicrosoftUIXamlControlsPrimitives_GeneratorPosition.fromABI(_result)
    }

    public func indexFromGeneratorPosition(_ position: MicrosoftUIXamlControlsPrimitives_GeneratorPosition) throws -> Swift.Int32 {
        let position_abi = MicrosoftUIXamlControlsPrimitives_GeneratorPosition.toABI(position)
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexFromGeneratorPosition(this, position_abi, &_result))
        return _result
    }

    public func recycle(_ position: MicrosoftUIXamlControlsPrimitives_GeneratorPosition, _ count: Swift.Int32) throws {
        let position_abi = MicrosoftUIXamlControlsPrimitives_GeneratorPosition.toABI(position)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Recycle(this, position_abi, count))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IItemContainerMapping

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IItemContainerMapping.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB3E03A32, 0xEA83, 0x5626, 0xBFDA, 0xD327A1C7550C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IItemContainerMapping {
    public func itemFromContainer(_ container: MicrosoftUIXaml_DependencyObject?) throws -> WindowsRuntime.IInspectable? {
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ItemFromContainer(this, container_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func containerFromItem(_ item: WindowsRuntime.IInspectable?) throws -> MicrosoftUIXaml_DependencyObject? {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ContainerFromItem(this, item_abi, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func indexFromContainer(_ container: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Int32 {
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexFromContainer(this, container_abi, &_result))
        return _result
    }

    public func containerFromIndex(_ index: Swift.Int32) throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ContainerFromIndex(this, index, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IItemsControl

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IItemsControl.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xBF1CCB54, 0x83E2, 0x5B98, 0xACBC, 0x736F876C3D35)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IItemsControl {
    public func get_ItemsSource() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemsSource(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_ItemsSource(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ItemsSource(this, value_abi))
    }

    public func get_Items() throws -> MicrosoftUIXamlControls_ItemCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IObservableVector_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Items(this, &_result))
        return MicrosoftUIXamlControls_ItemCollectionBinding.fromABI(consuming: &_result)
    }

    public func get_ItemTemplate() throws -> MicrosoftUIXaml_DataTemplate? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemTemplate(this, &_result))
        return MicrosoftUIXaml_DataTemplateBinding.fromABI(consuming: &_result)
    }

    public func put_ItemTemplate(_ value: MicrosoftUIXaml_DataTemplate?) throws {
        var value_abi = try MicrosoftUIXaml_DataTemplateBinding.toABI(value)
        defer { MicrosoftUIXaml_DataTemplateBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ItemTemplate(this, value_abi))
    }

    public func get_ItemTemplateSelector() throws -> MicrosoftUIXamlControls_DataTemplateSelector? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IDataTemplateSelector>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemTemplateSelector(this, &_result))
        return MicrosoftUIXamlControls_DataTemplateSelectorBinding.fromABI(consuming: &_result)
    }

    public func put_ItemTemplateSelector(_ value: MicrosoftUIXamlControls_DataTemplateSelector?) throws {
        var value_abi = try MicrosoftUIXamlControls_DataTemplateSelectorBinding.toABI(value)
        defer { MicrosoftUIXamlControls_DataTemplateSelectorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ItemTemplateSelector(this, value_abi))
    }

    public func get_ItemsPanel() throws -> MicrosoftUIXamlControls_ItemsPanelTemplate? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IItemsPanelTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemsPanel(this, &_result))
        return MicrosoftUIXamlControls_ItemsPanelTemplateBinding.fromABI(consuming: &_result)
    }

    public func put_ItemsPanel(_ value: MicrosoftUIXamlControls_ItemsPanelTemplate?) throws {
        var value_abi = try MicrosoftUIXamlControls_ItemsPanelTemplateBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ItemsPanelTemplateBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ItemsPanel(this, value_abi))
    }

    public func get_DisplayMemberPath() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DisplayMemberPath(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_DisplayMemberPath(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DisplayMemberPath(this, value_abi))
    }

    public func get_ItemsPanelRoot() throws -> MicrosoftUIXamlControls_Panel? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IPanel>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemsPanelRoot(this, &_result))
        return MicrosoftUIXamlControls_PanelBinding.fromABI(consuming: &_result)
    }

    public func get_ItemContainerStyle() throws -> MicrosoftUIXaml_Style? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemContainerStyle(this, &_result))
        return MicrosoftUIXaml_StyleBinding.fromABI(consuming: &_result)
    }

    public func put_ItemContainerStyle(_ value: MicrosoftUIXaml_Style?) throws {
        var value_abi = try MicrosoftUIXaml_StyleBinding.toABI(value)
        defer { MicrosoftUIXaml_StyleBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ItemContainerStyle(this, value_abi))
    }

    public func get_ItemContainerStyleSelector() throws -> MicrosoftUIXamlControls_StyleSelector? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IStyleSelector>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemContainerStyleSelector(this, &_result))
        return MicrosoftUIXamlControls_StyleSelectorBinding.fromABI(consuming: &_result)
    }

    public func put_ItemContainerStyleSelector(_ value: MicrosoftUIXamlControls_StyleSelector?) throws {
        var value_abi = try MicrosoftUIXamlControls_StyleSelectorBinding.toABI(value)
        defer { MicrosoftUIXamlControls_StyleSelectorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ItemContainerStyleSelector(this, value_abi))
    }

    public func get_ItemContainerGenerator() throws -> MicrosoftUIXamlControls_ItemContainerGenerator? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IItemContainerGenerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemContainerGenerator(this, &_result))
        return MicrosoftUIXamlControls_ItemContainerGeneratorBinding.fromABI(consuming: &_result)
    }

    public func get_ItemContainerTransitions() throws -> MicrosoftUIXamlMediaAnimation_TransitionCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemContainerTransitions(this, &_result))
        return MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.fromABI(consuming: &_result)
    }

    public func put_ItemContainerTransitions(_ value: MicrosoftUIXamlMediaAnimation_TransitionCollection?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ItemContainerTransitions(this, value_abi))
    }

    public func get_GroupStyle() throws -> WindowsFoundationCollections_IObservableVector<MicrosoftUIXamlControls_GroupStyle?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IObservableVector_MicrosoftUIXamlControls_GroupStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_GroupStyle(this, &_result))
        return WindowsFoundationCollections_IObservableVectorBinding.GroupStyle.fromABI(consuming: &_result)
    }

    public func get_GroupStyleSelector() throws -> MicrosoftUIXamlControls_GroupStyleSelector? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IGroupStyleSelector>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_GroupStyleSelector(this, &_result))
        return MicrosoftUIXamlControls_GroupStyleSelectorBinding.fromABI(consuming: &_result)
    }

    public func put_GroupStyleSelector(_ value: MicrosoftUIXamlControls_GroupStyleSelector?) throws {
        var value_abi = try MicrosoftUIXamlControls_GroupStyleSelectorBinding.toABI(value)
        defer { MicrosoftUIXamlControls_GroupStyleSelectorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_GroupStyleSelector(this, value_abi))
    }

    public func get_IsGrouping() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsGrouping(this, &_result))
        return _result
    }

    public func groupHeaderContainerFromItemContainer(_ itemContainer: MicrosoftUIXaml_DependencyObject?) throws -> MicrosoftUIXaml_DependencyObject? {
        var itemContainer_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(itemContainer)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&itemContainer_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GroupHeaderContainerFromItemContainer(this, itemContainer_abi, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IItemsControlFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IItemsControlFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB2686273, 0x2DD3, 0x5454, 0x9F25, 0x247E66270336)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IItemsControlFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IItemsControl> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IItemsControl>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IItemsControlOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IItemsControlOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x285C215F, 0x64B2, 0x5F7D, 0x88D2, 0x56C6658F73EE)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IItemsControlOverrides {
    public func isItemItsOwnContainerOverride(_ item: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsItemItsOwnContainerOverride(this, item_abi, &_result))
        return _result
    }

    public func getContainerForItemOverride() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetContainerForItemOverride(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func clearContainerForItemOverride(_ element: MicrosoftUIXaml_DependencyObject?, _ item: WindowsRuntime.IInspectable?) throws {
        var element_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(element)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&element_abi) }
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ClearContainerForItemOverride(this, element_abi, item_abi))
    }

    public func prepareContainerForItemOverride(_ element: MicrosoftUIXaml_DependencyObject?, _ item: WindowsRuntime.IInspectable?) throws {
        var element_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(element)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&element_abi) }
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.PrepareContainerForItemOverride(this, element_abi, item_abi))
    }

    public func onItemsChanged(_ e: WindowsRuntime.IInspectable?) throws {
        var e_abi = try WindowsRuntime.IInspectableBinding.toABI(e)
        defer { WindowsRuntime.IInspectableBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnItemsChanged(this, e_abi))
    }

    public func onItemContainerStyleChanged(_ oldItemContainerStyle: MicrosoftUIXaml_Style?, _ newItemContainerStyle: MicrosoftUIXaml_Style?) throws {
        var oldItemContainerStyle_abi = try MicrosoftUIXaml_StyleBinding.toABI(oldItemContainerStyle)
        defer { MicrosoftUIXaml_StyleBinding.release(&oldItemContainerStyle_abi) }
        var newItemContainerStyle_abi = try MicrosoftUIXaml_StyleBinding.toABI(newItemContainerStyle)
        defer { MicrosoftUIXaml_StyleBinding.release(&newItemContainerStyle_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnItemContainerStyleChanged(this, oldItemContainerStyle_abi, newItemContainerStyle_abi))
    }

    public func onItemContainerStyleSelectorChanged(_ oldItemContainerStyleSelector: MicrosoftUIXamlControls_StyleSelector?, _ newItemContainerStyleSelector: MicrosoftUIXamlControls_StyleSelector?) throws {
        var oldItemContainerStyleSelector_abi = try MicrosoftUIXamlControls_StyleSelectorBinding.toABI(oldItemContainerStyleSelector)
        defer { MicrosoftUIXamlControls_StyleSelectorBinding.release(&oldItemContainerStyleSelector_abi) }
        var newItemContainerStyleSelector_abi = try MicrosoftUIXamlControls_StyleSelectorBinding.toABI(newItemContainerStyleSelector)
        defer { MicrosoftUIXamlControls_StyleSelectorBinding.release(&newItemContainerStyleSelector_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnItemContainerStyleSelectorChanged(this, oldItemContainerStyleSelector_abi, newItemContainerStyleSelector_abi))
    }

    public func onItemTemplateChanged(_ oldItemTemplate: MicrosoftUIXaml_DataTemplate?, _ newItemTemplate: MicrosoftUIXaml_DataTemplate?) throws {
        var oldItemTemplate_abi = try MicrosoftUIXaml_DataTemplateBinding.toABI(oldItemTemplate)
        defer { MicrosoftUIXaml_DataTemplateBinding.release(&oldItemTemplate_abi) }
        var newItemTemplate_abi = try MicrosoftUIXaml_DataTemplateBinding.toABI(newItemTemplate)
        defer { MicrosoftUIXaml_DataTemplateBinding.release(&newItemTemplate_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnItemTemplateChanged(this, oldItemTemplate_abi, newItemTemplate_abi))
    }

    public func onItemTemplateSelectorChanged(_ oldItemTemplateSelector: MicrosoftUIXamlControls_DataTemplateSelector?, _ newItemTemplateSelector: MicrosoftUIXamlControls_DataTemplateSelector?) throws {
        var oldItemTemplateSelector_abi = try MicrosoftUIXamlControls_DataTemplateSelectorBinding.toABI(oldItemTemplateSelector)
        defer { MicrosoftUIXamlControls_DataTemplateSelectorBinding.release(&oldItemTemplateSelector_abi) }
        var newItemTemplateSelector_abi = try MicrosoftUIXamlControls_DataTemplateSelectorBinding.toABI(newItemTemplateSelector)
        defer { MicrosoftUIXamlControls_DataTemplateSelectorBinding.release(&newItemTemplateSelector_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnItemTemplateSelectorChanged(this, oldItemTemplateSelector_abi, newItemTemplateSelector_abi))
    }

    public func onGroupStyleSelectorChanged(_ oldGroupStyleSelector: MicrosoftUIXamlControls_GroupStyleSelector?, _ newGroupStyleSelector: MicrosoftUIXamlControls_GroupStyleSelector?) throws {
        var oldGroupStyleSelector_abi = try MicrosoftUIXamlControls_GroupStyleSelectorBinding.toABI(oldGroupStyleSelector)
        defer { MicrosoftUIXamlControls_GroupStyleSelectorBinding.release(&oldGroupStyleSelector_abi) }
        var newGroupStyleSelector_abi = try MicrosoftUIXamlControls_GroupStyleSelectorBinding.toABI(newGroupStyleSelector)
        defer { MicrosoftUIXamlControls_GroupStyleSelectorBinding.release(&newGroupStyleSelector_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnGroupStyleSelectorChanged(this, oldGroupStyleSelector_abi, newGroupStyleSelector_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IItemsControlStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IItemsControlStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4FB961E1, 0x5F91, 0x5585, 0xA692, 0x6825CDE3ED1E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IItemsControlStatics {
    public func get_ItemsSourceProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemsSourceProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ItemTemplateProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemTemplateProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ItemTemplateSelectorProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemTemplateSelectorProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ItemsPanelProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemsPanelProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_DisplayMemberPathProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DisplayMemberPathProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ItemContainerStyleProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemContainerStyleProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ItemContainerStyleSelectorProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemContainerStyleSelectorProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ItemContainerTransitionsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemContainerTransitionsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_GroupStyleSelectorProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_GroupStyleSelectorProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsGroupingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsGroupingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getItemsOwner(_ element: MicrosoftUIXaml_DependencyObject?) throws -> MicrosoftUIXamlControls_ItemsControl? {
        var element_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(element)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&element_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IItemsControl>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetItemsOwner(this, element_abi, &_result))
        return MicrosoftUIXamlControls_ItemsControlBinding.fromABI(consuming: &_result)
    }

    public func itemsControlFromItemContainer(_ container: MicrosoftUIXaml_DependencyObject?) throws -> MicrosoftUIXamlControls_ItemsControl? {
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IItemsControl>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ItemsControlFromItemContainer(this, container_abi, &_result))
        return MicrosoftUIXamlControls_ItemsControlBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IItemsPanelTemplate

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IItemsPanelTemplate.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6153AF2F, 0xF095, 0x5E8C, 0x89D4, 0x9E03203B9CC2)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IItemsPanelTemplate {
}

// MARK: Microsoft.UI.Xaml.Controls.IListViewBase

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IListViewBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x775C57AC, 0xABCE, 0x5BEB, 0x8E34, 0x3B8158AEDD80)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IListViewBase {
    public func get_SelectedItems() throws -> WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedItems(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.Object.fromABI(consuming: &_result)
    }

    public func get_SelectionMode() throws -> MicrosoftUIXamlControls_ListViewSelectionMode {
        var _result: SWRT_MicrosoftUIXamlControls_ListViewSelectionMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectionMode(this, &_result))
        return MicrosoftUIXamlControls_ListViewSelectionMode.fromABI(_result)
    }

    public func put_SelectionMode(_ value: MicrosoftUIXamlControls_ListViewSelectionMode) throws {
        let value_abi = MicrosoftUIXamlControls_ListViewSelectionMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SelectionMode(this, value_abi))
    }

    public func get_IsSwipeEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSwipeEnabled(this, &_result))
        return _result
    }

    public func put_IsSwipeEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsSwipeEnabled(this, value))
    }

    public func get_CanDragItems() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanDragItems(this, &_result))
        return _result
    }

    public func put_CanDragItems(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CanDragItems(this, value))
    }

    public func get_CanReorderItems() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanReorderItems(this, &_result))
        return _result
    }

    public func put_CanReorderItems(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CanReorderItems(this, value))
    }

    public func get_IsItemClickEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsItemClickEnabled(this, &_result))
        return _result
    }

    public func put_IsItemClickEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsItemClickEnabled(this, value))
    }

    public func get_DataFetchSize() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DataFetchSize(this, &_result))
        return _result
    }

    public func put_DataFetchSize(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DataFetchSize(this, value))
    }

    public func get_IncrementalLoadingThreshold() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IncrementalLoadingThreshold(this, &_result))
        return _result
    }

    public func put_IncrementalLoadingThreshold(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IncrementalLoadingThreshold(this, value))
    }

    public func get_IncrementalLoadingTrigger() throws -> MicrosoftUIXamlControls_IncrementalLoadingTrigger {
        var _result: SWRT_MicrosoftUIXamlControls_IncrementalLoadingTrigger = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IncrementalLoadingTrigger(this, &_result))
        return MicrosoftUIXamlControls_IncrementalLoadingTrigger.fromABI(_result)
    }

    public func put_IncrementalLoadingTrigger(_ value: MicrosoftUIXamlControls_IncrementalLoadingTrigger) throws {
        let value_abi = MicrosoftUIXamlControls_IncrementalLoadingTrigger.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IncrementalLoadingTrigger(this, value_abi))
    }

    public func get_ShowsScrollingPlaceholders() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ShowsScrollingPlaceholders(this, &_result))
        return _result
    }

    public func put_ShowsScrollingPlaceholders(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ShowsScrollingPlaceholders(this, value))
    }

    public func get_ReorderMode() throws -> MicrosoftUIXamlControls_ListViewReorderMode {
        var _result: SWRT_MicrosoftUIXamlControls_ListViewReorderMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ReorderMode(this, &_result))
        return MicrosoftUIXamlControls_ListViewReorderMode.fromABI(_result)
    }

    public func put_ReorderMode(_ value: MicrosoftUIXamlControls_ListViewReorderMode) throws {
        let value_abi = MicrosoftUIXamlControls_ListViewReorderMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ReorderMode(this, value_abi))
    }

    public func get_SelectedRanges() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlData_ItemIndexRange?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlData_ItemIndexRange>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedRanges(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.ItemIndexRange.fromABI(consuming: &_result)
    }

    public func get_IsMultiSelectCheckBoxEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsMultiSelectCheckBoxEnabled(this, &_result))
        return _result
    }

    public func put_IsMultiSelectCheckBoxEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsMultiSelectCheckBoxEnabled(this, value))
    }

    public func get_SingleSelectionFollowsFocus() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SingleSelectionFollowsFocus(this, &_result))
        return _result
    }

    public func put_SingleSelectionFollowsFocus(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SingleSelectionFollowsFocus(this, value))
    }

    public func add_ItemClick(_ handler: MicrosoftUIXamlControls_ItemClickEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlControls_ItemClickEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlControls_ItemClickEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ItemClick(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ItemClick(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ItemClick(this, token_abi))
    }

    public func add_DragItemsStarting(_ handler: MicrosoftUIXamlControls_DragItemsStartingEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlControls_DragItemsStartingEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlControls_DragItemsStartingEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DragItemsStarting(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DragItemsStarting(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DragItemsStarting(this, token_abi))
    }

    public func add_DragItemsCompleted(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_DragItemsCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.ListViewBase_DragItemsCompletedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.ListViewBase_DragItemsCompletedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DragItemsCompleted(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DragItemsCompleted(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DragItemsCompleted(this, token_abi))
    }

    public func add_ContainerContentChanging(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ContainerContentChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ContainerContentChangingEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ContainerContentChangingEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ContainerContentChanging(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ContainerContentChanging(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ContainerContentChanging(this, token_abi))
    }

    public func add_ChoosingItemContainer(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ChoosingItemContainerEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ChoosingItemContainerEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ChoosingItemContainerEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ChoosingItemContainer(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ChoosingItemContainer(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ChoosingItemContainer(this, token_abi))
    }

    public func add_ChoosingGroupHeaderContainer(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ChoosingGroupHeaderContainerEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.ListViewBase_ChoosingGroupHeaderContainerEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ChoosingGroupHeaderContainer(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ChoosingGroupHeaderContainer(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ChoosingGroupHeaderContainer(this, token_abi))
    }

    public func scrollIntoView(_ item: WindowsRuntime.IInspectable?) throws {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ScrollIntoView(this, item_abi))
    }

    public func selectAll() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectAll(this))
    }

    public func loadMoreItemsAsync() throws -> WindowsFoundation_IAsyncOperation<MicrosoftUIXamlData_LoadMoreItemsResult>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IAsyncOperation_MicrosoftUIXamlData_LoadMoreItemsResult>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.LoadMoreItemsAsync(this, &_result))
        return WindowsFoundation_IAsyncOperationBinding.LoadMoreItemsResult.fromABI(consuming: &_result)
    }

    public func scrollIntoViewWithAlignment(_ item: WindowsRuntime.IInspectable?, _ alignment: MicrosoftUIXamlControls_ScrollIntoViewAlignment) throws {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        let alignment_abi = MicrosoftUIXamlControls_ScrollIntoViewAlignment.toABI(alignment)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ScrollIntoViewWithAlignment(this, item_abi, alignment_abi))
    }

    public func setDesiredContainerUpdateDuration(_ duration: WindowsFoundation_TimeSpan) throws {
        let duration_abi = WindowsFoundation_TimeSpan.toABI(duration)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetDesiredContainerUpdateDuration(this, duration_abi))
    }

    public func selectRange(_ itemIndexRange: MicrosoftUIXamlData_ItemIndexRange?) throws {
        var itemIndexRange_abi = try MicrosoftUIXamlData_ItemIndexRangeBinding.toABI(itemIndexRange)
        defer { MicrosoftUIXamlData_ItemIndexRangeBinding.release(&itemIndexRange_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectRange(this, itemIndexRange_abi))
    }

    public func deselectRange(_ itemIndexRange: MicrosoftUIXamlData_ItemIndexRange?) throws {
        var itemIndexRange_abi = try MicrosoftUIXamlData_ItemIndexRangeBinding.toABI(itemIndexRange)
        defer { MicrosoftUIXamlData_ItemIndexRangeBinding.release(&itemIndexRange_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.DeselectRange(this, itemIndexRange_abi))
    }

    public func isDragSource() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IsDragSource(this, &_result))
        return _result
    }

    public func tryStartConnectedAnimationAsync(_ animation: MicrosoftUIXamlMediaAnimation_ConnectedAnimation?, _ item: WindowsRuntime.IInspectable?, _ elementName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool>? {
        var animation_abi = try MicrosoftUIXamlMediaAnimation_ConnectedAnimationBinding.toABI(animation)
        defer { MicrosoftUIXamlMediaAnimation_ConnectedAnimationBinding.release(&animation_abi) }
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var elementName_abi = try WindowsRuntime.StringBinding.toABI(elementName)
        defer { WindowsRuntime.StringBinding.release(&elementName_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IAsyncOperation_Bool>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryStartConnectedAnimationAsync(this, animation_abi, item_abi, elementName_abi, &_result))
        return WindowsFoundation_IAsyncOperationBinding.Boolean.fromABI(consuming: &_result)
    }

    public func prepareConnectedAnimation(_ key: Swift.String, _ item: WindowsRuntime.IInspectable?, _ elementName: Swift.String) throws -> MicrosoftUIXamlMediaAnimation_ConnectedAnimation? {
        var key_abi = try WindowsRuntime.StringBinding.toABI(key)
        defer { WindowsRuntime.StringBinding.release(&key_abi) }
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var elementName_abi = try WindowsRuntime.StringBinding.toABI(elementName)
        defer { WindowsRuntime.StringBinding.release(&elementName_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMediaAnimation_IConnectedAnimation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.PrepareConnectedAnimation(this, key_abi, item_abi, elementName_abi, &_result))
        return MicrosoftUIXamlMediaAnimation_ConnectedAnimationBinding.fromABI(consuming: &_result)
    }

    public func get_Header() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Header(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_Header(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Header(this, value_abi))
    }

    public func get_HeaderTemplate() throws -> MicrosoftUIXaml_DataTemplate? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeaderTemplate(this, &_result))
        return MicrosoftUIXaml_DataTemplateBinding.fromABI(consuming: &_result)
    }

    public func put_HeaderTemplate(_ value: MicrosoftUIXaml_DataTemplate?) throws {
        var value_abi = try MicrosoftUIXaml_DataTemplateBinding.toABI(value)
        defer { MicrosoftUIXaml_DataTemplateBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HeaderTemplate(this, value_abi))
    }

    public func get_HeaderTransitions() throws -> MicrosoftUIXamlMediaAnimation_TransitionCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeaderTransitions(this, &_result))
        return MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.fromABI(consuming: &_result)
    }

    public func put_HeaderTransitions(_ value: MicrosoftUIXamlMediaAnimation_TransitionCollection?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HeaderTransitions(this, value_abi))
    }

    public func get_Footer() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Footer(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_Footer(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Footer(this, value_abi))
    }

    public func get_FooterTemplate() throws -> MicrosoftUIXaml_DataTemplate? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDataTemplate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FooterTemplate(this, &_result))
        return MicrosoftUIXaml_DataTemplateBinding.fromABI(consuming: &_result)
    }

    public func put_FooterTemplate(_ value: MicrosoftUIXaml_DataTemplate?) throws {
        var value_abi = try MicrosoftUIXaml_DataTemplateBinding.toABI(value)
        defer { MicrosoftUIXaml_DataTemplateBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FooterTemplate(this, value_abi))
    }

    public func get_FooterTransitions() throws -> MicrosoftUIXamlMediaAnimation_TransitionCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FooterTransitions(this, &_result))
        return MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.fromABI(consuming: &_result)
    }

    public func put_FooterTransitions(_ value: MicrosoftUIXamlMediaAnimation_TransitionCollection?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FooterTransitions(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IListViewBaseFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IListViewBaseFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x44092863, 0xC09E, 0x551E, 0x85BF, 0x951B552950C8)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IListViewBaseFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IListViewBase> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IListViewBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IListViewBaseHeaderItem

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IListViewBaseHeaderItem.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9220C4FF, 0x1974, 0x53FD, 0xAD74, 0xC29E7B360A06)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IListViewBaseHeaderItem {
}

// MARK: Microsoft.UI.Xaml.Controls.IListViewBaseHeaderItemFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IListViewBaseHeaderItemFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x228FC10A, 0xB86F, 0x5B57, 0x96F4, 0x34D9F9FB8711)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IListViewBaseHeaderItemFactory {
}

// MARK: Microsoft.UI.Xaml.Controls.IListViewBaseStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IListViewBaseStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB8487E94, 0x010F, 0x56D4, 0x9F76, 0x94BF8C462745)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IListViewBaseStatics {
    public func get_SelectionModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectionModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsSwipeEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSwipeEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CanDragItemsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanDragItemsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CanReorderItemsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanReorderItemsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsItemClickEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsItemClickEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_DataFetchSizeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DataFetchSizeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IncrementalLoadingThresholdProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IncrementalLoadingThresholdProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IncrementalLoadingTriggerProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IncrementalLoadingTriggerProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ShowsScrollingPlaceholdersProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ShowsScrollingPlaceholdersProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ReorderModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ReorderModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsMultiSelectCheckBoxEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsMultiSelectCheckBoxEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_SingleSelectionFollowsFocusProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SingleSelectionFollowsFocusProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_SemanticZoomOwnerProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SemanticZoomOwnerProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsActiveViewProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsActiveViewProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsZoomedInViewProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsZoomedInViewProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_HeaderProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeaderProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_HeaderTemplateProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeaderTemplateProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_HeaderTransitionsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeaderTransitionsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FooterProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FooterProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FooterTemplateProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FooterTemplateProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FooterTransitionsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FooterTransitionsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IPanel

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IPanel.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x27A1B418, 0x56F3, 0x525E, 0xB883, 0xCEFED905EED3)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IPanel {
    public func get_Children() throws -> MicrosoftUIXamlControls_UIElementCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_UIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Children(this, &_result))
        return MicrosoftUIXamlControls_UIElementCollectionBinding.fromABI(consuming: &_result)
    }

    public func get_Background() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Background(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_Background(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Background(this, value_abi))
    }

    public func get_IsItemsHost() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsItemsHost(this, &_result))
        return _result
    }

    public func get_ChildrenTransitions() throws -> MicrosoftUIXamlMediaAnimation_TransitionCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ChildrenTransitions(this, &_result))
        return MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.fromABI(consuming: &_result)
    }

    public func put_ChildrenTransitions(_ value: MicrosoftUIXamlMediaAnimation_TransitionCollection?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionCollectionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ChildrenTransitions(this, value_abi))
    }

    public func get_BackgroundTransition() throws -> MicrosoftUIXaml_BrushTransition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IBrushTransition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BackgroundTransition(this, &_result))
        return MicrosoftUIXaml_BrushTransitionBinding.fromABI(consuming: &_result)
    }

    public func put_BackgroundTransition(_ value: MicrosoftUIXaml_BrushTransition?) throws {
        var value_abi = try MicrosoftUIXaml_BrushTransitionBinding.toABI(value)
        defer { MicrosoftUIXaml_BrushTransitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_BackgroundTransition(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IPanelFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IPanelFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF5E7E21C, 0x4C97, 0x5D20, 0xBEE6, 0x3E4FC6AB14E9)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IPanelFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IPanel> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IPanel>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IPanelStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IPanelStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x76A9CAA7, 0xA5D4, 0x5061, 0xA325, 0x17C76F66DE51)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IPanelStatics {
    public func get_BackgroundProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BackgroundProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsItemsHostProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsItemsHostProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ChildrenTransitionsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ChildrenTransitionsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IRowDefinition

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IRowDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFE870F2F, 0x89EF, 0x5DAC, 0x9F33, 0x968D0DC577C3)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IRowDefinition {
    public func get_Height() throws -> MicrosoftUIXaml_GridLength {
        var _result: SWRT_MicrosoftUIXaml_GridLength = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Height(this, &_result))
        return MicrosoftUIXaml_GridLength.fromABI(_result)
    }

    public func put_Height(_ value: MicrosoftUIXaml_GridLength) throws {
        let value_abi = MicrosoftUIXaml_GridLength.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Height(this, value_abi))
    }

    public func get_MaxHeight() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxHeight(this, &_result))
        return _result
    }

    public func put_MaxHeight(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_MaxHeight(this, value))
    }

    public func get_MinHeight() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MinHeight(this, &_result))
        return _result
    }

    public func put_MinHeight(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_MinHeight(this, value))
    }

    public func get_ActualHeight() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ActualHeight(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IRowDefinitionStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IRowDefinitionStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7317C7C5, 0xFD6F, 0x58D9, 0x9B53, 0x4978DBACDE23)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IRowDefinitionStatics {
    public func get_HeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MaxHeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxHeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MinHeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MinHeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ISelectionChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ISelectionChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB6C18076, 0x4B76, 0x5416, 0xAD29, 0xE2DC20C46246)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ISelectionChangedEventArgs {
    public func get_AddedItems() throws -> WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AddedItems(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.Object.fromABI(consuming: &_result)
    }

    public func get_RemovedItems() throws -> WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RemovedItems(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.Object.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ISelectionChangedEventArgsFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ISelectionChangedEventArgsFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0FCD041D, 0x465F, 0x5745, 0x9882, 0x0C8348E4135D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ISelectionChangedEventArgsFactory {
    public func createInstanceWithRemovedItemsAndAddedItems(_ removedItems: WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?>?, _ addedItems: WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?>?, _ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_ISelectionChangedEventArgs> {
        var removedItems_abi = try WindowsFoundationCollections_IVectorBinding.Object.toABI(removedItems)
        defer { WindowsFoundationCollections_IVectorBinding.Object.release(&removedItems_abi) }
        var addedItems_abi = try WindowsFoundationCollections_IVectorBinding.Object.toABI(addedItems)
        defer { WindowsFoundationCollections_IVectorBinding.Object.release(&addedItems_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_ISelectionChangedEventArgs>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstanceWithRemovedItemsAndAddedItems(this, removedItems_abi, addedItems_abi, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ISemanticZoom

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ISemanticZoom.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7E14616D, 0x55EF, 0x548C, 0xA997, 0xC923E302718F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ISemanticZoom {
    public func get_ZoomedInView() throws -> MicrosoftUIXamlControls_ISemanticZoomInformation? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_ISemanticZoomInformation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ZoomedInView(this, &_result))
        return MicrosoftUIXamlControls_ISemanticZoomInformationBinding.fromABI(consuming: &_result)
    }

    public func put_ZoomedInView(_ value: MicrosoftUIXamlControls_ISemanticZoomInformation?) throws {
        var value_abi = try MicrosoftUIXamlControls_ISemanticZoomInformationBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ISemanticZoomInformationBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ZoomedInView(this, value_abi))
    }

    public func get_ZoomedOutView() throws -> MicrosoftUIXamlControls_ISemanticZoomInformation? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_ISemanticZoomInformation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ZoomedOutView(this, &_result))
        return MicrosoftUIXamlControls_ISemanticZoomInformationBinding.fromABI(consuming: &_result)
    }

    public func put_ZoomedOutView(_ value: MicrosoftUIXamlControls_ISemanticZoomInformation?) throws {
        var value_abi = try MicrosoftUIXamlControls_ISemanticZoomInformationBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ISemanticZoomInformationBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ZoomedOutView(this, value_abi))
    }

    public func get_IsZoomedInViewActive() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsZoomedInViewActive(this, &_result))
        return _result
    }

    public func put_IsZoomedInViewActive(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsZoomedInViewActive(this, value))
    }

    public func get_CanChangeViews() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanChangeViews(this, &_result))
        return _result
    }

    public func put_CanChangeViews(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CanChangeViews(this, value))
    }

    public func add_ViewChangeStarted(_ handler: MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ViewChangeStarted(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ViewChangeStarted(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ViewChangeStarted(this, token_abi))
    }

    public func add_ViewChangeCompleted(_ handler: MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ViewChangeCompleted(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ViewChangeCompleted(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ViewChangeCompleted(this, token_abi))
    }

    public func toggleActiveView() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ToggleActiveView(this))
    }

    public func get_IsZoomOutButtonEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsZoomOutButtonEnabled(this, &_result))
        return _result
    }

    public func put_IsZoomOutButtonEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsZoomOutButtonEnabled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ISemanticZoomInformation

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ISemanticZoomInformation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x12D62B04, 0xBB13, 0x50F2, 0x9D8B, 0xE57C02B4BDE4)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ISemanticZoomInformation {
    public func get_SemanticZoomOwner() throws -> MicrosoftUIXamlControls_SemanticZoom? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_ISemanticZoom>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SemanticZoomOwner(this, &_result))
        return MicrosoftUIXamlControls_SemanticZoomBinding.fromABI(consuming: &_result)
    }

    public func put_SemanticZoomOwner(_ value: MicrosoftUIXamlControls_SemanticZoom?) throws {
        var value_abi = try MicrosoftUIXamlControls_SemanticZoomBinding.toABI(value)
        defer { MicrosoftUIXamlControls_SemanticZoomBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SemanticZoomOwner(this, value_abi))
    }

    public func get_IsActiveView() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsActiveView(this, &_result))
        return _result
    }

    public func put_IsActiveView(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsActiveView(this, value))
    }

    public func get_IsZoomedInView() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsZoomedInView(this, &_result))
        return _result
    }

    public func put_IsZoomedInView(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsZoomedInView(this, value))
    }

    public func initializeViewChange() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InitializeViewChange(this))
    }

    public func completeViewChange() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CompleteViewChange(this))
    }

    public func makeVisible(_ item: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        var item_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(item)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&item_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MakeVisible(this, item_abi))
    }

    public func startViewChangeFrom(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        var source_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(source)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&source_abi) }
        var destination_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(destination)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&destination_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.StartViewChangeFrom(this, source_abi, destination_abi))
    }

    public func startViewChangeTo(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        var source_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(source)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&source_abi) }
        var destination_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(destination)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&destination_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.StartViewChangeTo(this, source_abi, destination_abi))
    }

    public func completeViewChangeFrom(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        var source_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(source)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&source_abi) }
        var destination_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(destination)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&destination_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CompleteViewChangeFrom(this, source_abi, destination_abi))
    }

    public func completeViewChangeTo(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        var source_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(source)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&source_abi) }
        var destination_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(destination)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&destination_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CompleteViewChangeTo(this, source_abi, destination_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ISemanticZoomLocation

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ISemanticZoomLocation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x41C1DEC7, 0xF34F, 0x51DB, 0x9525, 0x5C149B05A527)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ISemanticZoomLocation {
    public func get_Item() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Item(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_Item(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Item(this, value_abi))
    }

    public func get_Bounds() throws -> WindowsFoundation_Rect {
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Bounds(this, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }

    public func put_Bounds(_ value: WindowsFoundation_Rect) throws {
        let value_abi = WindowsFoundation_Rect.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Bounds(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ISemanticZoomStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ISemanticZoomStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE4FBD358, 0x9342, 0x56D3, 0xB5C2, 0xBF80DE6F47ED)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ISemanticZoomStatics {
    public func get_ZoomedInViewProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ZoomedInViewProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ZoomedOutViewProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ZoomedOutViewProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsZoomedInViewActiveProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsZoomedInViewActiveProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CanChangeViewsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CanChangeViewsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsZoomOutButtonEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsZoomOutButtonEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ISemanticZoomViewChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ISemanticZoomViewChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCF62D53D, 0x97D3, 0x5CEF, 0x96F3, 0x1C413F524ECA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ISemanticZoomViewChangedEventArgs {
    public func get_IsSourceZoomedInView() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSourceZoomedInView(this, &_result))
        return _result
    }

    public func put_IsSourceZoomedInView(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsSourceZoomedInView(this, value))
    }

    public func get_SourceItem() throws -> MicrosoftUIXamlControls_SemanticZoomLocation? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_ISemanticZoomLocation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SourceItem(this, &_result))
        return MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(consuming: &_result)
    }

    public func put_SourceItem(_ value: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        var value_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(value)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SourceItem(this, value_abi))
    }

    public func get_DestinationItem() throws -> MicrosoftUIXamlControls_SemanticZoomLocation? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_ISemanticZoomLocation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DestinationItem(this, &_result))
        return MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(consuming: &_result)
    }

    public func put_DestinationItem(_ value: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        var value_abi = try MicrosoftUIXamlControls_SemanticZoomLocationBinding.toABI(value)
        defer { MicrosoftUIXamlControls_SemanticZoomLocationBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DestinationItem(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IStyleSelector

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IStyleSelector.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7F9CF759, 0x785B, 0x5EF9, 0x9EA7, 0x1555673A475A)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IStyleSelector {
    public func selectStyle(_ item: WindowsRuntime.IInspectable?, _ container: MicrosoftUIXaml_DependencyObject?) throws -> MicrosoftUIXaml_Style? {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectStyle(this, item_abi, container_abi, &_result))
        return MicrosoftUIXaml_StyleBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IStyleSelectorFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IStyleSelectorFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2A033206, 0xA4FB, 0x5F11, 0x8C2D, 0x61E1DF78FBC3)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IStyleSelectorFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControls_IStyleSelector> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IStyleSelector>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IStyleSelectorOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IStyleSelectorOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x26015D75, 0xEF00, 0x5C78, 0x8E58, 0x163DA10F694F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IStyleSelectorOverrides {
    public func selectStyleCore(_ item: WindowsRuntime.IInspectable?, _ container: MicrosoftUIXaml_DependencyObject?) throws -> MicrosoftUIXaml_Style? {
        var item_abi = try WindowsRuntime.IInspectableBinding.toABI(item)
        defer { WindowsRuntime.IInspectableBinding.release(&item_abi) }
        var container_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(container)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&container_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectStyleCore(this, item_abi, container_abi, &_result))
        return MicrosoftUIXaml_StyleBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ITextBlock

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ITextBlock.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1AC8D84F, 0x392C, 0x5C7E, 0x83F5, 0xA53E3BF0ABB0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ITextBlock {
    public func get_FontSize() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontSize(this, &_result))
        return _result
    }

    public func put_FontSize(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontSize(this, value))
    }

    public func get_FontFamily() throws -> MicrosoftUIXamlMedia_FontFamily? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IFontFamily>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontFamily(this, &_result))
        return MicrosoftUIXamlMedia_FontFamilyBinding.fromABI(consuming: &_result)
    }

    public func put_FontFamily(_ value: MicrosoftUIXamlMedia_FontFamily?) throws {
        var value_abi = try MicrosoftUIXamlMedia_FontFamilyBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_FontFamilyBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontFamily(this, value_abi))
    }

    public func get_FontWeight() throws -> WindowsUIText_FontWeight {
        var _result: SWRT_WindowsUIText_FontWeight = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontWeight(this, &_result))
        return WindowsUIText_FontWeight.fromABI(_result)
    }

    public func put_FontWeight(_ value: WindowsUIText_FontWeight) throws {
        let value_abi = WindowsUIText_FontWeight.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontWeight(this, value_abi))
    }

    public func get_FontStyle() throws -> WindowsUIText_FontStyle {
        var _result: SWRT_WindowsUIText_FontStyle = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStyle(this, &_result))
        return WindowsUIText_FontStyle.fromABI(_result)
    }

    public func put_FontStyle(_ value: WindowsUIText_FontStyle) throws {
        let value_abi = WindowsUIText_FontStyle.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontStyle(this, value_abi))
    }

    public func get_FontStretch() throws -> WindowsUIText_FontStretch {
        var _result: SWRT_WindowsUIText_FontStretch = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStretch(this, &_result))
        return WindowsUIText_FontStretch.fromABI(_result)
    }

    public func put_FontStretch(_ value: WindowsUIText_FontStretch) throws {
        let value_abi = WindowsUIText_FontStretch.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontStretch(this, value_abi))
    }

    public func get_CharacterSpacing() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CharacterSpacing(this, &_result))
        return _result
    }

    public func put_CharacterSpacing(_ value: Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CharacterSpacing(this, value))
    }

    public func get_Foreground() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Foreground(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_Foreground(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Foreground(this, value_abi))
    }

    public func get_TextWrapping() throws -> MicrosoftUIXaml_TextWrapping {
        var _result: SWRT_MicrosoftUIXaml_TextWrapping = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextWrapping(this, &_result))
        return MicrosoftUIXaml_TextWrapping.fromABI(_result)
    }

    public func put_TextWrapping(_ value: MicrosoftUIXaml_TextWrapping) throws {
        let value_abi = MicrosoftUIXaml_TextWrapping.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TextWrapping(this, value_abi))
    }

    public func get_TextTrimming() throws -> MicrosoftUIXaml_TextTrimming {
        var _result: SWRT_MicrosoftUIXaml_TextTrimming = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextTrimming(this, &_result))
        return MicrosoftUIXaml_TextTrimming.fromABI(_result)
    }

    public func put_TextTrimming(_ value: MicrosoftUIXaml_TextTrimming) throws {
        let value_abi = MicrosoftUIXaml_TextTrimming.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TextTrimming(this, value_abi))
    }

    public func get_TextAlignment() throws -> MicrosoftUIXaml_TextAlignment {
        var _result: SWRT_MicrosoftUIXaml_TextAlignment = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextAlignment(this, &_result))
        return MicrosoftUIXaml_TextAlignment.fromABI(_result)
    }

    public func put_TextAlignment(_ value: MicrosoftUIXaml_TextAlignment) throws {
        let value_abi = MicrosoftUIXaml_TextAlignment.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TextAlignment(this, value_abi))
    }

    public func get_Text() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Text(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_Text(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Text(this, value_abi))
    }

    public func get_Inlines() throws -> MicrosoftUIXamlDocuments_InlineCollection? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_Inline>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Inlines(this, &_result))
        return MicrosoftUIXamlDocuments_InlineCollectionBinding.fromABI(consuming: &_result)
    }

    public func get_Padding() throws -> MicrosoftUIXaml_Thickness {
        var _result: SWRT_MicrosoftUIXaml_Thickness = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Padding(this, &_result))
        return MicrosoftUIXaml_Thickness.fromABI(_result)
    }

    public func put_Padding(_ value: MicrosoftUIXaml_Thickness) throws {
        let value_abi = MicrosoftUIXaml_Thickness.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Padding(this, value_abi))
    }

    public func get_LineHeight() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LineHeight(this, &_result))
        return _result
    }

    public func put_LineHeight(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_LineHeight(this, value))
    }

    public func get_LineStackingStrategy() throws -> MicrosoftUIXaml_LineStackingStrategy {
        var _result: SWRT_MicrosoftUIXaml_LineStackingStrategy = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LineStackingStrategy(this, &_result))
        return MicrosoftUIXaml_LineStackingStrategy.fromABI(_result)
    }

    public func put_LineStackingStrategy(_ value: MicrosoftUIXaml_LineStackingStrategy) throws {
        let value_abi = MicrosoftUIXaml_LineStackingStrategy.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_LineStackingStrategy(this, value_abi))
    }

    public func get_IsTextSelectionEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextSelectionEnabled(this, &_result))
        return _result
    }

    public func put_IsTextSelectionEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsTextSelectionEnabled(this, value))
    }

    public func get_SelectedText() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedText(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func get_ContentStart() throws -> MicrosoftUIXamlDocuments_TextPointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentStart(this, &_result))
        return MicrosoftUIXamlDocuments_TextPointerBinding.fromABI(consuming: &_result)
    }

    public func get_ContentEnd() throws -> MicrosoftUIXamlDocuments_TextPointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentEnd(this, &_result))
        return MicrosoftUIXamlDocuments_TextPointerBinding.fromABI(consuming: &_result)
    }

    public func get_SelectionStart() throws -> MicrosoftUIXamlDocuments_TextPointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectionStart(this, &_result))
        return MicrosoftUIXamlDocuments_TextPointerBinding.fromABI(consuming: &_result)
    }

    public func get_SelectionEnd() throws -> MicrosoftUIXamlDocuments_TextPointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectionEnd(this, &_result))
        return MicrosoftUIXamlDocuments_TextPointerBinding.fromABI(consuming: &_result)
    }

    public func get_BaselineOffset() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BaselineOffset(this, &_result))
        return _result
    }

    public func get_SelectionHighlightColor() throws -> MicrosoftUIXamlMedia_SolidColorBrush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ISolidColorBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectionHighlightColor(this, &_result))
        return MicrosoftUIXamlMedia_SolidColorBrushBinding.fromABI(consuming: &_result)
    }

    public func put_SelectionHighlightColor(_ value: MicrosoftUIXamlMedia_SolidColorBrush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_SolidColorBrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_SolidColorBrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SelectionHighlightColor(this, value_abi))
    }

    public func get_MaxLines() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxLines(this, &_result))
        return _result
    }

    public func put_MaxLines(_ value: Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_MaxLines(this, value))
    }

    public func get_TextLineBounds() throws -> MicrosoftUIXaml_TextLineBounds {
        var _result: SWRT_MicrosoftUIXaml_TextLineBounds = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextLineBounds(this, &_result))
        return MicrosoftUIXaml_TextLineBounds.fromABI(_result)
    }

    public func put_TextLineBounds(_ value: MicrosoftUIXaml_TextLineBounds) throws {
        let value_abi = MicrosoftUIXaml_TextLineBounds.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TextLineBounds(this, value_abi))
    }

    public func get_OpticalMarginAlignment() throws -> MicrosoftUIXaml_OpticalMarginAlignment {
        var _result: SWRT_MicrosoftUIXaml_OpticalMarginAlignment = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OpticalMarginAlignment(this, &_result))
        return MicrosoftUIXaml_OpticalMarginAlignment.fromABI(_result)
    }

    public func put_OpticalMarginAlignment(_ value: MicrosoftUIXaml_OpticalMarginAlignment) throws {
        let value_abi = MicrosoftUIXaml_OpticalMarginAlignment.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_OpticalMarginAlignment(this, value_abi))
    }

    public func get_IsColorFontEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsColorFontEnabled(this, &_result))
        return _result
    }

    public func put_IsColorFontEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsColorFontEnabled(this, value))
    }

    public func get_TextReadingOrder() throws -> MicrosoftUIXaml_TextReadingOrder {
        var _result: SWRT_MicrosoftUIXaml_TextReadingOrder = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextReadingOrder(this, &_result))
        return MicrosoftUIXaml_TextReadingOrder.fromABI(_result)
    }

    public func put_TextReadingOrder(_ value: MicrosoftUIXaml_TextReadingOrder) throws {
        let value_abi = MicrosoftUIXaml_TextReadingOrder.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TextReadingOrder(this, value_abi))
    }

    public func get_IsTextScaleFactorEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextScaleFactorEnabled(this, &_result))
        return _result
    }

    public func put_IsTextScaleFactorEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsTextScaleFactorEnabled(this, value))
    }

    public func get_TextDecorations() throws -> WindowsUIText_TextDecorations {
        var _result: SWRT_WindowsUIText_TextDecorations = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextDecorations(this, &_result))
        return WindowsUIText_TextDecorations.fromABI(_result)
    }

    public func put_TextDecorations(_ value: WindowsUIText_TextDecorations) throws {
        let value_abi = WindowsUIText_TextDecorations.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TextDecorations(this, value_abi))
    }

    public func get_IsTextTrimmed() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextTrimmed(this, &_result))
        return _result
    }

    public func get_HorizontalTextAlignment() throws -> MicrosoftUIXaml_TextAlignment {
        var _result: SWRT_MicrosoftUIXaml_TextAlignment = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalTextAlignment(this, &_result))
        return MicrosoftUIXaml_TextAlignment.fromABI(_result)
    }

    public func put_HorizontalTextAlignment(_ value: MicrosoftUIXaml_TextAlignment) throws {
        let value_abi = MicrosoftUIXaml_TextAlignment.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_HorizontalTextAlignment(this, value_abi))
    }

    public func get_TextHighlighters() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlDocuments_TextHighlighter?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextHighlighter>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextHighlighters(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.TextHighlighter.fromABI(consuming: &_result)
    }

    public func get_SelectionFlyout() throws -> MicrosoftUIXamlControlsPrimitives_FlyoutBase? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectionFlyout(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.fromABI(consuming: &_result)
    }

    public func put_SelectionFlyout(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutBase?) throws {
        var value_abi = try MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.toABI(value)
        defer { MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SelectionFlyout(this, value_abi))
    }

    public func add_SelectionChanged(_ handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_RoutedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_RoutedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_SelectionChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_SelectionChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_SelectionChanged(this, token_abi))
    }

    public func add_ContextMenuOpening(_ handler: MicrosoftUIXamlControls_ContextMenuOpeningEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlControls_ContextMenuOpeningEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlControls_ContextMenuOpeningEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ContextMenuOpening(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ContextMenuOpening(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ContextMenuOpening(this, token_abi))
    }

    public func add_IsTextTrimmedChanged(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_TextBlock?, MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.TextBlock_IsTextTrimmedChangedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.TextBlock_IsTextTrimmedChangedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_IsTextTrimmedChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_IsTextTrimmedChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_IsTextTrimmedChanged(this, token_abi))
    }

    public func selectAll() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SelectAll(this))
    }

    public func select(_ start: MicrosoftUIXamlDocuments_TextPointer?, _ end: MicrosoftUIXamlDocuments_TextPointer?) throws {
        var start_abi = try MicrosoftUIXamlDocuments_TextPointerBinding.toABI(start)
        defer { MicrosoftUIXamlDocuments_TextPointerBinding.release(&start_abi) }
        var end_abi = try MicrosoftUIXamlDocuments_TextPointerBinding.toABI(end)
        defer { MicrosoftUIXamlDocuments_TextPointerBinding.release(&end_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Select(this, start_abi, end_abi))
    }

    public func getAlphaMask() throws -> MicrosoftUIComposition_CompositionBrush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIComposition_ICompositionBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAlphaMask(this, &_result))
        return MicrosoftUIComposition_CompositionBrushBinding.fromABI(consuming: &_result)
    }

    public func copySelectionToClipboard() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CopySelectionToClipboard(this))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ITextBlockStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ITextBlockStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3187104B, 0x65C2, 0x5E53, 0xB889, 0xC8272B1314CD)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ITextBlockStatics {
    public func get_FontSizeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontSizeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontFamilyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontFamilyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontWeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontWeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontStyleProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStyleProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontStretchProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStretchProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CharacterSpacingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CharacterSpacingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ForegroundProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ForegroundProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TextWrappingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextWrappingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TextTrimmingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextTrimmingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TextAlignmentProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextAlignmentProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TextProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_PaddingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PaddingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_LineHeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LineHeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_LineStackingStrategyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LineStackingStrategyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsTextSelectionEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextSelectionEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_SelectedTextProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedTextProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_SelectionHighlightColorProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectionHighlightColorProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_MaxLinesProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_MaxLinesProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TextLineBoundsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextLineBoundsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_OpticalMarginAlignmentProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OpticalMarginAlignmentProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsColorFontEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsColorFontEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TextReadingOrderProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextReadingOrderProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsTextScaleFactorEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextScaleFactorEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TextDecorationsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextDecorationsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsTextTrimmedProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextTrimmedProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_HorizontalTextAlignmentProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HorizontalTextAlignmentProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_SelectionFlyoutProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectionFlyoutProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IUIElementCollection

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IUIElementCollection.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x23050CB1, 0xDB88, 0x54ED, 0x9083, 0x5ECFB12512FD)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IUIElementCollection {
    public func move(_ oldIndex: Swift.UInt32, _ newIndex: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Move(this, oldIndex, newIndex))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IXamlControlsResources

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IXamlControlsResources.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x918CA043, 0xF42C, 0x5805, 0x861B, 0x62D6D1D0C162)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IXamlControlsResources {
    public func get_UseCompactResources() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UseCompactResources(this, &_result))
        return _result
    }

    public func put_UseCompactResources(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_UseCompactResources(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IXamlControlsResourcesStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControls_IXamlControlsResourcesStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCB49196C, 0x1458, 0x5E92, 0xB701, 0xD08D3E816BC5)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_IXamlControlsResourcesStatics {
    public func ensureRevealLights(_ element: MicrosoftUIXaml_UIElement?) throws {
        var element_abi = try MicrosoftUIXaml_UIElementBinding.toABI(element)
        defer { MicrosoftUIXaml_UIElementBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.EnsureRevealLights(this, element_abi))
    }

    public func get_UseCompactResourcesProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UseCompactResourcesProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.IItemClickEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlControls_ItemClickEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA3903624, 0x3393, 0x566C, 0xA6B9, 0xA6B4B3E301C3)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_ItemClickEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlControls_ItemClickEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlControls_ItemClickEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlControls_ItemClickEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ISelectionChangedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlControls_SelectionChangedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA232390D, 0x0E34, 0x595E, 0x8931, 0xFA928A9909F4)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_SelectionChangedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlControls_SelectionChangedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlControls_SelectionChangedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlControls_SelectionChangedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.ISemanticZoomViewChangedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4CC95C52, 0x8A54, 0x53B7, 0x9251, 0x0B3EFA605398)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlControls_SemanticZoomViewChangedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlControls_SemanticZoomViewChangedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlControls_SemanticZoomViewChangedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IButtonBase

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x65714269, 0x2473, 0x5327, 0xA652, 0x0EA6BCE7F403)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBase {
    public func get_ClickMode() throws -> MicrosoftUIXamlControls_ClickMode {
        var _result: SWRT_MicrosoftUIXamlControls_ClickMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ClickMode(this, &_result))
        return MicrosoftUIXamlControls_ClickMode.fromABI(_result)
    }

    public func put_ClickMode(_ value: MicrosoftUIXamlControls_ClickMode) throws {
        let value_abi = MicrosoftUIXamlControls_ClickMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ClickMode(this, value_abi))
    }

    public func get_IsPointerOver() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsPointerOver(this, &_result))
        return _result
    }

    public func get_IsPressed() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsPressed(this, &_result))
        return _result
    }

    public func get_Command() throws -> MicrosoftUIXamlInput_ICommand? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_ICommand>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Command(this, &_result))
        return MicrosoftUIXamlInput_ICommandBinding.fromABI(consuming: &_result)
    }

    public func put_Command(_ value: MicrosoftUIXamlInput_ICommand?) throws {
        var value_abi = try MicrosoftUIXamlInput_ICommandBinding.toABI(value)
        defer { MicrosoftUIXamlInput_ICommandBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Command(this, value_abi))
    }

    public func get_CommandParameter() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CommandParameter(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_CommandParameter(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CommandParameter(this, value_abi))
    }

    public func add_Click(_ handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_RoutedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_RoutedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Click(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Click(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Click(this, token_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x21251AA9, 0x6FD1, 0x5E51, 0xAB3B, 0xE6FCAF3395ED)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBase> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xDBE812F6, 0xADF8, 0x51D3, 0x8137, 0xA8FBF6445B3C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IButtonBaseStatics {
    public func get_ClickModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ClickModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsPointerOverProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsPointerOverProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsPressedProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsPressedProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CommandProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CommandProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CommandParameterProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CommandParameterProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xBB6603BF, 0x744D, 0x5C31, 0xA87D, 0x744394634D77)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase {
    public func get_Placement() throws -> MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode {
        var _result: SWRT_MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Placement(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode.fromABI(_result)
    }

    public func put_Placement(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode) throws {
        let value_abi = MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Placement(this, value_abi))
    }

    public func get_Target() throws -> MicrosoftUIXaml_FrameworkElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IFrameworkElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Target(this, &_result))
        return MicrosoftUIXaml_FrameworkElementBinding.fromABI(consuming: &_result)
    }

    public func get_AllowFocusOnInteraction() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusOnInteraction(this, &_result))
        return _result
    }

    public func put_AllowFocusOnInteraction(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AllowFocusOnInteraction(this, value))
    }

    public func get_LightDismissOverlayMode() throws -> MicrosoftUIXamlControls_LightDismissOverlayMode {
        var _result: SWRT_MicrosoftUIXamlControls_LightDismissOverlayMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LightDismissOverlayMode(this, &_result))
        return MicrosoftUIXamlControls_LightDismissOverlayMode.fromABI(_result)
    }

    public func put_LightDismissOverlayMode(_ value: MicrosoftUIXamlControls_LightDismissOverlayMode) throws {
        let value_abi = MicrosoftUIXamlControls_LightDismissOverlayMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_LightDismissOverlayMode(this, value_abi))
    }

    public func get_AllowFocusWhenDisabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusWhenDisabled(this, &_result))
        return _result
    }

    public func put_AllowFocusWhenDisabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AllowFocusWhenDisabled(this, value))
    }

    public func get_ShowMode() throws -> MicrosoftUIXamlControlsPrimitives_FlyoutShowMode {
        var _result: SWRT_MicrosoftUIXamlControlsPrimitives_FlyoutShowMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ShowMode(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_FlyoutShowMode.fromABI(_result)
    }

    public func put_ShowMode(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutShowMode) throws {
        let value_abi = MicrosoftUIXamlControlsPrimitives_FlyoutShowMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ShowMode(this, value_abi))
    }

    public func get_InputDevicePrefersPrimaryCommands() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_InputDevicePrefersPrimaryCommands(this, &_result))
        return _result
    }

    public func get_AreOpenCloseAnimationsEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AreOpenCloseAnimationsEnabled(this, &_result))
        return _result
    }

    public func put_AreOpenCloseAnimationsEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AreOpenCloseAnimationsEnabled(this, value))
    }

    public func get_ShouldConstrainToRootBounds() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ShouldConstrainToRootBounds(this, &_result))
        return _result
    }

    public func put_ShouldConstrainToRootBounds(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ShouldConstrainToRootBounds(this, value))
    }

    public func get_IsConstrainedToRootBounds() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsConstrainedToRootBounds(this, &_result))
        return _result
    }

    public func get_ElementSoundMode() throws -> MicrosoftUIXaml_ElementSoundMode {
        var _result: SWRT_MicrosoftUIXaml_ElementSoundMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ElementSoundMode(this, &_result))
        return MicrosoftUIXaml_ElementSoundMode.fromABI(_result)
    }

    public func put_ElementSoundMode(_ value: MicrosoftUIXaml_ElementSoundMode) throws {
        let value_abi = MicrosoftUIXaml_ElementSoundMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ElementSoundMode(this, value_abi))
    }

    public func get_OverlayInputPassThroughElement() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OverlayInputPassThroughElement(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_OverlayInputPassThroughElement(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_OverlayInputPassThroughElement(this, value_abi))
    }

    public func get_IsOpen() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsOpen(this, &_result))
        return _result
    }

    public func get_XamlRoot() throws -> MicrosoftUIXaml_XamlRoot? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IXamlRoot>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XamlRoot(this, &_result))
        return MicrosoftUIXaml_XamlRootBinding.fromABI(consuming: &_result)
    }

    public func put_XamlRoot(_ value: MicrosoftUIXaml_XamlRoot?) throws {
        var value_abi = try MicrosoftUIXaml_XamlRootBinding.toABI(value)
        defer { MicrosoftUIXaml_XamlRootBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XamlRoot(this, value_abi))
    }

    public func add_Opened(_ handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_EventHandlerBinding.Object.toABI(handler)
        defer { WindowsFoundation_EventHandlerBinding.Object.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Opened(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Opened(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Opened(this, token_abi))
    }

    public func add_Closed(_ handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_EventHandlerBinding.Object.toABI(handler)
        defer { WindowsFoundation_EventHandlerBinding.Object.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Closed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Closed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Closed(this, token_abi))
    }

    public func add_Opening(_ handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_EventHandlerBinding.Object.toABI(handler)
        defer { WindowsFoundation_EventHandlerBinding.Object.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Opening(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Opening(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Opening(this, token_abi))
    }

    public func add_Closing(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControlsPrimitives_FlyoutBase?, MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.FlyoutBase_FlyoutBaseClosingEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.FlyoutBase_FlyoutBaseClosingEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Closing(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Closing(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Closing(this, token_abi))
    }

    public func showAt(_ placementTarget: MicrosoftUIXaml_FrameworkElement?) throws {
        var placementTarget_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(placementTarget)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&placementTarget_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ShowAt(this, placementTarget_abi))
    }

    public func showAtWithOptions(_ placementTarget: MicrosoftUIXaml_DependencyObject?, _ showOptions: MicrosoftUIXamlControlsPrimitives_FlyoutShowOptions?) throws {
        var placementTarget_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(placementTarget)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&placementTarget_abi) }
        var showOptions_abi = try MicrosoftUIXamlControlsPrimitives_FlyoutShowOptionsBinding.toABI(showOptions)
        defer { MicrosoftUIXamlControlsPrimitives_FlyoutShowOptionsBinding.release(&showOptions_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ShowAtWithOptions(this, placementTarget_abi, showOptions_abi))
    }

    public func hide() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Hide(this))
    }

    public func tryInvokeKeyboardAccelerator(_ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        var args_abi = try MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryInvokeKeyboardAccelerator(this, args_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase2

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase2.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x54592F97, 0xE40E, 0x5CAD, 0x864B, 0x32307D047020)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase2 {
    public func get_SystemBackdrop() throws -> MicrosoftUIXamlMedia_SystemBackdrop? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ISystemBackdrop>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SystemBackdrop(this, &_result))
        return MicrosoftUIXamlMedia_SystemBackdropBinding.fromABI(consuming: &_result)
    }

    public func put_SystemBackdrop(_ value: MicrosoftUIXamlMedia_SystemBackdrop?) throws {
        var value_abi = try MicrosoftUIXamlMedia_SystemBackdropBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_SystemBackdropBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SystemBackdrop(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseClosingEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7CB280B4, 0x1CCA, 0x5A5A, 0x8EA4, 0x191A2BBC8B32)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseClosingEventArgs {
    public func get_Cancel() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Cancel(this, &_result))
        return _result
    }

    public func put_Cancel(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Cancel(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x006D738F, 0x7C91, 0x5EF3, 0x8A80, 0xA548108DAB8B)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5BB19ED8, 0x08DE, 0x5EEC, 0x91CB, 0x5FC59974E894)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseOverrides {
    public func createPresenter() throws -> MicrosoftUIXamlControls_Control? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IControl>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreatePresenter(this, &_result))
        return MicrosoftUIXamlControls_ControlBinding.fromABI(consuming: &_result)
    }

    public func onProcessKeyboardAccelerators(_ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        var args_abi = try MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnProcessKeyboardAccelerators(this, args_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x63EE628E, 0xD2E3, 0x5515, 0xAEA4, 0xE461088C0C4E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics {
    public func get_TargetProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TargetProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_PlacementProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PlacementProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AllowFocusOnInteractionProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusOnInteractionProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_LightDismissOverlayModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LightDismissOverlayModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AllowFocusWhenDisabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusWhenDisabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ShowModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ShowModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_InputDevicePrefersPrimaryCommandsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_InputDevicePrefersPrimaryCommandsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AreOpenCloseAnimationsEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AreOpenCloseAnimationsEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ShouldConstrainToRootBoundsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ShouldConstrainToRootBoundsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ElementSoundModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ElementSoundModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_OverlayInputPassThroughElementProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OverlayInputPassThroughElementProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsOpenProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsOpenProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AttachedFlyoutProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AttachedFlyoutProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getAttachedFlyout(_ element: MicrosoftUIXaml_FrameworkElement?) throws -> MicrosoftUIXamlControlsPrimitives_FlyoutBase? {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAttachedFlyout(this, element_abi, &_result))
        return MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.fromABI(consuming: &_result)
    }

    public func setAttachedFlyout(_ element: MicrosoftUIXaml_FrameworkElement?, _ value: MicrosoftUIXamlControlsPrimitives_FlyoutBase?) throws {
        var element_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(element)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&element_abi) }
        var value_abi = try MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.toABI(value)
        defer { MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAttachedFlyout(this, element_abi, value_abi))
    }

    public func showAttachedFlyout(_ flyoutOwner: MicrosoftUIXaml_FrameworkElement?) throws {
        var flyoutOwner_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(flyoutOwner)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&flyoutOwner_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ShowAttachedFlyout(this, flyoutOwner_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics2.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2403CD2C, 0xA6B8, 0x5DC2, 0xBE3B, 0x2A4BDD072EF1)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutBaseStatics2 {
    public func get_SystemBackdropProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SystemBackdropProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptions

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutShowOptions.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x30774A93, 0x2803, 0x50D3, 0xB406, 0x904AEC3E175D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutShowOptions {
    public func get_Position() throws -> WindowsFoundation_Point? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IReference>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Position(this, &_result))
        return WindowsRuntime.IReferenceToOptionalBinding<WindowsFoundation_Point>.fromABI(consuming: &_result)
    }

    public func put_Position(_ value: WindowsFoundation_Point?) throws {
        var value_abi = try WindowsRuntime.IReferenceToOptionalBinding<WindowsFoundation_Point>.toABI(value)
        defer { WindowsRuntime.IReferenceToOptionalBinding<WindowsFoundation_Point>.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Position(this, value_abi))
    }

    public func get_ExclusionRect() throws -> WindowsFoundation_Rect? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IReference>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ExclusionRect(this, &_result))
        return WindowsRuntime.IReferenceToOptionalBinding<WindowsFoundation_Rect>.fromABI(consuming: &_result)
    }

    public func put_ExclusionRect(_ value: WindowsFoundation_Rect?) throws {
        var value_abi = try WindowsRuntime.IReferenceToOptionalBinding<WindowsFoundation_Rect>.toABI(value)
        defer { WindowsRuntime.IReferenceToOptionalBinding<WindowsFoundation_Rect>.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ExclusionRect(this, value_abi))
    }

    public func get_ShowMode() throws -> MicrosoftUIXamlControlsPrimitives_FlyoutShowMode {
        var _result: SWRT_MicrosoftUIXamlControlsPrimitives_FlyoutShowMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ShowMode(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_FlyoutShowMode.fromABI(_result)
    }

    public func put_ShowMode(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutShowMode) throws {
        let value_abi = MicrosoftUIXamlControlsPrimitives_FlyoutShowMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ShowMode(this, value_abi))
    }

    public func get_Placement() throws -> MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode {
        var _result: SWRT_MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Placement(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode.fromABI(_result)
    }

    public func put_Placement(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode) throws {
        let value_abi = MicrosoftUIXamlControlsPrimitives_FlyoutPlacementMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Placement(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutShowOptionsFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x17426D30, 0x70D9, 0x54D7, 0xBD39, 0xE7C4C940C0F4)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutShowOptionsFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutShowOptions> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_IFlyoutShowOptions>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_IItemsChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB2BA1610, 0x0E96, 0x538A, 0x978F, 0xEC0B37193228)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_IItemsChangedEventArgs {
    public func get_Action() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Action(this, &_result))
        return _result
    }

    public func get_Position() throws -> MicrosoftUIXamlControlsPrimitives_GeneratorPosition {
        var _result: SWRT_MicrosoftUIXamlControlsPrimitives_GeneratorPosition = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Position(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_GeneratorPosition.fromABI(_result)
    }

    public func get_OldPosition() throws -> MicrosoftUIXamlControlsPrimitives_GeneratorPosition {
        var _result: SWRT_MicrosoftUIXamlControlsPrimitives_GeneratorPosition = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OldPosition(this, &_result))
        return MicrosoftUIXamlControlsPrimitives_GeneratorPosition.fromABI(_result)
    }

    public func get_ItemCount() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemCount(this, &_result))
        return _result
    }

    public func get_ItemUICount() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemUICount(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.ISelector

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_ISelector.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8F7E2159, 0xE61D, 0x576F, 0x8476, 0xF83FDE3D689E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_ISelector {
    public func get_SelectedIndex() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedIndex(this, &_result))
        return _result
    }

    public func put_SelectedIndex(_ value: Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SelectedIndex(this, value))
    }

    public func get_SelectedItem() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedItem(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_SelectedItem(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SelectedItem(this, value_abi))
    }

    public func get_SelectedValue() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedValue(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_SelectedValue(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SelectedValue(this, value_abi))
    }

    public func get_SelectedValuePath() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedValuePath(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_SelectedValuePath(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_SelectedValuePath(this, value_abi))
    }

    public func get_IsSynchronizedWithCurrentItem() throws -> Swift.Bool? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IReference>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSynchronizedWithCurrentItem(this, &_result))
        return WindowsRuntime.BooleanBinding.IReferenceToOptional.fromABI(consuming: &_result)
    }

    public func put_IsSynchronizedWithCurrentItem(_ value: Swift.Bool?) throws {
        var value_abi = try WindowsRuntime.BooleanBinding.IReferenceToOptional.toABI(value)
        defer { WindowsRuntime.BooleanBinding.IReferenceToOptional.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsSynchronizedWithCurrentItem(this, value_abi))
    }

    public func add_SelectionChanged(_ handler: MicrosoftUIXamlControls_SelectionChangedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlControls_SelectionChangedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlControls_SelectionChangedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_SelectionChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_SelectionChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_SelectionChanged(this, token_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.ISelectorFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x21A42024, 0xAF07, 0x58F9, 0x8789, 0x848D3324D901)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorFactory {
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.ISelectorItem

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItem.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5772C4DE, 0x60EA, 0x5492, 0x8C5E, 0xB3323D5A3CA6)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItem {
    public func get_IsSelected() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSelected(this, &_result))
        return _result
    }

    public func put_IsSelected(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsSelected(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemFactory

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItemFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x078039F5, 0x76ED, 0x5299, 0x9715, 0xFC8C58173560)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItemFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItem> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItem>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItemStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4B201A54, 0xA414, 0x5E79, 0x9B6B, 0x3DA9DE442A35)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorItemStatics {
    public func get_IsSelectedProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSelectedProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.ISelectorStatics

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x569B2234, 0x1CEB, 0x516E, 0xB64E, 0x0D479452E279)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_ISelectorStatics {
    public func get_SelectedIndexProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedIndexProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_SelectedItemProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedItemProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_SelectedValueProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedValueProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_SelectedValuePathProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_SelectedValuePathProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsSynchronizedWithCurrentItemProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsSynchronizedWithCurrentItemProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func getIsSelectionActive(_ element: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Bool {
        var element_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(element)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&element_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetIsSelectionActive(this, element_abi, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlControlsPrimitives_ItemsChangedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8E15E39E, 0x23F7, 0x5FCF, 0xB04B, 0xD1B7891DCCC4)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlControlsPrimitives_ItemsChangedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlControlsPrimitives_ItemsChangedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlControlsPrimitives_ItemsChangedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlControlsPrimitives_ItemsChangedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Data.IBinding

public func uuidof(_: SWRT_MicrosoftUIXamlData_IBinding.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x501EA0E8, 0xEDD4, 0x59DE, 0x8845, 0x76AF2EABBE00)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IBinding {
    public func get_Path() throws -> MicrosoftUIXaml_PropertyPath? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IPropertyPath>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Path(this, &_result))
        return MicrosoftUIXaml_PropertyPathBinding.fromABI(consuming: &_result)
    }

    public func put_Path(_ value: MicrosoftUIXaml_PropertyPath?) throws {
        var value_abi = try MicrosoftUIXaml_PropertyPathBinding.toABI(value)
        defer { MicrosoftUIXaml_PropertyPathBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Path(this, value_abi))
    }

    public func get_Mode() throws -> MicrosoftUIXamlData_BindingMode {
        var _result: SWRT_MicrosoftUIXamlData_BindingMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Mode(this, &_result))
        return MicrosoftUIXamlData_BindingMode.fromABI(_result)
    }

    public func put_Mode(_ value: MicrosoftUIXamlData_BindingMode) throws {
        let value_abi = MicrosoftUIXamlData_BindingMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Mode(this, value_abi))
    }

    public func get_Source() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Source(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_Source(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Source(this, value_abi))
    }

    public func get_RelativeSource() throws -> MicrosoftUIXamlData_RelativeSource? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IRelativeSource>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RelativeSource(this, &_result))
        return MicrosoftUIXamlData_RelativeSourceBinding.fromABI(consuming: &_result)
    }

    public func put_RelativeSource(_ value: MicrosoftUIXamlData_RelativeSource?) throws {
        var value_abi = try MicrosoftUIXamlData_RelativeSourceBinding.toABI(value)
        defer { MicrosoftUIXamlData_RelativeSourceBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RelativeSource(this, value_abi))
    }

    public func get_ElementName() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ElementName(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_ElementName(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ElementName(this, value_abi))
    }

    public func get_Converter() throws -> MicrosoftUIXamlData_IValueConverter? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IValueConverter>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Converter(this, &_result))
        return MicrosoftUIXamlData_IValueConverterBinding.fromABI(consuming: &_result)
    }

    public func put_Converter(_ value: MicrosoftUIXamlData_IValueConverter?) throws {
        var value_abi = try MicrosoftUIXamlData_IValueConverterBinding.toABI(value)
        defer { MicrosoftUIXamlData_IValueConverterBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Converter(this, value_abi))
    }

    public func get_ConverterParameter() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ConverterParameter(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_ConverterParameter(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ConverterParameter(this, value_abi))
    }

    public func get_ConverterLanguage() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ConverterLanguage(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_ConverterLanguage(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ConverterLanguage(this, value_abi))
    }

    public func get_FallbackValue() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FallbackValue(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_FallbackValue(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FallbackValue(this, value_abi))
    }

    public func get_TargetNullValue() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TargetNullValue(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func put_TargetNullValue(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TargetNullValue(this, value_abi))
    }

    public func get_UpdateSourceTrigger() throws -> MicrosoftUIXamlData_UpdateSourceTrigger {
        var _result: SWRT_MicrosoftUIXamlData_UpdateSourceTrigger = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UpdateSourceTrigger(this, &_result))
        return MicrosoftUIXamlData_UpdateSourceTrigger.fromABI(_result)
    }

    public func put_UpdateSourceTrigger(_ value: MicrosoftUIXamlData_UpdateSourceTrigger) throws {
        let value_abi = MicrosoftUIXamlData_UpdateSourceTrigger.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_UpdateSourceTrigger(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Data.IBindingBase

public func uuidof(_: SWRT_MicrosoftUIXamlData_IBindingBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x91DDD141, 0x5944, 0x50EF, 0xB85E, 0x218E463F7A73)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IBindingBase {
}

// MARK: Microsoft.UI.Xaml.Data.IBindingBaseFactory

public func uuidof(_: SWRT_MicrosoftUIXamlData_IBindingBaseFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC8A866C5, 0xF6F3, 0x5F7A, 0x9592, 0xD385AF48BD8F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IBindingBaseFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlData_IBindingBase> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IBindingBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Data.IBindingExpression

public func uuidof(_: SWRT_MicrosoftUIXamlData_IBindingExpression.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4C023916, 0x37BC, 0x5B07, 0xBC9D, 0x15C547BD9B26)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IBindingExpression {
    public func get_DataItem() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DataItem(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func get_ParentBinding() throws -> MicrosoftUIXamlData_Binding? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IBinding>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ParentBinding(this, &_result))
        return MicrosoftUIXamlData_BindingBinding.fromABI(consuming: &_result)
    }

    public func updateSource() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.UpdateSource(this))
    }
}

// MARK: Microsoft.UI.Xaml.Data.IBindingExpressionBase

public func uuidof(_: SWRT_MicrosoftUIXamlData_IBindingExpressionBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8825E5A9, 0xD9A3, 0x5E87, 0xBCD8, 0xC63133D29029)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IBindingExpressionBase {
}

// MARK: Microsoft.UI.Xaml.Data.IBindingExpressionBaseFactory

public func uuidof(_: SWRT_MicrosoftUIXamlData_IBindingExpressionBaseFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x41D643B9, 0x2629, 0x5451, 0xA716, 0x596C0848B5DC)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IBindingExpressionBaseFactory {
}

// MARK: Microsoft.UI.Xaml.Data.IBindingExpressionFactory

public func uuidof(_: SWRT_MicrosoftUIXamlData_IBindingExpressionFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x086CAE14, 0x81A1, 0x588B, 0xB619, 0x05EE84C0F089)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IBindingExpressionFactory {
}

// MARK: Microsoft.UI.Xaml.Data.IBindingFactory

public func uuidof(_: SWRT_MicrosoftUIXamlData_IBindingFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCB2DE749, 0xB115, 0x5F67, 0xB64A, 0x797D54885D5C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IBindingFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlData_IBinding> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IBinding>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Data.IItemIndexRange

public func uuidof(_: SWRT_MicrosoftUIXamlData_IItemIndexRange.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEBA09846, 0x2554, 0x5B86, 0xAC17, 0x614F05105FA2)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IItemIndexRange {
    public func get_FirstIndex() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FirstIndex(this, &_result))
        return _result
    }

    public func get_Length() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Length(this, &_result))
        return _result
    }

    public func get_LastIndex() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LastIndex(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Data.IItemIndexRangeFactory

public func uuidof(_: SWRT_MicrosoftUIXamlData_IItemIndexRangeFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9FC73213, 0xEDA0, 0x5238, 0xAA2C, 0x401C9921F0F9)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IItemIndexRangeFactory {
    public func createInstance(_ firstIndex: Swift.Int32, _ length: Swift.UInt32, _ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlData_IItemIndexRange> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IItemIndexRange>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, firstIndex, length, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Data.INotifyPropertyChanged

public func uuidof(_: SWRT_MicrosoftUIXamlData_INotifyPropertyChanged.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x90B17601, 0xB065, 0x586E, 0x83D9, 0x9ADC3A695284)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_INotifyPropertyChanged {
    public func add_PropertyChanged(_ handler: MicrosoftUIXamlData_PropertyChangedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlData_PropertyChangedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlData_PropertyChangedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_PropertyChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_PropertyChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_PropertyChanged(this, token_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Data.IPropertyChangedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlData_IPropertyChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x63D0C952, 0x396B, 0x54F4, 0xAF8C, 0xBA8724A427BF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IPropertyChangedEventArgs {
    public func get_PropertyName() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PropertyName(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Data.IPropertyChangedEventArgsFactory

public func uuidof(_: SWRT_MicrosoftUIXamlData_IPropertyChangedEventArgsFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7C0C27A8, 0x0B41, 0x5070, 0xB160, 0xFC9AE960A36C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IPropertyChangedEventArgsFactory {
    public func createInstance(_ name: Swift.String, _ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlData_IPropertyChangedEventArgs> {
        var name_abi = try WindowsRuntime.StringBinding.toABI(name)
        defer { WindowsRuntime.StringBinding.release(&name_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IPropertyChangedEventArgs>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, name_abi, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Data.IRelativeSource

public func uuidof(_: SWRT_MicrosoftUIXamlData_IRelativeSource.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7FFC8126, 0x5DD8, 0x58BB, 0xB686, 0xC71EDDEA07B2)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IRelativeSource {
    public func get_Mode() throws -> MicrosoftUIXamlData_RelativeSourceMode {
        var _result: SWRT_MicrosoftUIXamlData_RelativeSourceMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Mode(this, &_result))
        return MicrosoftUIXamlData_RelativeSourceMode.fromABI(_result)
    }

    public func put_Mode(_ value: MicrosoftUIXamlData_RelativeSourceMode) throws {
        let value_abi = MicrosoftUIXamlData_RelativeSourceMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Mode(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Data.IRelativeSourceFactory

public func uuidof(_: SWRT_MicrosoftUIXamlData_IRelativeSourceFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8518522C, 0x85E3, 0x5AE1, 0xB9E9, 0x28EA43C2051E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IRelativeSourceFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlData_IRelativeSource> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IRelativeSource>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Data.IValueConverter

public func uuidof(_: SWRT_MicrosoftUIXamlData_IValueConverter.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xAFDD2BFF, 0x10F5, 0x5173, 0xB7C0, 0x3590BD96CB35)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_IValueConverter {
    public func convert(_ value: WindowsRuntime.IInspectable?, _ targetType: WindowsUIXamlInterop_TypeName, _ parameter: WindowsRuntime.IInspectable?, _ language: Swift.String) throws -> WindowsRuntime.IInspectable? {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        var targetType_abi = try WindowsUIXamlInterop_TypeName.toABI(targetType)
        defer { WindowsUIXamlInterop_TypeName.release(&targetType_abi) }
        var parameter_abi = try WindowsRuntime.IInspectableBinding.toABI(parameter)
        defer { WindowsRuntime.IInspectableBinding.release(&parameter_abi) }
        var language_abi = try WindowsRuntime.StringBinding.toABI(language)
        defer { WindowsRuntime.StringBinding.release(&language_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Convert(this, value_abi, targetType_abi, parameter_abi, language_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func convertBack(_ value: WindowsRuntime.IInspectable?, _ targetType: WindowsUIXamlInterop_TypeName, _ parameter: WindowsRuntime.IInspectable?, _ language: Swift.String) throws -> WindowsRuntime.IInspectable? {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        var targetType_abi = try WindowsUIXamlInterop_TypeName.toABI(targetType)
        defer { WindowsUIXamlInterop_TypeName.release(&targetType_abi) }
        var parameter_abi = try WindowsRuntime.IInspectableBinding.toABI(parameter)
        defer { WindowsRuntime.IInspectableBinding.release(&parameter_abi) }
        var language_abi = try WindowsRuntime.StringBinding.toABI(language)
        defer { WindowsRuntime.StringBinding.release(&language_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ConvertBack(this, value_abi, targetType_abi, parameter_abi, language_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Data.IPropertyChangedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlData_PropertyChangedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE3DE52F6, 0x1E32, 0x5DA6, 0xBB2D, 0xB5B6096C962D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlData_PropertyChangedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlData_PropertyChangedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlData_PropertyChangedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlData_PropertyChangedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Documents.IInline

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_IInline.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x813D427A, 0x8980, 0x5A79, 0xA8FA, 0xF27919CFB24F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_IInline {
}

// MARK: Microsoft.UI.Xaml.Documents.IInlineFactory

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_IInlineFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFD253A36, 0xFA2B, 0x5B30, 0x89A8, 0x9F577871EC07)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_IInlineFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlDocuments_IInline> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_IInline>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Documents.ITextElement

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_ITextElement.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA122BA22, 0x833F, 0x5220, 0xA47E, 0x6CD507531ABE)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_ITextElement {
    public func get_Name() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Name(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func get_FontSize() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontSize(this, &_result))
        return _result
    }

    public func put_FontSize(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontSize(this, value))
    }

    public func get_FontFamily() throws -> MicrosoftUIXamlMedia_FontFamily? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IFontFamily>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontFamily(this, &_result))
        return MicrosoftUIXamlMedia_FontFamilyBinding.fromABI(consuming: &_result)
    }

    public func put_FontFamily(_ value: MicrosoftUIXamlMedia_FontFamily?) throws {
        var value_abi = try MicrosoftUIXamlMedia_FontFamilyBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_FontFamilyBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontFamily(this, value_abi))
    }

    public func get_FontWeight() throws -> WindowsUIText_FontWeight {
        var _result: SWRT_WindowsUIText_FontWeight = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontWeight(this, &_result))
        return WindowsUIText_FontWeight.fromABI(_result)
    }

    public func put_FontWeight(_ value: WindowsUIText_FontWeight) throws {
        let value_abi = WindowsUIText_FontWeight.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontWeight(this, value_abi))
    }

    public func get_FontStyle() throws -> WindowsUIText_FontStyle {
        var _result: SWRT_WindowsUIText_FontStyle = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStyle(this, &_result))
        return WindowsUIText_FontStyle.fromABI(_result)
    }

    public func put_FontStyle(_ value: WindowsUIText_FontStyle) throws {
        let value_abi = WindowsUIText_FontStyle.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontStyle(this, value_abi))
    }

    public func get_FontStretch() throws -> WindowsUIText_FontStretch {
        var _result: SWRT_WindowsUIText_FontStretch = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStretch(this, &_result))
        return WindowsUIText_FontStretch.fromABI(_result)
    }

    public func put_FontStretch(_ value: WindowsUIText_FontStretch) throws {
        let value_abi = WindowsUIText_FontStretch.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_FontStretch(this, value_abi))
    }

    public func get_CharacterSpacing() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CharacterSpacing(this, &_result))
        return _result
    }

    public func put_CharacterSpacing(_ value: Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CharacterSpacing(this, value))
    }

    public func get_Foreground() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Foreground(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_Foreground(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Foreground(this, value_abi))
    }

    public func get_Language() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Language(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_Language(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Language(this, value_abi))
    }

    public func get_IsTextScaleFactorEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextScaleFactorEnabled(this, &_result))
        return _result
    }

    public func put_IsTextScaleFactorEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsTextScaleFactorEnabled(this, value))
    }

    public func get_TextDecorations() throws -> WindowsUIText_TextDecorations {
        var _result: SWRT_WindowsUIText_TextDecorations = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextDecorations(this, &_result))
        return WindowsUIText_TextDecorations.fromABI(_result)
    }

    public func put_TextDecorations(_ value: WindowsUIText_TextDecorations) throws {
        let value_abi = WindowsUIText_TextDecorations.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TextDecorations(this, value_abi))
    }

    public func get_ContentStart() throws -> MicrosoftUIXamlDocuments_TextPointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentStart(this, &_result))
        return MicrosoftUIXamlDocuments_TextPointerBinding.fromABI(consuming: &_result)
    }

    public func get_ContentEnd() throws -> MicrosoftUIXamlDocuments_TextPointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentEnd(this, &_result))
        return MicrosoftUIXamlDocuments_TextPointerBinding.fromABI(consuming: &_result)
    }

    public func get_ElementStart() throws -> MicrosoftUIXamlDocuments_TextPointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ElementStart(this, &_result))
        return MicrosoftUIXamlDocuments_TextPointerBinding.fromABI(consuming: &_result)
    }

    public func get_ElementEnd() throws -> MicrosoftUIXamlDocuments_TextPointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ElementEnd(this, &_result))
        return MicrosoftUIXamlDocuments_TextPointerBinding.fromABI(consuming: &_result)
    }

    public func get_AllowFocusOnInteraction() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusOnInteraction(this, &_result))
        return _result
    }

    public func put_AllowFocusOnInteraction(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AllowFocusOnInteraction(this, value))
    }

    public func get_AccessKey() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AccessKey(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_AccessKey(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AccessKey(this, value_abi))
    }

    public func get_ExitDisplayModeOnAccessKeyInvoked() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ExitDisplayModeOnAccessKeyInvoked(this, &_result))
        return _result
    }

    public func put_ExitDisplayModeOnAccessKeyInvoked(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ExitDisplayModeOnAccessKeyInvoked(this, value))
    }

    public func get_IsAccessKeyScope() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsAccessKeyScope(this, &_result))
        return _result
    }

    public func put_IsAccessKeyScope(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsAccessKeyScope(this, value))
    }

    public func get_AccessKeyScopeOwner() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AccessKeyScopeOwner(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_AccessKeyScopeOwner(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AccessKeyScopeOwner(this, value_abi))
    }

    public func get_KeyTipPlacementMode() throws -> MicrosoftUIXamlInput_KeyTipPlacementMode {
        var _result: SWRT_MicrosoftUIXamlInput_KeyTipPlacementMode = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipPlacementMode(this, &_result))
        return MicrosoftUIXamlInput_KeyTipPlacementMode.fromABI(_result)
    }

    public func put_KeyTipPlacementMode(_ value: MicrosoftUIXamlInput_KeyTipPlacementMode) throws {
        let value_abi = MicrosoftUIXamlInput_KeyTipPlacementMode.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_KeyTipPlacementMode(this, value_abi))
    }

    public func get_KeyTipHorizontalOffset() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipHorizontalOffset(this, &_result))
        return _result
    }

    public func put_KeyTipHorizontalOffset(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_KeyTipHorizontalOffset(this, value))
    }

    public func get_KeyTipVerticalOffset() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipVerticalOffset(this, &_result))
        return _result
    }

    public func put_KeyTipVerticalOffset(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_KeyTipVerticalOffset(this, value))
    }

    public func get_XamlRoot() throws -> MicrosoftUIXaml_XamlRoot? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IXamlRoot>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XamlRoot(this, &_result))
        return MicrosoftUIXaml_XamlRootBinding.fromABI(consuming: &_result)
    }

    public func put_XamlRoot(_ value: MicrosoftUIXaml_XamlRoot?) throws {
        var value_abi = try MicrosoftUIXaml_XamlRootBinding.toABI(value)
        defer { MicrosoftUIXaml_XamlRootBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_XamlRoot(this, value_abi))
    }

    public func add_AccessKeyDisplayRequested(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlDocuments_TextElement?, MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.TextElement_AccessKeyDisplayRequestedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.TextElement_AccessKeyDisplayRequestedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_AccessKeyDisplayRequested(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_AccessKeyDisplayRequested(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_AccessKeyDisplayRequested(this, token_abi))
    }

    public func add_AccessKeyDisplayDismissed(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlDocuments_TextElement?, MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.TextElement_AccessKeyDisplayDismissedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.TextElement_AccessKeyDisplayDismissedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_AccessKeyDisplayDismissed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_AccessKeyDisplayDismissed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_AccessKeyDisplayDismissed(this, token_abi))
    }

    public func add_AccessKeyInvoked(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlDocuments_TextElement?, MicrosoftUIXamlInput_AccessKeyInvokedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.TextElement_AccessKeyInvokedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.TextElement_AccessKeyInvokedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_AccessKeyInvoked(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_AccessKeyInvoked(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_AccessKeyInvoked(this, token_abi))
    }

    public func findName(_ name: Swift.String) throws -> WindowsRuntime.IInspectable? {
        var name_abi = try WindowsRuntime.StringBinding.toABI(name)
        defer { WindowsRuntime.StringBinding.release(&name_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.FindName(this, name_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Documents.ITextElementFactory

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_ITextElementFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xDF51FB95, 0xA5E6, 0x5B16, 0x8E88, 0x9F7CBFA234B1)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_ITextElementFactory {
}

// MARK: Microsoft.UI.Xaml.Documents.ITextElementOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_ITextElementOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x41B01380, 0xE49F, 0x5FDA, 0x8C72, 0xACC1AC1E91DF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_ITextElementOverrides {
    public func onDisconnectVisualChildren() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnDisconnectVisualChildren(this))
    }
}

// MARK: Microsoft.UI.Xaml.Documents.ITextElementStatics

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_ITextElementStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC9B55919, 0xE1FE, 0x5ACD, 0xBAC7, 0xC9D7F413B35C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_ITextElementStatics {
    public func get_FontSizeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontSizeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontFamilyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontFamilyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontWeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontWeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontStyleProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStyleProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_FontStretchProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FontStretchProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_CharacterSpacingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CharacterSpacingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ForegroundProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ForegroundProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_LanguageProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LanguageProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsTextScaleFactorEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsTextScaleFactorEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TextDecorationsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TextDecorationsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AllowFocusOnInteractionProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AllowFocusOnInteractionProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AccessKeyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AccessKeyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ExitDisplayModeOnAccessKeyInvokedProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ExitDisplayModeOnAccessKeyInvokedProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsAccessKeyScopeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsAccessKeyScopeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AccessKeyScopeOwnerProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AccessKeyScopeOwnerProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_KeyTipPlacementModeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipPlacementModeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_KeyTipHorizontalOffsetProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipHorizontalOffsetProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_KeyTipVerticalOffsetProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyTipVerticalOffsetProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Documents.ITextHighlighter

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_ITextHighlighter.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB756E861, 0x1D2B, 0x5F6F, 0x81FD, 0xC51A5BC068FF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_ITextHighlighter {
    public func get_Ranges() throws -> WindowsFoundationCollections_IVector<MicrosoftUIXamlDocuments_TextRange>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextRange>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Ranges(this, &_result))
        return WindowsFoundationCollections_IVectorBinding.TextRange.fromABI(consuming: &_result)
    }

    public func get_Foreground() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Foreground(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_Foreground(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Foreground(this, value_abi))
    }

    public func get_Background() throws -> MicrosoftUIXamlMedia_Brush? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Background(this, &_result))
        return MicrosoftUIXamlMedia_BrushBinding.fromABI(consuming: &_result)
    }

    public func put_Background(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        var value_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Background(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Documents.ITextHighlighterFactory

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_ITextHighlighterFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x69C7311F, 0xC019, 0x5B93, 0xB511, 0x81418543BAB7)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_ITextHighlighterFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlDocuments_ITextHighlighter> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextHighlighter>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Documents.ITextHighlighterStatics

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_ITextHighlighterStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4975047A, 0x87AD, 0x51A2, 0x977C, 0xE771DE4F4035)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_ITextHighlighterStatics {
    public func get_ForegroundProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ForegroundProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_BackgroundProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BackgroundProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Documents.ITextPointer

public func uuidof(_: SWRT_MicrosoftUIXamlDocuments_ITextPointer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x842EB385, 0xEE41, 0x5930, 0x979B, 0x438FA7525A51)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlDocuments_ITextPointer {
    public func get_Parent() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Parent(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func get_VisualParent() throws -> MicrosoftUIXaml_FrameworkElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IFrameworkElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_VisualParent(this, &_result))
        return MicrosoftUIXaml_FrameworkElementBinding.fromABI(consuming: &_result)
    }

    public func get_LogicalDirection() throws -> MicrosoftUIXamlDocuments_LogicalDirection {
        var _result: SWRT_MicrosoftUIXamlDocuments_LogicalDirection = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_LogicalDirection(this, &_result))
        return MicrosoftUIXamlDocuments_LogicalDirection.fromABI(_result)
    }

    public func get_Offset() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Offset(this, &_result))
        return _result
    }

    public func getCharacterRect(_ direction: MicrosoftUIXamlDocuments_LogicalDirection) throws -> WindowsFoundation_Rect {
        let direction_abi = MicrosoftUIXamlDocuments_LogicalDirection.toABI(direction)
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetCharacterRect(this, direction_abi, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }

    public func getPositionAtOffset(_ offset: Swift.Int32, _ direction: MicrosoftUIXamlDocuments_LogicalDirection) throws -> MicrosoftUIXamlDocuments_TextPointer? {
        let direction_abi = MicrosoftUIXamlDocuments_LogicalDirection.toABI(direction)
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPositionAtOffset(this, offset, direction_abi, &_result))
        return MicrosoftUIXamlDocuments_TextPointerBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IDoubleTappedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_DoubleTappedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF7A501B9, 0xE277, 0x5611, 0x87B0, 0x0E0607622183)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_DoubleTappedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_DoubleTappedRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_DoubleTappedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_DoubleTappedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IHoldingEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_HoldingEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFE23C5BD, 0x4984, 0x56B6, 0xB92B, 0xFC9D1216B24E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_HoldingEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_HoldingRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_HoldingRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_HoldingRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IAccessKeyDisplayDismissedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x125A83D8, 0x7F86, 0x5EA9, 0x9063, 0xB9407E644587)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IAccessKeyDisplayDismissedEventArgs {
}

// MARK: Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IAccessKeyDisplayRequestedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC4ED84D8, 0x2B27, 0x59B1, 0x9CF0, 0x7F9164DE58CB)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IAccessKeyDisplayRequestedEventArgs {
    public func get_PressedKeys() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PressedKeys(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IAccessKeyInvokedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD00C11A4, 0xF9FB, 0x5707, 0x9692, 0x98B80BB8546D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IAccessKeyInvokedEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_ICharacterReceivedRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE26CA5BB, 0x34C3, 0x5C1E, 0x9A16, 0x00B80B07A899)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_ICharacterReceivedRoutedEventArgs {
    public func get_Character() throws -> WindowsRuntime.Char16 {
        var _result: Swift.UInt16 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Character(this, &_result))
        return WindowsRuntime.Char16Binding.fromABI(_result)
    }

    public func get_KeyStatus() throws -> WindowsUICore_CorePhysicalKeyStatus {
        var _result: SWRT_WindowsUICore_CorePhysicalKeyStatus = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyStatus(this, &_result))
        return WindowsUICore_CorePhysicalKeyStatus.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Input.ICommand

public func uuidof(_: SWRT_MicrosoftUIXamlInput_ICommand.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE5AF3542, 0xCA67, 0x4081, 0x995B, 0x709DD13792DF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_ICommand {
    public func add_CanExecuteChanged(_ handler: WindowsFoundation_EventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_EventHandlerBinding.Object.toABI(handler)
        defer { WindowsFoundation_EventHandlerBinding.Object.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_CanExecuteChanged(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_CanExecuteChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_CanExecuteChanged(this, token_abi))
    }

    public func canExecute(_ parameter: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        var parameter_abi = try WindowsRuntime.IInspectableBinding.toABI(parameter)
        defer { WindowsRuntime.IInspectableBinding.release(&parameter_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CanExecute(this, parameter_abi, &_result))
        return _result
    }

    public func execute(_ parameter: WindowsRuntime.IInspectable?) throws {
        var parameter_abi = try WindowsRuntime.IInspectableBinding.toABI(parameter)
        defer { WindowsRuntime.IInspectableBinding.release(&parameter_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Execute(this, parameter_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IContextRequestedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IContextRequestedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xBCEDCB98, 0x77B5, 0x53C0, 0x802E, 0xFD52F3806E51)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IContextRequestedEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func tryGetPosition(_ relativeTo: MicrosoftUIXaml_UIElement?, _ point: inout WindowsFoundation_Point) throws -> Swift.Bool {
        var relativeTo_abi = try MicrosoftUIXaml_UIElementBinding.toABI(relativeTo)
        defer { MicrosoftUIXaml_UIElementBinding.release(&relativeTo_abi) }
        var point_abi: SWRT_WindowsFoundation_Point = .init()
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryGetPosition(this, relativeTo_abi, &point_abi, &_result))
        point = WindowsFoundation_Point.fromABI(point_abi)
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IDoubleTappedRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x32B9549D, 0x11D8, 0x53A5, 0xA953, 0x02409537A11F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IDoubleTappedRoutedEventArgs {
    public func get_PointerDeviceType() throws -> MicrosoftUIInput_PointerDeviceType {
        var _result: SWRT_MicrosoftUIInput_PointerDeviceType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerDeviceType(this, &_result))
        return MicrosoftUIInput_PointerDeviceType.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func getPosition(_ relativeTo: MicrosoftUIXaml_UIElement?) throws -> WindowsFoundation_Point {
        var relativeTo_abi = try MicrosoftUIXaml_UIElementBinding.toABI(relativeTo)
        defer { MicrosoftUIXaml_UIElementBinding.release(&relativeTo_abi) }
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPosition(this, relativeTo_abi, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IGettingFocusEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IGettingFocusEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x37FD3AF0, 0xBD3C, 0x5BF5, 0xA9CD, 0x71A1E87AF950)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IGettingFocusEventArgs {
    public func get_OldFocusedElement() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OldFocusedElement(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func get_NewFocusedElement() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_NewFocusedElement(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_NewFocusedElement(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_NewFocusedElement(this, value_abi))
    }

    public func get_FocusState() throws -> MicrosoftUIXaml_FocusState {
        var _result: SWRT_MicrosoftUIXaml_FocusState = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusState(this, &_result))
        return MicrosoftUIXaml_FocusState.fromABI(_result)
    }

    public func get_Direction() throws -> MicrosoftUIXamlInput_FocusNavigationDirection {
        var _result: SWRT_MicrosoftUIXamlInput_FocusNavigationDirection = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Direction(this, &_result))
        return MicrosoftUIXamlInput_FocusNavigationDirection.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_InputDevice() throws -> MicrosoftUIXamlInput_FocusInputDeviceKind {
        var _result: SWRT_MicrosoftUIXamlInput_FocusInputDeviceKind = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_InputDevice(this, &_result))
        return MicrosoftUIXamlInput_FocusInputDeviceKind.fromABI(_result)
    }

    public func get_Cancel() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Cancel(this, &_result))
        return _result
    }

    public func put_Cancel(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Cancel(this, value))
    }

    public func get_CorrelationId() throws -> COM.GUID {
        var _result: SWRT_Guid = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CorrelationId(this, &_result))
        return WindowsRuntime.GuidBinding.fromABI(_result)
    }

    public func tryCancel() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryCancel(this, &_result))
        return _result
    }

    public func trySetNewFocusedElement(_ element: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Bool {
        var element_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(element)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&element_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TrySetNewFocusedElement(this, element_abi, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IHoldingRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8272A4B2, 0x2221, 0x551E, 0xB0BB, 0x16E29138AB20)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IHoldingRoutedEventArgs {
    public func get_PointerDeviceType() throws -> MicrosoftUIInput_PointerDeviceType {
        var _result: SWRT_MicrosoftUIInput_PointerDeviceType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerDeviceType(this, &_result))
        return MicrosoftUIInput_PointerDeviceType.fromABI(_result)
    }

    public func get_HoldingState() throws -> MicrosoftUIInput_HoldingState {
        var _result: SWRT_MicrosoftUIInput_HoldingState = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HoldingState(this, &_result))
        return MicrosoftUIInput_HoldingState.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func getPosition(_ relativeTo: MicrosoftUIXaml_UIElement?) throws -> WindowsFoundation_Point {
        var relativeTo_abi = try MicrosoftUIXaml_UIElementBinding.toABI(relativeTo)
        defer { MicrosoftUIXaml_UIElementBinding.release(&relativeTo_abi) }
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPosition(this, relativeTo_abi, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IInertiaExpansionBehavior

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IInertiaExpansionBehavior.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD60029B7, 0xF0CD, 0x5AEA, 0xABE5, 0x7410D09118C6)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IInertiaExpansionBehavior {
    public func get_DesiredDeceleration() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DesiredDeceleration(this, &_result))
        return _result
    }

    public func put_DesiredDeceleration(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DesiredDeceleration(this, value))
    }

    public func get_DesiredExpansion() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DesiredExpansion(this, &_result))
        return _result
    }

    public func put_DesiredExpansion(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DesiredExpansion(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IInertiaRotationBehavior

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IInertiaRotationBehavior.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x27B4BD03, 0x9149, 0x5691, 0xBCE5, 0xFA33B32C4A81)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IInertiaRotationBehavior {
    public func get_DesiredDeceleration() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DesiredDeceleration(this, &_result))
        return _result
    }

    public func put_DesiredDeceleration(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DesiredDeceleration(this, value))
    }

    public func get_DesiredRotation() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DesiredRotation(this, &_result))
        return _result
    }

    public func put_DesiredRotation(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DesiredRotation(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IInertiaTranslationBehavior

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IInertiaTranslationBehavior.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD4F91CF5, 0x3317, 0x5914, 0xB25A, 0xEA6EE55B96D0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IInertiaTranslationBehavior {
    public func get_DesiredDeceleration() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DesiredDeceleration(this, &_result))
        return _result
    }

    public func put_DesiredDeceleration(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DesiredDeceleration(this, value))
    }

    public func get_DesiredDisplacement() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DesiredDisplacement(this, &_result))
        return _result
    }

    public func put_DesiredDisplacement(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DesiredDisplacement(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IKeyRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEE357007, 0xA2D6, 0x5C75, 0x9431, 0x05FD66EC7915)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IKeyRoutedEventArgs {
    public func get_Key() throws -> WindowsSystem_VirtualKey {
        var _result: SWRT_WindowsSystem_VirtualKey = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Key(this, &_result))
        return WindowsSystem_VirtualKey.fromABI(_result)
    }

    public func get_KeyStatus() throws -> WindowsUICore_CorePhysicalKeyStatus {
        var _result: SWRT_WindowsUICore_CorePhysicalKeyStatus = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyStatus(this, &_result))
        return WindowsUICore_CorePhysicalKeyStatus.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_OriginalKey() throws -> WindowsSystem_VirtualKey {
        var _result: SWRT_WindowsSystem_VirtualKey = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OriginalKey(this, &_result))
        return WindowsSystem_VirtualKey.fromABI(_result)
    }

    public func get_DeviceId() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DeviceId(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IKeyboardAccelerator

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6F8BF1E2, 0x4E91, 0x5CF9, 0xA6BE, 0x4770CAF3D770)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator {
    public func get_Key() throws -> WindowsSystem_VirtualKey {
        var _result: SWRT_WindowsSystem_VirtualKey = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Key(this, &_result))
        return WindowsSystem_VirtualKey.fromABI(_result)
    }

    public func put_Key(_ value: WindowsSystem_VirtualKey) throws {
        let value_abi = WindowsSystem_VirtualKey.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Key(this, value_abi))
    }

    public func get_Modifiers() throws -> WindowsSystem_VirtualKeyModifiers {
        var _result: SWRT_WindowsSystem_VirtualKeyModifiers = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Modifiers(this, &_result))
        return WindowsSystem_VirtualKeyModifiers.fromABI(_result)
    }

    public func put_Modifiers(_ value: WindowsSystem_VirtualKeyModifiers) throws {
        let value_abi = WindowsSystem_VirtualKeyModifiers.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Modifiers(this, value_abi))
    }

    public func get_IsEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsEnabled(this, &_result))
        return _result
    }

    public func put_IsEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsEnabled(this, value))
    }

    public func get_ScopeOwner() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ScopeOwner(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_ScopeOwner(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ScopeOwner(this, value_abi))
    }

    public func add_Invoked(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlInput_KeyboardAccelerator?, MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.KeyboardAccelerator_KeyboardAcceleratorInvokedEventArgs.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.KeyboardAccelerator_KeyboardAcceleratorInvokedEventArgs.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Invoked(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Invoked(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Invoked(this, token_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IKeyboardAcceleratorFactory

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCA1D410A, 0xAF2A, 0x51B9, 0xA1DE, 0x6C0AF9F3B598)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorInvokedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x62C9FDB0, 0xB574, 0x527D, 0x97EB, 0x5C7F674441E0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorInvokedEventArgs {
    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_Element() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Element(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func get_KeyboardAccelerator() throws -> MicrosoftUIXamlInput_KeyboardAccelerator? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyboardAccelerator(this, &_result))
        return MicrosoftUIXamlInput_KeyboardAcceleratorBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStatics

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x73E674CA, 0x73F4, 0x5E77, 0xB8D6, 0xFF7852A63B0B)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorStatics {
    public func get_KeyProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ModifiersProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ModifiersProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsEnabledProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsEnabledProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_ScopeOwnerProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ScopeOwnerProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.ILosingFocusEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_ILosingFocusEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFA0E5FFA, 0x2B1B, 0x52F8, 0xBB66, 0xE35F51E73CF3)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_ILosingFocusEventArgs {
    public func get_OldFocusedElement() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OldFocusedElement(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func get_NewFocusedElement() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_NewFocusedElement(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    public func put_NewFocusedElement(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        var value_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(value)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_NewFocusedElement(this, value_abi))
    }

    public func get_FocusState() throws -> MicrosoftUIXaml_FocusState {
        var _result: SWRT_MicrosoftUIXaml_FocusState = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FocusState(this, &_result))
        return MicrosoftUIXaml_FocusState.fromABI(_result)
    }

    public func get_Direction() throws -> MicrosoftUIXamlInput_FocusNavigationDirection {
        var _result: SWRT_MicrosoftUIXamlInput_FocusNavigationDirection = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Direction(this, &_result))
        return MicrosoftUIXamlInput_FocusNavigationDirection.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_InputDevice() throws -> MicrosoftUIXamlInput_FocusInputDeviceKind {
        var _result: SWRT_MicrosoftUIXamlInput_FocusInputDeviceKind = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_InputDevice(this, &_result))
        return MicrosoftUIXamlInput_FocusInputDeviceKind.fromABI(_result)
    }

    public func get_Cancel() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Cancel(this, &_result))
        return _result
    }

    public func put_Cancel(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Cancel(this, value))
    }

    public func get_CorrelationId() throws -> COM.GUID {
        var _result: SWRT_Guid = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CorrelationId(this, &_result))
        return WindowsRuntime.GuidBinding.fromABI(_result)
    }

    public func tryCancel() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryCancel(this, &_result))
        return _result
    }

    public func trySetNewFocusedElement(_ element: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Bool {
        var element_abi = try MicrosoftUIXaml_DependencyObjectBinding.toABI(element)
        defer { MicrosoftUIXaml_DependencyObjectBinding.release(&element_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TrySetNewFocusedElement(this, element_abi, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IManipulationCompletedRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE3BE9E4E, 0xC5FB, 0x5859, 0xA81D, 0xCE12FC3A2F4D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IManipulationCompletedRoutedEventArgs {
    public func get_Container() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Container(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func get_Position() throws -> WindowsFoundation_Point {
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Position(this, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }

    public func get_IsInertial() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsInertial(this, &_result))
        return _result
    }

    public func get_Cumulative() throws -> MicrosoftUIInput_ManipulationDelta {
        var _result: SWRT_MicrosoftUIInput_ManipulationDelta = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Cumulative(this, &_result))
        return MicrosoftUIInput_ManipulationDelta.fromABI(_result)
    }

    public func get_Velocities() throws -> MicrosoftUIInput_ManipulationVelocities {
        var _result: SWRT_MicrosoftUIInput_ManipulationVelocities = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Velocities(this, &_result))
        return MicrosoftUIInput_ManipulationVelocities.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_PointerDeviceType() throws -> MicrosoftUIInput_PointerDeviceType {
        var _result: SWRT_MicrosoftUIInput_PointerDeviceType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerDeviceType(this, &_result))
        return MicrosoftUIInput_PointerDeviceType.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IManipulationDeltaRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x51369745, 0x960F, 0x54AC, 0x93FA, 0x763D22910DEA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IManipulationDeltaRoutedEventArgs {
    public func get_Container() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Container(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func get_Position() throws -> WindowsFoundation_Point {
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Position(this, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }

    public func get_IsInertial() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsInertial(this, &_result))
        return _result
    }

    public func get_Delta() throws -> MicrosoftUIInput_ManipulationDelta {
        var _result: SWRT_MicrosoftUIInput_ManipulationDelta = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Delta(this, &_result))
        return MicrosoftUIInput_ManipulationDelta.fromABI(_result)
    }

    public func get_Cumulative() throws -> MicrosoftUIInput_ManipulationDelta {
        var _result: SWRT_MicrosoftUIInput_ManipulationDelta = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Cumulative(this, &_result))
        return MicrosoftUIInput_ManipulationDelta.fromABI(_result)
    }

    public func get_Velocities() throws -> MicrosoftUIInput_ManipulationVelocities {
        var _result: SWRT_MicrosoftUIInput_ManipulationVelocities = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Velocities(this, &_result))
        return MicrosoftUIInput_ManipulationVelocities.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_PointerDeviceType() throws -> MicrosoftUIInput_PointerDeviceType {
        var _result: SWRT_MicrosoftUIInput_PointerDeviceType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerDeviceType(this, &_result))
        return MicrosoftUIInput_PointerDeviceType.fromABI(_result)
    }

    public func complete() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Complete(this))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IManipulationInertiaStartingRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x17D510BE, 0x5514, 0x5952, 0x9AFD, 0x959B60AB9394)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IManipulationInertiaStartingRoutedEventArgs {
    public func get_Container() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Container(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func get_ExpansionBehavior() throws -> MicrosoftUIXamlInput_InertiaExpansionBehavior? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IInertiaExpansionBehavior>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ExpansionBehavior(this, &_result))
        return MicrosoftUIXamlInput_InertiaExpansionBehaviorBinding.fromABI(consuming: &_result)
    }

    public func put_ExpansionBehavior(_ value: MicrosoftUIXamlInput_InertiaExpansionBehavior?) throws {
        var value_abi = try MicrosoftUIXamlInput_InertiaExpansionBehaviorBinding.toABI(value)
        defer { MicrosoftUIXamlInput_InertiaExpansionBehaviorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_ExpansionBehavior(this, value_abi))
    }

    public func get_RotationBehavior() throws -> MicrosoftUIXamlInput_InertiaRotationBehavior? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IInertiaRotationBehavior>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RotationBehavior(this, &_result))
        return MicrosoftUIXamlInput_InertiaRotationBehaviorBinding.fromABI(consuming: &_result)
    }

    public func put_RotationBehavior(_ value: MicrosoftUIXamlInput_InertiaRotationBehavior?) throws {
        var value_abi = try MicrosoftUIXamlInput_InertiaRotationBehaviorBinding.toABI(value)
        defer { MicrosoftUIXamlInput_InertiaRotationBehaviorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RotationBehavior(this, value_abi))
    }

    public func get_TranslationBehavior() throws -> MicrosoftUIXamlInput_InertiaTranslationBehavior? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IInertiaTranslationBehavior>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TranslationBehavior(this, &_result))
        return MicrosoftUIXamlInput_InertiaTranslationBehaviorBinding.fromABI(consuming: &_result)
    }

    public func put_TranslationBehavior(_ value: MicrosoftUIXamlInput_InertiaTranslationBehavior?) throws {
        var value_abi = try MicrosoftUIXamlInput_InertiaTranslationBehaviorBinding.toABI(value)
        defer { MicrosoftUIXamlInput_InertiaTranslationBehaviorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_TranslationBehavior(this, value_abi))
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_PointerDeviceType() throws -> MicrosoftUIInput_PointerDeviceType {
        var _result: SWRT_MicrosoftUIInput_PointerDeviceType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerDeviceType(this, &_result))
        return MicrosoftUIInput_PointerDeviceType.fromABI(_result)
    }

    public func get_Delta() throws -> MicrosoftUIInput_ManipulationDelta {
        var _result: SWRT_MicrosoftUIInput_ManipulationDelta = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Delta(this, &_result))
        return MicrosoftUIInput_ManipulationDelta.fromABI(_result)
    }

    public func get_Cumulative() throws -> MicrosoftUIInput_ManipulationDelta {
        var _result: SWRT_MicrosoftUIInput_ManipulationDelta = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Cumulative(this, &_result))
        return MicrosoftUIInput_ManipulationDelta.fromABI(_result)
    }

    public func get_Velocities() throws -> MicrosoftUIInput_ManipulationVelocities {
        var _result: SWRT_MicrosoftUIInput_ManipulationVelocities = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Velocities(this, &_result))
        return MicrosoftUIInput_ManipulationVelocities.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationPivot

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IManipulationPivot.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x286BABA4, 0x313D, 0x507C, 0xADC5, 0xF739732CEA27)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IManipulationPivot {
    public func get_Center() throws -> WindowsFoundation_Point {
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Center(this, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }

    public func put_Center(_ value: WindowsFoundation_Point) throws {
        let value_abi = WindowsFoundation_Point.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Center(this, value_abi))
    }

    public func get_Radius() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Radius(this, &_result))
        return _result
    }

    public func put_Radius(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Radius(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationPivotFactory

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IManipulationPivotFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x67143CCD, 0xEA6C, 0x5FE2, 0xBEF2, 0xADCBD7AF52FD)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IManipulationPivotFactory {
    public func createInstanceWithCenterAndRadius(_ center: WindowsFoundation_Point, _ radius: Swift.Double) throws -> COM.COMReference<SWRT_MicrosoftUIXamlInput_IManipulationPivot> {
        let center_abi = WindowsFoundation_Point.toABI(center)
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IManipulationPivot>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstanceWithCenterAndRadius(this, center_abi, radius, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IManipulationStartedRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x61857950, 0x5821, 0x5652, 0x9FDF, 0xC6277C5886F5)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IManipulationStartedRoutedEventArgs {
    public func get_Container() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Container(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func get_Position() throws -> WindowsFoundation_Point {
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Position(this, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_PointerDeviceType() throws -> MicrosoftUIInput_PointerDeviceType {
        var _result: SWRT_MicrosoftUIInput_PointerDeviceType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerDeviceType(this, &_result))
        return MicrosoftUIInput_PointerDeviceType.fromABI(_result)
    }

    public func get_Cumulative() throws -> MicrosoftUIInput_ManipulationDelta {
        var _result: SWRT_MicrosoftUIInput_ManipulationDelta = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Cumulative(this, &_result))
        return MicrosoftUIInput_ManipulationDelta.fromABI(_result)
    }

    public func complete() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Complete(this))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactory

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IManipulationStartedRoutedEventArgsFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5681B0DE, 0x3FA7, 0x503E, 0x9C46, 0xA80339760292)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IManipulationStartedRoutedEventArgsFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlInput_IManipulationStartedRoutedEventArgs> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IManipulationStartedRoutedEventArgs>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IManipulationStartingRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x93A99F86, 0xF5A0, 0x5326, 0x91B0, 0x851C897AF79F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IManipulationStartingRoutedEventArgs {
    public func get_Mode() throws -> MicrosoftUIXamlInput_ManipulationModes {
        var _result: SWRT_MicrosoftUIXamlInput_ManipulationModes = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Mode(this, &_result))
        return MicrosoftUIXamlInput_ManipulationModes.fromABI(_result)
    }

    public func put_Mode(_ value: MicrosoftUIXamlInput_ManipulationModes) throws {
        let value_abi = MicrosoftUIXamlInput_ManipulationModes.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Mode(this, value_abi))
    }

    public func get_Container() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Container(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    public func put_Container(_ value: MicrosoftUIXaml_UIElement?) throws {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Container(this, value_abi))
    }

    public func get_Pivot() throws -> MicrosoftUIXamlInput_ManipulationPivot? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IManipulationPivot>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Pivot(this, &_result))
        return MicrosoftUIXamlInput_ManipulationPivotBinding.fromABI(consuming: &_result)
    }

    public func put_Pivot(_ value: MicrosoftUIXamlInput_ManipulationPivot?) throws {
        var value_abi = try MicrosoftUIXamlInput_ManipulationPivotBinding.toABI(value)
        defer { MicrosoftUIXamlInput_ManipulationPivotBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Pivot(this, value_abi))
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_INoFocusCandidateFoundEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA2D7153A, 0xCD2A, 0x59CB, 0xA574, 0xAC82E30B9201)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_INoFocusCandidateFoundEventArgs {
    public func get_Direction() throws -> MicrosoftUIXamlInput_FocusNavigationDirection {
        var _result: SWRT_MicrosoftUIXamlInput_FocusNavigationDirection = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Direction(this, &_result))
        return MicrosoftUIXamlInput_FocusNavigationDirection.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_InputDevice() throws -> MicrosoftUIXamlInput_FocusInputDeviceKind {
        var _result: SWRT_MicrosoftUIXamlInput_FocusInputDeviceKind = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_InputDevice(this, &_result))
        return MicrosoftUIXamlInput_FocusInputDeviceKind.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IPointer

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IPointer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1F9AFBF5, 0x11A3, 0x5E68, 0xAA1B, 0x72FEBFA0AB23)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IPointer {
    public func get_PointerId() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerId(this, &_result))
        return _result
    }

    public func get_PointerDeviceType() throws -> MicrosoftUIInput_PointerDeviceType {
        var _result: SWRT_MicrosoftUIInput_PointerDeviceType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerDeviceType(this, &_result))
        return MicrosoftUIInput_PointerDeviceType.fromABI(_result)
    }

    public func get_IsInContact() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsInContact(this, &_result))
        return _result
    }

    public func get_IsInRange() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsInRange(this, &_result))
        return _result
    }
}

// MARK: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IPointerRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x66E78A9A, 0x1BEC, 0x5F92, 0xB1A1, 0xEA6334EE511C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IPointerRoutedEventArgs {
    public func get_Pointer() throws -> MicrosoftUIXamlInput_Pointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Pointer(this, &_result))
        return MicrosoftUIXamlInput_PointerBinding.fromABI(consuming: &_result)
    }

    public func get_KeyModifiers() throws -> WindowsSystem_VirtualKeyModifiers {
        var _result: SWRT_WindowsSystem_VirtualKeyModifiers = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyModifiers(this, &_result))
        return WindowsSystem_VirtualKeyModifiers.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func get_IsGenerated() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsGenerated(this, &_result))
        return _result
    }

    public func getCurrentPoint(_ relativeTo: MicrosoftUIXaml_UIElement?) throws -> MicrosoftUIInput_PointerPoint? {
        var relativeTo_abi = try MicrosoftUIXaml_UIElementBinding.toABI(relativeTo)
        defer { MicrosoftUIXaml_UIElementBinding.release(&relativeTo_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIInput_IPointerPoint>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetCurrentPoint(this, relativeTo_abi, &_result))
        return MicrosoftUIInput_PointerPointBinding.fromABI(consuming: &_result)
    }

    public func getIntermediatePoints(_ relativeTo: MicrosoftUIXaml_UIElement?) throws -> WindowsFoundationCollections_IVector<MicrosoftUIInput_PointerPoint?>? {
        var relativeTo_abi = try MicrosoftUIXaml_UIElementBinding.toABI(relativeTo)
        defer { MicrosoftUIXaml_UIElementBinding.release(&relativeTo_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIInput_PointerPoint>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetIntermediatePoints(this, relativeTo_abi, &_result))
        return WindowsFoundationCollections_IVectorBinding.PointerPoint.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IProcessKeyboardAcceleratorEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9BE0D058, 0x3D26, 0x5811, 0xB50A, 0x3BB80CA766C9)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IProcessKeyboardAcceleratorEventArgs {
    public func get_Key() throws -> WindowsSystem_VirtualKey {
        var _result: SWRT_WindowsSystem_VirtualKey = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Key(this, &_result))
        return WindowsSystem_VirtualKey.fromABI(_result)
    }

    public func get_Modifiers() throws -> WindowsSystem_VirtualKeyModifiers {
        var _result: SWRT_WindowsSystem_VirtualKeyModifiers = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Modifiers(this, &_result))
        return WindowsSystem_VirtualKeyModifiers.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_IRightTappedRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3972FAFB, 0x2915, 0x5C62, 0xBB6B, 0x54AD84FF400D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_IRightTappedRoutedEventArgs {
    public func get_PointerDeviceType() throws -> MicrosoftUIInput_PointerDeviceType {
        var _result: SWRT_MicrosoftUIInput_PointerDeviceType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerDeviceType(this, &_result))
        return MicrosoftUIInput_PointerDeviceType.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func getPosition(_ relativeTo: MicrosoftUIXaml_UIElement?) throws -> WindowsFoundation_Point {
        var relativeTo_abi = try MicrosoftUIXaml_UIElementBinding.toABI(relativeTo)
        defer { MicrosoftUIXaml_UIElementBinding.release(&relativeTo_abi) }
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPosition(this, relativeTo_abi, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlInput_ITappedRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x73F74B8C, 0x3709, 0x547E, 0x8E0C, 0x51C03C89126A)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_ITappedRoutedEventArgs {
    public func get_PointerDeviceType() throws -> MicrosoftUIInput_PointerDeviceType {
        var _result: SWRT_MicrosoftUIInput_PointerDeviceType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PointerDeviceType(this, &_result))
        return MicrosoftUIInput_PointerDeviceType.fromABI(_result)
    }

    public func get_Handled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Handled(this, &_result))
        return _result
    }

    public func put_Handled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Handled(this, value))
    }

    public func getPosition(_ relativeTo: MicrosoftUIXaml_UIElement?) throws -> WindowsFoundation_Point {
        var relativeTo_abi = try MicrosoftUIXaml_UIElementBinding.toABI(relativeTo)
        defer { MicrosoftUIXaml_UIElementBinding.release(&relativeTo_abi) }
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetPosition(this, relativeTo_abi, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Input.IKeyEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_KeyEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xDB68E7CC, 0x9A2B, 0x527D, 0x9989, 0x25284DACCC03)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_KeyEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_KeyRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_KeyRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationCompletedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_ManipulationCompletedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD51DF8DB, 0x71CD, 0x5BFD, 0x8426, 0x767218EE55EC)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_ManipulationCompletedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_ManipulationCompletedRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_ManipulationCompletedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationCompletedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationDeltaEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_ManipulationDeltaEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x83F2D4CE, 0x105F, 0x5392, 0xA38A, 0xB7467B7C2EA5)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_ManipulationDeltaEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_ManipulationDeltaRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_ManipulationDeltaRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationDeltaRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationInertiaStartingEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_ManipulationInertiaStartingEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5DE296BD, 0x6F1C, 0x5F60, 0x9180, 0x10705282576C)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_ManipulationInertiaStartingEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_ManipulationInertiaStartingRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_ManipulationInertiaStartingRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationInertiaStartingRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationStartedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_ManipulationStartedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x41060669, 0x304C, 0x53AC, 0x9D43, 0xBC311235AAE4)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_ManipulationStartedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_ManipulationStartedRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_ManipulationStartedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationStartedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IManipulationStartingEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_ManipulationStartingEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x44F528F1, 0xF0E4, 0x505C, 0xA0BB, 0x0C4839B29DF5)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_ManipulationStartingEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_ManipulationStartingRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_ManipulationStartingRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_ManipulationStartingRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IPointerEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_PointerEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA48A71E1, 0x8BB4, 0x5597, 0x9E31, 0x903A3F6A04FB)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_PointerEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_PointerRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.IRightTappedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_RightTappedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5070E32F, 0x3DC7, 0x56CF, 0x8FDD, 0xDE1B40D0B472)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_RightTappedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_RightTappedRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_RightTappedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_RightTappedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Input.ITappedEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlInput_TappedEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB60074F3, 0x125B, 0x534E, 0x8F9C, 0x9769BD3F0F64)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlInput_TappedEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlInput_TappedRoutedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlInput_TappedRoutedEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlInput_TappedRoutedEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Markup.IXamlMember

public func uuidof(_: SWRT_MicrosoftUIXamlMarkup_IXamlMember.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xBF3A2913, 0x5C63, 0x50EC, 0x8660, 0x61809BE7B9B9)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMarkup_IXamlMember {
    public func get_IsAttachable() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsAttachable(this, &_result))
        return _result
    }

    public func get_IsDependencyProperty() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsDependencyProperty(this, &_result))
        return _result
    }

    public func get_IsReadOnly() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsReadOnly(this, &_result))
        return _result
    }

    public func get_Name() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Name(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func get_TargetType() throws -> MicrosoftUIXamlMarkup_IXamlType? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlType>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TargetType(this, &_result))
        return MicrosoftUIXamlMarkup_IXamlTypeBinding.fromABI(consuming: &_result)
    }

    public func get_Type() throws -> MicrosoftUIXamlMarkup_IXamlType? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlType>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Type(this, &_result))
        return MicrosoftUIXamlMarkup_IXamlTypeBinding.fromABI(consuming: &_result)
    }

    public func getValue(_ instance: WindowsRuntime.IInspectable?) throws -> WindowsRuntime.IInspectable? {
        var instance_abi = try WindowsRuntime.IInspectableBinding.toABI(instance)
        defer { WindowsRuntime.IInspectableBinding.release(&instance_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetValue(this, instance_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func setValue(_ instance: WindowsRuntime.IInspectable?, _ value: WindowsRuntime.IInspectable?) throws {
        var instance_abi = try WindowsRuntime.IInspectableBinding.toABI(instance)
        defer { WindowsRuntime.IInspectableBinding.release(&instance_abi) }
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetValue(this, instance_abi, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Markup.IXamlMetadataProvider

public func uuidof(_: SWRT_MicrosoftUIXamlMarkup_IXamlMetadataProvider.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA96251F0, 0x2214, 0x5D53, 0x8746, 0xCE99A2593CD7)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMarkup_IXamlMetadataProvider {
    public func getXamlType(_ type: WindowsUIXamlInterop_TypeName) throws -> MicrosoftUIXamlMarkup_IXamlType? {
        var type_abi = try WindowsUIXamlInterop_TypeName.toABI(type)
        defer { WindowsUIXamlInterop_TypeName.release(&type_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlType>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetXamlType(this, type_abi, &_result))
        return MicrosoftUIXamlMarkup_IXamlTypeBinding.fromABI(consuming: &_result)
    }

    public func getXamlTypeByFullName(_ fullName: Swift.String) throws -> MicrosoftUIXamlMarkup_IXamlType? {
        var fullName_abi = try WindowsRuntime.StringBinding.toABI(fullName)
        defer { WindowsRuntime.StringBinding.release(&fullName_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlType>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetXamlTypeByFullName(this, fullName_abi, &_result))
        return MicrosoftUIXamlMarkup_IXamlTypeBinding.fromABI(consuming: &_result)
    }

    public func getXmlnsDefinitions() throws -> [MicrosoftUIXamlMarkup_XmlnsDefinition] {
        var _result: COM.COMArray<SWRT_MicrosoftUIXamlMarkup_XmlnsDefinition> = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetXmlnsDefinitions(this, &_result.count, &_result.pointer))
        return WindowsRuntime.ArrayBinding<MicrosoftUIXamlMarkup_XmlnsDefinition>.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Markup.IXamlType

public func uuidof(_: SWRT_MicrosoftUIXamlMarkup_IXamlType.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD24219DF, 0x7EC9, 0x57F1, 0xA27B, 0x6AF251D9C5BC)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMarkup_IXamlType {
    public func get_BaseType() throws -> MicrosoftUIXamlMarkup_IXamlType? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlType>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BaseType(this, &_result))
        return MicrosoftUIXamlMarkup_IXamlTypeBinding.fromABI(consuming: &_result)
    }

    public func get_ContentProperty() throws -> MicrosoftUIXamlMarkup_IXamlMember? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlMember>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ContentProperty(this, &_result))
        return MicrosoftUIXamlMarkup_IXamlMemberBinding.fromABI(consuming: &_result)
    }

    public func get_FullName() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_FullName(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func get_IsArray() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsArray(this, &_result))
        return _result
    }

    public func get_IsCollection() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsCollection(this, &_result))
        return _result
    }

    public func get_IsConstructible() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsConstructible(this, &_result))
        return _result
    }

    public func get_IsDictionary() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsDictionary(this, &_result))
        return _result
    }

    public func get_IsMarkupExtension() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsMarkupExtension(this, &_result))
        return _result
    }

    public func get_IsBindable() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsBindable(this, &_result))
        return _result
    }

    public func get_ItemType() throws -> MicrosoftUIXamlMarkup_IXamlType? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlType>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ItemType(this, &_result))
        return MicrosoftUIXamlMarkup_IXamlTypeBinding.fromABI(consuming: &_result)
    }

    public func get_KeyType() throws -> MicrosoftUIXamlMarkup_IXamlType? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlType>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_KeyType(this, &_result))
        return MicrosoftUIXamlMarkup_IXamlTypeBinding.fromABI(consuming: &_result)
    }

    public func get_BoxedType() throws -> MicrosoftUIXamlMarkup_IXamlType? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlType>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_BoxedType(this, &_result))
        return MicrosoftUIXamlMarkup_IXamlTypeBinding.fromABI(consuming: &_result)
    }

    public func get_UnderlyingType() throws -> WindowsUIXamlInterop_TypeName {
        var _result: SWRT_WindowsUIXamlInterop_TypeName = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UnderlyingType(this, &_result))
        return WindowsUIXamlInterop_TypeName.fromABI(consuming: &_result)
    }

    public func activateInstance() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ActivateInstance(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func createFromString(_ value: Swift.String) throws -> WindowsRuntime.IInspectable? {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateFromString(this, value_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func getMember(_ name: Swift.String) throws -> MicrosoftUIXamlMarkup_IXamlMember? {
        var name_abi = try WindowsRuntime.StringBinding.toABI(name)
        defer { WindowsRuntime.StringBinding.release(&name_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMarkup_IXamlMember>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMember(this, name_abi, &_result))
        return MicrosoftUIXamlMarkup_IXamlMemberBinding.fromABI(consuming: &_result)
    }

    public func addToVector(_ instance: WindowsRuntime.IInspectable?, _ value: WindowsRuntime.IInspectable?) throws {
        var instance_abi = try WindowsRuntime.IInspectableBinding.toABI(instance)
        defer { WindowsRuntime.IInspectableBinding.release(&instance_abi) }
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.AddToVector(this, instance_abi, value_abi))
    }

    public func addToMap(_ instance: WindowsRuntime.IInspectable?, _ key: WindowsRuntime.IInspectable?, _ value: WindowsRuntime.IInspectable?) throws {
        var instance_abi = try WindowsRuntime.IInspectableBinding.toABI(instance)
        defer { WindowsRuntime.IInspectableBinding.release(&instance_abi) }
        var key_abi = try WindowsRuntime.IInspectableBinding.toABI(key)
        defer { WindowsRuntime.IInspectableBinding.release(&key_abi) }
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.AddToMap(this, instance_abi, key_abi, value_abi))
    }

    public func runInitializer() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RunInitializer(this))
    }
}

// MARK: Microsoft.UI.Xaml.Media.IBrush

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IBrush.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2DE3CB83, 0x1329, 0x5679, 0x88F8, 0xC822BC5442CB)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IBrush {
    public func get_Opacity() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Opacity(this, &_result))
        return _result
    }

    public func put_Opacity(_ value: Swift.Double) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Opacity(this, value))
    }

    public func get_Transform() throws -> MicrosoftUIXamlMedia_Transform? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ITransform>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Transform(this, &_result))
        return MicrosoftUIXamlMedia_TransformBinding.fromABI(consuming: &_result)
    }

    public func put_Transform(_ value: MicrosoftUIXamlMedia_Transform?) throws {
        var value_abi = try MicrosoftUIXamlMedia_TransformBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_TransformBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Transform(this, value_abi))
    }

    public func get_RelativeTransform() throws -> MicrosoftUIXamlMedia_Transform? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ITransform>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RelativeTransform(this, &_result))
        return MicrosoftUIXamlMedia_TransformBinding.fromABI(consuming: &_result)
    }

    public func put_RelativeTransform(_ value: MicrosoftUIXamlMedia_Transform?) throws {
        var value_abi = try MicrosoftUIXamlMedia_TransformBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_TransformBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_RelativeTransform(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.IBrushFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IBrushFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB5258717, 0x6C49, 0x5BA5, 0x87FD, 0x35DF382647A5)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IBrushFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMedia_IBrush> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IBrushOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IBrushOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB6B08394, 0xBACF, 0x53DB, 0x9AC7, 0xBE1C693E3513)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IBrushOverrides {
    public func populatePropertyInfoOverride(_ propertyName: Swift.String, _ animationPropertyInfo: MicrosoftUIComposition_AnimationPropertyInfo?) throws {
        var propertyName_abi = try WindowsRuntime.StringBinding.toABI(propertyName)
        defer { WindowsRuntime.StringBinding.release(&propertyName_abi) }
        var animationPropertyInfo_abi = try MicrosoftUIComposition_AnimationPropertyInfoBinding.toABI(animationPropertyInfo)
        defer { MicrosoftUIComposition_AnimationPropertyInfoBinding.release(&animationPropertyInfo_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.PopulatePropertyInfoOverride(this, propertyName_abi, animationPropertyInfo_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.IBrushStatics

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IBrushStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5B854F50, 0xF818, 0x5F01, 0x91B0, 0x28132D3F5957)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IBrushStatics {
    public func get_OpacityProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_OpacityProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_TransformProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TransformProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_RelativeTransformProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RelativeTransformProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.ICacheMode

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ICacheMode.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2FF1A1CB, 0x0F48, 0x53FD, 0xB1DE, 0xE2223DFB2FF6)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ICacheMode {
}

// MARK: Microsoft.UI.Xaml.Media.ICacheModeFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ICacheModeFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE257811E, 0xDCC5, 0x51D8, 0x829A, 0x3E9400198A41)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ICacheModeFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMedia_ICacheMode> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ICacheMode>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IFontFamily

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IFontFamily.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x18FA5BC1, 0x7294, 0x527C, 0xBB02, 0xB213E0B3A2A3)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IFontFamily {
    public func get_Source() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Source(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IFontFamilyFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IFontFamilyFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x61B88A77, 0xD0F9, 0x5E9E, 0x8C28, 0xEDA01FEDE22E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IFontFamilyFactory {
    public func createInstanceWithName(_ familyName: Swift.String, _ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMedia_IFontFamily> {
        var familyName_abi = try WindowsRuntime.StringBinding.toABI(familyName)
        defer { WindowsRuntime.StringBinding.release(&familyName_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IFontFamily>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstanceWithName(this, familyName_abi, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IFontFamilyStatics

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IFontFamilyStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB3EADCEB, 0xC471, 0x58FE, 0x93D0, 0xD71B04A7FD54)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IFontFamilyStatics {
    public func get_XamlAutoFontFamily() throws -> MicrosoftUIXamlMedia_FontFamily? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IFontFamily>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_XamlAutoFontFamily(this, &_result))
        return MicrosoftUIXamlMedia_FontFamilyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IGeneralTransform

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IGeneralTransform.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x04EEDEEB, 0x31E5, 0x54C0, 0xAE3F, 0x8BD06645D339)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IGeneralTransform {
    public func get_Inverse() throws -> MicrosoftUIXamlMedia_GeneralTransform? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IGeneralTransform>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Inverse(this, &_result))
        return MicrosoftUIXamlMedia_GeneralTransformBinding.fromABI(consuming: &_result)
    }

    public func transformPoint(_ point: WindowsFoundation_Point) throws -> WindowsFoundation_Point {
        let point_abi = WindowsFoundation_Point.toABI(point)
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TransformPoint(this, point_abi, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }

    public func tryTransform(_ inPoint: WindowsFoundation_Point, _ outPoint: inout WindowsFoundation_Point) throws -> Swift.Bool {
        let inPoint_abi = WindowsFoundation_Point.toABI(inPoint)
        var outPoint_abi: SWRT_WindowsFoundation_Point = .init()
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryTransform(this, inPoint_abi, &outPoint_abi, &_result))
        outPoint = WindowsFoundation_Point.fromABI(outPoint_abi)
        return _result
    }

    public func transformBounds(_ rect: WindowsFoundation_Rect) throws -> WindowsFoundation_Rect {
        let rect_abi = WindowsFoundation_Rect.toABI(rect)
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TransformBounds(this, rect_abi, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IGeneralTransformFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IGeneralTransformFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2F1025A3, 0x5391, 0x5D1B, 0x8382, 0x3CAAA1D26A96)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IGeneralTransformFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMedia_IGeneralTransform> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IGeneralTransform>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IGeneralTransformOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IGeneralTransformOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCE8970F1, 0x83F8, 0x543F, 0x9CF5, 0x439C461601F1)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IGeneralTransformOverrides {
    public func get_InverseCore() throws -> MicrosoftUIXamlMedia_GeneralTransform? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IGeneralTransform>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_InverseCore(this, &_result))
        return MicrosoftUIXamlMedia_GeneralTransformBinding.fromABI(consuming: &_result)
    }

    public func tryTransformCore(_ inPoint: WindowsFoundation_Point, _ outPoint: inout WindowsFoundation_Point) throws -> Swift.Bool {
        let inPoint_abi = WindowsFoundation_Point.toABI(inPoint)
        var outPoint_abi: SWRT_WindowsFoundation_Point = .init()
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryTransformCore(this, inPoint_abi, &outPoint_abi, &_result))
        outPoint = WindowsFoundation_Point.fromABI(outPoint_abi)
        return _result
    }

    public func transformBoundsCore(_ rect: WindowsFoundation_Rect) throws -> WindowsFoundation_Rect {
        let rect_abi = WindowsFoundation_Rect.toABI(rect)
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TransformBoundsCore(this, rect_abi, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IGeometry

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IGeometry.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xDC102DCC, 0x3BE2, 0x5414, 0x8599, 0x94B6E76EF39B)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IGeometry {
    public func get_Transform() throws -> MicrosoftUIXamlMedia_Transform? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ITransform>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Transform(this, &_result))
        return MicrosoftUIXamlMedia_TransformBinding.fromABI(consuming: &_result)
    }

    public func put_Transform(_ value: MicrosoftUIXamlMedia_Transform?) throws {
        var value_abi = try MicrosoftUIXamlMedia_TransformBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_TransformBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Transform(this, value_abi))
    }

    public func get_Bounds() throws -> WindowsFoundation_Rect {
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Bounds(this, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IGeometryFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IGeometryFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4EDCD536, 0x7949, 0x548A, 0xA9B1, 0x6FF03B951CF3)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IGeometryFactory {
}

// MARK: Microsoft.UI.Xaml.Media.IGeometryStatics

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IGeometryStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x349F78D0, 0x4978, 0x5742, 0xB7D2, 0xB34EA2C95600)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IGeometryStatics {
    public func get_Empty() throws -> MicrosoftUIXamlMedia_Geometry? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IGeometry>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Empty(this, &_result))
        return MicrosoftUIXamlMedia_GeometryBinding.fromABI(consuming: &_result)
    }

    public func get_StandardFlatteningTolerance() throws -> Swift.Double {
        var _result: Swift.Double = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_StandardFlatteningTolerance(this, &_result))
        return _result
    }

    public func get_TransformProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_TransformProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IImageSource

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IImageSource.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6C2038F6, 0xD6D5, 0x55E9, 0x9B9E, 0x082F12DBFF60)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IImageSource {
}

// MARK: Microsoft.UI.Xaml.Media.IImageSourceFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IImageSourceFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0B1E64A3, 0xE353, 0x5901, 0xB84B, 0xAE9842AEA5CD)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IImageSourceFactory {
}

// MARK: Microsoft.UI.Xaml.Media.IProjection

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IProjection.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC95364B3, 0x6058, 0x5EE5, 0x9E28, 0xD38B7679FCD4)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IProjection {
}

// MARK: Microsoft.UI.Xaml.Media.IProjectionFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IProjectionFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x870EA34F, 0xDB61, 0x5B75, 0x89AD, 0xE0480C802937)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IProjectionFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMedia_IProjection> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IProjection>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IRectangleGeometry

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IRectangleGeometry.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB6143890, 0xA5F5, 0x54E0, 0xAB42, 0xD88BAB451F04)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IRectangleGeometry {
    public func get_Rect() throws -> WindowsFoundation_Rect {
        var _result: SWRT_WindowsFoundation_Rect = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Rect(this, &_result))
        return WindowsFoundation_Rect.fromABI(_result)
    }

    public func put_Rect(_ value: WindowsFoundation_Rect) throws {
        let value_abi = WindowsFoundation_Rect.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Rect(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.IRectangleGeometryStatics

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IRectangleGeometryStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1AE7AC26, 0x8A8B, 0x55A5, 0xB035, 0x586E2B642919)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IRectangleGeometryStatics {
    public func get_RectProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_RectProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IShadow

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IShadow.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCC12FD6A, 0x50AA, 0x5EB3, 0x9A0E, 0xB938B454C439)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IShadow {
}

// MARK: Microsoft.UI.Xaml.Media.IShadowFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IShadowFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC9115FBB, 0xFCC3, 0x52BF, 0xB8EE, 0xC348102A46E0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IShadowFactory {
}

// MARK: Microsoft.UI.Xaml.Media.ISolidColorBrush

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ISolidColorBrush.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB3865C31, 0x37C8, 0x55C1, 0x8A72, 0xD41C67642E2A)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ISolidColorBrush {
    public func get_Color() throws -> WindowsUI_Color {
        var _result: SWRT_WindowsUI_Color = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Color(this, &_result))
        return WindowsUI_Color.fromABI(_result)
    }

    public func put_Color(_ value: WindowsUI_Color) throws {
        let value_abi = WindowsUI_Color.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Color(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.ISolidColorBrushFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ISolidColorBrushFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7B559384, 0x4DAA, 0x54F4, 0x91EF, 0x33A23FD816CA)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ISolidColorBrushFactory {
    public func createInstanceWithColor(_ color: WindowsUI_Color) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMedia_ISolidColorBrush> {
        let color_abi = WindowsUI_Color.toABI(color)
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ISolidColorBrush>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstanceWithColor(this, color_abi, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.ISolidColorBrushStatics

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ISolidColorBrushStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6BC16DA0, 0xC4E6, 0x59B8, 0x995B, 0xB31E48424C07)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ISolidColorBrushStatics {
    public func get_ColorProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_ColorProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.ISystemBackdrop

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ISystemBackdrop.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5AEED5C4, 0x37AC, 0x5852, 0xB73F, 0x1B76EBC3205F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ISystemBackdrop {
    public func getDefaultSystemBackdropConfiguration(_ target: MicrosoftUIComposition_ICompositionSupportsSystemBackdrop?, _ xamlRoot: MicrosoftUIXaml_XamlRoot?) throws -> MicrosoftUICompositionSystemBackdrops_SystemBackdropConfiguration? {
        var target_abi = try MicrosoftUIComposition_ICompositionSupportsSystemBackdropBinding.toABI(target)
        defer { MicrosoftUIComposition_ICompositionSupportsSystemBackdropBinding.release(&target_abi) }
        var xamlRoot_abi = try MicrosoftUIXaml_XamlRootBinding.toABI(xamlRoot)
        defer { MicrosoftUIXaml_XamlRootBinding.release(&xamlRoot_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUICompositionSystemBackdrops_ISystemBackdropConfiguration>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetDefaultSystemBackdropConfiguration(this, target_abi, xamlRoot_abi, &_result))
        return MicrosoftUICompositionSystemBackdrops_SystemBackdropConfigurationBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.ISystemBackdropFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ISystemBackdropFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1E07656B, 0xFAD2, 0x5B29, 0x913F, 0xB6748BC45942)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ISystemBackdropFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMedia_ISystemBackdrop> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_ISystemBackdrop>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.ISystemBackdropOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ISystemBackdropOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEB1F5399, 0xCAD7, 0x5611, 0xB637, 0x09D76A07E708)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ISystemBackdropOverrides {
    public func onTargetConnected(_ connectedTarget: MicrosoftUIComposition_ICompositionSupportsSystemBackdrop?, _ xamlRoot: MicrosoftUIXaml_XamlRoot?) throws {
        var connectedTarget_abi = try MicrosoftUIComposition_ICompositionSupportsSystemBackdropBinding.toABI(connectedTarget)
        defer { MicrosoftUIComposition_ICompositionSupportsSystemBackdropBinding.release(&connectedTarget_abi) }
        var xamlRoot_abi = try MicrosoftUIXaml_XamlRootBinding.toABI(xamlRoot)
        defer { MicrosoftUIXaml_XamlRootBinding.release(&xamlRoot_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnTargetConnected(this, connectedTarget_abi, xamlRoot_abi))
    }

    public func onTargetDisconnected(_ disconnectedTarget: MicrosoftUIComposition_ICompositionSupportsSystemBackdrop?) throws {
        var disconnectedTarget_abi = try MicrosoftUIComposition_ICompositionSupportsSystemBackdropBinding.toABI(disconnectedTarget)
        defer { MicrosoftUIComposition_ICompositionSupportsSystemBackdropBinding.release(&disconnectedTarget_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnTargetDisconnected(this, disconnectedTarget_abi))
    }

    public func onDefaultSystemBackdropConfigurationChanged(_ target: MicrosoftUIComposition_ICompositionSupportsSystemBackdrop?, _ xamlRoot: MicrosoftUIXaml_XamlRoot?) throws {
        var target_abi = try MicrosoftUIComposition_ICompositionSupportsSystemBackdropBinding.toABI(target)
        defer { MicrosoftUIComposition_ICompositionSupportsSystemBackdropBinding.release(&target_abi) }
        var xamlRoot_abi = try MicrosoftUIXaml_XamlRootBinding.toABI(xamlRoot)
        defer { MicrosoftUIXaml_XamlRootBinding.release(&xamlRoot_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnDefaultSystemBackdropConfigurationChanged(this, target_abi, xamlRoot_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.ITransform

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ITransform.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x92A8DEE5, 0x1413, 0x56B9, 0x8CCA, 0x3C46918FDE1B)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ITransform {
}

// MARK: Microsoft.UI.Xaml.Media.ITransformFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_ITransformFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7DA293F9, 0xB82E, 0x5D15, 0xB623, 0xC08210CBB640)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_ITransformFactory {
}

// MARK: Microsoft.UI.Xaml.Media.IXamlLight

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IXamlLight.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xDCD20139, 0x8CD5, 0x5DA5, 0xA25C, 0x2B7B813D8D58)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IXamlLight {
}

// MARK: Microsoft.UI.Xaml.Media.IXamlLightFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IXamlLightFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x76DA6306, 0x96FC, 0x553E, 0xBB39, 0x9A4801D06F48)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IXamlLightFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMedia_IXamlLight> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IXamlLight>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.IXamlLightOverrides

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IXamlLightOverrides.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x696D4F30, 0x92EE, 0x540D, 0xAD70, 0x33D4489514D0)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IXamlLightOverrides {
    public func getId() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetId(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func onConnected(_ newElement: MicrosoftUIXaml_UIElement?) throws {
        var newElement_abi = try MicrosoftUIXaml_UIElementBinding.toABI(newElement)
        defer { MicrosoftUIXaml_UIElementBinding.release(&newElement_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnConnected(this, newElement_abi))
    }

    public func onDisconnected(_ oldElement: MicrosoftUIXaml_UIElement?) throws {
        var oldElement_abi = try MicrosoftUIXaml_UIElementBinding.toABI(oldElement)
        defer { MicrosoftUIXaml_UIElementBinding.release(&oldElement_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.OnDisconnected(this, oldElement_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.IXamlLightProtected

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IXamlLightProtected.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC307BF12, 0xFDAF, 0x54CA, 0xA631, 0xAD0E86263C6E)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IXamlLightProtected {
    public func get_CompositionLight() throws -> MicrosoftUIComposition_CompositionLight? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIComposition_ICompositionLight>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CompositionLight(this, &_result))
        return MicrosoftUIComposition_CompositionLightBinding.fromABI(consuming: &_result)
    }

    public func put_CompositionLight(_ value: MicrosoftUIComposition_CompositionLight?) throws {
        var value_abi = try MicrosoftUIComposition_CompositionLightBinding.toABI(value)
        defer { MicrosoftUIComposition_CompositionLightBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CompositionLight(this, value_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.IXamlLightStatics

public func uuidof(_: SWRT_MicrosoftUIXamlMedia_IXamlLightStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA2D8EA26, 0x26FF, 0x5374, 0xB1DD, 0xF232D5604F6A)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMedia_IXamlLightStatics {
    public func addTargetElement(_ lightId: Swift.String, _ element: MicrosoftUIXaml_UIElement?) throws {
        var lightId_abi = try WindowsRuntime.StringBinding.toABI(lightId)
        defer { WindowsRuntime.StringBinding.release(&lightId_abi) }
        var element_abi = try MicrosoftUIXaml_UIElementBinding.toABI(element)
        defer { MicrosoftUIXaml_UIElementBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.AddTargetElement(this, lightId_abi, element_abi))
    }

    public func removeTargetElement(_ lightId: Swift.String, _ element: MicrosoftUIXaml_UIElement?) throws {
        var lightId_abi = try WindowsRuntime.StringBinding.toABI(lightId)
        defer { WindowsRuntime.StringBinding.release(&lightId_abi) }
        var element_abi = try MicrosoftUIXaml_UIElementBinding.toABI(element)
        defer { MicrosoftUIXaml_UIElementBinding.release(&element_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveTargetElement(this, lightId_abi, element_abi))
    }

    public func addTargetBrush(_ lightId: Swift.String, _ brush: MicrosoftUIXamlMedia_Brush?) throws {
        var lightId_abi = try WindowsRuntime.StringBinding.toABI(lightId)
        defer { WindowsRuntime.StringBinding.release(&lightId_abi) }
        var brush_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(brush)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&brush_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.AddTargetBrush(this, lightId_abi, brush_abi))
    }

    public func removeTargetBrush(_ lightId: Swift.String, _ brush: MicrosoftUIXamlMedia_Brush?) throws {
        var lightId_abi = try WindowsRuntime.StringBinding.toABI(lightId)
        defer { WindowsRuntime.StringBinding.release(&lightId_abi) }
        var brush_abi = try MicrosoftUIXamlMedia_BrushBinding.toABI(brush)
        defer { MicrosoftUIXamlMedia_BrushBinding.release(&brush_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveTargetBrush(this, lightId_abi, brush_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.Animation.IConnectedAnimation

public func uuidof(_: SWRT_MicrosoftUIXamlMediaAnimation_IConnectedAnimation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA9C1C6AD, 0x7670, 0x589C, 0xA608, 0x9B5C01CEC71F)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaAnimation_IConnectedAnimation {
    public func get_IsScaleAnimationEnabled() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsScaleAnimationEnabled(this, &_result))
        return _result
    }

    public func put_IsScaleAnimationEnabled(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_IsScaleAnimationEnabled(this, value))
    }

    public func get_Configuration() throws -> MicrosoftUIXamlMediaAnimation_ConnectedAnimationConfiguration? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMediaAnimation_IConnectedAnimationConfiguration>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Configuration(this, &_result))
        return MicrosoftUIXamlMediaAnimation_ConnectedAnimationConfigurationBinding.fromABI(consuming: &_result)
    }

    public func put_Configuration(_ value: MicrosoftUIXamlMediaAnimation_ConnectedAnimationConfiguration?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_ConnectedAnimationConfigurationBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_ConnectedAnimationConfigurationBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Configuration(this, value_abi))
    }

    public func add_Completed(_ handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlMediaAnimation_ConnectedAnimation?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try WindowsFoundation_TypedEventHandlerBinding.ConnectedAnimation_Object.toABI(handler)
        defer { WindowsFoundation_TypedEventHandlerBinding.ConnectedAnimation_Object.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_Completed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_Completed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_Completed(this, token_abi))
    }

    public func tryStart(_ destination: MicrosoftUIXaml_UIElement?) throws -> Swift.Bool {
        var destination_abi = try MicrosoftUIXaml_UIElementBinding.toABI(destination)
        defer { MicrosoftUIXaml_UIElementBinding.release(&destination_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryStart(this, destination_abi, &_result))
        return _result
    }

    public func tryStartWithCoordinatedElements(_ destination: MicrosoftUIXaml_UIElement?, _ coordinatedElements: WindowsFoundationCollections_IIterable<MicrosoftUIXaml_UIElement?>?) throws -> Swift.Bool {
        var destination_abi = try MicrosoftUIXaml_UIElementBinding.toABI(destination)
        defer { MicrosoftUIXaml_UIElementBinding.release(&destination_abi) }
        var coordinatedElements_abi = try WindowsFoundationCollections_IIterableBinding.UIElement.toABI(coordinatedElements)
        defer { WindowsFoundationCollections_IIterableBinding.UIElement.release(&coordinatedElements_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.TryStartWithCoordinatedElements(this, destination_abi, coordinatedElements_abi, &_result))
        return _result
    }

    public func cancel() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Cancel(this))
    }

    public func setAnimationComponent(_ component: MicrosoftUIXamlMediaAnimation_ConnectedAnimationComponent, _ animation: MicrosoftUIComposition_ICompositionAnimationBase?) throws {
        let component_abi = MicrosoftUIXamlMediaAnimation_ConnectedAnimationComponent.toABI(component)
        var animation_abi = try MicrosoftUIComposition_ICompositionAnimationBaseBinding.toABI(animation)
        defer { MicrosoftUIComposition_ICompositionAnimationBaseBinding.release(&animation_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAnimationComponent(this, component_abi, animation_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfiguration

public func uuidof(_: SWRT_MicrosoftUIXamlMediaAnimation_IConnectedAnimationConfiguration.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE848379D, 0x7E25, 0x5976, 0xBFB3, 0x086BAC4E8849)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaAnimation_IConnectedAnimationConfiguration {
}

// MARK: Microsoft.UI.Xaml.Media.Animation.IConnectedAnimationConfigurationFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMediaAnimation_IConnectedAnimationConfigurationFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x71008845, 0x4A12, 0x5A1A, 0x969C, 0x4152B5174922)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaAnimation_IConnectedAnimationConfigurationFactory {
}

// MARK: Microsoft.UI.Xaml.Media.Animation.ITransition

public func uuidof(_: SWRT_MicrosoftUIXamlMediaAnimation_ITransition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE5B71956, 0x8E44, 0x5A38, 0xB41E, 0x274D706102BF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaAnimation_ITransition {
}

// MARK: Microsoft.UI.Xaml.Media.Animation.ITransitionFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMediaAnimation_ITransitionFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB7023E3B, 0xBCD3, 0x50EC, 0xAACF, 0x8CFCECE25F17)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaAnimation_ITransitionFactory {
}

// MARK: Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventHandler

public func uuidof(_: SWRT_MicrosoftUIXamlMediaImaging_DownloadProgressEventHandler.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9A8E4AF5, 0xB124, 0x5205, 0x8AE9, 0x3496E063C569)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaImaging_DownloadProgressEventHandler {
    public func invoke(_ sender: WindowsRuntime.IInspectable?, _ e: MicrosoftUIXamlMediaImaging_DownloadProgressEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var e_abi = try MicrosoftUIXamlMediaImaging_DownloadProgressEventArgsBinding.toABI(e)
        defer { MicrosoftUIXamlMediaImaging_DownloadProgressEventArgsBinding.release(&e_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, e_abi))
    }
}

// MARK: Microsoft.UI.Xaml.Media.Imaging.IBitmapImage

public func uuidof(_: SWRT_MicrosoftUIXamlMediaImaging_IBitmapImage.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5CC29916, 0xA411, 0x5BC2, 0xA3C5, 0xA00D99A59DA8)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaImaging_IBitmapImage {
    public func get_CreateOptions() throws -> MicrosoftUIXamlMediaImaging_BitmapCreateOptions {
        var _result: SWRT_MicrosoftUIXamlMediaImaging_BitmapCreateOptions = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CreateOptions(this, &_result))
        return MicrosoftUIXamlMediaImaging_BitmapCreateOptions.fromABI(_result)
    }

    public func put_CreateOptions(_ value: MicrosoftUIXamlMediaImaging_BitmapCreateOptions) throws {
        let value_abi = MicrosoftUIXamlMediaImaging_BitmapCreateOptions.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_CreateOptions(this, value_abi))
    }

    public func get_UriSource() throws -> WindowsFoundation_Uri? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IUriRuntimeClass>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UriSource(this, &_result))
        return WindowsFoundation_UriBinding.fromABI(consuming: &_result)
    }

    public func put_UriSource(_ value: WindowsFoundation_Uri?) throws {
        var value_abi = try WindowsFoundation_UriBinding.toABI(value)
        defer { WindowsFoundation_UriBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_UriSource(this, value_abi))
    }

    public func get_DecodePixelWidth() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DecodePixelWidth(this, &_result))
        return _result
    }

    public func put_DecodePixelWidth(_ value: Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DecodePixelWidth(this, value))
    }

    public func get_DecodePixelHeight() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DecodePixelHeight(this, &_result))
        return _result
    }

    public func put_DecodePixelHeight(_ value: Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DecodePixelHeight(this, value))
    }

    public func get_DecodePixelType() throws -> MicrosoftUIXamlMediaImaging_DecodePixelType {
        var _result: SWRT_MicrosoftUIXamlMediaImaging_DecodePixelType = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DecodePixelType(this, &_result))
        return MicrosoftUIXamlMediaImaging_DecodePixelType.fromABI(_result)
    }

    public func put_DecodePixelType(_ value: MicrosoftUIXamlMediaImaging_DecodePixelType) throws {
        let value_abi = MicrosoftUIXamlMediaImaging_DecodePixelType.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_DecodePixelType(this, value_abi))
    }

    public func get_IsAnimatedBitmap() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsAnimatedBitmap(this, &_result))
        return _result
    }

    public func get_IsPlaying() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsPlaying(this, &_result))
        return _result
    }

    public func get_AutoPlay() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AutoPlay(this, &_result))
        return _result
    }

    public func put_AutoPlay(_ value: Swift.Bool) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_AutoPlay(this, value))
    }

    public func add_DownloadProgress(_ handler: MicrosoftUIXamlMediaImaging_DownloadProgressEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXamlMediaImaging_DownloadProgressEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXamlMediaImaging_DownloadProgressEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_DownloadProgress(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_DownloadProgress(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_DownloadProgress(this, token_abi))
    }

    public func add_ImageOpened(_ handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_RoutedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_RoutedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ImageOpened(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ImageOpened(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ImageOpened(this, token_abi))
    }

    public func add_ImageFailed(_ handler: MicrosoftUIXaml_ExceptionRoutedEventHandler?) throws -> WindowsRuntime.EventRegistrationToken {
        var handler_abi = try MicrosoftUIXaml_ExceptionRoutedEventHandlerBinding.toABI(handler)
        defer { MicrosoftUIXaml_ExceptionRoutedEventHandlerBinding.release(&handler_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_ImageFailed(this, handler_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    public func remove_ImageFailed(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_ImageFailed(this, token_abi))
    }

    public func play() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Play(this))
    }

    public func stop() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Stop(this))
    }
}

// MARK: Microsoft.UI.Xaml.Media.Imaging.IBitmapImageFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF037E0E9, 0xF229, 0x522E, 0x95C9, 0xDA2211A14B05)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageFactory {
    public func createInstanceWithUriSource(_ uriSource: WindowsFoundation_Uri?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMediaImaging_IBitmapImage> {
        var uriSource_abi = try WindowsFoundation_UriBinding.toABI(uriSource)
        defer { WindowsFoundation_UriBinding.release(&uriSource_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMediaImaging_IBitmapImage>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstanceWithUriSource(this, uriSource_abi, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStatics

public func uuidof(_: SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4BCF71A9, 0x1897, 0x51DC, 0x8E3F, 0x2C5C796D1CD9)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaImaging_IBitmapImageStatics {
    public func get_CreateOptionsProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_CreateOptionsProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_UriSourceProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_UriSourceProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_DecodePixelWidthProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DecodePixelWidthProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_DecodePixelHeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DecodePixelHeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_DecodePixelTypeProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_DecodePixelTypeProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsAnimatedBitmapProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsAnimatedBitmapProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_IsPlayingProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_IsPlayingProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_AutoPlayProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_AutoPlayProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.Imaging.IBitmapSource

public func uuidof(_: SWRT_MicrosoftUIXamlMediaImaging_IBitmapSource.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8424269D, 0x9B82, 0x534F, 0x8FEA, 0xAF5B5EF96BF2)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaImaging_IBitmapSource {
    public func get_PixelWidth() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PixelWidth(this, &_result))
        return _result
    }

    public func get_PixelHeight() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PixelHeight(this, &_result))
        return _result
    }

    public func setSource(_ streamSource: WindowsStorageStreams_IRandomAccessStream?) throws {
        var streamSource_abi = try WindowsStorageStreams_IRandomAccessStreamBinding.toABI(streamSource)
        defer { WindowsStorageStreams_IRandomAccessStreamBinding.release(&streamSource_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetSource(this, streamSource_abi))
    }

    public func setSourceAsync(_ streamSource: WindowsStorageStreams_IRandomAccessStream?) throws -> WindowsFoundation_IAsyncAction? {
        var streamSource_abi = try WindowsStorageStreams_IRandomAccessStreamBinding.toABI(streamSource)
        defer { WindowsStorageStreams_IRandomAccessStreamBinding.release(&streamSource_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IAsyncAction>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetSourceAsync(this, streamSource_abi, &_result))
        return WindowsFoundation_IAsyncActionBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMediaImaging_IBitmapSourceFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0392F025, 0x1868, 0x5876, 0xAD67, 0x12E94A8DA5BF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaImaging_IBitmapSourceFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMediaImaging_IBitmapSource> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMediaImaging_IBitmapSource>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceStatics

public func uuidof(_: SWRT_MicrosoftUIXamlMediaImaging_IBitmapSourceStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEFA3745E, 0x4400, 0x5F0B, 0xBDC7, 0x3F2911A3D719)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaImaging_IBitmapSourceStatics {
    public func get_PixelWidthProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PixelWidthProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }

    public func get_PixelHeightProperty() throws -> MicrosoftUIXaml_DependencyProperty? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyProperty>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_PixelHeightProperty(this, &_result))
        return MicrosoftUIXaml_DependencyPropertyBinding.fromABI(consuming: &_result)
    }
}

// MARK: Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs

public func uuidof(_: SWRT_MicrosoftUIXamlMediaImaging_IDownloadProgressEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9A0EA80B, 0x1A17, 0x50D5, 0x83F3, 0x377738212619)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaImaging_IDownloadProgressEventArgs {
    public func get_Progress() throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Progress(this, &_result))
        return _result
    }

    public func put_Progress(_ value: Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Progress(this, value))
    }
}

// MARK: Microsoft.UI.Xaml.Media.Media3D.ITransform3D

public func uuidof(_: SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3D.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xAFEA4941, 0x2E49, 0x533C, 0x9F8F, 0x2C126EF9893A)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3D {
}

// MARK: Microsoft.UI.Xaml.Media.Media3D.ITransform3DFactory

public func uuidof(_: SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3DFactory.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9BCCE0A1, 0x10AC, 0x5319, 0xBDF1, 0x548D2E5AE504)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3DFactory {
    public func createInstance(_ baseInterface: WindowsRuntime.IInspectablePointer?, _ innerInterface: inout WindowsRuntime.IInspectablePointer?) throws -> COM.COMReference<SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3D> {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3D>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CreateInstance(this, baseInterface, &innerInterface, &_result))
        guard let _result else { throw COMError.pointer }
        return COM.COMReference(transferringRef: _result)
    }
}

// MARK: Microsoft.UI.Xaml.XamlTypeInfo.IXamlControlsXamlMetaDataProvider

public func uuidof(_: SWRT_MicrosoftUIXamlXamlTypeInfo_IXamlControlsXamlMetaDataProvider.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x17FA3F58, 0x3472, 0x5AA2, 0xA0F8, 0x1AB8A519573D)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlXamlTypeInfo_IXamlControlsXamlMetaDataProvider {
}

// MARK: Microsoft.UI.Xaml.XamlTypeInfo.IXamlControlsXamlMetaDataProviderStatics

public func uuidof(_: SWRT_MicrosoftUIXamlXamlTypeInfo_IXamlControlsXamlMetaDataProviderStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2D7EB3FD, 0xECDB, 0x5084, 0xB7E0, 0x12F9598381EF)
}

extension COM.COMInterop where ABIStruct == SWRT_MicrosoftUIXamlXamlTypeInfo_IXamlControlsXamlMetaDataProviderStatics {
    public func initialize() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Initialize(this))
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Boolean>

internal func uuidof(_: SWRT_WindowsFoundation_AsyncOperationCompletedHandler_Bool.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC1D3D1A2, 0xAE17, 0x5A5F, 0xB5A2, 0xBDCC8844889A)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_AsyncOperationCompletedHandler_Bool {
    internal func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<Swift.Bool>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
        var asyncInfo_abi = try WindowsFoundation_IAsyncOperationBinding.Boolean.toABI(asyncInfo)
        defer { WindowsFoundation_IAsyncOperationBinding.Boolean.release(&asyncInfo_abi) }
        let asyncStatus_abi = WindowsFoundation_AsyncStatus.toABI(asyncStatus)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, asyncInfo_abi, asyncStatus_abi))
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Microsoft.UI.Xaml.Data.LoadMoreItemsResult>

internal func uuidof(_: SWRT_WindowsFoundation_AsyncOperationCompletedHandler_MicrosoftUIXamlData_LoadMoreItemsResult.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8806A4D7, 0x81D6, 0x50F6, 0x9128, 0x52A9534FEBE1)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_AsyncOperationCompletedHandler_MicrosoftUIXamlData_LoadMoreItemsResult {
    internal func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<MicrosoftUIXamlData_LoadMoreItemsResult>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
        var asyncInfo_abi = try WindowsFoundation_IAsyncOperationBinding.LoadMoreItemsResult.toABI(asyncInfo)
        defer { WindowsFoundation_IAsyncOperationBinding.LoadMoreItemsResult.release(&asyncInfo_abi) }
        let asyncStatus_abi = WindowsFoundation_AsyncStatus.toABI(asyncStatus)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, asyncInfo_abi, asyncStatus_abi))
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.ApplicationModel.DataTransfer.DataPackageOperation>

internal func uuidof(_: SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsApplicationModelDataTransfer_DataPackageOperation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xADD21D46, 0x17DF, 0x5A43, 0xA685, 0x3262FCE84643)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsApplicationModelDataTransfer_DataPackageOperation {
    internal func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsApplicationModelDataTransfer_DataPackageOperation>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
        var asyncInfo_abi = try WindowsFoundation_IAsyncOperationBinding.DataPackageOperation.toABI(asyncInfo)
        defer { WindowsFoundation_IAsyncOperationBinding.DataPackageOperation.release(&asyncInfo_abi) }
        let asyncStatus_abi = WindowsFoundation_AsyncStatus.toABI(asyncStatus)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, asyncInfo_abi, asyncStatus_abi))
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Boolean>

internal func uuidof(_: SWRT_WindowsFoundation_IAsyncOperation_Bool.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCDB5EFB3, 0x5788, 0x509D, 0x9BE1, 0x71CCB8A3362A)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_IAsyncOperation_Bool {
    internal func put_Completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<Swift.Bool>?) throws {
        var handler_abi = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.Boolean.toABI(handler)
        defer { WindowsFoundation_AsyncOperationCompletedHandlerBinding.Boolean.release(&handler_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Completed(this, handler_abi))
    }

    internal func get_Completed() throws -> WindowsFoundation_AsyncOperationCompletedHandler<Swift.Bool>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_AsyncOperationCompletedHandler_Bool>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Completed(this, &_result))
        return WindowsFoundation_AsyncOperationCompletedHandlerBinding.Boolean.fromABI(consuming: &_result)
    }

    internal func getResults() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetResults(this, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.DataTransfer.DataPackageOperation>

internal func uuidof(_: SWRT_WindowsFoundation_IAsyncOperation_WindowsApplicationModelDataTransfer_DataPackageOperation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8B98AEA9, 0x64F0, 0x5672, 0xB30E, 0xDFD9C2E4F6FE)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_IAsyncOperation_WindowsApplicationModelDataTransfer_DataPackageOperation {
    internal func put_Completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsApplicationModelDataTransfer_DataPackageOperation>?) throws {
        var handler_abi = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.DataPackageOperation.toABI(handler)
        defer { WindowsFoundation_AsyncOperationCompletedHandlerBinding.DataPackageOperation.release(&handler_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Completed(this, handler_abi))
    }

    internal func get_Completed() throws -> WindowsFoundation_AsyncOperationCompletedHandler<WindowsApplicationModelDataTransfer_DataPackageOperation>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsApplicationModelDataTransfer_DataPackageOperation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Completed(this, &_result))
        return WindowsFoundation_AsyncOperationCompletedHandlerBinding.DataPackageOperation.fromABI(consuming: &_result)
    }

    internal func getResults() throws -> WindowsApplicationModelDataTransfer_DataPackageOperation {
        var _result: SWRT_WindowsApplicationModelDataTransfer_DataPackageOperation = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetResults(this, &_result))
        return WindowsApplicationModelDataTransfer_DataPackageOperation.fromABI(_result)
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Data.LoadMoreItemsResult>

internal func uuidof(_: SWRT_WindowsFoundation_IAsyncOperation_MicrosoftUIXamlData_LoadMoreItemsResult.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x87C6D0A7, 0x9748, 0x5F9C, 0xB359, 0x1E12759CF3CE)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_IAsyncOperation_MicrosoftUIXamlData_LoadMoreItemsResult {
    internal func put_Completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<MicrosoftUIXamlData_LoadMoreItemsResult>?) throws {
        var handler_abi = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.LoadMoreItemsResult.toABI(handler)
        defer { WindowsFoundation_AsyncOperationCompletedHandlerBinding.LoadMoreItemsResult.release(&handler_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_Completed(this, handler_abi))
    }

    internal func get_Completed() throws -> WindowsFoundation_AsyncOperationCompletedHandler<MicrosoftUIXamlData_LoadMoreItemsResult>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_AsyncOperationCompletedHandler_MicrosoftUIXamlData_LoadMoreItemsResult>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Completed(this, &_result))
        return WindowsFoundation_AsyncOperationCompletedHandlerBinding.LoadMoreItemsResult.fromABI(consuming: &_result)
    }

    internal func getResults() throws -> MicrosoftUIXamlData_LoadMoreItemsResult {
        var _result: SWRT_MicrosoftUIXamlData_LoadMoreItemsResult = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetResults(this, &_result))
        return MicrosoftUIXamlData_LoadMoreItemsResult.fromABI(_result)
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.DebugSettings, Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_DebugSettings_MicrosoftUIXaml_XamlResourceReferenceFailedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x083AD9D9, 0xD73A, 0x5255, 0xB51A, 0x6FF3E88BDD4A)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_DebugSettings_MicrosoftUIXaml_XamlResourceReferenceFailedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_DebugSettings?, _ args: MicrosoftUIXaml_XamlResourceReferenceFailedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_DebugSettingsBinding.toABI(sender)
        defer { MicrosoftUIXaml_DebugSettingsBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_XamlResourceReferenceFailedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_XamlResourceReferenceFailedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xAE81621C, 0xC974, 0x53DD, 0x9E7E, 0x602C6BA07426)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlControls_ListViewBase?, _ args: MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlControls_ListViewBaseBinding.toABI(sender)
        defer { MicrosoftUIXamlControls_ListViewBaseBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ContainerContentChangingEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA6F1A151, 0x7A50, 0x5F54, 0x988D, 0x97CAD557DE3B)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ContainerContentChangingEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlControls_ListViewBase?, _ args: MicrosoftUIXamlControls_ContainerContentChangingEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlControls_ListViewBaseBinding.toABI(sender)
        defer { MicrosoftUIXamlControls_ListViewBaseBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlControls_ContainerContentChangingEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlControls_ContainerContentChangingEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.DragStartingEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_DragStartingEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD0B66E28, 0x3F45, 0x5B7A, 0xA768, 0x188963BB76A4)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_DragStartingEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXaml_DragStartingEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_DragStartingEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_DragStartingEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.XamlRoot, Microsoft.UI.Xaml.XamlRootChangedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_XamlRoot_MicrosoftUIXaml_XamlRootChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCE4605E8, 0x4D3E, 0x58A2, 0x8AA0, 0x2FACA17873E8)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_XamlRoot_MicrosoftUIXaml_XamlRootChangedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_XamlRoot?, _ args: MicrosoftUIXaml_XamlRootChangedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_XamlRootBinding.toABI(sender)
        defer { MicrosoftUIXaml_XamlRootBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_XamlRootChangedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_XamlRootChangedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Microsoft.UI.Xaml.DataContextChangedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_MicrosoftUIXaml_DataContextChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4E4EC708, 0xDEF4, 0x5D93, 0x8690, 0xDFC5F9233C53)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_MicrosoftUIXaml_DataContextChangedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_FrameworkElement?, _ args: MicrosoftUIXaml_DataContextChangedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_DataContextChangedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_DataContextChangedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9706B7EA, 0x14D5, 0x5EFA, 0x843B, 0x0D437E792E65)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_BringIntoViewRequestedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x239588E3, 0x453A, 0x5E9A, 0xBC37, 0xA08803F53F22)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_BringIntoViewRequestedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXaml_BringIntoViewRequestedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_BringIntoViewRequestedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_BringIntoViewRequestedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x459EE508, 0xEB51, 0x5EAB, 0x9FD9, 0x865AFADA06C7)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlDocuments_TextElement?, _ args: MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlDocuments_TextElementBinding.toABI(sender)
        defer { MicrosoftUIXamlDocuments_TextElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2A954D28, 0x7F8B, 0x5479, 0x8CE9, 0x900424A0409F)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowEventArgs {
    internal func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_WindowEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_WindowEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_WindowEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.DragItemsCompletedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_DragItemsCompletedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x444371A2, 0x4E78, 0x5D30, 0xBB5C, 0xB358C28ABD72)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_DragItemsCompletedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlControls_ListViewBase?, _ args: MicrosoftUIXamlControls_DragItemsCompletedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlControls_ListViewBaseBinding.toABI(sender)
        defer { MicrosoftUIXamlControls_ListViewBaseBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlControls_DragItemsCompletedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlControls_DragItemsCompletedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.RoutedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_RoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9EB51482, 0x569E, 0x56C5, 0x90E9, 0x8178E2F6E531)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_RoutedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXaml_RoutedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_RoutedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_RoutedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyInvokedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x60EF1DD7, 0x8842, 0x50F8, 0xBC5C, 0xE0C9182EF2D5)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyInvokedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlDocuments_TextElement?, _ args: MicrosoftUIXamlInput_AccessKeyInvokedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlDocuments_TextElementBinding.toABI(sender)
        defer { MicrosoftUIXamlDocuments_TextElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_AccessKeyInvokedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_AccessKeyInvokedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Object>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x53876073, 0xBE4F, 0x5DAC, 0x9AE0, 0x015DB6E40C74)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_IInspectable {
    internal func invoke(_ sender: MicrosoftUIXaml_FrameworkElement?, _ args: WindowsRuntime.IInspectable?) throws {
        var sender_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&sender_abi) }
        var args_abi = try WindowsRuntime.IInspectableBinding.toABI(args)
        defer { WindowsRuntime.IInspectableBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1AF43211, 0x0169, 0x57E1, 0xAA0E, 0x4043EC09DEDD)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.GettingFocusEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_GettingFocusEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0871EEAB, 0x8A3D, 0x5E0B, 0x875C, 0x7949F209AA19)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_GettingFocusEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_GettingFocusEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_GettingFocusEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_GettingFocusEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4F45A267, 0x2B57, 0x5EB1, 0xB382, 0xE542D5A19F7A)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.LosingFocusEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_LosingFocusEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3A87AEDA, 0x6EA2, 0x511E, 0x86E8, 0xCA79E0E3E4E7)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_LosingFocusEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_LosingFocusEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_LosingFocusEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_LosingFocusEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowActivatedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowActivatedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE5299329, 0x636A, 0x5C20, 0xA38A, 0x12DF43F6D038)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowActivatedEventArgs {
    internal func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_WindowActivatedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_WindowActivatedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_WindowActivatedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x244BDA89, 0x86C4, 0x5026, 0xAC7F, 0x973C0971EE7A)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowSizeChangedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowSizeChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5AC3FE68, 0x1312, 0x5598, 0xB097, 0x5C789FE72FBA)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowSizeChangedEventArgs {
    internal func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_WindowSizeChangedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_WindowSizeChangedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_WindowSizeChangedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBlock, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_TextBlock_MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x376BF900, 0xBA70, 0x54B5, 0xABAF, 0x0DAF51F99E60)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_TextBlock_MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlControls_TextBlock?, _ args: MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlControls_TextBlockBinding.toABI(sender)
        defer { MicrosoftUIXamlControls_TextBlockBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.KeyboardAccelerator, Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlInput_KeyboardAccelerator_MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x03E5CE6A, 0x5F2D, 0x59D0, 0xB573, 0x0989FE6AEAD9)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlInput_KeyboardAccelerator_MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlInput_KeyboardAccelerator?, _ args: MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlInput_KeyboardAcceleratorBinding.toABI(sender)
        defer { MicrosoftUIXamlInput_KeyboardAcceleratorBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowVisibilityChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC5011004, 0xF9A8, 0x521D, 0x9B1D, 0xD7CD184889F8)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowVisibilityChangedEventArgs {
    internal func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_WindowVisibilityChangedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_WindowVisibilityChangedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_WindowVisibilityChangedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_ResourceManagerRequestedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC0334617, 0xC1E4, 0x5D66, 0xA839, 0xBCA5F94C5F47)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_ResourceManagerRequestedEventArgs {
    internal func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_ResourceManagerRequestedEventArgs?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_ResourceManagerRequestedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_ResourceManagerRequestedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_MicrosoftUIXaml_EffectiveViewportChangedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x276F9F20, 0x9E38, 0x5AED, 0xB5A8, 0x68B25EC409C2)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_MicrosoftUIXaml_EffectiveViewportChangedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_FrameworkElement?, _ args: MicrosoftUIXaml_EffectiveViewportChangedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_FrameworkElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_FrameworkElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_EffectiveViewportChangedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_EffectiveViewportChangedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyInvokedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8BF3906B, 0x8DFE, 0x5709, 0xAC7E, 0x340F67104BCA)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyInvokedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_AccessKeyInvokedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_AccessKeyInvokedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_AccessKeyInvokedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation, Object>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlMediaAnimation_ConnectedAnimation_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD35B3375, 0xA0EF, 0x59CA, 0x88CF, 0xDC9B4E42953E)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlMediaAnimation_ConnectedAnimation_IInspectable {
    internal func invoke(_ sender: MicrosoftUIXamlMediaAnimation_ConnectedAnimation?, _ args: WindowsRuntime.IInspectable?) throws {
        var sender_abi = try MicrosoftUIXamlMediaAnimation_ConnectedAnimationBinding.toABI(sender)
        defer { MicrosoftUIXamlMediaAnimation_ConnectedAnimationBinding.release(&sender_abi) }
        var args_abi = try WindowsRuntime.IInspectableBinding.toABI(args)
        defer { WindowsRuntime.IInspectableBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xD2FF7F87, 0x74C6, 0x5A26, 0x83F3, 0x7CC6E5E8A54D)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlDocuments_TextElement?, _ args: MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlDocuments_TextElementBinding.toABI(sender)
        defer { MicrosoftUIXamlDocuments_TextElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_ContextRequestedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0C81075C, 0x3BD9, 0x5C90, 0xBD8A, 0x2A89BC154F35)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_ContextRequestedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_ContextRequestedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_ContextRequestedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_ContextRequestedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ChoosingItemContainerEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x02D018BF, 0xAB83, 0x51D0, 0x94D9, 0x61166D8CC929)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ChoosingItemContainerEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlControls_ListViewBase?, _ args: MicrosoftUIXamlControls_ChoosingItemContainerEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlControls_ListViewBaseBinding.toABI(sender)
        defer { MicrosoftUIXamlControls_ListViewBaseBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlControls_ChoosingItemContainerEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlControls_ChoosingItemContainerEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1C4706D5, 0x217E, 0x5C28, 0x9172, 0x2C0EE137B986)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control, Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_Control_MicrosoftUIXamlControls_FocusEngagedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4B2FE512, 0x35FA, 0x5C54, 0xB687, 0x9EFB709B68CD)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_Control_MicrosoftUIXamlControls_FocusEngagedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlControls_Control?, _ args: MicrosoftUIXamlControls_FocusEngagedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlControls_ControlBinding.toABI(sender)
        defer { MicrosoftUIXamlControls_ControlBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlControls_FocusEngagedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlControls_FocusEngagedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.DropCompletedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_DropCompletedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xAC00806A, 0x8954, 0x51F5, 0x9272, 0x302F69B548E4)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_DropCompletedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXaml_DropCompletedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXaml_UIElementBinding.toABI(sender)
        defer { MicrosoftUIXaml_UIElementBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXaml_DropCompletedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXaml_DropCompletedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase, Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControlsPrimitives_FlyoutBase_MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4451CA06, 0x3E60, 0x5C62, 0x8749, 0x2660907FB86C)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControlsPrimitives_FlyoutBase_MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlControlsPrimitives_FlyoutBase?, _ args: MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.toABI(sender)
        defer { MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control, Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs>

internal func uuidof(_: SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_Control_MicrosoftUIXamlControls_FocusDisengagedEventArgs.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9879511C, 0xDCFD, 0x56A5, 0x9535, 0x5DA86088092F)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_Control_MicrosoftUIXamlControls_FocusDisengagedEventArgs {
    internal func invoke(_ sender: MicrosoftUIXamlControls_Control?, _ args: MicrosoftUIXamlControls_FocusDisengagedEventArgs?) throws {
        var sender_abi = try MicrosoftUIXamlControls_ControlBinding.toABI(sender)
        defer { MicrosoftUIXamlControls_ControlBinding.release(&sender_abi) }
        var args_abi = try MicrosoftUIXamlControls_FocusDisengagedEventArgsBinding.toABI(args)
        defer { MicrosoftUIXamlControls_FocusDisengagedEventArgsBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.EventHandler<Object>

internal func uuidof(_: SWRT_WindowsFoundation_EventHandler_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC50898F6, 0xC536, 0x5F47, 0x8583, 0x8B2C2438A13B)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundation_EventHandler_IInspectable {
    internal func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: WindowsRuntime.IInspectable?) throws {
        var sender_abi = try WindowsRuntime.IInspectableBinding.toABI(sender)
        defer { WindowsRuntime.IInspectableBinding.release(&sender_abi) }
        var args_abi = try WindowsRuntime.IInspectableBinding.toABI(args)
        defer { WindowsRuntime.IInspectableBinding.release(&args_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, args_abi))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.SetterBase>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_SetterBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4357F913, 0xF457, 0x553B, 0x8475, 0x52ACD4AB3599)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_SetterBase {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_SetterBase? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_ISetterBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXaml_SetterBaseBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXaml_SetterBase?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_SetterBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.SetterBase.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXaml_SetterBase?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXaml_SetterBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_SetterBaseBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_SetterBase?) throws {
        var value_abi = try MicrosoftUIXaml_SetterBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_SetterBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_SetterBase?) throws {
        var value_abi = try MicrosoftUIXaml_SetterBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_SetterBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXaml_SetterBase?) throws {
        var value_abi = try MicrosoftUIXaml_SetterBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_SetterBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_SetterBase?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXaml_SetterBase?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.XamlLight>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMedia_XamlLight.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFB6065BB, 0x83E0, 0x57C0, 0xAE7F, 0x418FD763B0CE)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMedia_XamlLight {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlMedia_XamlLight? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IXamlLight>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlMedia_XamlLightBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlMedia_XamlLight?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlMedia_XamlLight>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.XamlLight.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlMedia_XamlLight?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlMedia_XamlLightBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_XamlLightBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlMedia_XamlLight?) throws {
        var value_abi = try MicrosoftUIXamlMedia_XamlLightBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_XamlLightBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlMedia_XamlLight?) throws {
        var value_abi = try MicrosoftUIXamlMedia_XamlLightBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_XamlLightBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlMedia_XamlLight?) throws {
        var value_abi = try MicrosoftUIXamlMedia_XamlLightBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_XamlLightBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlMedia_XamlLight?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlMedia_XamlLight?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.KeyboardAccelerator>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlInput_KeyboardAccelerator.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0DB091C3, 0x8538, 0x5D25, 0x937F, 0xDB6E003E1F71)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlInput_KeyboardAccelerator {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlInput_KeyboardAccelerator? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlInput_KeyboardAcceleratorBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlInput_KeyboardAccelerator?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlInput_KeyboardAccelerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.KeyboardAccelerator.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlInput_KeyboardAccelerator?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlInput_KeyboardAcceleratorBinding.toABI(value)
        defer { MicrosoftUIXamlInput_KeyboardAcceleratorBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlInput_KeyboardAccelerator?) throws {
        var value_abi = try MicrosoftUIXamlInput_KeyboardAcceleratorBinding.toABI(value)
        defer { MicrosoftUIXamlInput_KeyboardAcceleratorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlInput_KeyboardAccelerator?) throws {
        var value_abi = try MicrosoftUIXamlInput_KeyboardAcceleratorBinding.toABI(value)
        defer { MicrosoftUIXamlInput_KeyboardAcceleratorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlInput_KeyboardAccelerator?) throws {
        var value_abi = try MicrosoftUIXamlInput_KeyboardAcceleratorBinding.toABI(value)
        defer { MicrosoftUIXamlInput_KeyboardAcceleratorBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlInput_KeyboardAccelerator?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlInput_KeyboardAccelerator?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.Transition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x030A9884, 0x05DB, 0x57AF, 0xAE3B, 0x4C77FFABFE57)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlMediaAnimation_Transition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMediaAnimation_ITransition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlMediaAnimation_TransitionBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlMediaAnimation_Transition?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlMediaAnimation_Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.Transition.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlMediaAnimation_Transition?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlMediaAnimation_Transition?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlMediaAnimation_Transition?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlMediaAnimation_Transition?) throws {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlMediaAnimation_Transition?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlMediaAnimation_Transition?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.ResourceDictionary>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_ResourceDictionary.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC6FBFE1A, 0xF015, 0x5B23, 0x8E7E, 0x14497E9707A1)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_ResourceDictionary {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_ResourceDictionary? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IResourceDictionary>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXaml_ResourceDictionaryBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXaml_ResourceDictionary?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_ResourceDictionary>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.ResourceDictionary.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXaml_ResourceDictionary?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXaml_ResourceDictionaryBinding.toABI(value)
        defer { MicrosoftUIXaml_ResourceDictionaryBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_ResourceDictionary?) throws {
        var value_abi = try MicrosoftUIXaml_ResourceDictionaryBinding.toABI(value)
        defer { MicrosoftUIXaml_ResourceDictionaryBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_ResourceDictionary?) throws {
        var value_abi = try MicrosoftUIXaml_ResourceDictionaryBinding.toABI(value)
        defer { MicrosoftUIXaml_ResourceDictionaryBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXaml_ResourceDictionary?) throws {
        var value_abi = try MicrosoftUIXaml_ResourceDictionaryBinding.toABI(value)
        defer { MicrosoftUIXaml_ResourceDictionaryBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_ResourceDictionary?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXaml_ResourceDictionary?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.ColumnDefinition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_ColumnDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x749BC47C, 0x1743, 0x5C21, 0x9CED, 0xC8A1134C7BA7)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_ColumnDefinition {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_ColumnDefinition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IColumnDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlControls_ColumnDefinitionBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlControls_ColumnDefinition?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlControls_ColumnDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.ColumnDefinition.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlControls_ColumnDefinition?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlControls_ColumnDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ColumnDefinitionBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_ColumnDefinition?) throws {
        var value_abi = try MicrosoftUIXamlControls_ColumnDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ColumnDefinitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_ColumnDefinition?) throws {
        var value_abi = try MicrosoftUIXamlControls_ColumnDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ColumnDefinitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlControls_ColumnDefinition?) throws {
        var value_abi = try MicrosoftUIXamlControls_ColumnDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ColumnDefinitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_ColumnDefinition?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlControls_ColumnDefinition?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Object>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB32BDCA4, 0x5E52, 0x5B27, 0xBC5D, 0xD66A1A268C2A)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_IInspectable {
    internal func getAt(_ index: Swift.UInt32) throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.Object.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: WindowsRuntime.IInspectable?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsRuntime.IInspectable?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [WindowsRuntime.IInspectable?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextHighlighter>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextHighlighter.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6D576F67, 0x1548, 0x51C9, 0x83A8, 0x2B5401B0281B)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextHighlighter {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlDocuments_TextHighlighter? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextHighlighter>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlDocuments_TextHighlighterBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlDocuments_TextHighlighter?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlDocuments_TextHighlighter>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.TextHighlighter.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlDocuments_TextHighlighter?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlDocuments_TextHighlighterBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_TextHighlighterBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_TextHighlighter?) throws {
        var value_abi = try MicrosoftUIXamlDocuments_TextHighlighterBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_TextHighlighterBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_TextHighlighter?) throws {
        var value_abi = try MicrosoftUIXamlDocuments_TextHighlighterBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_TextHighlighterBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlDocuments_TextHighlighter?) throws {
        var value_abi = try MicrosoftUIXamlDocuments_TextHighlighterBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_TextHighlighterBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlDocuments_TextHighlighter?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlDocuments_TextHighlighter?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x91D7782F, 0xC53A, 0x5620, 0x8CE1, 0x0D9419249322)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeer {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlAutomationPeers_AutomationPeer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlAutomationPeers_AutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.AutomationPeer.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlAutomationPeers_AutomationPeer?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlAutomationPeers_AutomationPeer?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Input.PointerPoint>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIInput_PointerPoint.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8220CF33, 0x5D76, 0x5607, 0xBB7D, 0xB7CD07D27F33)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIInput_PointerPoint {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIInput_PointerPoint? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIInput_IPointerPoint>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIInput_PointerPointBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIInput_PointerPoint?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIInput_PointerPoint>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.PointerPoint.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIInput_PointerPoint?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIInput_PointerPointBinding.toABI(value)
        defer { MicrosoftUIInput_PointerPointBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIInput_PointerPoint?) throws {
        var value_abi = try MicrosoftUIInput_PointerPointBinding.toABI(value)
        defer { MicrosoftUIInput_PointerPointBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIInput_PointerPoint?) throws {
        var value_abi = try MicrosoftUIInput_PointerPointBinding.toABI(value)
        defer { MicrosoftUIInput_PointerPointBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIInput_PointerPoint?) throws {
        var value_abi = try MicrosoftUIInput_PointerPointBinding.toABI(value)
        defer { MicrosoftUIInput_PointerPointBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIInput_PointerPoint?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIInput_PointerPoint?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFE9ED1B7, 0x7185, 0x52E9, 0xB037, 0xBF9902AC3561)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.AutomationPeerAnnotation.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?) throws {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?) throws {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?) throws {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.Inline>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_Inline.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0015A441, 0x4C98, 0x5D3F, 0x8823, 0x03E722615C48)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_Inline {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlDocuments_Inline? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_IInline>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlDocuments_InlineBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlDocuments_Inline?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlDocuments_Inline>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.Inline.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlDocuments_Inline?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlDocuments_InlineBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_InlineBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_Inline?) throws {
        var value_abi = try MicrosoftUIXamlDocuments_InlineBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_InlineBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_Inline?) throws {
        var value_abi = try MicrosoftUIXamlDocuments_InlineBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_InlineBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlDocuments_Inline?) throws {
        var value_abi = try MicrosoftUIXamlDocuments_InlineBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_InlineBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlDocuments_Inline?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlDocuments_Inline?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextRange>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextRange.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5338571C, 0x77B4, 0x560E, 0x8DFD, 0xA59DAD270EBB)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextRange {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlDocuments_TextRange {
        var _result: SWRT_MicrosoftUIXamlDocuments_TextRange = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlDocuments_TextRange.fromABI(_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlDocuments_TextRange>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlDocuments_TextRange>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.TextRange.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlDocuments_TextRange, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        let value_abi = MicrosoftUIXamlDocuments_TextRange.toABI(value)
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_TextRange) throws {
        let value_abi = MicrosoftUIXamlDocuments_TextRange.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_TextRange) throws {
        let value_abi = MicrosoftUIXamlDocuments_TextRange.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlDocuments_TextRange) throws {
        let value_abi = MicrosoftUIXamlDocuments_TextRange.toABI(value)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlDocuments_TextRange]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlDocuments_TextRange]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.TriggerBase>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_TriggerBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEF52E000, 0x0B0F, 0x52B5, 0xBDFE, 0x4F5935DCF1BC)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_TriggerBase {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_TriggerBase? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_ITriggerBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXaml_TriggerBaseBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXaml_TriggerBase?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_TriggerBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.TriggerBase.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXaml_TriggerBase?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXaml_TriggerBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_TriggerBaseBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_TriggerBase?) throws {
        var value_abi = try MicrosoftUIXaml_TriggerBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_TriggerBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_TriggerBase?) throws {
        var value_abi = try MicrosoftUIXaml_TriggerBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_TriggerBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXaml_TriggerBase?) throws {
        var value_abi = try MicrosoftUIXaml_TriggerBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_TriggerBaseBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_TriggerBase?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXaml_TriggerBase?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.GroupStyle>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_GroupStyle.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8FBA608E, 0xF076, 0x5F2A, 0x8972, 0x4F97D92CA845)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_GroupStyle {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_GroupStyle? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IGroupStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlControls_GroupStyleBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlControls_GroupStyle?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlControls_GroupStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.GroupStyle.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlControls_GroupStyle?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlControls_GroupStyleBinding.toABI(value)
        defer { MicrosoftUIXamlControls_GroupStyleBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_GroupStyle?) throws {
        var value_abi = try MicrosoftUIXamlControls_GroupStyleBinding.toABI(value)
        defer { MicrosoftUIXamlControls_GroupStyleBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_GroupStyle?) throws {
        var value_abi = try MicrosoftUIXamlControls_GroupStyleBinding.toABI(value)
        defer { MicrosoftUIXamlControls_GroupStyleBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlControls_GroupStyle?) throws {
        var value_abi = try MicrosoftUIXamlControls_GroupStyleBinding.toABI(value)
        defer { MicrosoftUIXamlControls_GroupStyleBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_GroupStyle?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlControls_GroupStyle?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_UIElement.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEA4A1AF0, 0x4286, 0x5F11, 0x8142, 0x6B0169F4E9DE)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_UIElement {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXaml_UIElement?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_UIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.UIElement.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXaml_UIElement?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_UIElement?) throws {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_UIElement?) throws {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXaml_UIElement?) throws {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_UIElement?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXaml_UIElement?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.RowDefinition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_RowDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5DDD9577, 0x3F94, 0x567F, 0xBEEF, 0x540568522289)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_RowDefinition {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_RowDefinition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IRowDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlControls_RowDefinitionBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlControls_RowDefinition?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlControls_RowDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IVectorViewBinding.RowDefinition.fromABI(consuming: &_result)
    }

    internal func indexOf(_ value: MicrosoftUIXamlControls_RowDefinition?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlControls_RowDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_RowDefinitionBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_RowDefinition?) throws {
        var value_abi = try MicrosoftUIXamlControls_RowDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_RowDefinitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.SetAt(this, index, value_abi))
    }

    internal func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_RowDefinition?) throws {
        var value_abi = try MicrosoftUIXamlControls_RowDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_RowDefinitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.InsertAt(this, index, value_abi))
    }

    internal func removeAt(_ index: Swift.UInt32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAt(this, index))
    }

    internal func append(_ value: MicrosoftUIXamlControls_RowDefinition?) throws {
        var value_abi = try MicrosoftUIXamlControls_RowDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_RowDefinitionBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Append(this, value_abi))
    }

    internal func removeAtEnd() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.RemoveAtEnd(this))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_RowDefinition?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }

    internal func replaceAll(_ items: [MicrosoftUIXamlControls_RowDefinition?]) throws {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.release(&items_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.ReplaceAll(this, items_abi.count, items_abi.pointer))
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.ResourceDictionary>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_ResourceDictionary.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1DA2BEA2, 0x3287, 0x5EDF, 0xB62E, 0x0D073C68CE0B)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_ResourceDictionary {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_ResourceDictionary?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_ResourceDictionary>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.ResourceDictionary.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IIterable_WindowsFoundation_Point.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xAE44597E, 0xD411, 0x5B7F, 0xBBEC, 0x6A96C94A107A)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IIterable_WindowsFoundation_Point {
    internal func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IIterable<WindowsFoundation_Point>?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IIterable_WindowsFoundation_Point>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.IIterable_Point.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.Inline>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_Inline.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF86F5DA2, 0x1896, 0x5EED, 0xAA75, 0xA07476952DBF)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_Inline {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_Inline?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_Inline>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.Inline.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.ColumnDefinition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_ColumnDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x80741C8F, 0xA401, 0x5C63, 0xB6C4, 0x15D165E541C7)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_ColumnDefinition {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_ColumnDefinition?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_ColumnDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.ColumnDefinition.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.TextRange>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextRange.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x078DC9D3, 0x4F5E, 0x5AB0, 0xA784, 0x722A4B1FCB01)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextRange {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_TextRange>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextRange>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.TextRange.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.UIElement>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_UIElement.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x459BB954, 0x42A3, 0x5C74, 0x8F87, 0x42458F19AEAA)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_UIElement {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_UIElement?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_UIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.UIElement.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.GroupStyle>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x0E43BAF0, 0x60AD, 0x547C, 0xBBC4, 0xE511036A3915)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_GroupStyle?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_GroupStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.GroupStyle.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xAE90A2BB, 0x4062, 0x586E, 0xB436, 0x1ACF9F4DFD56)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.AutomationPeerAnnotation.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<Object, Object>>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x33AC68F0, 0x1084, 0x529A, 0x8A17, 0x4E7C8ADB7A0C)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable {
    internal func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.IKeyValuePair_Object_Object.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<String>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_String.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE2FCC7C1, 0x3BFC, 0x5A0B, 0xB2B0, 0x72E769D1CB7E)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_String {
    internal func first() throws -> WindowsFoundationCollections_IIterator<Swift.String>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_String>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.String.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.TriggerBase>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_TriggerBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4FB6A3B8, 0x0C07, 0x57C1, 0xACA7, 0xA7BC453B91E2)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_TriggerBase {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_TriggerBase?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_TriggerBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.TriggerBase.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.TextHighlighter>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextHighlighter.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3A384ABD, 0x9B89, 0x5B75, 0x9723, 0x047B45AAF460)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextHighlighter {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_TextHighlighter?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextHighlighter>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.TextHighlighter.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3513D61B, 0xFF0F, 0x523D, 0x872C, 0xA496ADB9BCA2)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlAutomationPeers_AutomationPeer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.AutomationPeer.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.RowDefinition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_RowDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB0B30930, 0x7697, 0x561E, 0xBD6E, 0xFBBB1AD17C50)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_RowDefinition {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_RowDefinition?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_RowDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.RowDefinition.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.SetterBase>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_SetterBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9FA9CD08, 0x8676, 0x51AB, 0xAFF6, 0x604D0DDEA185)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_SetterBase {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_SetterBase?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_SetterBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.SetterBase.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Data.ItemIndexRange>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlData_ItemIndexRange.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6F328B92, 0x1EB5, 0x54DF, 0xB756, 0xE8D9FD9ABEA5)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlData_ItemIndexRange {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlData_ItemIndexRange?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlData_ItemIndexRange>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.ItemIndexRange.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Input.PointerPoint>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIInput_PointerPoint.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x645ACC33, 0xFFCE, 0x5AD3, 0xBE2B, 0xC49B9C27C35D)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIInput_PointerPoint {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIInput_PointerPoint?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIInput_PointerPoint>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.PointerPoint.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Media.Animation.Transition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMediaAnimation_Transition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x3CCACCB1, 0x02DC, 0x5456, 0x922A, 0xA264C80105B8)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMediaAnimation_Transition {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlMediaAnimation_Transition?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMediaAnimation_Transition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.Transition.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.KeyboardAccelerator>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_KeyboardAccelerator.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x68B2E097, 0xF07E, 0x580F, 0x8BFD, 0xB90A0B2A8835)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_KeyboardAccelerator {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlInput_KeyboardAccelerator?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_KeyboardAccelerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.KeyboardAccelerator.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.Pointer>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_Pointer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xDBD58230, 0x79D3, 0x5947, 0x924A, 0x1EF86FDA3DB5)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_Pointer {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlInput_Pointer?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_Pointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.Pointer.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_Point.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC192280D, 0x3A09, 0x5423, 0x9DC5, 0x67B83EBDE41D)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_Point {
    internal func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundation_Point>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_WindowsFoundation_Point>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.Point.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Media.XamlLight>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMedia_XamlLight.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC166D8CA, 0xB148, 0x5241, 0xBED5, 0x13003063BD3E)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMedia_XamlLight {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlMedia_XamlLight?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMedia_XamlLight>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.XamlLight.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.DependencyObject>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_DependencyObject.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x838A6966, 0x6DE6, 0x5040, 0xA14F, 0xBA34D5425AB4)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_DependencyObject {
    internal func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_DependencyObject?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_DependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.DependencyObject.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Object>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterable_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x092B849B, 0x60B1, 0x52BE, 0xA44A, 0x6FE8E933CBE4)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterable_IInspectable {
    internal func first() throws -> WindowsFoundationCollections_IIterator<WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterator_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.First(this, &_result))
        return WindowsFoundationCollections_IIteratorBinding.Object.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IMapView<Object, Object>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IMapView_IInspectable_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEFE76D10, 0xCB60, 0x50AD, 0x8A4F, 0x6885CD6212A1)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IMapView_IInspectable_IInspectable {
    internal func lookup(_ key: WindowsRuntime.IInspectable?) throws -> WindowsRuntime.IInspectable? {
        var key_abi = try WindowsRuntime.IInspectableBinding.toABI(key)
        defer { WindowsRuntime.IInspectableBinding.release(&key_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Lookup(this, key_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func hasKey(_ key: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        var key_abi = try WindowsRuntime.IInspectableBinding.toABI(key)
        defer { WindowsRuntime.IInspectableBinding.release(&key_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.HasKey(this, key_abi, &_result))
        return _result
    }

    internal func split(_ first: inout WindowsFoundationCollections_IMapView<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?, _ second: inout WindowsFoundationCollections_IMapView<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?) throws {
        var first_abi: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IMapView_IInspectable_IInspectable>? = nil
        defer { WindowsFoundationCollections_IMapViewBinding.Object_Object.release(&first_abi) }
        var second_abi: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IMapView_IInspectable_IInspectable>? = nil
        defer { WindowsFoundationCollections_IMapViewBinding.Object_Object.release(&second_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Split(this, &first_abi, &second_abi))
        first = WindowsFoundationCollections_IMapViewBinding.Object_Object.fromABI(consuming: &first_abi)
        second = WindowsFoundationCollections_IMapViewBinding.Object_Object.fromABI(consuming: &second_abi)
    }
}

// MARK: Windows.Foundation.Collections.IKeyValuePair<Object, Object>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x59E7AE0C, 0xC29D, 0x5AD6, 0xBEF5, 0xDEDB52A198E1)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable {
    internal func get_Key() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Key(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    internal func get_Value() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Value(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }
}

// MARK: Windows.Foundation.Collections.IMap<Object, Object>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IMap_IInspectable_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF5F69427, 0x55ED, 0x5512, 0x8429, 0xD4F6626DFCDD)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IMap_IInspectable_IInspectable {
    internal func lookup(_ key: WindowsRuntime.IInspectable?) throws -> WindowsRuntime.IInspectable? {
        var key_abi = try WindowsRuntime.IInspectableBinding.toABI(key)
        defer { WindowsRuntime.IInspectableBinding.release(&key_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Lookup(this, key_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func hasKey(_ key: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        var key_abi = try WindowsRuntime.IInspectableBinding.toABI(key)
        defer { WindowsRuntime.IInspectableBinding.release(&key_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.HasKey(this, key_abi, &_result))
        return _result
    }

    internal func getView() throws -> WindowsFoundationCollections_IMapView<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IMapView_IInspectable_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetView(this, &_result))
        return WindowsFoundationCollections_IMapViewBinding.Object_Object.fromABI(consuming: &_result)
    }

    internal func insert(_ key: WindowsRuntime.IInspectable?, _ value: WindowsRuntime.IInspectable?) throws -> Swift.Bool {
        var key_abi = try WindowsRuntime.IInspectableBinding.toABI(key)
        defer { WindowsRuntime.IInspectableBinding.release(&key_abi) }
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Insert(this, key_abi, value_abi, &_result))
        return _result
    }

    internal func remove(_ key: WindowsRuntime.IInspectable?) throws {
        var key_abi = try WindowsRuntime.IInspectableBinding.toABI(key)
        defer { WindowsRuntime.IInspectableBinding.release(&key_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Remove(this, key_abi))
    }

    internal func clear() throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Clear(this))
    }
}

// MARK: Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.GroupStyle>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IObservableVector_MicrosoftUIXamlControls_GroupStyle.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x80DAE4E3, 0x4FCE, 0x5788, 0x923B, 0xC1B75B82A611)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IObservableVector_MicrosoftUIXamlControls_GroupStyle {
    internal func add_VectorChanged(_ vhnd: WindowsFoundationCollections_VectorChangedEventHandler<MicrosoftUIXamlControls_GroupStyle?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var vhnd_abi = try WindowsFoundationCollections_VectorChangedEventHandlerBinding.GroupStyle.toABI(vhnd)
        defer { WindowsFoundationCollections_VectorChangedEventHandlerBinding.GroupStyle.release(&vhnd_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_VectorChanged(this, vhnd_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    internal func remove_VectorChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_VectorChanged(this, token_abi))
    }
}

// MARK: Windows.Foundation.Collections.IObservableVector<Object>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IObservableVector_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7B81C56A, 0x0985, 0x518D, 0xBAA9, 0x0DA9AE009F65)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IObservableVector_IInspectable {
    internal func add_VectorChanged(_ vhnd: WindowsFoundationCollections_VectorChangedEventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistrationToken {
        var vhnd_abi = try WindowsFoundationCollections_VectorChangedEventHandlerBinding.Object.toABI(vhnd)
        defer { WindowsFoundationCollections_VectorChangedEventHandlerBinding.Object.release(&vhnd_abi) }
        var _result: SWRT_EventRegistrationToken = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.add_VectorChanged(this, vhnd_abi, &_result))
        return WindowsRuntime.EventRegistrationToken.fromABI(_result)
    }

    internal func remove_VectorChanged(_ token: WindowsRuntime.EventRegistrationToken) throws {
        let token_abi = WindowsRuntime.EventRegistrationToken.toABI(token)
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.remove_VectorChanged(this, token_abi))
    }
}

// MARK: Windows.Foundation.Collections.VectorChangedEventHandler<Object>

internal func uuidof(_: SWRT_WindowsFoundationCollections_VectorChangedEventHandler_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB423A801, 0xD35E, 0x56B9, 0x813B, 0x00889536CB98)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_VectorChangedEventHandler_IInspectable {
    internal func invoke(_ sender: WindowsFoundationCollections_IObservableVector<WindowsRuntime.IInspectable?>?, _ event: WindowsFoundationCollections_IVectorChangedEventArgs?) throws {
        var sender_abi = try WindowsFoundationCollections_IObservableVectorBinding.Object.toABI(sender)
        defer { WindowsFoundationCollections_IObservableVectorBinding.Object.release(&sender_abi) }
        var event_abi = try WindowsFoundationCollections_IVectorChangedEventArgsBinding.toABI(event)
        defer { WindowsFoundationCollections_IVectorChangedEventArgsBinding.release(&event_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, event_abi))
    }
}

// MARK: Windows.Foundation.Collections.VectorChangedEventHandler<Microsoft.UI.Xaml.Controls.GroupStyle>

internal func uuidof(_: SWRT_WindowsFoundationCollections_VectorChangedEventHandler_MicrosoftUIXamlControls_GroupStyle.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x936AF50F, 0xC851, 0x51CD, 0xB07C, 0xA2AC10F084A3)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_VectorChangedEventHandler_MicrosoftUIXamlControls_GroupStyle {
    internal func invoke(_ sender: WindowsFoundationCollections_IObservableVector<MicrosoftUIXamlControls_GroupStyle?>?, _ event: WindowsFoundationCollections_IVectorChangedEventArgs?) throws {
        var sender_abi = try WindowsFoundationCollections_IObservableVectorBinding.GroupStyle.toABI(sender)
        defer { WindowsFoundationCollections_IObservableVectorBinding.GroupStyle.release(&sender_abi) }
        var event_abi = try WindowsFoundationCollections_IVectorChangedEventArgsBinding.toABI(event)
        defer { WindowsFoundationCollections_IVectorChangedEventArgsBinding.release(&event_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Invoke(this, sender_abi, event_abi))
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xF5322C8C, 0xBC0A, 0x56CF, 0x812C, 0x5FE140021F62)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeer {
    internal func get_Current() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlAutomationPeers_AutomationPeer?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.DependencyObject>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_DependencyObject.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x62E49306, 0x76D0, 0x5CD7, 0x97D5, 0xEF08C934FE9A)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_DependencyObject {
    internal func get_Current() throws -> MicrosoftUIXaml_DependencyObject? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IDependencyObject>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXaml_DependencyObjectBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXaml_DependencyObject?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_DependencyObjectBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_DependencyObjectBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.UIElement>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_UIElement.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC5F188B0, 0xC653, 0x5209, 0x909A, 0xEB97CA691617)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_UIElement {
    internal func get_Current() throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXaml_UIElement?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.TriggerBase>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_TriggerBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x93D0F9FA, 0x22D2, 0x5E84, 0xAC72, 0xAACF06F97900)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_TriggerBase {
    internal func get_Current() throws -> MicrosoftUIXaml_TriggerBase? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_ITriggerBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXaml_TriggerBaseBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXaml_TriggerBase?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Documents.TextHighlighter>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextHighlighter.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xFC6439F0, 0xABB0, 0x5228, 0x8622, 0xED9B1337BDC9)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextHighlighter {
    internal func get_Current() throws -> MicrosoftUIXamlDocuments_TextHighlighter? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextHighlighter>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlDocuments_TextHighlighterBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlDocuments_TextHighlighter?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.RowDefinition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_RowDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x78108CBA, 0xFC4E, 0x5B6C, 0x800D, 0x6C091B0A1C22)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_RowDefinition {
    internal func get_Current() throws -> MicrosoftUIXamlControls_RowDefinition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IRowDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlControls_RowDefinitionBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlControls_RowDefinition?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Object>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x44A94F2D, 0x04F8, 0x5091, 0xB336, 0xBE7892DD10BE)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_IInspectable {
    internal func get_Current() throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [WindowsRuntime.IInspectable?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<String>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_String.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8C304EBB, 0x6615, 0x50A4, 0x8829, 0x879ECD443236)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_String {
    internal func get_Current() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [Swift.String]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Point>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_WindowsFoundation_Point.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC602B59E, 0x0A8E, 0x5E99, 0xB478, 0x2B564585278D)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_WindowsFoundation_Point {
    internal func get_Current() throws -> WindowsFoundation_Point {
        var _result: SWRT_WindowsFoundation_Point = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return WindowsFoundation_Point.fromABI(_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [WindowsFoundation_Point]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<WindowsFoundation_Point>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<WindowsFoundation_Point>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Input.Pointer>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_Pointer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x41B19B91, 0x7D83, 0x5BB2, 0x8A98, 0x9B20BBC359CF)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_Pointer {
    internal func get_Current() throws -> MicrosoftUIXamlInput_Pointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlInput_PointerBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlInput_Pointer?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_PointerBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_PointerBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<Object, Object>>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x31E55E8A, 0x0F05, 0x52FD, 0x90D3, 0xB04AA331AAA4)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable {
    internal func get_Current() throws -> WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return WindowsFoundationCollections_IKeyValuePairBinding.Object_Object.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.Object_Object>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.Object_Object>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Data.ItemIndexRange>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlData_ItemIndexRange.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x8CBC4E1B, 0x9D17, 0x5FEC, 0xBBB0, 0x0B25601A4E2D)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlData_ItemIndexRange {
    internal func get_Current() throws -> MicrosoftUIXamlData_ItemIndexRange? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IItemIndexRange>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlData_ItemIndexRangeBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlData_ItemIndexRange?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlData_ItemIndexRangeBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlData_ItemIndexRangeBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Media.XamlLight>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMedia_XamlLight.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xE75863B3, 0x0B25, 0x5C28, 0x86C8, 0x9EC49F76D468)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMedia_XamlLight {
    internal func get_Current() throws -> MicrosoftUIXamlMedia_XamlLight? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IXamlLight>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlMedia_XamlLightBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlMedia_XamlLight?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Input.KeyboardAccelerator>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_KeyboardAccelerator.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6A7CB393, 0x53C9, 0x5481, 0xBA42, 0x90D431243D14)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_KeyboardAccelerator {
    internal func get_Current() throws -> MicrosoftUIXamlInput_KeyboardAccelerator? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlInput_KeyboardAcceleratorBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlInput_KeyboardAccelerator?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.ColumnDefinition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_ColumnDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9309739C, 0xA52F, 0x5130, 0xA02C, 0xC9BCF705DF7A)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_ColumnDefinition {
    internal func get_Current() throws -> MicrosoftUIXamlControls_ColumnDefinition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IColumnDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlControls_ColumnDefinitionBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlControls_ColumnDefinition?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.ResourceDictionary>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_ResourceDictionary.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9483D8A0, 0x2803, 0x50F1, 0x98DB, 0xFA3A7E6A56B3)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_ResourceDictionary {
    internal func get_Current() throws -> MicrosoftUIXaml_ResourceDictionary? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IResourceDictionary>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXaml_ResourceDictionaryBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXaml_ResourceDictionary?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Input.PointerPoint>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIInput_PointerPoint.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5B63939D, 0x11CF, 0x56C4, 0xB0D0, 0x11DF9DC487D1)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIInput_PointerPoint {
    internal func get_Current() throws -> MicrosoftUIInput_PointerPoint? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIInput_IPointerPoint>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIInput_PointerPointBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIInput_PointerPoint?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IIterable_WindowsFoundation_Point.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x377F6162, 0x6E4D, 0x574E, 0xBF01, 0x77F4FD021D0E)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IIterable_WindowsFoundation_Point {
    internal func get_Current() throws -> WindowsFoundationCollections_IIterable<WindowsFoundation_Point>? {
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_Point>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return WindowsFoundationCollections_IIterableBinding.Point.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [WindowsFoundationCollections_IIterable<WindowsFoundation_Point>?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IIterableBinding.Point>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IIterableBinding.Point>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Documents.Inline>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_Inline.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x86E55D23, 0x6538, 0x5CA8, 0xB944, 0xD663E11A5120)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_Inline {
    internal func get_Current() throws -> MicrosoftUIXamlDocuments_Inline? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_IInline>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlDocuments_InlineBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlDocuments_Inline?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.GroupStyle>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_GroupStyle.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x862E10BB, 0x08BE, 0x5A33, 0x84EA, 0xDA757EA28D59)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_GroupStyle {
    internal func get_Current() throws -> MicrosoftUIXamlControls_GroupStyle? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IGroupStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlControls_GroupStyleBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlControls_GroupStyle?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.SetterBase>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_SetterBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x555894A1, 0xCC82, 0x5AF0, 0xB220, 0x53E73B2DBA33)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_SetterBase {
    internal func get_Current() throws -> MicrosoftUIXaml_SetterBase? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_ISetterBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXaml_SetterBaseBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXaml_SetterBase?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Documents.TextRange>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextRange.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xC70C1944, 0x933A, 0x5AE4, 0xBB65, 0x93ACFC3F3C40)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextRange {
    internal func get_Current() throws -> MicrosoftUIXamlDocuments_TextRange {
        var _result: SWRT_MicrosoftUIXamlDocuments_TextRange = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlDocuments_TextRange.fromABI(_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlDocuments_TextRange]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Media.Animation.Transition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMediaAnimation_Transition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5CFD74C7, 0x6E4A, 0x5C7D, 0x9370, 0x2F81C62274F5)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMediaAnimation_Transition {
    internal func get_Current() throws -> MicrosoftUIXamlMediaAnimation_Transition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMediaAnimation_ITransition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlMediaAnimation_TransitionBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlMediaAnimation_Transition?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x27B3501A, 0x5CB5, 0x572B, 0xB3A3, 0x10C38D82EACC)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation {
    internal func get_Current() throws -> MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Current(this, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.fromABI(consuming: &_result)
    }

    internal func get_HasCurrent() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_HasCurrent(this, &_result))
        return _result
    }

    internal func moveNext() throws -> Swift.Bool {
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.MoveNext(this, &_result))
        return _result
    }

    internal func getMany(_ items: [MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.GroupStyle>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlControls_GroupStyle.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x52279BFD, 0x81A6, 0x5497, 0x9330, 0x1612886E7231)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlControls_GroupStyle {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_GroupStyle? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IGroupStyle>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlControls_GroupStyleBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlControls_GroupStyle?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlControls_GroupStyleBinding.toABI(value)
        defer { MicrosoftUIXamlControls_GroupStyleBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_GroupStyle?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7A5622C2, 0x354B, 0x5D4E, 0xB86D, 0x3482EB35513E)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeerAnnotation>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Documents.Inline>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlDocuments_Inline.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xB0525FD0, 0xF83C, 0x54A4, 0xBC08, 0xF2574B42C536)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlDocuments_Inline {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlDocuments_Inline? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_IInline>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlDocuments_InlineBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlDocuments_Inline?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlDocuments_InlineBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_InlineBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlDocuments_Inline?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Input.KeyboardAccelerator>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlInput_KeyboardAccelerator.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4D4DFA1A, 0x7153, 0x51F3, 0x8036, 0x6B61DE68BCA8)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlInput_KeyboardAccelerator {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlInput_KeyboardAccelerator? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlInput_KeyboardAcceleratorBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlInput_KeyboardAccelerator?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlInput_KeyboardAcceleratorBinding.toABI(value)
        defer { MicrosoftUIXamlInput_KeyboardAcceleratorBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlInput_KeyboardAccelerator?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.UIElement>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_UIElement.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4FDEA5EE, 0xC725, 0x5026, 0xBA83, 0x24E5771357C6)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_UIElement {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_UIElement? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IUIElement>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXaml_UIElementBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXaml_UIElement?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXaml_UIElementBinding.toABI(value)
        defer { MicrosoftUIXaml_UIElementBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_UIElement?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Input.Pointer>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlInput_Pointer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x81082898, 0xC342, 0x5B9F, 0x9FCC, 0x0927881F30AD)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlInput_Pointer {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlInput_Pointer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlInput_IPointer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlInput_PointerBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlInput_Pointer?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlInput_PointerBinding.toABI(value)
        defer { MicrosoftUIXamlInput_PointerBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlInput_Pointer?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_PointerBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_PointerBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Data.ItemIndexRange>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlData_ItemIndexRange.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x465AF292, 0xD97C, 0x5407, 0x9CBE, 0x6D35D67A030F)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlData_ItemIndexRange {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlData_ItemIndexRange? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlData_IItemIndexRange>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlData_ItemIndexRangeBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlData_ItemIndexRange?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlData_ItemIndexRangeBinding.toABI(value)
        defer { MicrosoftUIXamlData_ItemIndexRangeBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlData_ItemIndexRange?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlData_ItemIndexRangeBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlData_ItemIndexRangeBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.SetterBase>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_SetterBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x01F305AA, 0x8EF8, 0x5237, 0x8767, 0x5ADAA3B4A524)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_SetterBase {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_SetterBase? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_ISetterBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXaml_SetterBaseBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXaml_SetterBase?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXaml_SetterBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_SetterBaseBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_SetterBase?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Object>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_IInspectable.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA6487363, 0xB074, 0x5C60, 0xAB16, 0x866DCE4EE54D)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_IInspectable {
    internal func getAt(_ index: Swift.UInt32) throws -> WindowsRuntime.IInspectable? {
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: WindowsRuntime.IInspectable?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsRuntime.IInspectable?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Documents.TextRange>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlDocuments_TextRange.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x9D4EA607, 0x632B, 0x50F1, 0x9539, 0xDDE98C1EED29)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlDocuments_TextRange {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlDocuments_TextRange {
        var _result: SWRT_MicrosoftUIXamlDocuments_TextRange = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlDocuments_TextRange.fromABI(_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlDocuments_TextRange, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        let value_abi = MicrosoftUIXamlDocuments_TextRange.toABI(value)
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlDocuments_TextRange]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Input.PointerPoint>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIInput_PointerPoint.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x5FBB224B, 0x8430, 0x5086, 0xAB85, 0xE71DFAA84C90)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIInput_PointerPoint {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIInput_PointerPoint? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIInput_IPointerPoint>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIInput_PointerPointBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIInput_PointerPoint?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIInput_PointerPointBinding.toABI(value)
        defer { MicrosoftUIInput_PointerPointBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIInput_PointerPoint?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.ColumnDefinition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlControls_ColumnDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCDFBA81A, 0x54FA, 0x557D, 0xA712, 0x21640F16C534)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlControls_ColumnDefinition {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_ColumnDefinition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IColumnDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlControls_ColumnDefinitionBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlControls_ColumnDefinition?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlControls_ColumnDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_ColumnDefinitionBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_ColumnDefinition?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Controls.RowDefinition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlControls_RowDefinition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xEAA65D85, 0x3FA0, 0x5BC2, 0xB1BE, 0x7BC722253EAE)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlControls_RowDefinition {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_RowDefinition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlControls_IRowDefinition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlControls_RowDefinitionBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlControls_RowDefinition?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlControls_RowDefinitionBinding.toABI(value)
        defer { MicrosoftUIXamlControls_RowDefinitionBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_RowDefinition?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlAutomationPeers_AutomationPeer.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x26501CC8, 0x81AB, 0x54E0, 0x8049, 0x2BBD47C9FF36)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlAutomationPeers_AutomationPeer {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlAutomationPeers_IAutomationPeer>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(value)
        defer { MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlAutomationPeers_AutomationPeer?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.TriggerBase>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_TriggerBase.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x4B947794, 0x8E5C, 0x5FED, 0x87BE, 0x4D2B3729BDD7)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_TriggerBase {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_TriggerBase? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_ITriggerBase>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXaml_TriggerBaseBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXaml_TriggerBase?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXaml_TriggerBaseBinding.toABI(value)
        defer { MicrosoftUIXaml_TriggerBaseBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_TriggerBase?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.ResourceDictionary>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_ResourceDictionary.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x1AFC35B6, 0xD46B, 0x5D29, 0xA9F6, 0xE21E68B05846)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXaml_ResourceDictionary {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_ResourceDictionary? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXaml_IResourceDictionary>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXaml_ResourceDictionaryBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXaml_ResourceDictionary?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXaml_ResourceDictionaryBinding.toABI(value)
        defer { MicrosoftUIXaml_ResourceDictionaryBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_ResourceDictionary?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<String>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_String.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x2F13C006, 0xA03A, 0x5F69, 0xB090, 0x75A43E33423E)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_String {
    internal func getAt(_ index: Swift.UInt32) throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: Swift.String, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [Swift.String]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Media.XamlLight>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlMedia_XamlLight.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xCF393BA1, 0x2605, 0x543E, 0x8B4E, 0xE800EB179492)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlMedia_XamlLight {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlMedia_XamlLight? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMedia_IXamlLight>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlMedia_XamlLightBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlMedia_XamlLight?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlMedia_XamlLightBinding.toABI(value)
        defer { MicrosoftUIXamlMedia_XamlLightBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlMedia_XamlLight?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Documents.TextHighlighter>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlDocuments_TextHighlighter.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x20F348A9, 0x4EF5, 0x5F8F, 0xA3CE, 0xBDC1D83A2FDA)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlDocuments_TextHighlighter {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlDocuments_TextHighlighter? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlDocuments_ITextHighlighter>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlDocuments_TextHighlighterBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlDocuments_TextHighlighter?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlDocuments_TextHighlighterBinding.toABI(value)
        defer { MicrosoftUIXamlDocuments_TextHighlighterBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlDocuments_TextHighlighter?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Media.Animation.Transition>

internal func uuidof(_: SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlMediaAnimation_Transition.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6FE2632E, 0x3C2A, 0x5087, 0xBDBC, 0x8BC51DA7520B)
}

extension COM.COMInterop where ABIStruct == SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIXamlMediaAnimation_Transition {
    internal func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlMediaAnimation_Transition? {
        var _result: Swift.UnsafeMutablePointer<SWRT_MicrosoftUIXamlMediaAnimation_ITransition>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetAt(this, index, &_result))
        return MicrosoftUIXamlMediaAnimation_TransitionBinding.fromABI(consuming: &_result)
    }

    internal func get_Size() throws -> Swift.UInt32 {
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_Size(this, &_result))
        return _result
    }

    internal func indexOf(_ value: MicrosoftUIXamlMediaAnimation_Transition?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
        var value_abi = try MicrosoftUIXamlMediaAnimation_TransitionBinding.toABI(value)
        defer { MicrosoftUIXamlMediaAnimation_TransitionBinding.release(&value_abi) }
        var _result: Swift.Bool = false
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.IndexOf(this, value_abi, &index, &_result))
        return _result
    }

    internal func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlMediaAnimation_Transition?]) throws -> Swift.UInt32 {
        var items_abi = try WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.toABI(items)
        defer { WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.release(&items_abi) }
        var _result: Swift.UInt32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.GetMany(this, startIndex, items_abi.count, items_abi.pointer, &_result))
        return _result
    }
}