// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides a base class used to create XAML lights that use a CompositionLight to apply lighting effects to XAML elements and brushes.
open class MicrosoftUIXamlMedia_XamlLight: MicrosoftUIXaml_DependencyObject, @unchecked Sendable {
    /// Initializes a new instance of the XamlLight class.
    public override init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlMedia_XamlLight.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._ixamlLightFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// An instance of a CompositionLight derived class used to apply lighting effects.
    public var compositionLight: MicrosoftUIComposition_CompositionLight {
        get throws {
            try COM.NullResult.unwrap(_ixamlLightProtected.get_CompositionLight())
        }
    }

    /// Sets the CompositionLight instance used to apply lighting effects.
    /// - Parameter newValue: An instance of a CompositionLight derived class used to apply lighting effects.
    public func compositionLight(_ value: MicrosoftUIComposition_CompositionLight?) throws {
        try _ixamlLightProtected.put_CompositionLight(value)
    }

    /// Gets or sets the CompositionLight instance used to apply lighting effects.
    public var compositionLight_: MicrosoftUIComposition_CompositionLight! {
        get {
            try! NullResult.catch(self.compositionLight)
        }
        set {
            try! self.compositionLight(newValue)
        }
    }

    /// Returns the identifier for the custom XamlLight type.

    /// In most cases you should use a unique identifier to prevent conflicts. For example, you can use the FullName of your custom XamlLight type.

    /// The identifier is used to add and remove Brushes and UIElements as targets for a specific light type.
    /// - Returns: The identifier for the XamlLight.
    open func getId() throws -> Swift.String {
        try _ixamlLightOverrides.getId()
    }

    /// This method is automatically called when the XamlLight is first in use on the screen, or after being previously disconnected then used again.

    /// This provides an opportunity to create resources such as the CompositionLight only when required.

    /// OnDisconnected will be called when the XamlLight is no longer being used to light any UIElements or Brushes.
    /// - Parameter newElement: The UIElement that the light is attached to.
    open func onConnected(_ newElement: MicrosoftUIXaml_UIElement?) throws {
        try _ixamlLightOverrides.onConnected(newElement)
    }

    /// This method is automatically called when the XamlLight is no longer in use anywhere on the screen.

    /// This provides an opportunity to safely dispose of resources such as the CompositionLight when they aren't currently required.

    /// OnConnected will be called again if the XamlLight is later used to light any UIElements or Brushes after being disconnected.
    /// - Parameter oldElement: The UIElement that the light is attached to.
    open func onDisconnected(_ oldElement: MicrosoftUIXaml_UIElement?) throws {
        try _ixamlLightOverrides.onDisconnected(oldElement)
    }

    /// Sets a UIElement as a target of a XamlLight.
    /// - Parameter lightId: The identifier for the XamlLight that should target the UIElement.
    /// - Parameter element: The UIElement that the light should target.
    public static func addTargetElement(_ lightId: Swift.String, _ element: MicrosoftUIXaml_UIElement?) throws {
        try _ixamlLightStatics.addTargetElement(lightId, element)
    }

    /// Stops a UIElement from being a target of a XamlLight.
    /// - Parameter lightId: The identifier for the XamlLight that should no longer target the UIElement.
    /// - Parameter element: The UIElement that the light should no longer target.
    public static func removeTargetElement(_ lightId: Swift.String, _ element: MicrosoftUIXaml_UIElement?) throws {
        try _ixamlLightStatics.removeTargetElement(lightId, element)
    }

    /// Sets a Brush as a target of a XamlLight.
    /// - Parameter lightId: The identifier for the XamlLight that should target the Brush.
    /// - Parameter brush: The Brush that the light should target.
    public static func addTargetBrush(_ lightId: Swift.String, _ brush: MicrosoftUIXamlMedia_Brush?) throws {
        try _ixamlLightStatics.addTargetBrush(lightId, brush)
    }

    /// Stops a Brush from being a target of a XamlLight.
    /// - Parameter lightId: The identifier for the XamlLight that should no longer target the Brush.
    /// - Parameter brush: The Brush that the light should no longer target.
    public static func removeTargetBrush(_ lightId: Swift.String, _ brush: MicrosoftUIXamlMedia_Brush?) throws {
        try _ixamlLightStatics.removeTargetBrush(lightId, brush)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlMedia_IXamlLight>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIXamlLight: COM.COMReference<SWRT_MicrosoftUIXamlMedia_IXamlLight>.Optional = .none

    internal var _ixamlLight: COM.COMInterop<SWRT_MicrosoftUIXamlMedia_IXamlLight> {
        get throws {
            try _lazyIXamlLight.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlMedia_IXamlLight.self)).cast()
            }
        }
    }

    private var _lazyIXamlLightProtected: COM.COMReference<SWRT_MicrosoftUIXamlMedia_IXamlLightProtected>.Optional = .none

    internal var _ixamlLightProtected: COM.COMInterop<SWRT_MicrosoftUIXamlMedia_IXamlLightProtected> {
        get throws {
            try _lazyIXamlLightProtected.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlMedia_IXamlLightProtected.self)).cast()
            }
        }
    }

    private var _lazyIXamlLightOverrides: COM.COMReference<SWRT_MicrosoftUIXamlMedia_IXamlLightOverrides>.Optional = .none

    internal var _ixamlLightOverrides: COM.COMInterop<SWRT_MicrosoftUIXamlMedia_IXamlLightOverrides> {
        get throws {
            try _lazyIXamlLightOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlMedia_IXamlLightOverrides.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Media.XamlLight")
            }
        }
    }

    private static var _lazyIXamlLightFactory: COM.COMReference<SWRT_MicrosoftUIXamlMedia_IXamlLightFactory>.Optional = .none

    internal static var _ixamlLightFactory: COM.COMInterop<SWRT_MicrosoftUIXamlMedia_IXamlLightFactory> {
        get throws {
            try _lazyIXamlLightFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlMedia_IXamlLightFactory.self)).cast()
            }
        }
    }

    private static var _lazyIXamlLightStatics: COM.COMReference<SWRT_MicrosoftUIXamlMedia_IXamlLightStatics>.Optional = .none

    internal static var _ixamlLightStatics: COM.COMInterop<SWRT_MicrosoftUIXamlMedia_IXamlLightStatics> {
        get throws {
            try _lazyIXamlLightStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlMedia_IXamlLightStatics.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _ixamlLightOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_MicrosoftUIXamlMedia_IXamlLightOverrides.self) {
            if !_ixamlLightOverrides_outer.isInitialized {
                _ixamlLightOverrides_outer.initialize(embedder: self,
                    virtualTable: &MicrosoftUIXamlMedia_XamlLightBinding.VirtualTables.ixamlLightOverrides)
            }
            return .init(_ixamlLightOverrides_outer.toCOM())
        }
        return .none
    }
}