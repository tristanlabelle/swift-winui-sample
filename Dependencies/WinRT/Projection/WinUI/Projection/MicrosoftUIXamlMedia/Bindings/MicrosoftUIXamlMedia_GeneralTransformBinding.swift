// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public class MicrosoftUIXamlMedia_GeneralTransformBinding: WindowsRuntime.ComposableClassBinding {
    public typealias SwiftObject = MicrosoftUIXamlMedia_GeneralTransform
    public typealias ABIStruct = SWRT_MicrosoftUIXamlMedia_IGeneralTransform

    public static let typeName = "Microsoft.UI.Xaml.Media.GeneralTransform"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        MicrosoftUIXamlMedia_GeneralTransform(_wrapping: consume reference)
    }

    internal enum VirtualTables {
        internal static var igeneralTransformOverrides = SWRT_MicrosoftUIXamlMedia_IGeneralTransformOverrides_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_InverseCore: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.inverseCore)
                _result.pointee = try MicrosoftUIXamlMedia_GeneralTransformBinding.toABI(_result_swift)
            } },
            TryTransformCore: { this, inPoint, outPoint, _result in _implement(this) { this in
                guard let outPoint else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let inPoint_swift = WindowsFoundation_Point.fromABI(inPoint)
                var outPoint_swift: WindowsFoundation_Point = .init()
                _result.pointee = try this.tryTransformCore(inPoint_swift, &outPoint_swift)
                outPoint.pointee = WindowsFoundation_Point.toABI(outPoint_swift)
            } },
            TransformBoundsCore: { this, rect, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let rect_swift = WindowsFoundation_Rect.fromABI(rect)
                let _result_swift = try this.transformBoundsCore(rect_swift)
                _result.pointee = WindowsFoundation_Rect.toABI(_result_swift)
            } }
        )
    }
}