// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides generalized transformation support for objects. GeneralTransform is a base class that's in the hierarchy of practical transform classes such as TranslateTransform.
open class MicrosoftUIXamlMedia_GeneralTransform: MicrosoftUIXaml_DependencyObject, @unchecked Sendable {
    /// Provides base class initialization behavior for GeneralTransform-derived classes.
    public override init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlMedia_GeneralTransform.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._igeneralTransformFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Uses this transformation object's logic to transform the specified point, and returns the result.
    /// - Parameter point: The point to transform using the transformation logic.
    /// - Returns: The result of transforming point.
    public func transformPoint(_ point: WindowsFoundation_Point) throws -> WindowsFoundation_Point {
        try _igeneralTransform.transformPoint(point)
    }

    /// Attempts to transform the specified point and returns a value that indicates whether the transformation was successful.
    /// - Parameter inPoint: The point to transform.
    /// - Parameter outPoint: The result of transforming inPoint.
    /// - Returns: true if inPoint was transformed; otherwise, false.
    public func tryTransform(_ inPoint: WindowsFoundation_Point, _ outPoint: inout WindowsFoundation_Point) throws -> Swift.Bool {
        try _igeneralTransform.tryTransform(inPoint, &outPoint)
    }

    /// Transforms the specified bounding box and returns an axis-aligned bounding box that is exactly large enough to contain it.
    /// - Parameter rect: The bounding box to transform.
    /// - Returns: The smallest axis-aligned bounding box possible that contains the transformed rect.
    public func transformBounds(_ rect: WindowsFoundation_Rect) throws -> WindowsFoundation_Rect {
        try _igeneralTransform.transformBounds(rect)
    }

    /// An inverse of this instance, if possible; otherwise null.
    public var inverse: MicrosoftUIXamlMedia_GeneralTransform {
        get throws {
            try COM.NullResult.unwrap(_igeneralTransform.get_Inverse())
        }
    }

    /// Gets the inverse transformation of this GeneralTransform, if possible.
    public var inverse_: MicrosoftUIXamlMedia_GeneralTransform! {
        try! NullResult.catch(self.inverse)
    }

    /// Provides the means to override the PointTryTransform behavior in a derived transform class.
    /// - Parameter inPoint: The point to transform.
    /// - Parameter outPoint: The result of transforming inPoint.
    /// - Returns: true if inPoint was transformed; otherwise, false.
    open func tryTransformCore(_ inPoint: WindowsFoundation_Point, _ outPoint: inout WindowsFoundation_Point) throws -> Swift.Bool {
        try _igeneralTransformOverrides.tryTransformCore(inPoint, &outPoint)
    }

    /// Provides the means to override the TransformBounds behavior in a derived transform class.
    /// - Parameter rect: The bounding box to transform.
    /// - Returns: The smallest axis-aligned bounding box possible that contains the transformed rect.
    open func transformBoundsCore(_ rect: WindowsFoundation_Rect) throws -> WindowsFoundation_Rect {
        try _igeneralTransformOverrides.transformBoundsCore(rect)
    }

    /// The value that should be returned as Inverse by the GeneralTransform.
    open var inverseCore: MicrosoftUIXamlMedia_GeneralTransform {
        get throws {
            try COM.NullResult.unwrap(_igeneralTransformOverrides.get_InverseCore())
        }
    }

    /// Implements the behavior for return value of Inverse in a derived or custom GeneralTransform.
    public var inverseCore_: MicrosoftUIXamlMedia_GeneralTransform! {
        try! NullResult.catch(self.inverseCore)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlMedia_IGeneralTransform>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIGeneralTransform: COM.COMReference<SWRT_MicrosoftUIXamlMedia_IGeneralTransform>.Optional = .none

    internal var _igeneralTransform: COM.COMInterop<SWRT_MicrosoftUIXamlMedia_IGeneralTransform> {
        get throws {
            try _lazyIGeneralTransform.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlMedia_IGeneralTransform.self)).cast()
            }
        }
    }

    private var _lazyIGeneralTransformOverrides: COM.COMReference<SWRT_MicrosoftUIXamlMedia_IGeneralTransformOverrides>.Optional = .none

    internal var _igeneralTransformOverrides: COM.COMInterop<SWRT_MicrosoftUIXamlMedia_IGeneralTransformOverrides> {
        get throws {
            try _lazyIGeneralTransformOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlMedia_IGeneralTransformOverrides.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Media.GeneralTransform")
            }
        }
    }

    private static var _lazyIGeneralTransformFactory: COM.COMReference<SWRT_MicrosoftUIXamlMedia_IGeneralTransformFactory>.Optional = .none

    internal static var _igeneralTransformFactory: COM.COMInterop<SWRT_MicrosoftUIXamlMedia_IGeneralTransformFactory> {
        get throws {
            try _lazyIGeneralTransformFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlMedia_IGeneralTransformFactory.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _igeneralTransformOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_MicrosoftUIXamlMedia_IGeneralTransformOverrides.self) {
            if !_igeneralTransformOverrides_outer.isInitialized {
                _igeneralTransformOverrides_outer.initialize(embedder: self,
                    virtualTable: &MicrosoftUIXamlMedia_GeneralTransformBinding.VirtualTables.igeneralTransformOverrides)
            }
            return .init(_igeneralTransformOverrides_outer.toCOM())
        }
        return .none
    }
}