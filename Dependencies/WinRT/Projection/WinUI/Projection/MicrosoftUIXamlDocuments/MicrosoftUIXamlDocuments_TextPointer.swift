// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents a position within a text element.
public final class MicrosoftUIXamlDocuments_TextPointer: WindowsRuntime.WinRTImport<MicrosoftUIXamlDocuments_TextPointerBinding>, @unchecked Sendable {
    /// Returns a bounding box for content that borders the current TextPointer in the specified logical direction.
    /// - Parameter direction: One of the LogicalDirection values that specifies the logical direction in which to find a content bounding box.
    /// - Returns: A Rect that evaluates as Empty if current and valid layout information is unavailable.
    public func getCharacterRect(_ direction: MicrosoftUIXamlDocuments_LogicalDirection) throws -> WindowsFoundation_Rect {
        try _interop.getCharacterRect(direction)
    }

    /// Returns a TextPointer to the position indicated by the specified offset, in symbols, from the beginning of the current TextPointer and in the specified direction.
    /// - Parameter offset: An offset, in symbols, for which to calculate and return the position. If the offset is negative, the returned TextPointer precedes the current TextPointer; otherwise, it follows.
    /// - Parameter direction: One of the LogicalDirection values that specifies the logical direction of the returned TextPointer.
    /// - Returns: A TextPointer to the position indicated by the specified offset and in the direction specified by the direction parameter, or null if the offset extends past the end of the content.
    public func getPositionAtOffset(_ offset: Swift.Int32, _ direction: MicrosoftUIXamlDocuments_LogicalDirection) throws -> MicrosoftUIXamlDocuments_TextPointer {
        try COM.NullResult.unwrap(_interop.getPositionAtOffset(offset, direction))
    }

    /// The LogicalDirection value that is associated with the current position.
    public var logicalDirection: MicrosoftUIXamlDocuments_LogicalDirection {
        get throws {
            try _interop.get_LogicalDirection()
        }
    }

    /// Gets the logical direction associated with the current position, which is used to disambiguate content associated with the current position.
    public var logicalDirection_: MicrosoftUIXamlDocuments_LogicalDirection {
        try! self.logicalDirection
    }

    /// The character index of a TextPointer within its container.
    public var offset: Swift.Int32 {
        get throws {
            try _interop.get_Offset()
        }
    }

    /// Gets the character index of a TextPointer within its container.
    public var offset_: Swift.Int32 {
        try! self.offset
    }

    /// The logical parent that contains the current position. Can return the RichEditBox when at the top of the content stack.
    public var parent: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Parent())
        }
    }

    /// Gets the logical parent that contains the current position.
    public var parent_: MicrosoftUIXaml_DependencyObject! {
        try! NullResult.catch(self.parent)
    }

    /// The UI element that "owns" this TextPointer.
    public var visualParent: MicrosoftUIXaml_FrameworkElement {
        get throws {
            try COM.NullResult.unwrap(_interop.get_VisualParent())
        }
    }

    /// Gets the user interface (UI) element that "owns" this TextPointer.
    public var visualParent_: MicrosoftUIXaml_FrameworkElement! {
        try! NullResult.catch(self.visualParent)
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlDocuments_ITextPointer>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Documents.TextPointer")
            }
        }
    }
}