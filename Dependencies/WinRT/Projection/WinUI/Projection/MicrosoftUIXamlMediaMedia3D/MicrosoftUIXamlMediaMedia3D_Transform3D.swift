// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// The base class for the CompositeTransform3D and PerspectiveTransform3D classes.
open class MicrosoftUIXamlMediaMedia3D_Transform3D: MicrosoftUIXaml_DependencyObject, @unchecked Sendable {
    /// Initializes a new instance of the Transform3D class.
    public override init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlMediaMedia3D_Transform3D.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._itransform3DFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3D>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyITransform3D: COM.COMReference<SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3D>.Optional = .none

    internal var _itransform3D: COM.COMInterop<SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3D> {
        get throws {
            try _lazyITransform3D.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3D.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Media.Media3D.Transform3D")
            }
        }
    }

    private static var _lazyITransform3DFactory: COM.COMReference<SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3DFactory>.Optional = .none

    internal static var _itransform3DFactory: COM.COMInterop<SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3DFactory> {
        get throws {
            try _lazyITransform3DFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlMediaMedia3D_ITransform3DFactory.self)).cast()
            }
        }
    }
}