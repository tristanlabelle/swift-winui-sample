// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.DebugSettings, Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DebugSettings_XamlResourceReferenceFailedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_DebugSettings?, MicrosoftUIXaml_XamlResourceReferenceFailedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_DebugSettings_MicrosoftUIXaml_XamlResourceReferenceFailedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.DebugSettings, Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x0FE29581, 0xFF41, 0x5684, 0xB9D4, 0x1595A771C20E)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x8A25F576, 0x42AF, 0x54E9, 0x89C1, 0x41DCC9B027BC)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DebugSettings_XamlResourceReferenceFailedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_DebugSettings?, _ args: MicrosoftUIXaml_XamlResourceReferenceFailedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_DebugSettings_MicrosoftUIXaml_XamlResourceReferenceFailedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_DebugSettingsBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_XamlResourceReferenceFailedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum ListViewBase_ChoosingGroupHeaderContainerEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.ChoosingGroupHeaderContainerEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x0CD7E2A0, 0xBDA4, 0x5014, 0x9678, 0x229D955EC814)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x85D898B6, 0x6EDC, 0x5E70, 0xA7A8, 0x5A0F6730700D)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ListViewBase_ChoosingGroupHeaderContainerEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlControls_ListViewBase?, _ args: MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlControls_ListViewBaseBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum ListViewBase_ContainerContentChangingEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ContainerContentChangingEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ContainerContentChangingEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xE16946CD, 0x3437, 0x5096, 0xBEDA, 0x8273D2682D7F)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x9A347F3D, 0x0758, 0x551D, 0x99CE, 0xEBC7C49787D0)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ListViewBase_ContainerContentChangingEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlControls_ListViewBase?, _ args: MicrosoftUIXamlControls_ContainerContentChangingEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ContainerContentChangingEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlControls_ListViewBaseBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlControls_ContainerContentChangingEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.DragStartingEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_DragStartingEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_DragStartingEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_DragStartingEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.DragStartingEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xCD7E38CF, 0x102D, 0x5C7A, 0xB874, 0xB3F95F511FB3)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x8DD4D44C, 0x6951, 0x54D5, 0x93FA, 0x0047CBE77071)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_DragStartingEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXaml_DragStartingEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_DragStartingEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_DragStartingEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.XamlRoot, Microsoft.UI.Xaml.XamlRootChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum XamlRoot_XamlRootChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_XamlRoot?, MicrosoftUIXaml_XamlRootChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_XamlRoot_MicrosoftUIXaml_XamlRootChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.XamlRoot, Microsoft.UI.Xaml.XamlRootChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xBEC43F80, 0x4FE0, 0x5177, 0x8B3D, 0xCCC88958D201)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x52D60F09, 0xDF60, 0x5214, 0x81A7, 0xBC9DCED82487)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<XamlRoot_XamlRootChangedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_XamlRoot?, _ args: MicrosoftUIXaml_XamlRootChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_XamlRoot_MicrosoftUIXaml_XamlRootChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_XamlRootBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_XamlRootChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Microsoft.UI.Xaml.DataContextChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum FrameworkElement_DataContextChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, MicrosoftUIXaml_DataContextChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_MicrosoftUIXaml_DataContextChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Microsoft.UI.Xaml.DataContextChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xCF4890BA, 0x0FED, 0x5FC7, 0xBB6C, 0xE2D8D2CDA021)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x3A7E8B83, 0xEB1A, 0x5A2F, 0xA6FC, 0xCA406C911998)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<FrameworkElement_DataContextChangedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_FrameworkElement?, _ args: MicrosoftUIXaml_DataContextChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_MicrosoftUIXaml_DataContextChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_FrameworkElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_DataContextChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_AccessKeyDisplayDismissedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xED45392A, 0x23A4, 0x5D5A, 0xA9BC, 0x1ABBF42DB42C)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x9A8196D7, 0xE9C6, 0x5BE3, 0xB18C, 0x60EB3F9CDB4C)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_AccessKeyDisplayDismissedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_BringIntoViewRequestedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_BringIntoViewRequestedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_BringIntoViewRequestedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x91624899, 0x62F0, 0x52D2, 0xB756, 0x528DE7DDC6B2)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x525B4A64, 0x5F1D, 0x5A35, 0x943F, 0x9B556273B38E)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_BringIntoViewRequestedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXaml_BringIntoViewRequestedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_BringIntoViewRequestedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_BringIntoViewRequestedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum TextElement_AccessKeyDisplayDismissedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlDocuments_TextElement?, MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x9DE5F706, 0x9D58, 0x5F89, 0xB860, 0x74DA6E8873BF)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xEF2009E9, 0x351C, 0x5B02, 0xB162, 0x152FE3C4C4ED)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<TextElement_AccessKeyDisplayDismissedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlDocuments_TextElement?, _ args: MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlDocuments_TextElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_AccessKeyDisplayDismissedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum Object_WindowEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x0922ECF4, 0x9147, 0x5521, 0x8074, 0xB993084910C0)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x4F00C52C, 0xF751, 0x5AAD, 0x98C7, 0x7166AD73ABCB)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Object_WindowEventArgs> {
            public func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_WindowEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsRuntime.IInspectableBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_WindowEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.DragItemsCompletedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum ListViewBase_DragItemsCompletedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_DragItemsCompletedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_DragItemsCompletedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.DragItemsCompletedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xC335E8F9, 0x8112, 0x5513, 0xAE00, 0xE6291EF1752C)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x8E54D853, 0x0063, 0x503A, 0x9340, 0x07199EF49CB1)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ListViewBase_DragItemsCompletedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlControls_ListViewBase?, _ args: MicrosoftUIXamlControls_DragItemsCompletedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_DragItemsCompletedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlControls_ListViewBaseBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlControls_DragItemsCompletedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.RoutedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_RoutedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_RoutedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_RoutedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.RoutedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xA23D1820, 0x5C05, 0x5536, 0x813E, 0x7FDD152F217C)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xABF489F0, 0xC8C0, 0x50C4, 0xA793, 0x56982669F54F)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_RoutedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXaml_RoutedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_RoutedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_RoutedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum TextElement_AccessKeyInvokedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlDocuments_TextElement?, MicrosoftUIXamlInput_AccessKeyInvokedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyInvokedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xE26FE710, 0xE379, 0x59D5, 0x98DB, 0xB4A5E853DA88)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x6FF6611B, 0xA1C3, 0x58E3, 0xAF31, 0x3794787EE84D)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<TextElement_AccessKeyInvokedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlDocuments_TextElement?, _ args: MicrosoftUIXamlInput_AccessKeyInvokedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyInvokedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlDocuments_TextElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_AccessKeyInvokedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum FrameworkElement_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x4A3B22EB, 0x056B, 0x50E1, 0x9F03, 0x343382C1389F)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xAE644A2F, 0x3B41, 0x594D, 0x9AE7, 0x8D2F199BE374)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<FrameworkElement_Object> {
            public func invoke(_ sender: MicrosoftUIXaml_FrameworkElement?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_FrameworkElementBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_AccessKeyDisplayRequestedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x1CBBCBD7, 0x2F13, 0x5881, 0x9514, 0x013F19280EFD)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x62EC2696, 0x5848, 0x5A58, 0xBF2E, 0xB4B39FE61EA6)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_AccessKeyDisplayRequestedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.GettingFocusEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_GettingFocusEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_GettingFocusEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_GettingFocusEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.GettingFocusEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xC985CD6A, 0x6ECA, 0x5FE7, 0xBE5A, 0x7E8E11E3EB86)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x5EDE5B5F, 0x400A, 0x5C67, 0x9FEF, 0xEBD32CBD1844)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_GettingFocusEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_GettingFocusEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_GettingFocusEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_GettingFocusEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_CharacterReceivedRoutedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xFBAE9FE5, 0x6CE1, 0x5313, 0xBF35, 0x7B5BD24BB498)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x60D9ECD5, 0xA964, 0x59E2, 0x9751, 0x11E692B551AC)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_CharacterReceivedRoutedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.LosingFocusEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_LosingFocusEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_LosingFocusEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_LosingFocusEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.LosingFocusEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x75387B77, 0xA6AB, 0x5415, 0x8B53, 0x406B0AA108DF)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x55CBA2F9, 0x2C6F, 0x5EF2, 0xAAA8, 0xFEC99B1E04E2)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_LosingFocusEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_LosingFocusEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_LosingFocusEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_LosingFocusEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowActivatedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum Object_WindowActivatedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowActivatedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowActivatedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowActivatedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x7BBE885F, 0xA74C, 0x5C86, 0xB56D, 0xE203AA0FAFEB)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xBEB7D08B, 0xECD7, 0x5E12, 0xA8D1, 0xC4A36FA900DD)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Object_WindowActivatedEventArgs> {
            public func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_WindowActivatedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowActivatedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsRuntime.IInspectableBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_WindowActivatedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_ProcessKeyboardAcceleratorEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x60DE4478, 0x1A94, 0x50E2, 0xA4BD, 0x947997D1ACDC)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xEBA83195, 0x2CE4, 0x5454, 0x9D5C, 0x1CE2B09FCA35)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_ProcessKeyboardAcceleratorEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_ProcessKeyboardAcceleratorEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowSizeChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum Object_WindowSizeChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowSizeChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowSizeChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowSizeChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x893EFBAF, 0x4B01, 0x51B1, 0x971F, 0xB522E625E06F)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x6FA009F2, 0x53D7, 0x5803, 0xB731, 0x5ED8945A7516)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Object_WindowSizeChangedEventArgs> {
            public func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_WindowSizeChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowSizeChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsRuntime.IInspectableBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_WindowSizeChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBlock, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum TextBlock_IsTextTrimmedChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_TextBlock?, MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_TextBlock_MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBlock, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x45B84668, 0x215A, 0x5BD2, 0xB9CA, 0x3B25F2072064)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x0D7BFD01, 0x35CC, 0x5E20, 0x9361, 0x2A7670CF93EA)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<TextBlock_IsTextTrimmedChangedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlControls_TextBlock?, _ args: MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_TextBlock_MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlControls_TextBlockBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.KeyboardAccelerator, Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum KeyboardAccelerator_KeyboardAcceleratorInvokedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlInput_KeyboardAccelerator?, MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlInput_KeyboardAccelerator_MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Input.KeyboardAccelerator, Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x8DC6DEA8, 0x7C64, 0x5C44, 0x8392, 0xE35CE402ED35)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x81A55638, 0xF69B, 0x5F21, 0x8692, 0x41390C91D600)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<KeyboardAccelerator_KeyboardAcceleratorInvokedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlInput_KeyboardAccelerator?, _ args: MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlInput_KeyboardAccelerator_MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlInput_KeyboardAcceleratorBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum Object_WindowVisibilityChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_WindowVisibilityChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowVisibilityChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x60550AD8, 0xEE76, 0x5CE5, 0x96AC, 0xE707AF6BA8AD)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x66D84EF3, 0xD4DA, 0x533E, 0x9D58, 0x6D42020B6CB1)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Object_WindowVisibilityChangedEventArgs> {
            public func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_WindowVisibilityChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_WindowVisibilityChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsRuntime.IInspectableBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_WindowVisibilityChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum Object_ResourceManagerRequestedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIXaml_ResourceManagerRequestedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_ResourceManagerRequestedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x82DD41C3, 0x6444, 0x568A, 0xAF11, 0xD49D02EC8611)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x914C24B7, 0x6ACC, 0x5EDD, 0xAAF9, 0x8A7C174AFE9E)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Object_ResourceManagerRequestedEventArgs> {
            public func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIXaml_ResourceManagerRequestedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIXaml_ResourceManagerRequestedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsRuntime.IInspectableBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_ResourceManagerRequestedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum FrameworkElement_EffectiveViewportChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_FrameworkElement?, MicrosoftUIXaml_EffectiveViewportChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_MicrosoftUIXaml_EffectiveViewportChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x3881F1DF, 0x35FD, 0x5837, 0x899F, 0x4A885F6EF410)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x5E06B742, 0x7A26, 0x5B17, 0x8059, 0x33E6AAE2A291)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<FrameworkElement_EffectiveViewportChangedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_FrameworkElement?, _ args: MicrosoftUIXaml_EffectiveViewportChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_FrameworkElement_MicrosoftUIXaml_EffectiveViewportChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_FrameworkElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_EffectiveViewportChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_AccessKeyInvokedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_AccessKeyInvokedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyInvokedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x82FFADD2, 0xF739, 0x522B, 0xB928, 0x9CB13120BAFF)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xD7F6255C, 0x181D, 0x58BC, 0xBEEF, 0x0389C9AEDC63)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_AccessKeyInvokedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_AccessKeyInvokedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_AccessKeyInvokedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_AccessKeyInvokedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum ConnectedAnimation_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlMediaAnimation_ConnectedAnimation?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlMediaAnimation_ConnectedAnimation_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xFFE87083, 0xC533, 0x5CD1, 0x865F, 0x9160DABC8103)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xA17D2AFD, 0xF4B9, 0x5AFA, 0x8610, 0xC3F60872CDE8)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ConnectedAnimation_Object> {
            public func invoke(_ sender: MicrosoftUIXamlMediaAnimation_ConnectedAnimation?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlMediaAnimation_ConnectedAnimation_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlMediaAnimation_ConnectedAnimationBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum TextElement_AccessKeyDisplayRequestedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlDocuments_TextElement?, MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Documents.TextElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xF6E240AC, 0x2AAD, 0x5B51, 0xA25F, 0x74D9A533853D)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x7F8BE9CA, 0xC3C3, 0x510A, 0xB65F, 0x54AC42C76476)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<TextElement_AccessKeyDisplayRequestedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlDocuments_TextElement?, _ args: MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlDocuments_TextElement_MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlDocuments_TextElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_AccessKeyDisplayRequestedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_ContextRequestedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_ContextRequestedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_ContextRequestedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x41BA5A69, 0x91F1, 0x57EF, 0x8E10, 0xAC79741A0A92)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x221E90CD, 0x3427, 0x59BD, 0x9101, 0x344CC2D4DBBF)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_ContextRequestedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_ContextRequestedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_ContextRequestedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_ContextRequestedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum ListViewBase_ChoosingItemContainerEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ChoosingItemContainerEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ChoosingItemContainerEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.ListViewBase, Microsoft.UI.Xaml.Controls.ChoosingItemContainerEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xC27D10B3, 0x7611, 0x55FC, 0xA262, 0xB924C121CCCE)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x78F0A57F, 0xB6FC, 0x5DE7, 0xAACD, 0x73130B0A9F59)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ListViewBase_ChoosingItemContainerEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlControls_ListViewBase?, _ args: MicrosoftUIXamlControls_ChoosingItemContainerEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_ListViewBase_MicrosoftUIXamlControls_ChoosingItemContainerEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlControls_ListViewBaseBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlControls_ChoosingItemContainerEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_NoFocusCandidateFoundEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x651EC10A, 0x4F32, 0x5001, 0x8B6D, 0xC069CBCAAD21)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x7E7B1380, 0xE733, 0x5DA4, 0xA976, 0x91CE42B86E88)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_NoFocusCandidateFoundEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control, Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum Control_FocusEngagedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_Control?, MicrosoftUIXamlControls_FocusEngagedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_Control_MicrosoftUIXamlControls_FocusEngagedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control, Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x8705E5F5, 0x2092, 0x5F2E, 0x8E05, 0x15F1F28C3B2B)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xE86187F7, 0x5384, 0x5DB5, 0xAB39, 0x6BEE8E97FFED)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Control_FocusEngagedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlControls_Control?, _ args: MicrosoftUIXamlControls_FocusEngagedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_Control_MicrosoftUIXamlControls_FocusEngagedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlControls_ControlBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlControls_FocusEngagedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.DropCompletedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum UIElement_DropCompletedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXaml_UIElement?, MicrosoftUIXaml_DropCompletedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_DropCompletedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.DropCompletedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x30C9DB38, 0x3F42, 0x5973, 0x97A5, 0xF057E3514DB9)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x04075153, 0x5A8B, 0x5DB9, 0xA98A, 0xA979AB2C8B89)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<UIElement_DropCompletedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXaml_UIElement?, _ args: MicrosoftUIXaml_DropCompletedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXaml_UIElement_MicrosoftUIXaml_DropCompletedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXaml_UIElementBinding.fromABI(sender)
                let args_swift = MicrosoftUIXaml_DropCompletedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase, Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum FlyoutBase_FlyoutBaseClosingEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControlsPrimitives_FlyoutBase?, MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControlsPrimitives_FlyoutBase_MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase, Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x2B68CC70, 0x46FE, 0x5609, 0x9CD8, 0xB242C30F4B99)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xBF883F0A, 0x279A, 0x5CCD, 0x9EE8, 0x8F447F1B4DC8)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<FlyoutBase_FlyoutBaseClosingEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlControlsPrimitives_FlyoutBase?, _ args: MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControlsPrimitives_FlyoutBase_MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlControlsPrimitives_FlyoutBaseBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlControlsPrimitives_FlyoutBaseClosingEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control, Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum Control_FocusDisengagedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_Control?, MicrosoftUIXamlControls_FocusDisengagedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_Control_MicrosoftUIXamlControls_FocusDisengagedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control, Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x41D04A7F, 0x5A63, 0x562C, 0xA96B, 0xB0515FF357AC)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x75ACD167, 0xC5A8, 0x5611, 0xA8F4, 0x036CCFE925D1)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Control_FocusDisengagedEventArgs> {
            public func invoke(_ sender: MicrosoftUIXamlControls_Control?, _ args: MicrosoftUIXamlControls_FocusDisengagedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIXamlControls_Control_MicrosoftUIXamlControls_FocusDisengagedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIXamlControls_ControlBinding.fromABI(sender)
                let args_swift = MicrosoftUIXamlControls_FocusDisengagedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}