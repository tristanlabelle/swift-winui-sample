// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

// MARK: Windows.Foundation.IAsyncOperation<Boolean>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum Boolean: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<Swift.Bool>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_Bool

        public static let typeName = "Windows.Foundation.IAsyncOperation<Boolean>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Boolean>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> Swift.Bool {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<Swift.Bool> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<Swift.Bool>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_Bool_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.Boolean.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.Boolean.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.getResults()
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.DataTransfer.DataPackageOperation>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum DataPackageOperation: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<WindowsApplicationModelDataTransfer_DataPackageOperation>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_WindowsApplicationModelDataTransfer_DataPackageOperation

        public static let typeName = "Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.DataTransfer.DataPackageOperation>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<DataPackageOperation>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> WindowsApplicationModelDataTransfer_DataPackageOperation {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<WindowsApplicationModelDataTransfer_DataPackageOperation> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<WindowsApplicationModelDataTransfer_DataPackageOperation>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_WindowsApplicationModelDataTransfer_DataPackageOperation_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.DataPackageOperation.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.DataPackageOperation.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = WindowsApplicationModelDataTransfer_DataPackageOperation.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Data.LoadMoreItemsResult>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum LoadMoreItemsResult: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<MicrosoftUIXamlData_LoadMoreItemsResult>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_MicrosoftUIXamlData_LoadMoreItemsResult

        public static let typeName = "Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Data.LoadMoreItemsResult>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<LoadMoreItemsResult>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> MicrosoftUIXamlData_LoadMoreItemsResult {
                try _interop.getResults()
            }

            public var completed: WindowsFoundation_AsyncOperationCompletedHandler<MicrosoftUIXamlData_LoadMoreItemsResult> {
                get throws {
                    try COM.NullResult.unwrap(_interop.get_Completed())
                }
            }

            public func completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<MicrosoftUIXamlData_LoadMoreItemsResult>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public var errorCode: COM.HResult {
                get throws {
                    try _iasyncInfo.get_ErrorCode()
                }
            }

            public var id: Swift.UInt32 {
                get throws {
                    try _iasyncInfo.get_Id()
                }
            }

            public var status: WindowsFoundation_AsyncStatus {
                get throws {
                    try _iasyncInfo.get_Status()
                }
            }

            // MARK: Implementation boilerplate

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_MicrosoftUIXamlData_LoadMoreItemsResult_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.LoadMoreItemsResult.fromABI(handler)
                try this.completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.completed)
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.LoadMoreItemsResult.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getResults()
                _result.pointee = MicrosoftUIXamlData_LoadMoreItemsResult.toABI(_result_swift)
            } }
        )
    }
}