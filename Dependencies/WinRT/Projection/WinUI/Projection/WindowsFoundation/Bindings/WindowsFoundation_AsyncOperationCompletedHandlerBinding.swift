// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Boolean>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum Boolean: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<Swift.Bool>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_Bool

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Boolean>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x2A913BB2, 0x3265, 0x5D0F, 0x985B, 0xEFE4F9F508D2)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x9ED6004D, 0x8311, 0x530C, 0xBC41, 0xF74548BEB35D)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Boolean> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<Swift.Bool>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_Bool_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.Boolean.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Microsoft.UI.Xaml.Data.LoadMoreItemsResult>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum LoadMoreItemsResult: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<MicrosoftUIXamlData_LoadMoreItemsResult>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_MicrosoftUIXamlData_LoadMoreItemsResult

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Microsoft.UI.Xaml.Data.LoadMoreItemsResult>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xD3230C19, 0xCFA5, 0x51AC, 0xB3F0, 0xFD887B851B44)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xD16FADF0, 0x69BB, 0x5D92, 0x92C1, 0x23FBFD334255)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<LoadMoreItemsResult> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<MicrosoftUIXamlData_LoadMoreItemsResult>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_MicrosoftUIXamlData_LoadMoreItemsResult_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.LoadMoreItemsResult.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.AsyncOperationCompletedHandler<Windows.ApplicationModel.DataTransfer.DataPackageOperation>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum DataPackageOperation: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<WindowsApplicationModelDataTransfer_DataPackageOperation>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsApplicationModelDataTransfer_DataPackageOperation

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler<Windows.ApplicationModel.DataTransfer.DataPackageOperation>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x80329CD8, 0xB48B, 0x5079, 0xA158, 0x85CBD48E6731)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x506F788C, 0xAE02, 0x52C3, 0x8E18, 0xA7594B45A9F4)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DataPackageOperation> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<WindowsApplicationModelDataTransfer_DataPackageOperation>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_WindowsApplicationModelDataTransfer_DataPackageOperation_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.DataPackageOperation.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}