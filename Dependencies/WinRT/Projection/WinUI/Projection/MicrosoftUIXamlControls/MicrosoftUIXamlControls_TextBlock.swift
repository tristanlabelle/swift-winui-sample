// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides a lightweight control for displaying small amounts of text.
public final class MicrosoftUIXamlControls_TextBlock: MicrosoftUIXaml_FrameworkElement, @unchecked Sendable {
    /// Initializes a new instance of the TextBlock class.
    public override init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXamlControls_TextBlockBinding.self))
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// Selects the entire contents in the TextBlock.
    public func selectAll() throws {
        try _itextBlock.selectAll()
    }

    /// Selects a range of text in the TextBlock.
    /// - Parameter start: An object that represents the start of the range to select.
    /// - Parameter end: An object that represents the end of the range to select.
    public func select(_ start: MicrosoftUIXamlDocuments_TextPointer?, _ end: MicrosoftUIXamlDocuments_TextPointer?) throws {
        try _itextBlock.select(start, end)
    }

    /// Returns a mask that represents the alpha channel of the text as a CompositionBrush.
    /// - Returns: A mask that represents the alpha channel of the text in a TextBlock.
    public func getAlphaMask() throws -> MicrosoftUIComposition_CompositionBrush {
        try COM.NullResult.unwrap(_itextBlock.getAlphaMask())
    }

    /// Copies the selected content to the Windows clipboard.
    public func copySelectionToClipboard() throws {
        try _itextBlock.copySelectionToClipboard()
    }

    /// Occurs when the system processes an interaction that displays a context menu.
    @discardableResult
    public func contextMenuOpening(adding handler: MicrosoftUIXamlControls_ContextMenuOpeningEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBlock.add_ContextMenuOpening(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).contextMenuOpening(removing: token) })
    }

    public func contextMenuOpening(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBlock.remove_ContextMenuOpening(token)
    }

    /// Occurs when the IsTextTrimmed property value has changed.
    @discardableResult
    public func isTextTrimmedChanged(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_TextBlock?, MicrosoftUIXamlControls_IsTextTrimmedChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBlock.add_IsTextTrimmedChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).isTextTrimmedChanged(removing: token) })
    }

    public func isTextTrimmedChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBlock.remove_IsTextTrimmedChanged(token)
    }

    /// Occurs when the text selection has changed.
    @discardableResult
    public func selectionChanged(adding handler: MicrosoftUIXaml_RoutedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _itextBlock.add_SelectionChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).selectionChanged(removing: token) })
    }

    public func selectionChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _itextBlock.remove_SelectionChanged(token)
    }

    /// The amount by which each line of text is offset from the baseline, in device independent pixels. The default is NaN. See Remarks below.
    public var baselineOffset: Swift.Double {
        get throws {
            try _itextBlock.get_BaselineOffset()
        }
    }

    /// Returns a value by which each line of text is offset from a baseline.
    public var baselineOffset_: Swift.Double {
        try! self.baselineOffset
    }

    /// The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public var characterSpacing: Swift.Int32 {
        get throws {
            try _itextBlock.get_CharacterSpacing()
        }
    }

    /// Sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Parameter newValue: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public func characterSpacing(_ value: Swift.Int32) throws {
        try _itextBlock.put_CharacterSpacing(value)
    }

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    public var characterSpacing_: Swift.Int32 {
        get {
            try! self.characterSpacing
        }
        set {
            try! self.characterSpacing(newValue)
        }
    }

    /// A TextPointer object for the end of text content in the TextBlock.
    public var contentEnd: MicrosoftUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_ContentEnd())
        }
    }

    /// Gets a TextPointer object for the end of text content in the TextBlock.
    public var contentEnd_: MicrosoftUIXamlDocuments_TextPointer! {
        try! NullResult.catch(self.contentEnd)
    }

    /// A TextPointer object for the start of text content in the TextBlock.
    public var contentStart: MicrosoftUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_ContentStart())
        }
    }

    /// Gets a TextPointer object for the start of text content in the TextBlock.
    public var contentStart_: MicrosoftUIXamlDocuments_TextPointer! {
        try! NullResult.catch(self.contentStart)
    }

    /// A FontFamily object that specifies the preferred font family, or a primary preferred font family with one or more fallback font families. For information about defaults, see the FontFamily class topic.
    public var fontFamily: MicrosoftUIXamlMedia_FontFamily {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_FontFamily())
        }
    }

    /// Sets the preferred top-level font family for the text content in this element.
    /// - Parameter newValue: A FontFamily object that specifies the preferred font family, or a primary preferred font family with one or more fallback font families. For information about defaults, see the FontFamily class topic.
    public func fontFamily(_ value: MicrosoftUIXamlMedia_FontFamily?) throws {
        try _itextBlock.put_FontFamily(value)
    }

    /// Gets or sets the preferred top-level font family for the text content in this element.
    public var fontFamily_: MicrosoftUIXamlMedia_FontFamily! {
        get {
            try! NullResult.catch(self.fontFamily)
        }
        set {
            try! self.fontFamily(newValue)
        }
    }

    /// A non-negative value that specifies the font size, measured in pixels. The default is 11.
    public var fontSize: Swift.Double {
        get throws {
            try _itextBlock.get_FontSize()
        }
    }

    /// Sets the font size for the text content in this element.
    /// - Parameter newValue: A non-negative value that specifies the font size, measured in pixels. The default is 11.
    public func fontSize(_ value: Swift.Double) throws {
        try _itextBlock.put_FontSize(value)
    }

    /// Gets or sets the font size for the text content in this element.
    public var fontSize_: Swift.Double {
        get {
            try! self.fontSize
        }
        set {
            try! self.fontSize(newValue)
        }
    }

    /// The requested font stretch, as a FontStretch constant. The default is Normal.
    public var fontStretch: WindowsUIText_FontStretch {
        get throws {
            try _itextBlock.get_FontStretch()
        }
    }

    /// Sets the font stretch for the text content in this element.
    /// - Parameter newValue: The requested font stretch, as a FontStretch constant. The default is Normal.
    public func fontStretch(_ value: WindowsUIText_FontStretch) throws {
        try _itextBlock.put_FontStretch(value)
    }

    /// Gets or sets the font stretch for the text content in this element.
    public var fontStretch_: WindowsUIText_FontStretch {
        get {
            try! self.fontStretch
        }
        set {
            try! self.fontStretch(newValue)
        }
    }

    /// The requested font style, which is a FontStyle enumeration value. The default is Normal.
    public var fontStyle: WindowsUIText_FontStyle {
        get throws {
            try _itextBlock.get_FontStyle()
        }
    }

    /// Sets the font style for the content in this element.
    /// - Parameter newValue: The requested font style, which is a FontStyle enumeration value. The default is Normal.
    public func fontStyle(_ value: WindowsUIText_FontStyle) throws {
        try _itextBlock.put_FontStyle(value)
    }

    /// Gets or sets the font style for the content in this element.
    public var fontStyle_: WindowsUIText_FontStyle {
        get {
            try! self.fontStyle
        }
        set {
            try! self.fontStyle(newValue)
        }
    }

    /// The requested font weight, which is a FontWeight that is obtained from one of the FontWeights property values. The default is Normal.
    public var fontWeight: WindowsUIText_FontWeight {
        get throws {
            try _itextBlock.get_FontWeight()
        }
    }

    /// Sets the top-level font weight for the TextBlock.
    /// - Parameter newValue: The requested font weight, which is a FontWeight that is obtained from one of the FontWeights property values. The default is Normal.
    public func fontWeight(_ value: WindowsUIText_FontWeight) throws {
        try _itextBlock.put_FontWeight(value)
    }

    /// Gets or sets the top-level font weight for the TextBlock.
    public var fontWeight_: WindowsUIText_FontWeight {
        get {
            try! self.fontWeight
        }
        set {
            try! self.fontWeight(newValue)
        }
    }

    /// The brush used to apply to the text content. The default is a null brush from a pure code perspective, but the default text styles set this to Black (for Light theme) or White (for Dark theme) for a TextBlock element in UI.
    public var foreground: MicrosoftUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_Foreground())
        }
    }

    /// Sets the Brush to apply to the text contents of the TextBlock.
    /// - Parameter newValue: The brush used to apply to the text content. The default is a null brush from a pure code perspective, but the default text styles set this to Black (for Light theme) or White (for Dark theme) for a TextBlock element in UI.
    public func foreground(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        try _itextBlock.put_Foreground(value)
    }

    /// Gets or sets the Brush to apply to the text contents of the TextBlock.
    public var foreground_: MicrosoftUIXamlMedia_Brush! {
        get {
            try! NullResult.catch(self.foreground)
        }
        set {
            try! self.foreground(newValue)
        }
    }

    /// One of the TextAlignment enumeration values that specifies how text is aligned. The default is Left.
    public var horizontalTextAlignment: MicrosoftUIXaml_TextAlignment {
        get throws {
            try _itextBlock.get_HorizontalTextAlignment()
        }
    }

    /// Sets a value that indicates how text is aligned in the TextBlock.
    /// - Parameter newValue: One of the TextAlignment enumeration values that specifies how text is aligned. The default is Left.
    public func horizontalTextAlignment(_ value: MicrosoftUIXaml_TextAlignment) throws {
        try _itextBlock.put_HorizontalTextAlignment(value)
    }

    /// Gets or sets a value that indicates how text is aligned in the TextBlock.
    public var horizontalTextAlignment_: MicrosoftUIXaml_TextAlignment {
        get {
            try! self.horizontalTextAlignment
        }
        set {
            try! self.horizontalTextAlignment(newValue)
        }
    }

    /// A collection that holds all inline text elements from the TextBlock. The default is an empty collection.
    public var inlines: MicrosoftUIXamlDocuments_InlineCollection {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_Inlines())
        }
    }

    /// Gets the collection of inline text elements within a TextBlock.
    public var inlines_: MicrosoftUIXamlDocuments_InlineCollection! {
        try! NullResult.catch(self.inlines)
    }

    /// true if color glyphs show in color; otherwise, false. The default is true.
    public var isColorFontEnabled: Swift.Bool {
        get throws {
            try _itextBlock.get_IsColorFontEnabled()
        }
    }

    /// Sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    /// - Parameter newValue: true if color glyphs show in color; otherwise, false. The default is true.
    public func isColorFontEnabled(_ value: Swift.Bool) throws {
        try _itextBlock.put_IsColorFontEnabled(value)
    }

    /// Gets or sets a value that determines whether font glyphs that contain color layers, such as Segoe UI Emoji, are rendered in color.
    public var isColorFontEnabled_: Swift.Bool {
        get {
            try! self.isColorFontEnabled
        }
        set {
            try! self.isColorFontEnabled(newValue)
        }
    }

    /// true if automatic text enlargement is enabled; otherwise, false.
    public var isTextScaleFactorEnabled: Swift.Bool {
        get throws {
            try _itextBlock.get_IsTextScaleFactorEnabled()
        }
    }

    /// Sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Parameter newValue: true if automatic text enlargement is enabled; otherwise, false.
    public func isTextScaleFactorEnabled(_ value: Swift.Bool) throws {
        try _itextBlock.put_IsTextScaleFactorEnabled(value)
    }

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    public var isTextScaleFactorEnabled_: Swift.Bool {
        get {
            try! self.isTextScaleFactorEnabled
        }
        set {
            try! self.isTextScaleFactorEnabled(newValue)
        }
    }

    /// true if text selection is enabled; otherwise, false.
    public var isTextSelectionEnabled: Swift.Bool {
        get throws {
            try _itextBlock.get_IsTextSelectionEnabled()
        }
    }

    /// Sets a value that indicates whether text selection is enabled in the TextBlock, either through user action or calling selection-related API.
    /// - Parameter newValue: true if text selection is enabled; otherwise, false.
    public func isTextSelectionEnabled(_ value: Swift.Bool) throws {
        try _itextBlock.put_IsTextSelectionEnabled(value)
    }

    /// Gets or sets a value that indicates whether text selection is enabled in the TextBlock, either through user action or calling selection-related API.
    public var isTextSelectionEnabled_: Swift.Bool {
        get {
            try! self.isTextSelectionEnabled
        }
        set {
            try! self.isTextSelectionEnabled(newValue)
        }
    }

    /// true if text is trimmed; otherwise, false.
    public var isTextTrimmed: Swift.Bool {
        get throws {
            try _itextBlock.get_IsTextTrimmed()
        }
    }

    /// Gets a value that indicates whether the control has trimmed text that overflows the content area.
    public var isTextTrimmed_: Swift.Bool {
        try! self.isTextTrimmed
    }

    /// The height of each line in pixels. A value of 0 indicates that the line height is determined automatically from the current font characteristics. The default is 0.
    public var lineHeight: Swift.Double {
        get throws {
            try _itextBlock.get_LineHeight()
        }
    }

    /// Sets the height of each line of content.
    /// - Parameter newValue: The height of each line in pixels. A value of 0 indicates that the line height is determined automatically from the current font characteristics. The default is 0.
    public func lineHeight(_ value: Swift.Double) throws {
        try _itextBlock.put_LineHeight(value)
    }

    /// Gets or sets the height of each line of content.
    public var lineHeight_: Swift.Double {
        get {
            try! self.lineHeight
        }
        set {
            try! self.lineHeight(newValue)
        }
    }

    /// A value that indicates how a line box is determined for each line of text in the TextBlock. The default is MaxHeight.
    public var lineStackingStrategy: MicrosoftUIXaml_LineStackingStrategy {
        get throws {
            try _itextBlock.get_LineStackingStrategy()
        }
    }

    /// Sets a value that indicates how a line box is determined for each line of text in the TextBlock.
    /// - Parameter newValue: A value that indicates how a line box is determined for each line of text in the TextBlock. The default is MaxHeight.
    public func lineStackingStrategy(_ value: MicrosoftUIXaml_LineStackingStrategy) throws {
        try _itextBlock.put_LineStackingStrategy(value)
    }

    /// Gets or sets a value that indicates how a line box is determined for each line of text in the TextBlock.
    public var lineStackingStrategy_: MicrosoftUIXaml_LineStackingStrategy {
        get {
            try! self.lineStackingStrategy
        }
        set {
            try! self.lineStackingStrategy(newValue)
        }
    }

    /// The maximum number of lines of text shown in the TextBlock. The default is 0, which is a special value that represents "Auto" behavior. The value cannot be negative.
    public var maxLines: Swift.Int32 {
        get throws {
            try _itextBlock.get_MaxLines()
        }
    }

    /// Sets the maximum number of lines of text shown in the TextBlock.
    /// - Parameter newValue: The maximum number of lines of text shown in the TextBlock. The default is 0, which is a special value that represents "Auto" behavior. The value cannot be negative.
    public func maxLines(_ value: Swift.Int32) throws {
        try _itextBlock.put_MaxLines(value)
    }

    /// Gets or sets the maximum number of lines of text shown in the TextBlock.
    public var maxLines_: Swift.Int32 {
        get {
            try! self.maxLines
        }
        set {
            try! self.maxLines(newValue)
        }
    }

    /// A value of the enumeration that indicates how the font is modified to align at different sizes. The default is None.
    public var opticalMarginAlignment: MicrosoftUIXaml_OpticalMarginAlignment {
        get throws {
            try _itextBlock.get_OpticalMarginAlignment()
        }
    }

    /// Get or sets a value that indicates how the font is modified to align with fonts of different sizes.
    /// - Parameter newValue: A value of the enumeration that indicates how the font is modified to align at different sizes. The default is None.
    public func opticalMarginAlignment(_ value: MicrosoftUIXaml_OpticalMarginAlignment) throws {
        try _itextBlock.put_OpticalMarginAlignment(value)
    }

    /// Get or sets a value that indicates how the font is modified to align with fonts of different sizes.
    public var opticalMarginAlignment_: MicrosoftUIXaml_OpticalMarginAlignment {
        get {
            try! self.opticalMarginAlignment
        }
        set {
            try! self.opticalMarginAlignment(newValue)
        }
    }

    /// A Thickness structure that specifies the amount of padding to apply.
    public var padding: MicrosoftUIXaml_Thickness {
        get throws {
            try _itextBlock.get_Padding()
        }
    }

    /// Sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a TextBlock.
    /// - Parameter newValue: A Thickness structure that specifies the amount of padding to apply.
    public func padding(_ value: MicrosoftUIXaml_Thickness) throws {
        try _itextBlock.put_Padding(value)
    }

    /// Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a TextBlock.
    public var padding_: MicrosoftUIXaml_Thickness {
        get {
            try! self.padding
        }
        set {
            try! self.padding(newValue)
        }
    }

    /// A text range of the selected text.
    public var selectedText: Swift.String {
        get throws {
            try _itextBlock.get_SelectedText()
        }
    }

    /// Gets a text range of selected text.
    public var selectedText_: Swift.String {
        try! self.selectedText
    }

    /// An object that represents the selection end, or null if no selection exists.
    public var selectionEnd: MicrosoftUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_SelectionEnd())
        }
    }

    /// Gets the end position of the text selected in the TextBlock.
    public var selectionEnd_: MicrosoftUIXamlDocuments_TextPointer! {
        try! NullResult.catch(self.selectionEnd)
    }

    /// The flyout that is shown when text is selected using touch or pen, or null if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public var selectionFlyout: MicrosoftUIXamlControlsPrimitives_FlyoutBase {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_SelectionFlyout())
        }
    }

    /// Sets the flyout that is shown when text is selected using touch or pen, or null if no flyout is shown.
    /// - Parameter newValue: The flyout that is shown when text is selected using touch or pen, or null if no flyout is shown. The default is an instance of TextCommandBarFlyout.
    public func selectionFlyout(_ value: MicrosoftUIXamlControlsPrimitives_FlyoutBase?) throws {
        try _itextBlock.put_SelectionFlyout(value)
    }

    /// Gets or sets the flyout that is shown when text is selected using touch or pen, or null if no flyout is shown.
    public var selectionFlyout_: MicrosoftUIXamlControlsPrimitives_FlyoutBase! {
        get {
            try! NullResult.catch(self.selectionFlyout)
        }
        set {
            try! self.selectionFlyout(newValue)
        }
    }

    /// The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the system uses base text styles to supply a runtime value for apps (unless you specifically override that style). The practical default is a brush using the theme resource TextSelectionHighlightThemeColor.
    public var selectionHighlightColor: MicrosoftUIXamlMedia_SolidColorBrush {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_SelectionHighlightColor())
        }
    }

    /// Sets the brush used to highlight the selected text.
    /// - Parameter newValue: The brush used to highlight the selected text. The default is a null brush from a pure code perspective, but the system uses base text styles to supply a runtime value for apps (unless you specifically override that style). The practical default is a brush using the theme resource TextSelectionHighlightThemeColor.
    public func selectionHighlightColor(_ value: MicrosoftUIXamlMedia_SolidColorBrush?) throws {
        try _itextBlock.put_SelectionHighlightColor(value)
    }

    /// Gets or sets the brush used to highlight the selected text.
    public var selectionHighlightColor_: MicrosoftUIXamlMedia_SolidColorBrush! {
        get {
            try! NullResult.catch(self.selectionHighlightColor)
        }
        set {
            try! self.selectionHighlightColor(newValue)
        }
    }

    /// An object that represents the selection start, or null if no selection exists.
    public var selectionStart: MicrosoftUIXamlDocuments_TextPointer {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_SelectionStart())
        }
    }

    /// Gets the starting position of the text selected in the TextBlock.
    public var selectionStart_: MicrosoftUIXamlDocuments_TextPointer! {
        try! NullResult.catch(self.selectionStart)
    }

    /// A string that specifies the text contents of this TextBlock. The default is an empty string.
    public var text: Swift.String {
        get throws {
            try _itextBlock.get_Text()
        }
    }

    /// Sets the text contents of a TextBlock.
    /// - Parameter newValue: A string that specifies the text contents of this TextBlock. The default is an empty string.
    public func text(_ value: Swift.String) throws {
        try _itextBlock.put_Text(value)
    }

    /// Gets or sets the text contents of a TextBlock.
    public var text_: Swift.String {
        get {
            try! self.text
        }
        set {
            try! self.text(newValue)
        }
    }

    /// The text alignment. The default is Left.
    public var textAlignment: MicrosoftUIXaml_TextAlignment {
        get throws {
            try _itextBlock.get_TextAlignment()
        }
    }

    /// Sets a value that indicates the horizontal alignment of text content.
    /// - Parameter newValue: The text alignment. The default is Left.
    public func textAlignment(_ value: MicrosoftUIXaml_TextAlignment) throws {
        try _itextBlock.put_TextAlignment(value)
    }

    /// Gets or sets a value that indicates the horizontal alignment of text content.
    public var textAlignment_: MicrosoftUIXaml_TextAlignment {
        get {
            try! self.textAlignment
        }
        set {
            try! self.textAlignment(newValue)
        }
    }

    /// A value of the enumeration. The default is None.
    public var textDecorations: WindowsUIText_TextDecorations {
        get throws {
            try _itextBlock.get_TextDecorations()
        }
    }

    /// Sets a value that indicates what decorations are applied to the text.
    /// - Parameter newValue: A value of the enumeration. The default is None.
    public func textDecorations(_ value: WindowsUIText_TextDecorations) throws {
        try _itextBlock.put_TextDecorations(value)
    }

    /// Gets or sets a value that indicates what decorations are applied to the text.
    public var textDecorations_: WindowsUIText_TextDecorations {
        get {
            try! self.textDecorations
        }
        set {
            try! self.textDecorations(newValue)
        }
    }

    /// The collection of text highlights.
    public var textHighlighters: WindowsFoundationCollections_IVector<MicrosoftUIXamlDocuments_TextHighlighter?> {
        get throws {
            try COM.NullResult.unwrap(_itextBlock.get_TextHighlighters())
        }
    }

    /// Gets the collection of text highlights.
    public var textHighlighters_: WindowsFoundationCollections_IVector<MicrosoftUIXamlDocuments_TextHighlighter?>! {
        try! NullResult.catch(self.textHighlighters)
    }

    /// A value that indicates how the line box height is determined for each line of text in the TextBlock. The default is Full.
    public var textLineBounds: MicrosoftUIXaml_TextLineBounds {
        get throws {
            try _itextBlock.get_TextLineBounds()
        }
    }

    /// Sets a value that indicates how the line box height is determined for each line of text in the TextBlock.
    /// - Parameter newValue: A value that indicates how the line box height is determined for each line of text in the TextBlock. The default is Full.
    public func textLineBounds(_ value: MicrosoftUIXaml_TextLineBounds) throws {
        try _itextBlock.put_TextLineBounds(value)
    }

    /// Gets or sets a value that indicates how the line box height is determined for each line of text in the TextBlock.
    public var textLineBounds_: MicrosoftUIXaml_TextLineBounds {
        get {
            try! self.textLineBounds
        }
        set {
            try! self.textLineBounds(newValue)
        }
    }

    /// A value that indicates how the reading order is determined for the TextBlock. The default is DetectFromContent.
    public var textReadingOrder: MicrosoftUIXaml_TextReadingOrder {
        get throws {
            try _itextBlock.get_TextReadingOrder()
        }
    }

    /// Sets a value that indicates how the reading order is determined for the TextBlock.
    /// - Parameter newValue: A value that indicates how the reading order is determined for the TextBlock. The default is DetectFromContent.
    public func textReadingOrder(_ value: MicrosoftUIXaml_TextReadingOrder) throws {
        try _itextBlock.put_TextReadingOrder(value)
    }

    /// Gets or sets a value that indicates how the reading order is determined for the TextBlock.
    public var textReadingOrder_: MicrosoftUIXaml_TextReadingOrder {
        get {
            try! self.textReadingOrder
        }
        set {
            try! self.textReadingOrder(newValue)
        }
    }

    /// One of the TextTrimming values that specifies the text trimming behavior to employ. The default is None.
    public var textTrimming: MicrosoftUIXaml_TextTrimming {
        get throws {
            try _itextBlock.get_TextTrimming()
        }
    }

    /// Sets the text trimming behavior to employ when content overflows the content area.
    /// - Parameter newValue: One of the TextTrimming values that specifies the text trimming behavior to employ. The default is None.
    public func textTrimming(_ value: MicrosoftUIXaml_TextTrimming) throws {
        try _itextBlock.put_TextTrimming(value)
    }

    /// Gets or sets the text trimming behavior to employ when content overflows the content area.
    public var textTrimming_: MicrosoftUIXaml_TextTrimming {
        get {
            try! self.textTrimming
        }
        set {
            try! self.textTrimming(newValue)
        }
    }

    /// A value that indicates how the TextBlock wraps text. The default is NoWrap.
    public var textWrapping: MicrosoftUIXaml_TextWrapping {
        get throws {
            try _itextBlock.get_TextWrapping()
        }
    }

    /// Sets how the TextBlock wraps text.
    /// - Parameter newValue: A value that indicates how the TextBlock wraps text. The default is NoWrap.
    public func textWrapping(_ value: MicrosoftUIXaml_TextWrapping) throws {
        try _itextBlock.put_TextWrapping(value)
    }

    /// Gets or sets how the TextBlock wraps text.
    public var textWrapping_: MicrosoftUIXaml_TextWrapping {
        get {
            try! self.textWrapping
        }
        set {
            try! self.textWrapping(newValue)
        }
    }

    /// The identifier for the CharacterSpacing dependency property.
    public static var characterSpacingProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_CharacterSpacingProperty())
        }
    }

    /// Identifies the CharacterSpacing dependency property.
    public static var characterSpacingProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.characterSpacingProperty)
    }

    /// The identifier for the FontFamily dependency property.
    public static var fontFamilyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontFamilyProperty())
        }
    }

    /// Identifies the FontFamily  dependency property.
    public static var fontFamilyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontFamilyProperty)
    }

    /// The identifier for the FontSize dependency property.
    public static var fontSizeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontSizeProperty())
        }
    }

    /// Identifies the FontSize  dependency property.
    public static var fontSizeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontSizeProperty)
    }

    /// The identifier for the FontStretch dependency property.
    public static var fontStretchProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontStretchProperty())
        }
    }

    /// Identifies the FontStretch  dependency property.
    public static var fontStretchProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontStretchProperty)
    }

    /// The identifier for the FontStyle dependency property.
    public static var fontStyleProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontStyleProperty())
        }
    }

    /// Identifies the FontStyle  dependency property.
    public static var fontStyleProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontStyleProperty)
    }

    /// The identifier for the FontWeight dependency property.
    public static var fontWeightProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_FontWeightProperty())
        }
    }

    /// Identifies the FontWeight  dependency property.
    public static var fontWeightProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontWeightProperty)
    }

    /// The identifier for the Foreground dependency property.
    public static var foregroundProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_ForegroundProperty())
        }
    }

    /// Identifies the Foreground  dependency property.
    public static var foregroundProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.foregroundProperty)
    }

    /// The identifier for the HorizontalTextAlignment dependency property.
    public static var horizontalTextAlignmentProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_HorizontalTextAlignmentProperty())
        }
    }

    /// Identifies the HorizontalTextAlignment dependency property.
    public static var horizontalTextAlignmentProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.horizontalTextAlignmentProperty)
    }

    /// The identifier for the IsColorFontEnabled dependency property.
    public static var isColorFontEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_IsColorFontEnabledProperty())
        }
    }

    /// Identifies the IsColorFontEnabled dependency property.
    public static var isColorFontEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isColorFontEnabledProperty)
    }

    /// The identifier for the IsTextScaleFactorEnabled dependency property.
    public static var isTextScaleFactorEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_IsTextScaleFactorEnabledProperty())
        }
    }

    /// Identifies the IsTextScaleFactorEnabled  dependency property.
    public static var isTextScaleFactorEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isTextScaleFactorEnabledProperty)
    }

    /// The identifier for the IsTextSelectionEnabled dependency property.
    public static var isTextSelectionEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_IsTextSelectionEnabledProperty())
        }
    }

    /// Identifies the IsTextSelectionEnabled dependency property.
    public static var isTextSelectionEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isTextSelectionEnabledProperty)
    }

    /// The identifier for the IsTextTrimmed dependency property.
    public static var isTextTrimmedProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_IsTextTrimmedProperty())
        }
    }

    /// Identifies the IsTextTrimmed dependency property.
    public static var isTextTrimmedProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isTextTrimmedProperty)
    }

    /// The identifier for the LineHeight dependency property.
    public static var lineHeightProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_LineHeightProperty())
        }
    }

    /// Identifies the LineHeight  dependency property.
    public static var lineHeightProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.lineHeightProperty)
    }

    /// The identifier for the LineStackingStrategy dependency property.
    public static var lineStackingStrategyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_LineStackingStrategyProperty())
        }
    }

    /// Identifies the LineStackingStrategy  dependency property.
    public static var lineStackingStrategyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.lineStackingStrategyProperty)
    }

    /// The identifier for the MaxLines dependency property.
    public static var maxLinesProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_MaxLinesProperty())
        }
    }

    /// Identifies the MaxLines dependency property.
    public static var maxLinesProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.maxLinesProperty)
    }

    /// The identifier for the OpticalMarginAlignment dependency property.
    public static var opticalMarginAlignmentProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_OpticalMarginAlignmentProperty())
        }
    }

    /// Identifies the OpticalMarginAlignment dependency property.
    public static var opticalMarginAlignmentProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.opticalMarginAlignmentProperty)
    }

    /// The identifier for the Padding dependency property.
    public static var paddingProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_PaddingProperty())
        }
    }

    /// Identifies the Padding  dependency property.
    public static var paddingProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.paddingProperty)
    }

    /// The identifier for the SelectedText dependency property.
    public static var selectedTextProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_SelectedTextProperty())
        }
    }

    /// Identifies the SelectedText dependency property.
    public static var selectedTextProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.selectedTextProperty)
    }

    /// The identifier for the SelectionFlyout dependency property.
    public static var selectionFlyoutProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_SelectionFlyoutProperty())
        }
    }

    /// Identifies the SelectionFlyout dependency property.
    public static var selectionFlyoutProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.selectionFlyoutProperty)
    }

    /// The identifier for the SelectionHighlightColor dependency property.
    public static var selectionHighlightColorProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_SelectionHighlightColorProperty())
        }
    }

    /// Identifies the SelectionHighlightColor dependency property.
    public static var selectionHighlightColorProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.selectionHighlightColorProperty)
    }

    /// The identifier for the TextAlignment dependency property.
    public static var textAlignmentProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextAlignmentProperty())
        }
    }

    /// Identifies the TextAlignment  dependency property.
    public static var textAlignmentProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.textAlignmentProperty)
    }

    /// The identifier for the TextDecorations dependency property.
    public static var textDecorationsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextDecorationsProperty())
        }
    }

    /// Identifies the TextDecorations dependency property.
    public static var textDecorationsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.textDecorationsProperty)
    }

    /// The identifier for the TextLineBounds dependency property.
    public static var textLineBoundsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextLineBoundsProperty())
        }
    }

    /// Identifies the TextLineBounds dependency property.
    public static var textLineBoundsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.textLineBoundsProperty)
    }

    /// The identifier of the Text dependency property.
    public static var textProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextProperty())
        }
    }

    /// Identifies the Text  dependency property.
    public static var textProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.textProperty)
    }

    /// The identifier for the TextReadingOrder dependency property.
    public static var textReadingOrderProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextReadingOrderProperty())
        }
    }

    /// Identifies the TextReadingOrder dependency property.
    public static var textReadingOrderProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.textReadingOrderProperty)
    }

    /// The identifier of the TextTrimming dependency property.
    public static var textTrimmingProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextTrimmingProperty())
        }
    }

    /// Identifies the TextTrimming dependency property.
    public static var textTrimmingProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.textTrimmingProperty)
    }

    /// The identifier of the TextWrapping dependency property.
    public static var textWrappingProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_itextBlockStatics.get_TextWrappingProperty())
        }
    }

    /// Identifies the TextWrapping  dependency property.
    public static var textWrappingProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.textWrappingProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_ITextBlock>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyITextBlock: COM.COMReference<SWRT_MicrosoftUIXamlControls_ITextBlock>.Optional = .none

    internal var _itextBlock: COM.COMInterop<SWRT_MicrosoftUIXamlControls_ITextBlock> {
        get throws {
            try _lazyITextBlock.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_ITextBlock.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.TextBlock")
            }
        }
    }

    private static var _lazyITextBlockStatics: COM.COMReference<SWRT_MicrosoftUIXamlControls_ITextBlockStatics>.Optional = .none

    internal static var _itextBlockStatics: COM.COMInterop<SWRT_MicrosoftUIXamlControls_ITextBlockStatics> {
        get throws {
            try _lazyITextBlockStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_ITextBlockStatics.self)).cast()
            }
        }
    }
}