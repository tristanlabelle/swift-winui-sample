// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Defines the element tree that is used as the control template for a control.
public final class MicrosoftUIXamlControls_ControlTemplate: MicrosoftUIXaml_FrameworkTemplate, @unchecked Sendable {
    /// Initializes a new instance of the ControlTemplate class.
    public override init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXamlControls_ControlTemplateBinding.self))
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// The type to which the ControlTemplate is applied. This value is usually set in XAML, not code. See Remarks.
    public var targetType: WindowsUIXamlInterop_TypeName {
        get throws {
            try _icontrolTemplate.get_TargetType()
        }
    }

    /// Sets the type to which the ControlTemplate is applied.
    /// - Parameter newValue: The type to which the ControlTemplate is applied. This value is usually set in XAML, not code. See Remarks.
    public func targetType(_ value: WindowsUIXamlInterop_TypeName) throws {
        try _icontrolTemplate.put_TargetType(value)
    }

    /// Gets or sets the type to which the ControlTemplate is applied.
    public var targetType_: WindowsUIXamlInterop_TypeName {
        get {
            try! self.targetType
        }
        set {
            try! self.targetType(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_IControlTemplate>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIControlTemplate: COM.COMReference<SWRT_MicrosoftUIXamlControls_IControlTemplate>.Optional = .none

    internal var _icontrolTemplate: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IControlTemplate> {
        get throws {
            try _lazyIControlTemplate.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IControlTemplate.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.ControlTemplate")
            }
        }
    }
}