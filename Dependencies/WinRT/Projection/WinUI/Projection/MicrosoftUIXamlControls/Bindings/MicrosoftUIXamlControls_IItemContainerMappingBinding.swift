// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public enum MicrosoftUIXamlControls_IItemContainerMappingBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftUIXamlControls_IItemContainerMapping
    public typealias ABIStruct = SWRT_MicrosoftUIXamlControls_IItemContainerMapping

    public static let typeName = "Microsoft.UI.Xaml.Controls.IItemContainerMapping"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftUIXamlControls_IItemContainerMappingBinding>, MicrosoftUIXamlControls_IItemContainerMappingProtocol {
        public func itemFromContainer(_ container: MicrosoftUIXaml_DependencyObject?) throws -> WindowsRuntime.IInspectable {
            try COM.NullResult.unwrap(_interop.itemFromContainer(container))
        }

        public func containerFromItem(_ item: WindowsRuntime.IInspectable?) throws -> MicrosoftUIXaml_DependencyObject {
            try COM.NullResult.unwrap(_interop.containerFromItem(item))
        }

        public func indexFromContainer(_ container: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Int32 {
            try _interop.indexFromContainer(container)
        }

        public func containerFromIndex(_ index: Swift.Int32) throws -> MicrosoftUIXaml_DependencyObject {
            try COM.NullResult.unwrap(_interop.containerFromIndex(index))
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIXamlControls_IItemContainerMapping_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        ItemFromContainer: { this, container, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let container_swift = MicrosoftUIXaml_DependencyObjectBinding.fromABI(container)
            let _result_swift = try COM.NullResult.`catch`(try this.itemFromContainer(container_swift))
            _result.pointee = try WindowsRuntime.IInspectableBinding.toABI(_result_swift)
        } },
        ContainerFromItem: { this, item, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let item_swift = WindowsRuntime.IInspectableBinding.fromABI(item)
            let _result_swift = try COM.NullResult.`catch`(try this.containerFromItem(item_swift))
            _result.pointee = try MicrosoftUIXaml_DependencyObjectBinding.toABI(_result_swift)
        } },
        IndexFromContainer: { this, container, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let container_swift = MicrosoftUIXaml_DependencyObjectBinding.fromABI(container)
            _result.pointee = try this.indexFromContainer(container_swift)
        } },
        ContainerFromIndex: { this, index, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.containerFromIndex(index))
            _result.pointee = try MicrosoftUIXaml_DependencyObjectBinding.toABI(_result_swift)
        } }
    )
}