// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public class MicrosoftUIXamlControls_ItemsControlBinding: WindowsRuntime.ComposableClassBinding {
    public typealias SwiftObject = MicrosoftUIXamlControls_ItemsControl
    public typealias ABIStruct = SWRT_MicrosoftUIXamlControls_IItemsControl

    public static let typeName = "Microsoft.UI.Xaml.Controls.ItemsControl"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        MicrosoftUIXamlControls_ItemsControl(_wrapping: consume reference)
    }

    internal enum VirtualTables {
        internal static var iitemsControlOverrides = SWRT_MicrosoftUIXamlControls_IItemsControlOverrides_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            IsItemItsOwnContainerOverride: { this, item, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let item_swift = WindowsRuntime.IInspectableBinding.fromABI(item)
                _result.pointee = try this.isItemItsOwnContainerOverride(item_swift)
            } },
            GetContainerForItemOverride: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getContainerForItemOverride())
                _result.pointee = try MicrosoftUIXaml_DependencyObjectBinding.toABI(_result_swift)
            } },
            ClearContainerForItemOverride: { this, element, item in _implement(this) { this in
                let element_swift = MicrosoftUIXaml_DependencyObjectBinding.fromABI(element)
                let item_swift = WindowsRuntime.IInspectableBinding.fromABI(item)
                try this.clearContainerForItemOverride(element_swift, item_swift)
            } },
            PrepareContainerForItemOverride: { this, element, item in _implement(this) { this in
                let element_swift = MicrosoftUIXaml_DependencyObjectBinding.fromABI(element)
                let item_swift = WindowsRuntime.IInspectableBinding.fromABI(item)
                try this.prepareContainerForItemOverride(element_swift, item_swift)
            } },
            OnItemsChanged: { this, e in _implement(this) { this in
                let e_swift = WindowsRuntime.IInspectableBinding.fromABI(e)
                try this.onItemsChanged(e_swift)
            } },
            OnItemContainerStyleChanged: { this, oldItemContainerStyle, newItemContainerStyle in _implement(this) { this in
                let oldItemContainerStyle_swift = MicrosoftUIXaml_StyleBinding.fromABI(oldItemContainerStyle)
                let newItemContainerStyle_swift = MicrosoftUIXaml_StyleBinding.fromABI(newItemContainerStyle)
                try this.onItemContainerStyleChanged(oldItemContainerStyle_swift, newItemContainerStyle_swift)
            } },
            OnItemContainerStyleSelectorChanged: { this, oldItemContainerStyleSelector, newItemContainerStyleSelector in _implement(this) { this in
                let oldItemContainerStyleSelector_swift = MicrosoftUIXamlControls_StyleSelectorBinding.fromABI(oldItemContainerStyleSelector)
                let newItemContainerStyleSelector_swift = MicrosoftUIXamlControls_StyleSelectorBinding.fromABI(newItemContainerStyleSelector)
                try this.onItemContainerStyleSelectorChanged(oldItemContainerStyleSelector_swift, newItemContainerStyleSelector_swift)
            } },
            OnItemTemplateChanged: { this, oldItemTemplate, newItemTemplate in _implement(this) { this in
                let oldItemTemplate_swift = MicrosoftUIXaml_DataTemplateBinding.fromABI(oldItemTemplate)
                let newItemTemplate_swift = MicrosoftUIXaml_DataTemplateBinding.fromABI(newItemTemplate)
                try this.onItemTemplateChanged(oldItemTemplate_swift, newItemTemplate_swift)
            } },
            OnItemTemplateSelectorChanged: { this, oldItemTemplateSelector, newItemTemplateSelector in _implement(this) { this in
                let oldItemTemplateSelector_swift = MicrosoftUIXamlControls_DataTemplateSelectorBinding.fromABI(oldItemTemplateSelector)
                let newItemTemplateSelector_swift = MicrosoftUIXamlControls_DataTemplateSelectorBinding.fromABI(newItemTemplateSelector)
                try this.onItemTemplateSelectorChanged(oldItemTemplateSelector_swift, newItemTemplateSelector_swift)
            } },
            OnGroupStyleSelectorChanged: { this, oldGroupStyleSelector, newGroupStyleSelector in _implement(this) { this in
                let oldGroupStyleSelector_swift = MicrosoftUIXamlControls_GroupStyleSelectorBinding.fromABI(oldGroupStyleSelector)
                let newGroupStyleSelector_swift = MicrosoftUIXamlControls_GroupStyleSelectorBinding.fromABI(newGroupStyleSelector)
                try this.onGroupStyleSelectorChanged(oldGroupStyleSelector_swift, newGroupStyleSelector_swift)
            } }
        )
    }
}