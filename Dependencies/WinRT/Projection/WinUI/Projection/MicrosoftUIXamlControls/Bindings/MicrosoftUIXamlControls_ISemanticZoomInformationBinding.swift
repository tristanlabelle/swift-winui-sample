// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public enum MicrosoftUIXamlControls_ISemanticZoomInformationBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftUIXamlControls_ISemanticZoomInformation
    public typealias ABIStruct = SWRT_MicrosoftUIXamlControls_ISemanticZoomInformation

    public static let typeName = "Microsoft.UI.Xaml.Controls.ISemanticZoomInformation"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftUIXamlControls_ISemanticZoomInformationBinding>, MicrosoftUIXamlControls_ISemanticZoomInformationProtocol {
        public func initializeViewChange() throws {
            try _interop.initializeViewChange()
        }

        public func completeViewChange() throws {
            try _interop.completeViewChange()
        }

        public func makeVisible(_ item: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
            try _interop.makeVisible(item)
        }

        public func startViewChangeFrom(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
            try _interop.startViewChangeFrom(source, destination)
        }

        public func startViewChangeTo(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
            try _interop.startViewChangeTo(source, destination)
        }

        public func completeViewChangeFrom(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
            try _interop.completeViewChangeFrom(source, destination)
        }

        public func completeViewChangeTo(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
            try _interop.completeViewChangeTo(source, destination)
        }

        public var isActiveView: Swift.Bool {
            get throws {
                try _interop.get_IsActiveView()
            }
        }

        public func isActiveView(_ value: Swift.Bool) throws {
            try _interop.put_IsActiveView(value)
        }

        public var isZoomedInView: Swift.Bool {
            get throws {
                try _interop.get_IsZoomedInView()
            }
        }

        public func isZoomedInView(_ value: Swift.Bool) throws {
            try _interop.put_IsZoomedInView(value)
        }

        public var semanticZoomOwner: MicrosoftUIXamlControls_SemanticZoom {
            get throws {
                try COM.NullResult.unwrap(_interop.get_SemanticZoomOwner())
            }
        }

        public func semanticZoomOwner(_ value: MicrosoftUIXamlControls_SemanticZoom?) throws {
            try _interop.put_SemanticZoomOwner(value)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIXamlControls_ISemanticZoomInformation_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_SemanticZoomOwner: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.semanticZoomOwner)
            _result.pointee = try MicrosoftUIXamlControls_SemanticZoomBinding.toABI(_result_swift)
        } },
        put_SemanticZoomOwner: { this, value in _implement(this) { this in
            let value_swift = MicrosoftUIXamlControls_SemanticZoomBinding.fromABI(value)
            try this.semanticZoomOwner(value_swift)
        } },
        get_IsActiveView: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.isActiveView
        } },
        put_IsActiveView: { this, value in _implement(this) { this in
            try this.isActiveView(value)
        } },
        get_IsZoomedInView: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.isZoomedInView
        } },
        put_IsZoomedInView: { this, value in _implement(this) { this in
            try this.isZoomedInView(value)
        } },
        InitializeViewChange: { this in _implement(this) { this in
            try this.initializeViewChange()
        } },
        CompleteViewChange: { this in _implement(this) { this in
            try this.completeViewChange()
        } },
        MakeVisible: { this, item in _implement(this) { this in
            let item_swift = MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(item)
            try this.makeVisible(item_swift)
        } },
        StartViewChangeFrom: { this, source, destination in _implement(this) { this in
            let source_swift = MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(source)
            let destination_swift = MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(destination)
            try this.startViewChangeFrom(source_swift, destination_swift)
        } },
        StartViewChangeTo: { this, source, destination in _implement(this) { this in
            let source_swift = MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(source)
            let destination_swift = MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(destination)
            try this.startViewChangeTo(source_swift, destination_swift)
        } },
        CompleteViewChangeFrom: { this, source, destination in _implement(this) { this in
            let source_swift = MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(source)
            let destination_swift = MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(destination)
            try this.completeViewChangeFrom(source_swift, destination_swift)
        } },
        CompleteViewChangeTo: { this, source, destination in _implement(this) { this in
            let source_swift = MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(source)
            let destination_swift = MicrosoftUIXamlControls_SemanticZoomLocationBinding.fromABI(destination)
            try this.completeViewChangeTo(source_swift, destination_swift)
        } }
    )
}