// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public class MicrosoftUIXamlControls_ContentControlBinding: WindowsRuntime.ComposableClassBinding {
    public typealias SwiftObject = MicrosoftUIXamlControls_ContentControl
    public typealias ABIStruct = SWRT_MicrosoftUIXamlControls_IContentControl

    public static let typeName = "Microsoft.UI.Xaml.Controls.ContentControl"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        MicrosoftUIXamlControls_ContentControl(_wrapping: consume reference)
    }

    internal enum VirtualTables {
        internal static var icontentControlOverrides = SWRT_MicrosoftUIXamlControls_IContentControlOverrides_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            OnContentChanged: { this, oldContent, newContent in _implement(this) { this in
                let oldContent_swift = WindowsRuntime.IInspectableBinding.fromABI(oldContent)
                let newContent_swift = WindowsRuntime.IInspectableBinding.fromABI(newContent)
                try this.onContentChanged(oldContent_swift, newContent_swift)
            } },
            OnContentTemplateChanged: { this, oldContentTemplate, newContentTemplate in _implement(this) { this in
                let oldContentTemplate_swift = MicrosoftUIXaml_DataTemplateBinding.fromABI(oldContentTemplate)
                let newContentTemplate_swift = MicrosoftUIXaml_DataTemplateBinding.fromABI(newContentTemplate)
                try this.onContentTemplateChanged(oldContentTemplate_swift, newContentTemplate_swift)
            } },
            OnContentTemplateSelectorChanged: { this, oldContentTemplateSelector, newContentTemplateSelector in _implement(this) { this in
                let oldContentTemplateSelector_swift = MicrosoftUIXamlControls_DataTemplateSelectorBinding.fromABI(oldContentTemplateSelector)
                let newContentTemplateSelector_swift = MicrosoftUIXamlControls_DataTemplateSelectorBinding.fromABI(newContentTemplateSelector)
                try this.onContentTemplateSelectorChanged(oldContentTemplateSelector_swift, newContentTemplateSelector_swift)
            } }
        )
    }
}