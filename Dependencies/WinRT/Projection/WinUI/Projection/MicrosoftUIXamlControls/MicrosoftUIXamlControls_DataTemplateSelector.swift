// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Enables custom template selection logic at the application level.
open class MicrosoftUIXamlControls_DataTemplateSelector: WindowsRuntime.ComposableClass, MicrosoftUIXaml_IElementFactoryProtocol, @unchecked Sendable {
    /// Initializes a new instance of the DataTemplateSelector class.
    public init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlControls_DataTemplateSelector.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._idataTemplateSelectorFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Returns a specific DataTemplate for a given item and container.
    /// - Parameter item: The item to return a template for.
    /// - Parameter container: The parent container for the templated item.
    /// - Returns: The template to use for the given item and/or container.
    public func selectTemplate(_ item: WindowsRuntime.IInspectable?, _ container: MicrosoftUIXaml_DependencyObject?) throws -> MicrosoftUIXaml_DataTemplate {
        try COM.NullResult.unwrap(_idataTemplateSelector.selectTemplate(item, container))
    }

    /// Returns a specific DataTemplate for a given item.
    /// - Parameter item: The item to return a template for.
    /// - Returns: The template to use for the given item and/or container.
    public func selectTemplate(_ item: WindowsRuntime.IInspectable?) throws -> MicrosoftUIXaml_DataTemplate {
        try COM.NullResult.unwrap(_idataTemplateSelector.selectTemplateForItem(item))
    }

    /// When implemented by a derived class, returns a specific DataTemplate for a given item or container.
    /// - Parameter item: The item to return a template for.
    /// - Parameter container: The parent container for the templated item.
    /// - Returns: The template to use for the given item and/or container.
    open func selectTemplateCore(_ item: WindowsRuntime.IInspectable?, _ container: MicrosoftUIXaml_DependencyObject?) throws -> MicrosoftUIXaml_DataTemplate {
        try COM.NullResult.unwrap(_idataTemplateSelectorOverrides.selectTemplateCore(item, container))
    }

    /// When implemented by a derived class, returns a specific DataTemplate for a given item or container.
    /// - Parameter item: The item to return a template for.
    /// - Returns: The template to use for the given item and/or container.
    open func selectTemplateCore(_ item: WindowsRuntime.IInspectable?) throws -> MicrosoftUIXaml_DataTemplate {
        try COM.NullResult.unwrap(_idataTemplateSelectorOverrides.selectTemplateForItemCore(item))
    }

    // MARK: Microsoft.UI.Xaml.IElementFactory members

    /// Creates or retrieves an existing instance of the UIElement object declared in the DataTemplate returned by SelectTemplate.
    /// - Parameter args: An instance of ElementFactoryGetArgs.
    /// - Returns: An instance of the root UIElement declared in the selected DataTemplate or, null if the root of the selected DataTemplate is not a UIElement.
    public func getElement(_ args: MicrosoftUIXaml_ElementFactoryGetArgs?) throws -> MicrosoftUIXaml_UIElement {
        try COM.NullResult.unwrap(_ielementFactory.getElement(args))
    }

    /// Recycles a UIElement object that was created using GetElement.
    /// - Parameter args: An instance of ElementFactoryRecycleArgs.
    public func recycleElement(_ args: MicrosoftUIXaml_ElementFactoryRecycleArgs?) throws {
        try _ielementFactory.recycleElement(args)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_IDataTemplateSelector>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIDataTemplateSelector: COM.COMReference<SWRT_MicrosoftUIXamlControls_IDataTemplateSelector>.Optional = .none

    internal var _idataTemplateSelector: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IDataTemplateSelector> {
        get throws {
            try _lazyIDataTemplateSelector.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControls_IDataTemplateSelector.self)).cast()
            }
        }
    }

    private var _lazyIDataTemplateSelectorOverrides: COM.COMReference<SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorOverrides>.Optional = .none

    internal var _idataTemplateSelectorOverrides: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorOverrides> {
        get throws {
            try _lazyIDataTemplateSelectorOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorOverrides.self)).cast()
            }
        }
    }

    private var _lazyIElementFactory: COM.COMReference<SWRT_MicrosoftUIXaml_IElementFactory>.Optional = .none

    internal var _ielementFactory: COM.COMInterop<SWRT_MicrosoftUIXaml_IElementFactory> {
        get throws {
            try _lazyIElementFactory.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXaml_IElementFactory.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.DataTemplateSelector")
            }
        }
    }

    private static var _lazyIDataTemplateSelectorFactory: COM.COMReference<SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorFactory>.Optional = .none

    internal static var _idataTemplateSelectorFactory: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorFactory> {
        get throws {
            try _lazyIDataTemplateSelectorFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorFactory.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _idataTemplateSelectorOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_MicrosoftUIXamlControls_IDataTemplateSelectorOverrides.self) {
            if !_idataTemplateSelectorOverrides_outer.isInitialized {
                _idataTemplateSelectorOverrides_outer.initialize(embedder: self,
                    virtualTable: &MicrosoftUIXamlControls_DataTemplateSelectorBinding.VirtualTables.idataTemplateSelectorOverrides)
            }
            return .init(_idataTemplateSelectorOverrides_outer.toCOM())
        }
        return .none
    }
}