// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents the base class for UI elements that use a ControlTemplate to define their appearance. Parent class for ContentControl, UserControl, ItemsControl and several practical controls.
open class MicrosoftUIXamlControls_Control: MicrosoftUIXaml_FrameworkElement, @unchecked Sendable {
    /// Provides base class initialization behavior for Control derived classes.
    public override init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlControls_Control.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._icontrolFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Releases the control from focus constraints that support game controller interactions (where IsFocusEngaged is true).
    public func removeFocusEngagement() throws {
        try _icontrol.removeFocusEngagement()
    }

    /// Loads the relevant control template so that its parts can be referenced.
    /// - Returns: A value that indicates whether the visual tree was rebuilt by this call. True if the tree was rebuilt; false if the previous visual tree was retained.
    public func applyTemplate() throws -> Swift.Bool {
        try _icontrol.applyTemplate()
    }

    /// Occurs as focus is released from the control when the user presses the B/Back button on a game controller.
    @discardableResult
    public func focusDisengaged(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_Control?, MicrosoftUIXamlControls_FocusDisengagedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontrol.add_FocusDisengaged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).focusDisengaged(removing: token) })
    }

    public func focusDisengaged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontrol.remove_FocusDisengaged(token)
    }

    /// Occurs as focus is constrained to the control when the user presses the A/Select button on a game controller.
    @discardableResult
    public func focusEngaged(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_Control?, MicrosoftUIXamlControls_FocusEngagedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontrol.add_FocusEngaged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).focusEngaged(removing: token) })
    }

    public func focusEngaged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontrol.remove_FocusEngaged(token)
    }

    /// Occurs when the IsEnabled property changes.
    @discardableResult
    public func isEnabledChanged(adding handler: MicrosoftUIXaml_DependencyPropertyChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _icontrol.add_IsEnabledChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).isEnabledChanged(removing: token) })
    }

    public func isEnabledChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _icontrol.remove_IsEnabledChanged(token)
    }

    /// The brush that provides the background of the control. The default is null, (a null brush) which is evaluated as Transparent for rendering.
    public var background: MicrosoftUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_Background())
        }
    }

    /// Sets a brush that provides the background of the control.
    /// - Parameter newValue: The brush that provides the background of the control. The default is null, (a null brush) which is evaluated as Transparent for rendering.
    public func background(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        try _icontrol.put_Background(value)
    }

    /// Gets or sets a brush that provides the background of the control.
    public var background_: MicrosoftUIXamlMedia_Brush! {
        get {
            try! NullResult.catch(self.background)
        }
        set {
            try! self.background(newValue)
        }
    }

    /// A value of the enumeration that indicates how far the background extends. The default is InnerBorderEdge.
    public var backgroundSizing: MicrosoftUIXamlControls_BackgroundSizing {
        get throws {
            try _icontrol.get_BackgroundSizing()
        }
    }

    /// Sets a value that indicates how far the background extends in relation to this element's border.
    /// - Parameter newValue: A value of the enumeration that indicates how far the background extends. The default is InnerBorderEdge.
    public func backgroundSizing(_ value: MicrosoftUIXamlControls_BackgroundSizing) throws {
        try _icontrol.put_BackgroundSizing(value)
    }

    /// Gets or sets a value that indicates how far the background extends in relation to this element's border.
    public var backgroundSizing_: MicrosoftUIXamlControls_BackgroundSizing {
        get {
            try! self.backgroundSizing
        }
        set {
            try! self.backgroundSizing(newValue)
        }
    }

    /// The brush that is used to fill the control's border. The default is null, (a null brush) which is evaluated as Transparent for rendering.
    public var borderBrush: MicrosoftUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_BorderBrush())
        }
    }

    /// Sets a brush that describes the border fill of a control.
    /// - Parameter newValue: The brush that is used to fill the control's border. The default is null, (a null brush) which is evaluated as Transparent for rendering.
    public func borderBrush(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        try _icontrol.put_BorderBrush(value)
    }

    /// Gets or sets a brush that describes the border fill of a control.
    public var borderBrush_: MicrosoftUIXamlMedia_Brush! {
        get {
            try! NullResult.catch(self.borderBrush)
        }
        set {
            try! self.borderBrush(newValue)
        }
    }

    /// The border thickness of a control, as a Thickness value.
    public var borderThickness: MicrosoftUIXaml_Thickness {
        get throws {
            try _icontrol.get_BorderThickness()
        }
    }

    /// Sets the border thickness of a control.
    /// - Parameter newValue: The border thickness of a control, as a Thickness value.
    public func borderThickness(_ value: MicrosoftUIXaml_Thickness) throws {
        try _icontrol.put_BorderThickness(value)
    }

    /// Gets or sets the border thickness of a control.
    public var borderThickness_: MicrosoftUIXaml_Thickness {
        get {
            try! self.borderThickness
        }
        set {
            try! self.borderThickness(newValue)
        }
    }

    /// The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public var characterSpacing: Swift.Int32 {
        get throws {
            try _icontrol.get_CharacterSpacing()
        }
    }

    /// Sets the uniform spacing between characters, in units of 1/1000 of an em.
    /// - Parameter newValue: The uniform spacing between characters, in units of 1/1000 of an em. The default is 0. Positive values increase tracking and loosen character spacing. Negative values decrease tracking and tighten the character spacing.
    public func characterSpacing(_ value: Swift.Int32) throws {
        try _icontrol.put_CharacterSpacing(value)
    }

    /// Gets or sets the uniform spacing between characters, in units of 1/1000 of an em.
    public var characterSpacing_: Swift.Int32 {
        get {
            try! self.characterSpacing
        }
        set {
            try! self.characterSpacing(newValue)
        }
    }

    /// The degree to which the corners are rounded, expressed as values of the CornerRadius structure.
    public var cornerRadius: MicrosoftUIXaml_CornerRadius {
        get throws {
            try _icontrol.get_CornerRadius()
        }
    }

    /// Sets the radius for the corners of the control's border.
    /// - Parameter newValue: The degree to which the corners are rounded, expressed as values of the CornerRadius structure.
    public func cornerRadius(_ value: MicrosoftUIXaml_CornerRadius) throws {
        try _icontrol.put_CornerRadius(value)
    }

    /// Gets or sets the radius for the corners of the control's border.
    public var cornerRadius_: MicrosoftUIXaml_CornerRadius {
        get {
            try! self.cornerRadius
        }
        set {
            try! self.cornerRadius(newValue)
        }
    }

    /// The path to the resource file that contains the default style for the control.
    public var defaultStyleResourceUri: WindowsFoundation_Uri {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_DefaultStyleResourceUri())
        }
    }

    /// Sets the path to the resource file that contains the default style for the control.
    /// - Parameter newValue: The path to the resource file that contains the default style for the control.
    public func defaultStyleResourceUri(_ value: WindowsFoundation_Uri?) throws {
        try _icontrol.put_DefaultStyleResourceUri(value)
    }

    /// Gets or sets the path to the resource file that contains the default style for the control.
    public var defaultStyleResourceUri_: WindowsFoundation_Uri! {
        get {
            try! NullResult.catch(self.defaultStyleResourceUri)
        }
        set {
            try! self.defaultStyleResourceUri(newValue)
        }
    }

    /// A value of the enumeration that specifies a control's preference for whether sounds are played. The default is Auto.
    public var elementSoundMode: MicrosoftUIXaml_ElementSoundMode {
        get throws {
            try _icontrol.get_ElementSoundMode()
        }
    }

    /// Get or sets a value that specifies a control's preference for whether sounds are played.
    /// - Parameter newValue: A value of the enumeration that specifies a control's preference for whether sounds are played. The default is Auto.
    public func elementSoundMode(_ value: MicrosoftUIXaml_ElementSoundMode) throws {
        try _icontrol.put_ElementSoundMode(value)
    }

    /// Get or sets a value that specifies a control's preference for whether sounds are played.
    public var elementSoundMode_: MicrosoftUIXaml_ElementSoundMode {
        get {
            try! self.elementSoundMode
        }
        set {
            try! self.elementSoundMode(newValue)
        }
    }

    /// The font used to display text in the control.
    public var fontFamily: MicrosoftUIXamlMedia_FontFamily {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_FontFamily())
        }
    }

    /// Sets the font used to display text in the control.
    /// - Parameter newValue: The font used to display text in the control.
    public func fontFamily(_ value: MicrosoftUIXamlMedia_FontFamily?) throws {
        try _icontrol.put_FontFamily(value)
    }

    /// Gets or sets the font used to display text in the control.
    public var fontFamily_: MicrosoftUIXamlMedia_FontFamily! {
        get {
            try! NullResult.catch(self.fontFamily)
        }
        set {
            try! self.fontFamily(newValue)
        }
    }

    /// The size of the text in the Control, in pixels. The default is 11.
    public var fontSize: Swift.Double {
        get throws {
            try _icontrol.get_FontSize()
        }
    }

    /// Sets the size of the text in this control.
    /// - Parameter newValue: The size of the text in the Control, in pixels. The default is 11.
    public func fontSize(_ value: Swift.Double) throws {
        try _icontrol.put_FontSize(value)
    }

    /// Gets or sets the size of the text in this control.
    public var fontSize_: Swift.Double {
        get {
            try! self.fontSize
        }
        set {
            try! self.fontSize(newValue)
        }
    }

    /// One of the values that specifies the degree to which a font is condensed or expanded on the screen. The default is Normal.
    public var fontStretch: WindowsUIText_FontStretch {
        get throws {
            try _icontrol.get_FontStretch()
        }
    }

    /// Sets the degree to which a font is condensed or expanded on the screen.
    /// - Parameter newValue: One of the values that specifies the degree to which a font is condensed or expanded on the screen. The default is Normal.
    public func fontStretch(_ value: WindowsUIText_FontStretch) throws {
        try _icontrol.put_FontStretch(value)
    }

    /// Gets or sets the degree to which a font is condensed or expanded on the screen.
    public var fontStretch_: WindowsUIText_FontStretch {
        get {
            try! self.fontStretch
        }
        set {
            try! self.fontStretch(newValue)
        }
    }

    /// One of the values that specifies the style in which the text is rendered. The default is Normal.
    public var fontStyle: WindowsUIText_FontStyle {
        get throws {
            try _icontrol.get_FontStyle()
        }
    }

    /// Sets the style in which the text is rendered.
    /// - Parameter newValue: One of the values that specifies the style in which the text is rendered. The default is Normal.
    public func fontStyle(_ value: WindowsUIText_FontStyle) throws {
        try _icontrol.put_FontStyle(value)
    }

    /// Gets or sets the style in which the text is rendered.
    public var fontStyle_: WindowsUIText_FontStyle {
        get {
            try! self.fontStyle
        }
        set {
            try! self.fontStyle(newValue)
        }
    }

    /// One of the values that specifies the thickness of the specified font. The default is Normal.
    public var fontWeight: WindowsUIText_FontWeight {
        get throws {
            try _icontrol.get_FontWeight()
        }
    }

    /// Sets the thickness of the specified font.
    /// - Parameter newValue: One of the values that specifies the thickness of the specified font. The default is Normal.
    public func fontWeight(_ value: WindowsUIText_FontWeight) throws {
        try _icontrol.put_FontWeight(value)
    }

    /// Gets or sets the thickness of the specified font.
    public var fontWeight_: WindowsUIText_FontWeight {
        get {
            try! self.fontWeight
        }
        set {
            try! self.fontWeight(newValue)
        }
    }

    /// The brush that paints the foreground of the control. The default value is a SolidColorBrush with color of Black.
    public var foreground: MicrosoftUIXamlMedia_Brush {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_Foreground())
        }
    }

    /// Sets a brush that describes the foreground color.
    /// - Parameter newValue: The brush that paints the foreground of the control. The default value is a SolidColorBrush with color of Black.
    public func foreground(_ value: MicrosoftUIXamlMedia_Brush?) throws {
        try _icontrol.put_Foreground(value)
    }

    /// Gets or sets a brush that describes the foreground color.
    public var foreground_: MicrosoftUIXamlMedia_Brush! {
        get {
            try! NullResult.catch(self.foreground)
        }
        set {
            try! self.foreground(newValue)
        }
    }

    /// One of the HorizontalAlignment values. The default is Left.
    public var horizontalContentAlignment: MicrosoftUIXaml_HorizontalAlignment {
        get throws {
            try _icontrol.get_HorizontalContentAlignment()
        }
    }

    /// Sets the horizontal alignment of the control's content.
    /// - Parameter newValue: One of the HorizontalAlignment values. The default is Left.
    public func horizontalContentAlignment(_ value: MicrosoftUIXaml_HorizontalAlignment) throws {
        try _icontrol.put_HorizontalContentAlignment(value)
    }

    /// Gets or sets the horizontal alignment of the control's content.
    public var horizontalContentAlignment_: MicrosoftUIXaml_HorizontalAlignment {
        get {
            try! self.horizontalContentAlignment
        }
        set {
            try! self.horizontalContentAlignment(newValue)
        }
    }

    /// true if the user can interact with the control; otherwise, false.
    public var isEnabled: Swift.Bool {
        get throws {
            try _icontrol.get_IsEnabled()
        }
    }

    /// Sets a value indicating whether the user can interact with the control.
    /// - Parameter newValue: true if the user can interact with the control; otherwise, false.
    public func isEnabled(_ value: Swift.Bool) throws {
        try _icontrol.put_IsEnabled(value)
    }

    /// Gets or sets a value indicating whether the user can interact with the control.
    public var isEnabled_: Swift.Bool {
        get {
            try! self.isEnabled
        }
        set {
            try! self.isEnabled(newValue)
        }
    }

    /// true if focus is constrained within the control boundaries; otherwise, false.
    public var isFocusEngaged: Swift.Bool {
        get throws {
            try _icontrol.get_IsFocusEngaged()
        }
    }

    /// Get or sets a value that indicates whether focus is constrained to the control when the user presses the A/Select button on a game controller.
    /// - Parameter newValue: true if focus is constrained within the control boundaries; otherwise, false.
    public func isFocusEngaged(_ value: Swift.Bool) throws {
        try _icontrol.put_IsFocusEngaged(value)
    }

    /// Get or sets a value that indicates whether focus is constrained to the control when the user presses the A/Select button on a game controller.
    public var isFocusEngaged_: Swift.Bool {
        get {
            try! self.isFocusEngaged
        }
        set {
            try! self.isFocusEngaged(newValue)
        }
    }

    /// true if focus can be constrained within the control boundaries; otherwise, false.
    public var isFocusEngagementEnabled: Swift.Bool {
        get throws {
            try _icontrol.get_IsFocusEngagementEnabled()
        }
    }

    /// Get or sets a value that indicates whether focus can be constrained to the control when the user presses the A/Select button on a game controller.
    /// - Parameter newValue: true if focus can be constrained within the control boundaries; otherwise, false.
    public func isFocusEngagementEnabled(_ value: Swift.Bool) throws {
        try _icontrol.put_IsFocusEngagementEnabled(value)
    }

    /// Get or sets a value that indicates whether focus can be constrained to the control when the user presses the A/Select button on a game controller.
    public var isFocusEngagementEnabled_: Swift.Bool {
        get {
            try! self.isFocusEngagementEnabled
        }
        set {
            try! self.isFocusEngagementEnabled(newValue)
        }
    }

    /// true if automatic text enlargement is enabled; otherwise, false.
    public var isTextScaleFactorEnabled: Swift.Bool {
        get throws {
            try _icontrol.get_IsTextScaleFactorEnabled()
        }
    }

    /// Sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    /// - Parameter newValue: true if automatic text enlargement is enabled; otherwise, false.
    public func isTextScaleFactorEnabled(_ value: Swift.Bool) throws {
        try _icontrol.put_IsTextScaleFactorEnabled(value)
    }

    /// Gets or sets whether automatic text enlargement, to reflect the system text size setting, is enabled.
    public var isTextScaleFactorEnabled_: Swift.Bool {
        get {
            try! self.isTextScaleFactorEnabled
        }
        set {
            try! self.isTextScaleFactorEnabled(newValue)
        }
    }

    /// The amount of space between the content of a Control and its Margin or Border. The default is a Thickness with values of 0 on all four sides.
    public var padding: MicrosoftUIXaml_Thickness {
        get throws {
            try _icontrol.get_Padding()
        }
    }

    /// Sets the padding inside a control.
    /// - Parameter newValue: The amount of space between the content of a Control and its Margin or Border. The default is a Thickness with values of 0 on all four sides.
    public func padding(_ value: MicrosoftUIXaml_Thickness) throws {
        try _icontrol.put_Padding(value)
    }

    /// Gets or sets the padding inside a control.
    public var padding_: MicrosoftUIXaml_Thickness {
        get {
            try! self.padding
        }
        set {
            try! self.padding(newValue)
        }
    }

    /// The pointer emulation mode. The default is Never.
    public var requiresPointer: MicrosoftUIXamlControls_RequiresPointer {
        get throws {
            try _icontrol.get_RequiresPointer()
        }
    }

    /// Sets whether a UI element supports mouse mode, which emulates pointer interaction experiences with non-pointer input devices such as a keyboard or game controller.
    /// - Parameter newValue: The pointer emulation mode. The default is Never.
    public func requiresPointer(_ value: MicrosoftUIXamlControls_RequiresPointer) throws {
        try _icontrol.put_RequiresPointer(value)
    }

    /// Gets or sets whether a UI element supports mouse mode, which emulates pointer interaction experiences with non-pointer input devices such as a keyboard or game controller.
    public var requiresPointer_: MicrosoftUIXamlControls_RequiresPointer {
        get {
            try! self.requiresPointer
        }
        set {
            try! self.requiresPointer(newValue)
        }
    }

    /// A value of the enumeration. The default is Local.
    public var tabNavigation: MicrosoftUIXamlInput_KeyboardNavigationMode {
        get throws {
            try _icontrol.get_TabNavigation()
        }
    }

    /// Sets a value that modifies how tabbing and UIElement.TabIndex work for this control.

    /// > [!NOTE]
    /// > For Windows 10 Creators Update (build 10.0.15063) and newer, the TabFocusNavigation property is available on the UIElement base class to include objects in the tab sequence that do not use a ControlTemplate.
    /// - Parameter newValue: A value of the enumeration. The default is Local.
    public func tabNavigation(_ value: MicrosoftUIXamlInput_KeyboardNavigationMode) throws {
        try _icontrol.put_TabNavigation(value)
    }

    /// Gets or sets a value that modifies how tabbing and UIElement.TabIndex work for this control.

    /// > [!NOTE]
    /// > For Windows 10 Creators Update (build 10.0.15063) and newer, the TabFocusNavigation property is available on the UIElement base class to include objects in the tab sequence that do not use a ControlTemplate.
    public var tabNavigation_: MicrosoftUIXamlInput_KeyboardNavigationMode {
        get {
            try! self.tabNavigation
        }
        set {
            try! self.tabNavigation(newValue)
        }
    }

    /// The template that defines the appearance of the Control. The ControlTemplate must have exactly one root element as its content.
    public var template: MicrosoftUIXamlControls_ControlTemplate {
        get throws {
            try COM.NullResult.unwrap(_icontrol.get_Template())
        }
    }

    /// Sets a control template. The control template defines the visual appearance of a control in UI, and is defined in XAML markup.
    /// - Parameter newValue: The template that defines the appearance of the Control. The ControlTemplate must have exactly one root element as its content.
    public func template(_ value: MicrosoftUIXamlControls_ControlTemplate?) throws {
        try _icontrol.put_Template(value)
    }

    /// Gets or sets a control template. The control template defines the visual appearance of a control in UI, and is defined in XAML markup.
    public var template_: MicrosoftUIXamlControls_ControlTemplate! {
        get {
            try! NullResult.catch(self.template)
        }
        set {
            try! self.template(newValue)
        }
    }

    /// One of the VerticalAlignment values. The default is Top.
    public var verticalContentAlignment: MicrosoftUIXaml_VerticalAlignment {
        get throws {
            try _icontrol.get_VerticalContentAlignment()
        }
    }

    /// Sets the vertical alignment of the control's content.
    /// - Parameter newValue: One of the VerticalAlignment values. The default is Top.
    public func verticalContentAlignment(_ value: MicrosoftUIXaml_VerticalAlignment) throws {
        try _icontrol.put_VerticalContentAlignment(value)
    }

    /// Gets or sets the vertical alignment of the control's content.
    public var verticalContentAlignment_: MicrosoftUIXaml_VerticalAlignment {
        get {
            try! self.verticalContentAlignment
        }
        set {
            try! self.verticalContentAlignment(newValue)
        }
    }

    /// Retrieves the named element in the instantiated ControlTemplate visual tree.
    /// - Parameter childName: The name of the element to find.
    /// - Returns: The named element from the template, if the element is found. Can return null if no element with name childName was found in the template.
    public func getTemplateChild(_ childName: Swift.String) throws -> MicrosoftUIXaml_DependencyObject {
        try COM.NullResult.unwrap(_icontrolProtected.getTemplateChild(childName))
    }

    /// The key that references the default style for the control. To work correctly as part of theme style lookup, this value is expected to be a System.Type value.

    /// > [!NOTE]
    /// > Visual C++ component extensions (C++/CX) uses a string that is the qualified name of the type. But this relies on generated code that produces a TypeName once accessed by a XAML compiler; see Remarks.
    public var defaultStyleKey: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_icontrolProtected.get_DefaultStyleKey())
        }
    }

    /// Sets the key that references the default style for the control. Authors of custom controls use this property to change the default for the style that their control uses.
    /// - Parameter newValue: The key that references the default style for the control. To work correctly as part of theme style lookup, this value is expected to be a System.Type value.

    /// > [!NOTE]
    /// > Visual C++ component extensions (C++/CX) uses a string that is the qualified name of the type. But this relies on generated code that produces a TypeName once accessed by a XAML compiler; see Remarks.
    public func defaultStyleKey(_ value: WindowsRuntime.IInspectable?) throws {
        try _icontrolProtected.put_DefaultStyleKey(value)
    }

    /// Gets or sets the key that references the default style for the control. Authors of custom controls use this property to change the default for the style that their control uses.
    public var defaultStyleKey_: WindowsRuntime.IInspectable! {
        get {
            try! NullResult.catch(self.defaultStyleKey)
        }
        set {
            try! self.defaultStyleKey(newValue)
        }
    }

    /// Called before the PointerEntered event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerEntered(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerEntered(e)
    }

    /// Called before the PointerPressed event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerPressed(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerPressed(e)
    }

    /// Called before the PointerMoved event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerMoved(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerMoved(e)
    }

    /// Called before the PointerReleased event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerReleased(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerReleased(e)
    }

    /// Called before the PointerExited event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerExited(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerExited(e)
    }

    /// Called before the PointerCaptureLost event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerCaptureLost(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerCaptureLost(e)
    }

    /// Called before the PointerCanceled event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerCanceled(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerCanceled(e)
    }

    /// Called before the PointerWheelChanged event occurs.
    /// - Parameter e: Event data for the event.
    open func onPointerWheelChanged(_ e: MicrosoftUIXamlInput_PointerRoutedEventArgs?) throws {
        try _icontrolOverrides.onPointerWheelChanged(e)
    }

    /// Called before the Tapped event occurs.
    /// - Parameter e: Event data for the event.
    open func onTapped(_ e: MicrosoftUIXamlInput_TappedRoutedEventArgs?) throws {
        try _icontrolOverrides.onTapped(e)
    }

    /// Called before the DoubleTapped event occurs.
    /// - Parameter e: Event data for the event.
    open func onDoubleTapped(_ e: MicrosoftUIXamlInput_DoubleTappedRoutedEventArgs?) throws {
        try _icontrolOverrides.onDoubleTapped(e)
    }

    /// Called before the Holding event occurs.
    /// - Parameter e: Event data for the event.
    open func onHolding(_ e: MicrosoftUIXamlInput_HoldingRoutedEventArgs?) throws {
        try _icontrolOverrides.onHolding(e)
    }

    /// Called before the RightTapped event occurs.
    /// - Parameter e: Event data for the event.
    open func onRightTapped(_ e: MicrosoftUIXamlInput_RightTappedRoutedEventArgs?) throws {
        try _icontrolOverrides.onRightTapped(e)
    }

    /// Called before the ManipulationStarting event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationStarting(_ e: MicrosoftUIXamlInput_ManipulationStartingRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationStarting(e)
    }

    /// Called before the ManipulationInertiaStarting event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationInertiaStarting(_ e: MicrosoftUIXamlInput_ManipulationInertiaStartingRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationInertiaStarting(e)
    }

    /// Called before the ManipulationStarted event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationStarted(_ e: MicrosoftUIXamlInput_ManipulationStartedRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationStarted(e)
    }

    /// Called before the ManipulationDelta event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationDelta(_ e: MicrosoftUIXamlInput_ManipulationDeltaRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationDelta(e)
    }

    /// Called before the ManipulationCompleted event occurs.
    /// - Parameter e: Event data for the event.
    open func onManipulationCompleted(_ e: MicrosoftUIXamlInput_ManipulationCompletedRoutedEventArgs?) throws {
        try _icontrolOverrides.onManipulationCompleted(e)
    }

    /// Called before the KeyUp event occurs.
    /// - Parameter e: The data for the event.
    open func onKeyUp(_ e: MicrosoftUIXamlInput_KeyRoutedEventArgs?) throws {
        try _icontrolOverrides.onKeyUp(e)
    }

    /// Called before the KeyDown event occurs.
    /// - Parameter e: The data for the event.
    open func onKeyDown(_ e: MicrosoftUIXamlInput_KeyRoutedEventArgs?) throws {
        try _icontrolOverrides.onKeyDown(e)
    }

    /// Called before the PreviewKeyDown event occurs.
    /// - Parameter e: The data for the event.
    open func onPreviewKeyDown(_ e: MicrosoftUIXamlInput_KeyRoutedEventArgs?) throws {
        try _icontrolOverrides.onPreviewKeyDown(e)
    }

    /// Called before the PreviewKeyUp event occurs.
    /// - Parameter e: The data for the event.
    open func onPreviewKeyUp(_ e: MicrosoftUIXamlInput_KeyRoutedEventArgs?) throws {
        try _icontrolOverrides.onPreviewKeyUp(e)
    }

    /// Called before the GotFocus event occurs.
    /// - Parameter e: The data for the event.
    open func onGotFocus(_ e: MicrosoftUIXaml_RoutedEventArgs?) throws {
        try _icontrolOverrides.onGotFocus(e)
    }

    /// Called before the LostFocus event occurs.
    /// - Parameter e: The data for the event.
    open func onLostFocus(_ e: MicrosoftUIXaml_RoutedEventArgs?) throws {
        try _icontrolOverrides.onLostFocus(e)
    }

    /// Called before the CharacterReceived event occurs.
    /// - Parameter e: Event data for the event.
    open func onCharacterReceived(_ e: MicrosoftUIXamlInput_CharacterReceivedRoutedEventArgs?) throws {
        try _icontrolOverrides.onCharacterReceived(e)
    }

    /// Called before the DragEnter event occurs.
    /// - Parameter e: Event data for the event.
    open func onDragEnter(_ e: MicrosoftUIXaml_DragEventArgs?) throws {
        try _icontrolOverrides.onDragEnter(e)
    }

    /// Called before the DragLeave event occurs.
    /// - Parameter e: Event data for the event.
    open func onDragLeave(_ e: MicrosoftUIXaml_DragEventArgs?) throws {
        try _icontrolOverrides.onDragLeave(e)
    }

    /// Called before the DragOver event occurs.
    /// - Parameter e: Event data for the event.
    open func onDragOver(_ e: MicrosoftUIXaml_DragEventArgs?) throws {
        try _icontrolOverrides.onDragOver(e)
    }

    /// Called before the Drop event occurs.
    /// - Parameter e: Event data for the event.
    open func onDrop(_ e: MicrosoftUIXaml_DragEventArgs?) throws {
        try _icontrolOverrides.onDrop(e)
    }

    /// Gets the value of the Control.IsTemplateFocusTarget XAML attached property for the target element.
    /// - Parameter element: The object from which the property value is read.
    /// - Returns: The Control.IsTemplateFocusTarget XAML attached property value of the specified object.
    public static func getIsTemplateFocusTarget(_ element: MicrosoftUIXaml_FrameworkElement?) throws -> Swift.Bool {
        try _icontrolStatics.getIsTemplateFocusTarget(element)
    }

    /// Sets the value of the Control.IsTemplateFocusTarget XAML attached property for a target element.
    /// - Parameter element: The object to which the property value is written.
    /// - Parameter value: The value to set.
    public static func setIsTemplateFocusTarget(_ element: MicrosoftUIXaml_FrameworkElement?, _ value: Swift.Bool) throws {
        try _icontrolStatics.setIsTemplateFocusTarget(element, value)
    }

    /// Gets the value of the Control.IsTemplateKeyTipTarget XAML attached property for the target element.
    /// - Parameter element: The object from which the property value is read.
    /// - Returns: The Control.IsTemplateKeyTipTarget XAML attached property value of the specified object.
    public static func getIsTemplateKeyTipTarget(_ element: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _icontrolStatics.getIsTemplateKeyTipTarget(element)
    }

    /// Sets the value of the Control.IsTemplateKeyTipTarget XAML attached property for a target element.
    /// - Parameter element: The object to which the property value is written.
    /// - Parameter value: The value to set.
    public static func setIsTemplateKeyTipTarget(_ element: MicrosoftUIXaml_DependencyObject?, _ value: Swift.Bool) throws {
        try _icontrolStatics.setIsTemplateKeyTipTarget(element, value)
    }

    /// The identifier for the Background dependency property.
    public static var backgroundProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_BackgroundProperty())
        }
    }

    /// Identifies the Background dependency property.
    public static var backgroundProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.backgroundProperty)
    }

    /// The identifier for the BackgroundSizing dependency property.
    public static var backgroundSizingProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_BackgroundSizingProperty())
        }
    }

    /// Identifies the BackgroundSizing dependency property.
    public static var backgroundSizingProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.backgroundSizingProperty)
    }

    /// The identifier for the BorderBrush dependency property.
    public static var borderBrushProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_BorderBrushProperty())
        }
    }

    /// Identifies the BorderBrush dependency property.
    public static var borderBrushProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.borderBrushProperty)
    }

    /// The identifier for the BorderThickness dependency property.
    public static var borderThicknessProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_BorderThicknessProperty())
        }
    }

    /// Identifies the BorderThickness dependency property.
    public static var borderThicknessProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.borderThicknessProperty)
    }

    /// The identifier for the CharacterSpacing dependency property.
    public static var characterSpacingProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_CharacterSpacingProperty())
        }
    }

    /// Identifies the CharacterSpacing dependency property.
    public static var characterSpacingProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.characterSpacingProperty)
    }

    /// The identifier for the CornerRadius dependency property.
    public static var cornerRadiusProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_CornerRadiusProperty())
        }
    }

    /// Identifies the CornerRadius dependency property.
    public static var cornerRadiusProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.cornerRadiusProperty)
    }

    /// The identifier for the DefaultStyleKey dependency property.
    public static var defaultStyleKeyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_DefaultStyleKeyProperty())
        }
    }

    /// Identifies the DefaultStyleKey dependency property.
    public static var defaultStyleKeyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.defaultStyleKeyProperty)
    }

    /// The identifier for the DefaultStyleResourceUri dependency property.
    public static var defaultStyleResourceUriProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_DefaultStyleResourceUriProperty())
        }
    }

    /// Identifies the DefaultStyleResourceUri dependency property.
    public static var defaultStyleResourceUriProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.defaultStyleResourceUriProperty)
    }

    /// The identifier for the ElementSoundMode dependency property.
    public static var elementSoundModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_ElementSoundModeProperty())
        }
    }

    /// Identifies the ElementSoundMode dependency property.
    public static var elementSoundModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.elementSoundModeProperty)
    }

    /// The identifier for the FontFamily dependency property.
    public static var fontFamilyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontFamilyProperty())
        }
    }

    /// Identifies the FontFamily dependency property.
    public static var fontFamilyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontFamilyProperty)
    }

    /// The identifier for the FontSize dependency property.
    public static var fontSizeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontSizeProperty())
        }
    }

    /// Identifies the FontSize dependency property.
    public static var fontSizeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontSizeProperty)
    }

    /// The identifier for the FontStretch dependency property.
    public static var fontStretchProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontStretchProperty())
        }
    }

    /// Identifies the FontStretch dependency property.
    public static var fontStretchProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontStretchProperty)
    }

    /// The identifier for the FontStyle dependency property.
    public static var fontStyleProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontStyleProperty())
        }
    }

    /// Identifies the FontStyle dependency property.
    public static var fontStyleProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontStyleProperty)
    }

    /// The identifier for the FontWeight dependency property.
    public static var fontWeightProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_FontWeightProperty())
        }
    }

    /// Identifies the FontWeight dependency property.
    public static var fontWeightProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.fontWeightProperty)
    }

    /// The identifier for the Foreground dependency property.
    public static var foregroundProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_ForegroundProperty())
        }
    }

    /// Identifies the Foreground dependency property.
    public static var foregroundProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.foregroundProperty)
    }

    /// The identifier for the HorizontalContentAlignment dependency property.
    public static var horizontalContentAlignmentProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_HorizontalContentAlignmentProperty())
        }
    }

    /// Identifies the HorizontalContentAlignment dependency property.
    public static var horizontalContentAlignmentProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.horizontalContentAlignmentProperty)
    }

    /// The identifier for the IsEnabled dependency property.
    public static var isEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_IsEnabledProperty())
        }
    }

    /// Identifies the IsEnabled dependency property.
    public static var isEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isEnabledProperty)
    }

    /// The identifier for the IsFocusEngaged dependency property.
    public static var isFocusEngagedProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_IsFocusEngagedProperty())
        }
    }

    /// Identifies the IsFocusEngaged dependency property.
    public static var isFocusEngagedProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isFocusEngagedProperty)
    }

    /// The identifier for the IsFocusEngagementEnabled dependency property.
    public static var isFocusEngagementEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_IsFocusEngagementEnabledProperty())
        }
    }

    /// Identifies the IsFocusEngagementEnabled dependency property.
    public static var isFocusEngagementEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isFocusEngagementEnabledProperty)
    }

    /// The identifier for the Control.IsTemplateFocusTarget XAML attached property.
    public static var isTemplateFocusTargetProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_IsTemplateFocusTargetProperty())
        }
    }

    /// Identifies the Control.IsTemplateFocusTarget XAML attached property.
    public static var isTemplateFocusTargetProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isTemplateFocusTargetProperty)
    }

    /// The identifier for the Control.IsTemplateKeyTipTarget XAML attached property.
    public static var isTemplateKeyTipTargetProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_IsTemplateKeyTipTargetProperty())
        }
    }

    /// Identifies the Control.IsTemplateKeyTipTarget XAML attached property.
    public static var isTemplateKeyTipTargetProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isTemplateKeyTipTargetProperty)
    }

    /// The identifier for the IsTextScaleFactorEnabled dependency property.
    public static var isTextScaleFactorEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_IsTextScaleFactorEnabledProperty())
        }
    }

    /// Identifies the IsTextScaleFactorEnabled  dependency property.
    public static var isTextScaleFactorEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isTextScaleFactorEnabledProperty)
    }

    /// The identifier for the Padding dependency property.
    public static var paddingProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_PaddingProperty())
        }
    }

    /// Identifies the Padding dependency property.
    public static var paddingProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.paddingProperty)
    }

    /// The identifier for the RequiresPointer dependency property.
    public static var requiresPointerProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_RequiresPointerProperty())
        }
    }

    /// Identifies the RequiresPointer dependency property.
    public static var requiresPointerProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.requiresPointerProperty)
    }

    /// The identifier for the TabNavigation  dependency property.
    public static var tabNavigationProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_TabNavigationProperty())
        }
    }

    /// Identifies the TabNavigation  dependency property.
    public static var tabNavigationProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.tabNavigationProperty)
    }

    /// The identifier for the Template  dependency property.
    public static var templateProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_TemplateProperty())
        }
    }

    /// Identifies the Template  dependency property.
    public static var templateProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.templateProperty)
    }

    /// The identifier for the VerticalContentAlignment dependency property.
    public static var verticalContentAlignmentProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_icontrolStatics.get_VerticalContentAlignmentProperty())
        }
    }

    /// Identifies the VerticalContentAlignment dependency property.
    public static var verticalContentAlignmentProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.verticalContentAlignmentProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_IControl>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIControl: COM.COMReference<SWRT_MicrosoftUIXamlControls_IControl>.Optional = .none

    internal var _icontrol: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IControl> {
        get throws {
            try _lazyIControl.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControls_IControl.self)).cast()
            }
        }
    }

    private var _lazyIControlProtected: COM.COMReference<SWRT_MicrosoftUIXamlControls_IControlProtected>.Optional = .none

    internal var _icontrolProtected: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IControlProtected> {
        get throws {
            try _lazyIControlProtected.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControls_IControlProtected.self)).cast()
            }
        }
    }

    private var _lazyIControlOverrides: COM.COMReference<SWRT_MicrosoftUIXamlControls_IControlOverrides>.Optional = .none

    internal var _icontrolOverrides: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IControlOverrides> {
        get throws {
            try _lazyIControlOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControls_IControlOverrides.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.Control")
            }
        }
    }

    private static var _lazyIControlFactory: COM.COMReference<SWRT_MicrosoftUIXamlControls_IControlFactory>.Optional = .none

    internal static var _icontrolFactory: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IControlFactory> {
        get throws {
            try _lazyIControlFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IControlFactory.self)).cast()
            }
        }
    }

    private static var _lazyIControlStatics: COM.COMReference<SWRT_MicrosoftUIXamlControls_IControlStatics>.Optional = .none

    internal static var _icontrolStatics: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IControlStatics> {
        get throws {
            try _lazyIControlStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IControlStatics.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _icontrolOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_MicrosoftUIXamlControls_IControlOverrides.self) {
            if !_icontrolOverrides_outer.isInitialized {
                _icontrolOverrides_outer.initialize(embedder: self,
                    virtualTable: &MicrosoftUIXamlControls_ControlBinding.VirtualTables.icontrolOverrides)
            }
            return .init(_icontrolOverrides_outer.toCOM())
        }
        return .none
    }
}