// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Default styles for the controls in the WinUI library.
public final class MicrosoftUIXamlControls_XamlControlsResources: MicrosoftUIXaml_ResourceDictionary, @unchecked Sendable {
    /// Initializes a new instance of the XamlControlsResources class.
    public override init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXamlControls_XamlControlsResourcesBinding.self))
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// True, if compact resources is enabled. Otherwise, false. The default is false.
    public var useCompactResources: Swift.Bool {
        get throws {
            try _ixamlControlsResources.get_UseCompactResources()
        }
    }

    /// Sets whether controls and resources are rendered in a more dense layout.
    /// - Parameter newValue: True, if compact resources is enabled. Otherwise, false. The default is false.
    public func useCompactResources(_ value: Swift.Bool) throws {
        try _ixamlControlsResources.put_UseCompactResources(value)
    }

    /// Gets or sets whether controls and resources are rendered in a more dense layout.
    public var useCompactResources_: Swift.Bool {
        get {
            try! self.useCompactResources
        }
        set {
            try! self.useCompactResources(newValue)
        }
    }

    /// > [!Important]
    /// > EnsureRevealLights is available for use in the operating systems specified in the Requirements section. However, we do not recommend its use as it may be altered or unavailable in subsequent versions.

    /// Ensures that ambient and border lights required for reveal effects are set on the specified element.
    /// - Parameter element: The element that requires lighting for reveal effects.
    public static func ensureRevealLights(_ element: MicrosoftUIXaml_UIElement?) throws {
        try _ixamlControlsResourcesStatics.ensureRevealLights(element)
    }

    /// The identifier for the UseCompactResources dependency property.
    public static var useCompactResourcesProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ixamlControlsResourcesStatics.get_UseCompactResourcesProperty())
        }
    }

    /// Identifies the UseCompactResources dependency property.
    public static var useCompactResourcesProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.useCompactResourcesProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_IXamlControlsResources>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIXamlControlsResources: COM.COMReference<SWRT_MicrosoftUIXamlControls_IXamlControlsResources>.Optional = .none

    internal var _ixamlControlsResources: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IXamlControlsResources> {
        get throws {
            try _lazyIXamlControlsResources.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IXamlControlsResources.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.XamlControlsResources")
            }
        }
    }

    private static var _lazyIXamlControlsResourcesStatics: COM.COMReference<SWRT_MicrosoftUIXamlControls_IXamlControlsResourcesStatics>.Optional = .none

    internal static var _ixamlControlsResourcesStatics: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IXamlControlsResourcesStatics> {
        get throws {
            try _lazyIXamlControlsResourcesStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IXamlControlsResourcesStatics.self)).cast()
            }
        }
    }
}