// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Describes how to display the grouped items in a collection, such as the collection from GroupItems.
open class MicrosoftUIXamlControls_GroupStyle: WindowsRuntime.ComposableClass, MicrosoftUIXamlData_INotifyPropertyChangedProtocol, @unchecked Sendable {
    /// Initializes a new instance of the GroupStyle class.
    public init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlControls_GroupStyle.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._igroupStyleFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// The style that is applied to the GroupItem generated for each item. The default is null.
    public var containerStyle: MicrosoftUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_igroupStyle.get_ContainerStyle())
        }
    }

    /// > [!NOTE]
    /// > ContainerStyle may be altered or unavailable for releases after Windows 8.1 and is not supported for ItemsControl.GroupStyle.

    /// Gets or sets the style that is applied to the GroupItem generated for each item.
    /// - Parameter newValue: The style that is applied to the GroupItem generated for each item. The default is null.
    public func containerStyle(_ value: MicrosoftUIXaml_Style?) throws {
        try _igroupStyle.put_ContainerStyle(value)
    }

    /// > [!NOTE]
    /// > ContainerStyle may be altered or unavailable for releases after Windows 8.1 and is not supported for ItemsControl.GroupStyle.

    /// Gets or sets the style that is applied to the GroupItem generated for each item.
    public var containerStyle_: MicrosoftUIXaml_Style! {
        get {
            try! NullResult.catch(self.containerStyle)
        }
        set {
            try! self.containerStyle(newValue)
        }
    }

    /// An object that derives from StyleSelector. The default is null.
    public var containerStyleSelector: MicrosoftUIXamlControls_StyleSelector {
        get throws {
            try COM.NullResult.unwrap(_igroupStyle.get_ContainerStyleSelector())
        }
    }

    /// > [!NOTE]
    /// > ContainerStyleSelector may be altered or unavailable for releases after Windows 8.1 and is not supported for ItemsControl.GroupStyle.

    /// Gets or sets a reference to a custom StyleSelector logic class. The StyleSelector referenced by this property returns a style to apply to each generated GroupItem.
    /// - Parameter newValue: An object that derives from StyleSelector. The default is null.
    public func containerStyleSelector(_ value: MicrosoftUIXamlControls_StyleSelector?) throws {
        try _igroupStyle.put_ContainerStyleSelector(value)
    }

    /// > [!NOTE]
    /// > ContainerStyleSelector may be altered or unavailable for releases after Windows 8.1 and is not supported for ItemsControl.GroupStyle.

    /// Gets or sets a reference to a custom StyleSelector logic class. The StyleSelector referenced by this property returns a style to apply to each generated GroupItem.
    public var containerStyleSelector_: MicrosoftUIXamlControls_StyleSelector! {
        get {
            try! NullResult.catch(self.containerStyleSelector)
        }
        set {
            try! self.containerStyleSelector(newValue)
        }
    }

    /// The style that is applied to the header for each item. The default is null.
    public var headerContainerStyle: MicrosoftUIXaml_Style {
        get throws {
            try COM.NullResult.unwrap(_igroupStyle.get_HeaderContainerStyle())
        }
    }

    /// Sets the style that is applied to the header for each item.
    /// - Parameter newValue: The style that is applied to the header for each item. The default is null.
    public func headerContainerStyle(_ value: MicrosoftUIXaml_Style?) throws {
        try _igroupStyle.put_HeaderContainerStyle(value)
    }

    /// Gets or sets the style that is applied to the header for each item.
    public var headerContainerStyle_: MicrosoftUIXaml_Style! {
        get {
            try! NullResult.catch(self.headerContainerStyle)
        }
        set {
            try! self.headerContainerStyle(newValue)
        }
    }

    /// A DataTemplate object that is used to display the group header. The default is null.
    public var headerTemplate: MicrosoftUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_igroupStyle.get_HeaderTemplate())
        }
    }

    /// Sets the template that is used to display the group header.
    /// - Parameter newValue: A DataTemplate object that is used to display the group header. The default is null.
    public func headerTemplate(_ value: MicrosoftUIXaml_DataTemplate?) throws {
        try _igroupStyle.put_HeaderTemplate(value)
    }

    /// Gets or sets the template that is used to display the group header.
    public var headerTemplate_: MicrosoftUIXaml_DataTemplate! {
        get {
            try! NullResult.catch(self.headerTemplate)
        }
        set {
            try! self.headerTemplate(newValue)
        }
    }

    /// An object that derives from DataTemplateSelector. The default is null.
    public var headerTemplateSelector: MicrosoftUIXamlControls_DataTemplateSelector {
        get throws {
            try COM.NullResult.unwrap(_igroupStyle.get_HeaderTemplateSelector())
        }
    }

    /// Sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector returns different DataTemplate values to use for the header area of group item content.
    /// - Parameter newValue: An object that derives from DataTemplateSelector. The default is null.
    public func headerTemplateSelector(_ value: MicrosoftUIXamlControls_DataTemplateSelector?) throws {
        try _igroupStyle.put_HeaderTemplateSelector(value)
    }

    /// Gets or sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector returns different DataTemplate values to use for the header area of group item content.
    public var headerTemplateSelector_: MicrosoftUIXamlControls_DataTemplateSelector! {
        get {
            try! NullResult.catch(self.headerTemplateSelector)
        }
        set {
            try! self.headerTemplateSelector(newValue)
        }
    }

    /// True to not display empty groups; otherwise, false. The default is false.
    public var hidesIfEmpty: Swift.Bool {
        get throws {
            try _igroupStyle.get_HidesIfEmpty()
        }
    }

    /// Sets a value that indicates whether items corresponding to empty groups should be displayed.
    /// - Parameter newValue: True to not display empty groups; otherwise, false. The default is false.
    public func hidesIfEmpty(_ value: Swift.Bool) throws {
        try _igroupStyle.put_HidesIfEmpty(value)
    }

    /// Gets or sets a value that indicates whether items corresponding to empty groups should be displayed.
    public var hidesIfEmpty_: Swift.Bool {
        get {
            try! self.hidesIfEmpty
        }
        set {
            try! self.hidesIfEmpty(newValue)
        }
    }

    /// An ItemsPanelTemplate object that creates the panel used to layout the items.
    public var panel: MicrosoftUIXamlControls_ItemsPanelTemplate {
        get throws {
            try COM.NullResult.unwrap(_igroupStyle.get_Panel())
        }
    }

    /// Sets a template that creates the panel used to lay out the items.
    /// - Parameter newValue: An ItemsPanelTemplate object that creates the panel used to layout the items.
    public func panel(_ value: MicrosoftUIXamlControls_ItemsPanelTemplate?) throws {
        try _igroupStyle.put_Panel(value)
    }

    /// Gets or sets a template that creates the panel used to lay out the items.
    public var panel_: MicrosoftUIXamlControls_ItemsPanelTemplate! {
        get {
            try! NullResult.catch(self.panel)
        }
        set {
            try! self.panel(newValue)
        }
    }

    // MARK: Microsoft.UI.Xaml.Data.INotifyPropertyChanged members

    /// Occurs when a property value changes.
    @discardableResult
    public func propertyChanged(adding handler: MicrosoftUIXamlData_PropertyChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _inotifyPropertyChanged.add_PropertyChanged(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).propertyChanged(removing: token) })
    }

    public func propertyChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _inotifyPropertyChanged.remove_PropertyChanged(token)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_IGroupStyle>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIGroupStyle: COM.COMReference<SWRT_MicrosoftUIXamlControls_IGroupStyle>.Optional = .none

    internal var _igroupStyle: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IGroupStyle> {
        get throws {
            try _lazyIGroupStyle.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControls_IGroupStyle.self)).cast()
            }
        }
    }

    private var _lazyINotifyPropertyChanged: COM.COMReference<SWRT_MicrosoftUIXamlData_INotifyPropertyChanged>.Optional = .none

    internal var _inotifyPropertyChanged: COM.COMInterop<SWRT_MicrosoftUIXamlData_INotifyPropertyChanged> {
        get throws {
            try _lazyINotifyPropertyChanged.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlData_INotifyPropertyChanged.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.GroupStyle")
            }
        }
    }

    private static var _lazyIGroupStyleFactory: COM.COMReference<SWRT_MicrosoftUIXamlControls_IGroupStyleFactory>.Optional = .none

    internal static var _igroupStyleFactory: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IGroupStyleFactory> {
        get throws {
            try _lazyIGroupStyleFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IGroupStyleFactory.self)).cast()
            }
        }
    }
}