// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents a scrollable control that incorporates two views that have a semantic relationship. For example, the ZoomedOutView might be an index of titles, and the ZoomedInView might include details and summaries for each of the title entries. Views can be changed using zoom or other interactions.
public final class MicrosoftUIXamlControls_SemanticZoom: MicrosoftUIXamlControls_Control, @unchecked Sendable {
    /// Initializes a new instance of the SemanticZoom class.
    public override init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXamlControls_SemanticZoomBinding.self))
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// Changes from the current active view to the other possible view. For example, if IsZoomedInViewActive is true, calling this method changes to zoomed-out view.
    public func toggleActiveView() throws {
        try _isemanticZoom.toggleActiveView()
    }

    /// Occurs when a view change is complete and the view is displayed.
    @discardableResult
    public func viewChangeCompleted(adding handler: MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isemanticZoom.add_ViewChangeCompleted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).viewChangeCompleted(removing: token) })
    }

    public func viewChangeCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isemanticZoom.remove_ViewChangeCompleted(token)
    }

    /// Occurs when a view change is requested.
    @discardableResult
    public func viewChangeStarted(adding handler: MicrosoftUIXamlControls_SemanticZoomViewChangedEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _isemanticZoom.add_ViewChangeStarted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).viewChangeStarted(removing: token) })
    }

    public func viewChangeStarted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _isemanticZoom.remove_ViewChangeStarted(token)
    }

    /// true if views can be changed; otherwise, false. The default is true. 

    public var canChangeViews: Swift.Bool {
        get throws {
            try _isemanticZoom.get_CanChangeViews()
        }
    }

    /// Sets a value that declares whether the SemanticZoom can change display views.
    /// - Parameter newValue: true if views can be changed; otherwise, false. The default is true. 

    public func canChangeViews(_ value: Swift.Bool) throws {
        try _isemanticZoom.put_CanChangeViews(value)
    }

    /// Gets or sets a value that declares whether the SemanticZoom can change display views.
    public var canChangeViews_: Swift.Bool {
        get {
            try! self.canChangeViews
        }
        set {
            try! self.canChangeViews(newValue)
        }
    }

    /// True if the ZoomedInView shows a button that activates the ZoomedOutView; otherwise, false. The default is true.
    public var isZoomOutButtonEnabled: Swift.Bool {
        get throws {
            try _isemanticZoom.get_IsZoomOutButtonEnabled()
        }
    }

    /// Sets a value that indicates whether the ZoomedInView shows a button that activates the ZoomedOutView.
    /// - Parameter newValue: True if the ZoomedInView shows a button that activates the ZoomedOutView; otherwise, false. The default is true.
    public func isZoomOutButtonEnabled(_ value: Swift.Bool) throws {
        try _isemanticZoom.put_IsZoomOutButtonEnabled(value)
    }

    /// Gets or sets a value that indicates whether the ZoomedInView shows a button that activates the ZoomedOutView.
    public var isZoomOutButtonEnabled_: Swift.Bool {
        get {
            try! self.isZoomOutButtonEnabled
        }
        set {
            try! self.isZoomOutButtonEnabled(newValue)
        }
    }

    /// true if the ZoomedInView is the active view. false if the ZoomedOutView is the active view.
    public var isZoomedInViewActive: Swift.Bool {
        get throws {
            try _isemanticZoom.get_IsZoomedInViewActive()
        }
    }

    /// Sets a value that determines whether the ZoomedInView is the active view.
    /// - Parameter newValue: true if the ZoomedInView is the active view. false if the ZoomedOutView is the active view.
    public func isZoomedInViewActive(_ value: Swift.Bool) throws {
        try _isemanticZoom.put_IsZoomedInViewActive(value)
    }

    /// Gets or sets a value that determines whether the ZoomedInView is the active view.
    public var isZoomedInViewActive_: Swift.Bool {
        get {
            try! self.isZoomedInViewActive
        }
        set {
            try! self.isZoomedInViewActive(newValue)
        }
    }

    /// An object that implements ISemanticZoomInfo. Typically this is a practical ListViewBase implementation such as GridView.
    public var zoomedInView: MicrosoftUIXamlControls_ISemanticZoomInformation {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoom.get_ZoomedInView())
        }
    }

    /// Sets the semantically more complete zoomed-in view of the SemanticZoom.
    /// - Parameter newValue: An object that implements ISemanticZoomInfo. Typically this is a practical ListViewBase implementation such as GridView.
    public func zoomedInView(_ value: MicrosoftUIXamlControls_ISemanticZoomInformation?) throws {
        try _isemanticZoom.put_ZoomedInView(value)
    }

    /// Gets or sets the semantically more complete zoomed-in view of the SemanticZoom.
    public var zoomedInView_: MicrosoftUIXamlControls_ISemanticZoomInformation! {
        get {
            try! NullResult.catch(self.zoomedInView)
        }
        set {
            try! self.zoomedInView(newValue)
        }
    }

    /// An object that implements ISemanticZoomInfo. Typically this is a practical ListViewBase implementation such as GridView.
    public var zoomedOutView: MicrosoftUIXamlControls_ISemanticZoomInformation {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoom.get_ZoomedOutView())
        }
    }

    /// Sets the zoomed-out view of the SemanticZoom.
    /// - Parameter newValue: An object that implements ISemanticZoomInfo. Typically this is a practical ListViewBase implementation such as GridView.
    public func zoomedOutView(_ value: MicrosoftUIXamlControls_ISemanticZoomInformation?) throws {
        try _isemanticZoom.put_ZoomedOutView(value)
    }

    /// Gets or sets the zoomed-out view of the SemanticZoom.
    public var zoomedOutView_: MicrosoftUIXamlControls_ISemanticZoomInformation! {
        get {
            try! NullResult.catch(self.zoomedOutView)
        }
        set {
            try! self.zoomedOutView(newValue)
        }
    }

    /// The identifier for the CanChangeViews dependency property.
    public static var canChangeViewsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoomStatics.get_CanChangeViewsProperty())
        }
    }

    /// Identifies the CanChangeViews dependency property.
    public static var canChangeViewsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.canChangeViewsProperty)
    }

    /// The identifier of the IsZoomOutButtonEnabled dependency property.
    public static var isZoomOutButtonEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoomStatics.get_IsZoomOutButtonEnabledProperty())
        }
    }

    /// Identifies the IsZoomOutButtonEnabled dependency property.
    public static var isZoomOutButtonEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isZoomOutButtonEnabledProperty)
    }

    /// The identifier for the IsZoomedInViewActive dependency property.
    public static var isZoomedInViewActiveProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoomStatics.get_IsZoomedInViewActiveProperty())
        }
    }

    /// Identifies the IsZoomedInViewActive dependency property.
    public static var isZoomedInViewActiveProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isZoomedInViewActiveProperty)
    }

    /// The identifier for the ZoomedInView dependency property.
    public static var zoomedInViewProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoomStatics.get_ZoomedInViewProperty())
        }
    }

    /// Identifies the ZoomedInView dependency property.
    public static var zoomedInViewProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.zoomedInViewProperty)
    }

    /// The identifier for the ZoomedOutView dependency property.
    public static var zoomedOutViewProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoomStatics.get_ZoomedOutViewProperty())
        }
    }

    /// Identifies the ZoomedOutView dependency property.
    public static var zoomedOutViewProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.zoomedOutViewProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_ISemanticZoom>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyISemanticZoom: COM.COMReference<SWRT_MicrosoftUIXamlControls_ISemanticZoom>.Optional = .none

    internal var _isemanticZoom: COM.COMInterop<SWRT_MicrosoftUIXamlControls_ISemanticZoom> {
        get throws {
            try _lazyISemanticZoom.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_ISemanticZoom.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.SemanticZoom")
            }
        }
    }

    private static var _lazyISemanticZoomStatics: COM.COMReference<SWRT_MicrosoftUIXamlControls_ISemanticZoomStatics>.Optional = .none

    internal static var _isemanticZoomStatics: COM.COMInterop<SWRT_MicrosoftUIXamlControls_ISemanticZoomStatics> {
        get throws {
            try _lazyISemanticZoomStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_ISemanticZoomStatics.self)).cast()
            }
        }
    }
}