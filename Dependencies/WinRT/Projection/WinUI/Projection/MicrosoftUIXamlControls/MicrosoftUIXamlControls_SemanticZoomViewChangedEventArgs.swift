// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides event data for the ViewChangeStarted and ViewChangeCompleted events.
public final class MicrosoftUIXamlControls_SemanticZoomViewChangedEventArgs: WindowsRuntime.WinRTImport<MicrosoftUIXamlControls_SemanticZoomViewChangedEventArgsBinding>, @unchecked Sendable {
    /// Initializes a new instance of the SemanticZoomViewChangedEventArgs class.
    public init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXamlControls_SemanticZoomViewChangedEventArgsBinding.self))
        super.init(_wrapping: consume _instance)
    }

    /// Information about the item and its bounds.
    public var destinationItem: MicrosoftUIXamlControls_SemanticZoomLocation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_DestinationItem())
        }
    }

    /// Provides information about the item and its bounds, once the view change is complete.
    /// - Parameter newValue: Information about the item and its bounds.
    public func destinationItem(_ value: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        try _interop.put_DestinationItem(value)
    }

    /// Provides information about the item and its bounds, once the view change is complete.
    public var destinationItem_: MicrosoftUIXamlControls_SemanticZoomLocation! {
        get {
            try! NullResult.catch(self.destinationItem)
        }
        set {
            try! self.destinationItem(newValue)
        }
    }

    /// true if the starting view is the ZoomedInView; otherwise, false.
    public var isSourceZoomedInView: Swift.Bool {
        get throws {
            try _interop.get_IsSourceZoomedInView()
        }
    }

    /// Sets a value that indicates whether the starting view is the ZoomedInView.
    /// - Parameter newValue: true if the starting view is the ZoomedInView; otherwise, false.
    public func isSourceZoomedInView(_ value: Swift.Bool) throws {
        try _interop.put_IsSourceZoomedInView(value)
    }

    /// Gets or sets a value that indicates whether the starting view is the ZoomedInView.
    public var isSourceZoomedInView_: Swift.Bool {
        get {
            try! self.isSourceZoomedInView
        }
        set {
            try! self.isSourceZoomedInView(newValue)
        }
    }

    /// Information about the item and its bounds.
    public var sourceItem: MicrosoftUIXamlControls_SemanticZoomLocation {
        get throws {
            try COM.NullResult.unwrap(_interop.get_SourceItem())
        }
    }

    /// Provides information about the item and its bounds, for the item as represented in the previous view.
    /// - Parameter newValue: Information about the item and its bounds.
    public func sourceItem(_ value: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        try _interop.put_SourceItem(value)
    }

    /// Provides information about the item and its bounds, for the item as represented in the previous view.
    public var sourceItem_: MicrosoftUIXamlControls_SemanticZoomLocation! {
        get {
            try! NullResult.catch(self.sourceItem)
        }
        set {
            try! self.sourceItem(newValue)
        }
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_ISemanticZoomViewChangedEventArgs>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs")
            }
        }
    }
}