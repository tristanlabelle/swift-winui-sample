// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides the infrastructure for the ListView and GridView classes.
open class MicrosoftUIXamlControls_ListViewBase: MicrosoftUIXamlControlsPrimitives_Selector, MicrosoftUIXamlControls_ISemanticZoomInformationProtocol, @unchecked Sendable {
    /// Provides base-class initialization behavior for classes that are derived from the ListViewBase class.
    public init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlControls_ListViewBase.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._ilistViewBaseFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Scrolls the list to bring the specified data item into view.
    /// - Parameter item: The data item to bring into view.
    public func scrollIntoView(_ item: WindowsRuntime.IInspectable?) throws {
        try _ilistViewBase.scrollIntoView(item)
    }

    /// Selects all the items in a view.
    public func selectAll() throws {
        try _ilistViewBase.selectAll()
    }

    /// Initiates the asynchronous request to load more data items, in accordance with the active incremental loading settings.
    /// - Returns: When the operation completes, returns a LoadMoreItemsResult payload.
    public func loadMoreItemsAsync() throws -> WindowsFoundation_IAsyncOperation<MicrosoftUIXamlData_LoadMoreItemsResult> {
        try COM.NullResult.unwrap(_ilistViewBase.loadMoreItemsAsync())
    }

    /// Scrolls the list to bring the specified data item into view with the specified alignment.
    /// - Parameter item: The data item to bring into view.
    /// - Parameter alignment: An enumeration value that specifies whether the item uses Default or Leading alignment.
    public func scrollIntoView(_ item: WindowsRuntime.IInspectable?, _ alignment: MicrosoftUIXamlControls_ScrollIntoViewAlignment) throws {
        try _ilistViewBase.scrollIntoViewWithAlignment(item, alignment)
    }

    /// Sets the maximum target time between two render passes when a ListViewBase is updating its UI with data items during initial load or scrolling.
    /// - Parameter duration: The maximum target time between two render passes.
    public func setDesiredContainerUpdateDuration(_ duration: WindowsFoundation_TimeSpan) throws {
        try _ilistViewBase.setDesiredContainerUpdateDuration(duration)
    }

    /// Selects a block of items described by the ItemIndexRange.
    /// - Parameter itemIndexRange: Information about the range of items, including the index of the first and last items in the range, and the number of items.
    public func selectRange(_ itemIndexRange: MicrosoftUIXamlData_ItemIndexRange?) throws {
        try _ilistViewBase.selectRange(itemIndexRange)
    }

    /// Deselects a block of items described by the ItemIndexRange.
    /// - Parameter itemIndexRange: Information about the range of items, including the index of the first and last items in the range, and the number of items.
    public func deselectRange(_ itemIndexRange: MicrosoftUIXamlData_ItemIndexRange?) throws {
        try _ilistViewBase.deselectRange(itemIndexRange)
    }

    /// Returns a value that indicates whether the list view is both the drag source and drop target in a drag-and-drop operation.
    /// - Returns: true if the list view is both the drag source and drop target; otherwise, false.
    public func isDragSource() throws -> Swift.Bool {
        try _ilistViewBase.isDragSource()
    }

    /// Attempts to start the animation.
    /// - Parameter animation: The animation to start.
    /// - Parameter item: The data item that is animated into view.
    /// - Parameter elementName: The name of the element in the ItemTemplate that provides the animated visual.
    /// - Returns: true if the animation started; false if the animation has already been started, if it is no longer active, or if the destination element is the same as the source element.
    public func tryStartConnectedAnimationAsync(_ animation: MicrosoftUIXamlMediaAnimation_ConnectedAnimation?, _ item: WindowsRuntime.IInspectable?, _ elementName: Swift.String) throws -> WindowsFoundation_IAsyncOperation<Swift.Bool> {
        try COM.NullResult.unwrap(_ilistViewBase.tryStartConnectedAnimationAsync(animation, item, elementName))
    }

    /// Returns a connected animation that's associated with the specified key, data item, and source element.
    /// - Parameter key: The key for the animation.
    /// - Parameter item: The data item that is animated out of view.
    /// - Parameter elementName: The name of the element in the ItemTemplate that provides the animated visual.
    /// - Returns: The animation with the specified key.
    public func prepareConnectedAnimation(_ key: Swift.String, _ item: WindowsRuntime.IInspectable?, _ elementName: Swift.String) throws -> MicrosoftUIXamlMediaAnimation_ConnectedAnimation {
        try COM.NullResult.unwrap(_ilistViewBase.prepareConnectedAnimation(key, item, elementName))
    }

    /// Occurs when an item container is to be chosen for a data group.
    @discardableResult
    public func choosingGroupHeaderContainer(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ChoosingGroupHeaderContainerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase.add_ChoosingGroupHeaderContainer(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).choosingGroupHeaderContainer(removing: token) })
    }

    public func choosingGroupHeaderContainer(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase.remove_ChoosingGroupHeaderContainer(token)
    }

    /// Occurs when an item container is to be chosen for a data item.
    @discardableResult
    public func choosingItemContainer(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ChoosingItemContainerEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase.add_ChoosingItemContainer(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).choosingItemContainer(removing: token) })
    }

    public func choosingItemContainer(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase.remove_ChoosingItemContainer(token)
    }

    /// Occurs when the data item associated with a UI container changes.
    @discardableResult
    public func containerContentChanging(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ContainerContentChangingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase.add_ContainerContentChanging(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).containerContentChanging(removing: token) })
    }

    public func containerContentChanging(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase.remove_ContainerContentChanging(token)
    }

    /// Occurs when a drag operation that involves one of the items in the view is ended.
    @discardableResult
    public func dragItemsCompleted(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_DragItemsCompletedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase.add_DragItemsCompleted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).dragItemsCompleted(removing: token) })
    }

    public func dragItemsCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase.remove_DragItemsCompleted(token)
    }

    /// Occurs when a drag operation that involves one of the items in the view is initiated.
    @discardableResult
    public func dragItemsStarting(adding handler: MicrosoftUIXamlControls_DragItemsStartingEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase.add_DragItemsStarting(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).dragItemsStarting(removing: token) })
    }

    public func dragItemsStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase.remove_DragItemsStarting(token)
    }

    /// Occurs when an item in the list view receives an interaction, and the IsItemClickEnabled property is true.
    @discardableResult
    public func itemClick(adding handler: MicrosoftUIXamlControls_ItemClickEventHandler?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ilistViewBase.add_ItemClick(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).itemClick(removing: token) })
    }

    public func itemClick(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ilistViewBase.remove_ItemClick(token)
    }

    /// true if items in the view can be dragged as data payload; otherwise, false. The default is false.
    public var canDragItems: Swift.Bool {
        get throws {
            try _ilistViewBase.get_CanDragItems()
        }
    }

    /// Sets a value that indicates whether items in the view can be dragged as data payload.
    /// - Parameter newValue: true if items in the view can be dragged as data payload; otherwise, false. The default is false.
    public func canDragItems(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_CanDragItems(value)
    }

    /// Gets or sets a value that indicates whether items in the view can be dragged as data payload.
    public var canDragItems_: Swift.Bool {
        get {
            try! self.canDragItems
        }
        set {
            try! self.canDragItems(newValue)
        }
    }

    /// true if items in the view can be reordered through user interaction; otherwise, false. The default is false.
    public var canReorderItems: Swift.Bool {
        get throws {
            try _ilistViewBase.get_CanReorderItems()
        }
    }

    /// Sets a value that indicates whether items in the view can be reordered through user interaction.
    /// - Parameter newValue: true if items in the view can be reordered through user interaction; otherwise, false. The default is false.
    public func canReorderItems(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_CanReorderItems(value)
    }

    /// Gets or sets a value that indicates whether items in the view can be reordered through user interaction.
    public var canReorderItems_: Swift.Bool {
        get {
            try! self.canReorderItems
        }
        set {
            try! self.canReorderItems(newValue)
        }
    }

    /// The amount of data to fetch per interval, in pages. 

    public var dataFetchSize: Swift.Double {
        get throws {
            try _ilistViewBase.get_DataFetchSize()
        }
    }

    /// Sets the amount of data to fetch for virtualizing/prefetch operations.
    /// - Parameter newValue: The amount of data to fetch per interval, in pages. 

    public func dataFetchSize(_ value: Swift.Double) throws {
        try _ilistViewBase.put_DataFetchSize(value)
    }

    /// Gets or sets the amount of data to fetch for virtualizing/prefetch operations.
    public var dataFetchSize_: Swift.Double {
        get {
            try! self.dataFetchSize
        }
        set {
            try! self.dataFetchSize(newValue)
        }
    }

    /// The content of the list footer. The default is null.
    public var footer: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_Footer())
        }
    }

    /// Sets the content for the list footer.
    /// - Parameter newValue: The content of the list footer. The default is null.
    public func footer(_ value: WindowsRuntime.IInspectable?) throws {
        try _ilistViewBase.put_Footer(value)
    }

    /// Gets or sets the content for the list footer.
    public var footer_: WindowsRuntime.IInspectable! {
        get {
            try! NullResult.catch(self.footer)
        }
        set {
            try! self.footer(newValue)
        }
    }

    /// The template that specifies the visualization of the footer object. The default is null.
    public var footerTemplate: MicrosoftUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_FooterTemplate())
        }
    }

    /// Sets the DataTemplate used to display the content of the view footer.
    /// - Parameter newValue: The template that specifies the visualization of the footer object. The default is null.
    public func footerTemplate(_ value: MicrosoftUIXaml_DataTemplate?) throws {
        try _ilistViewBase.put_FooterTemplate(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the view footer.
    public var footerTemplate_: MicrosoftUIXaml_DataTemplate! {
        get {
            try! NullResult.catch(self.footerTemplate)
        }
        set {
            try! self.footerTemplate(newValue)
        }
    }

    /// The collection of Transition style elements that apply to the list footer.
    public var footerTransitions: MicrosoftUIXamlMediaAnimation_TransitionCollection {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_FooterTransitions())
        }
    }

    /// Sets the collection of Transition style elements that apply to the view footer.
    /// - Parameter newValue: The collection of Transition style elements that apply to the list footer.
    public func footerTransitions(_ value: MicrosoftUIXamlMediaAnimation_TransitionCollection?) throws {
        try _ilistViewBase.put_FooterTransitions(value)
    }

    /// Gets or sets the collection of Transition style elements that apply to the view footer.
    public var footerTransitions_: MicrosoftUIXamlMediaAnimation_TransitionCollection! {
        get {
            try! NullResult.catch(self.footerTransitions)
        }
        set {
            try! self.footerTransitions(newValue)
        }
    }

    /// The content of the list header. The default value is null.
    public var header: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_Header())
        }
    }

    /// Sets the content for the list header.
    /// - Parameter newValue: The content of the list header. The default value is null.
    public func header(_ value: WindowsRuntime.IInspectable?) throws {
        try _ilistViewBase.put_Header(value)
    }

    /// Gets or sets the content for the list header.
    public var header_: WindowsRuntime.IInspectable! {
        get {
            try! NullResult.catch(self.header)
        }
        set {
            try! self.header(newValue)
        }
    }

    /// The template that specifies the visualization of the header object. The default is null.
    public var headerTemplate: MicrosoftUIXaml_DataTemplate {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_HeaderTemplate())
        }
    }

    /// Sets the DataTemplate used to display the content of the view header.
    /// - Parameter newValue: The template that specifies the visualization of the header object. The default is null.
    public func headerTemplate(_ value: MicrosoftUIXaml_DataTemplate?) throws {
        try _ilistViewBase.put_HeaderTemplate(value)
    }

    /// Gets or sets the DataTemplate used to display the content of the view header.
    public var headerTemplate_: MicrosoftUIXaml_DataTemplate! {
        get {
            try! NullResult.catch(self.headerTemplate)
        }
        set {
            try! self.headerTemplate(newValue)
        }
    }

    /// The collection of Transition style elements that apply to the list header.
    public var headerTransitions: MicrosoftUIXamlMediaAnimation_TransitionCollection {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_HeaderTransitions())
        }
    }

    /// Sets the collection of Transition style elements that apply to the view header.
    /// - Parameter newValue: The collection of Transition style elements that apply to the list header.
    public func headerTransitions(_ value: MicrosoftUIXamlMediaAnimation_TransitionCollection?) throws {
        try _ilistViewBase.put_HeaderTransitions(value)
    }

    /// Gets or sets the collection of Transition style elements that apply to the view header.
    public var headerTransitions_: MicrosoftUIXamlMediaAnimation_TransitionCollection! {
        get {
            try! NullResult.catch(self.headerTransitions)
        }
        set {
            try! self.headerTransitions(newValue)
        }
    }

    /// The loading threshold, in terms of pages.
    public var incrementalLoadingThreshold: Swift.Double {
        get throws {
            try _ilistViewBase.get_IncrementalLoadingThreshold()
        }
    }

    /// Sets the threshold range that governs when the ListViewBase class will begin to prefetch more items.
    /// - Parameter newValue: The loading threshold, in terms of pages.
    public func incrementalLoadingThreshold(_ value: Swift.Double) throws {
        try _ilistViewBase.put_IncrementalLoadingThreshold(value)
    }

    /// Gets or sets the threshold range that governs when the ListViewBase class will begin to prefetch more items.
    public var incrementalLoadingThreshold_: Swift.Double {
        get {
            try! self.incrementalLoadingThreshold
        }
        set {
            try! self.incrementalLoadingThreshold(newValue)
        }
    }

    /// An enumeration value that indicates the conditions that trigger prefetch operations. The default is Edge.
    public var incrementalLoadingTrigger: MicrosoftUIXamlControls_IncrementalLoadingTrigger {
        get throws {
            try _ilistViewBase.get_IncrementalLoadingTrigger()
        }
    }

    /// Sets a value that indicates the conditions for prefetch operations by the ListViewBase class.
    /// - Parameter newValue: An enumeration value that indicates the conditions that trigger prefetch operations. The default is Edge.
    public func incrementalLoadingTrigger(_ value: MicrosoftUIXamlControls_IncrementalLoadingTrigger) throws {
        try _ilistViewBase.put_IncrementalLoadingTrigger(value)
    }

    /// Gets or sets a value that indicates the conditions for prefetch operations by the ListViewBase class.
    public var incrementalLoadingTrigger_: MicrosoftUIXamlControls_IncrementalLoadingTrigger {
        get {
            try! self.incrementalLoadingTrigger
        }
        set {
            try! self.incrementalLoadingTrigger(newValue)
        }
    }

    /// true if interaction fires an ItemClick event; otherwise, false. The default is false.
    public var isItemClickEnabled: Swift.Bool {
        get throws {
            try _ilistViewBase.get_IsItemClickEnabled()
        }
    }

    /// Sets a value that indicates whether items in the view fire an ItemClick event in response to interaction.
    /// - Parameter newValue: true if interaction fires an ItemClick event; otherwise, false. The default is false.
    public func isItemClickEnabled(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_IsItemClickEnabled(value)
    }

    /// Gets or sets a value that indicates whether items in the view fire an ItemClick event in response to interaction.
    public var isItemClickEnabled_: Swift.Bool {
        get {
            try! self.isItemClickEnabled
        }
        set {
            try! self.isItemClickEnabled(newValue)
        }
    }

    /// true if a check box is shown to enable multi-selection; otherwise, false.
    public var isMultiSelectCheckBoxEnabled: Swift.Bool {
        get throws {
            try _ilistViewBase.get_IsMultiSelectCheckBoxEnabled()
        }
    }

    /// Sets a value that indicates whether a check box is shown to enable multi-selection.
    /// - Parameter newValue: true if a check box is shown to enable multi-selection; otherwise, false.
    public func isMultiSelectCheckBoxEnabled(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_IsMultiSelectCheckBoxEnabled(value)
    }

    /// Gets or sets a value that indicates whether a check box is shown to enable multi-selection.
    public var isMultiSelectCheckBoxEnabled_: Swift.Bool {
        get {
            try! self.isMultiSelectCheckBoxEnabled
        }
        set {
            try! self.isMultiSelectCheckBoxEnabled(newValue)
        }
    }

    /// true if discrete input processing for swipe interactions is enabled; otherwise, false. The default is true.
    public var isSwipeEnabled: Swift.Bool {
        get throws {
            try _ilistViewBase.get_IsSwipeEnabled()
        }
    }

    /// Sets a value that indicates whether the view supports discrete input processing for a swipe interaction.
    /// - Parameter newValue: true if discrete input processing for swipe interactions is enabled; otherwise, false. The default is true.
    public func isSwipeEnabled(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_IsSwipeEnabled(value)
    }

    /// Gets or sets a value that indicates whether the view supports discrete input processing for a swipe interaction.
    public var isSwipeEnabled_: Swift.Bool {
        get {
            try! self.isSwipeEnabled
        }
        set {
            try! self.isSwipeEnabled(newValue)
        }
    }

    /// One of the ListViewReorderMode enumeration values. The default is Disabled.
    public var reorderMode: MicrosoftUIXamlControls_ListViewReorderMode {
        get throws {
            try _ilistViewBase.get_ReorderMode()
        }
    }

    /// Sets the reorder behavior for a ListViewBase instance. When Enabled, unsorted and ungrouped lists can be reordered by user manipulation.
    /// - Parameter newValue: One of the ListViewReorderMode enumeration values. The default is Disabled.
    public func reorderMode(_ value: MicrosoftUIXamlControls_ListViewReorderMode) throws {
        try _ilistViewBase.put_ReorderMode(value)
    }

    /// Gets or sets the reorder behavior for a ListViewBase instance. When Enabled, unsorted and ungrouped lists can be reordered by user manipulation.
    public var reorderMode_: MicrosoftUIXamlControls_ListViewReorderMode {
        get {
            try! self.reorderMode
        }
        set {
            try! self.reorderMode(newValue)
        }
    }

    /// A collection of the currently selected items. The default is an empty collection.
    public var selectedItems: WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?> {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_SelectedItems())
        }
    }

    /// Gets the currently selected items.
    public var selectedItems_: WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?>! {
        try! NullResult.catch(self.selectedItems)
    }

    /// The collection of ItemIndexRange objects that describe the currently selected items in the list. The default is an empty collection.
    public var selectedRanges: WindowsFoundationCollections_IVectorView<MicrosoftUIXamlData_ItemIndexRange?> {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBase.get_SelectedRanges())
        }
    }

    /// Gets a collection of ItemIndexRange objects that describe the currently selected items in the list.
    public var selectedRanges_: WindowsFoundationCollections_IVectorView<MicrosoftUIXamlData_ItemIndexRange?>! {
        try! NullResult.catch(self.selectedRanges)
    }

    /// One of the ListViewSelectionMode enumeration values. The default is Single selection.
    public var selectionMode: MicrosoftUIXamlControls_ListViewSelectionMode {
        get throws {
            try _ilistViewBase.get_SelectionMode()
        }
    }

    /// Sets the selection behavior for a ListViewBase instance.
    /// - Parameter newValue: One of the ListViewSelectionMode enumeration values. The default is Single selection.
    public func selectionMode(_ value: MicrosoftUIXamlControls_ListViewSelectionMode) throws {
        try _ilistViewBase.put_SelectionMode(value)
    }

    /// Gets or sets the selection behavior for a ListViewBase instance.
    public var selectionMode_: MicrosoftUIXamlControls_ListViewSelectionMode {
        get {
            try! self.selectionMode
        }
        set {
            try! self.selectionMode(newValue)
        }
    }

    /// true if the view shows placeholder UI for items during scrolling; otherwise, false. The default is true.
    public var showsScrollingPlaceholders: Swift.Bool {
        get throws {
            try _ilistViewBase.get_ShowsScrollingPlaceholders()
        }
    }

    /// Sets a value that indicates whether the view shows placeholder UI for items during scrolling.
    /// - Parameter newValue: true if the view shows placeholder UI for items during scrolling; otherwise, false. The default is true.
    public func showsScrollingPlaceholders(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_ShowsScrollingPlaceholders(value)
    }

    /// Gets or sets a value that indicates whether the view shows placeholder UI for items during scrolling.
    public var showsScrollingPlaceholders_: Swift.Bool {
        get {
            try! self.showsScrollingPlaceholders
        }
        set {
            try! self.showsScrollingPlaceholders(newValue)
        }
    }

    /// true if item selection changes when keyboard focus changes; otherwise, false. The default is true.
    public var singleSelectionFollowsFocus: Swift.Bool {
        get throws {
            try _ilistViewBase.get_SingleSelectionFollowsFocus()
        }
    }

    /// Sets a value that indicates whether item selection changes when keyboard focus changes.
    /// - Parameter newValue: true if item selection changes when keyboard focus changes; otherwise, false. The default is true.
    public func singleSelectionFollowsFocus(_ value: Swift.Bool) throws {
        try _ilistViewBase.put_SingleSelectionFollowsFocus(value)
    }

    /// Gets or sets a value that indicates whether item selection changes when keyboard focus changes.
    public var singleSelectionFollowsFocus_: Swift.Bool {
        get {
            try! self.singleSelectionFollowsFocus
        }
        set {
            try! self.singleSelectionFollowsFocus(newValue)
        }
    }

    // MARK: Microsoft.UI.Xaml.Controls.ISemanticZoomInformation members

    /// Initializes the changes to related aspects of presentation (such as scrolling UI or state) when the overall view for a SemanticZoom is about to change.
    public func initializeViewChange() throws {
        try _isemanticZoomInformation.initializeViewChange()
    }

    /// Changes related aspects of presentation when the overall view for a SemanticZoom changes.
    public func completeViewChange() throws {
        try _isemanticZoomInformation.completeViewChange()
    }

    /// Forces content in the view to scroll until the item that's specified by SemanticZoomLocation is visible. Also focuses the item if it finds the item.
    /// - Parameter item: The item in the view to scroll to.
    public func makeVisible(_ item: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.makeVisible(item)
    }

    /// Initializes item-wise operations that are related to a view change when the ListViewBase instance is the source view and the pending destination view is a potentially different implementing view.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func startViewChangeFrom(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.startViewChangeFrom(source, destination)
    }

    /// Initializes item-wise operations that are related to a view change when the source view is a different view and the pending destination view is the ListViewBase instance.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func startViewChangeTo(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.startViewChangeTo(source, destination)
    }

    /// Completes item-wise operations that are related to a view change when the ListViewBase instance is the source view and the new view is a potentially different implementing view.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func completeViewChangeFrom(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.completeViewChangeFrom(source, destination)
    }

    /// Completes item-wise operations that are related to a view change when the ListViewBase instance is the destination view and the source view is a potentially different implementing view.
    /// - Parameter source: The view item as represented in the source view.
    /// - Parameter destination: The view item as represented in the destination view.
    public func completeViewChangeTo(_ source: MicrosoftUIXamlControls_SemanticZoomLocation?, _ destination: MicrosoftUIXamlControls_SemanticZoomLocation?) throws {
        try _isemanticZoomInformation.completeViewChangeTo(source, destination)
    }

    /// true if the ListViewBase is the active view; otherwise, false.
    public var isActiveView: Swift.Bool {
        get throws {
            try _isemanticZoomInformation.get_IsActiveView()
        }
    }

    /// Sets a value that indicates whether the ListViewBase instance is the active view in its owning SemanticZoom.
    /// - Parameter newValue: true if the ListViewBase is the active view; otherwise, false.
    public func isActiveView(_ value: Swift.Bool) throws {
        try _isemanticZoomInformation.put_IsActiveView(value)
    }

    /// true if the ListViewBase is the zoomed-in view; otherwise, false.
    public var isZoomedInView: Swift.Bool {
        get throws {
            try _isemanticZoomInformation.get_IsZoomedInView()
        }
    }

    /// Sets a value that indicates whether the ListViewBase instance is the zoomed-in view in its owning SemanticZoom.
    /// - Parameter newValue: true if the ListViewBase is the zoomed-in view; otherwise, false.
    public func isZoomedInView(_ value: Swift.Bool) throws {
        try _isemanticZoomInformation.put_IsZoomedInView(value)
    }

    /// The SemanticZoom instance that hosts this view, or null if the view is not hosted in a SemanticZoom control. 

    public var semanticZoomOwner: MicrosoftUIXamlControls_SemanticZoom {
        get throws {
            try COM.NullResult.unwrap(_isemanticZoomInformation.get_SemanticZoomOwner())
        }
    }

    /// Sets the SemanticZoom instance that hosts the ListViewBase.
    /// - Parameter newValue: The SemanticZoom instance that hosts this view, or null if the view is not hosted in a SemanticZoom control. 

    public func semanticZoomOwner(_ value: MicrosoftUIXamlControls_SemanticZoom?) throws {
        try _isemanticZoomInformation.put_SemanticZoomOwner(value)
    }

    /// The identifier for the CanDragItems dependency property.
    public static var canDragItemsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_CanDragItemsProperty())
        }
    }

    /// Identifies the CanDragItems dependency property.
    public static var canDragItemsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.canDragItemsProperty)
    }

    /// The identifier for the CanReorderItems dependency property.
    public static var canReorderItemsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_CanReorderItemsProperty())
        }
    }

    /// Identifies the CanReorderItems dependency property.
    public static var canReorderItemsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.canReorderItemsProperty)
    }

    /// The identifier for the DataFetchSize dependency property.
    public static var dataFetchSizeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_DataFetchSizeProperty())
        }
    }

    /// Identifies the DataFetchSize dependency property.
    public static var dataFetchSizeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.dataFetchSizeProperty)
    }

    /// The identifier for the Footer dependency property.
    public static var footerProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_FooterProperty())
        }
    }

    /// Identifies the Footer dependency property.
    public static var footerProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.footerProperty)
    }

    /// The identifier for the FooterTemplate dependency property.
    public static var footerTemplateProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_FooterTemplateProperty())
        }
    }

    /// Identifies the FooterTemplate dependency property.
    public static var footerTemplateProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.footerTemplateProperty)
    }

    /// The identifier for the FooterTransitions dependency property.
    public static var footerTransitionsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_FooterTransitionsProperty())
        }
    }

    /// Identifies the FooterTransitions dependency property.
    public static var footerTransitionsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.footerTransitionsProperty)
    }

    /// The identifier for the Header dependency property.
    public static var headerProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_HeaderProperty())
        }
    }

    /// Identifies the Header dependency property.
    public static var headerProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.headerProperty)
    }

    /// The identifier for the HeaderTemplate dependency property.
    public static var headerTemplateProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_HeaderTemplateProperty())
        }
    }

    /// Identifies the HeaderTemplate dependency property.
    public static var headerTemplateProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.headerTemplateProperty)
    }

    /// The identifier for the HeaderTransitions dependency property.
    public static var headerTransitionsProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_HeaderTransitionsProperty())
        }
    }

    /// Identifies the HeaderTransitions dependency property.
    public static var headerTransitionsProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.headerTransitionsProperty)
    }

    /// The identifier for the IncrementalLoadingThreshold dependency property.
    public static var incrementalLoadingThresholdProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IncrementalLoadingThresholdProperty())
        }
    }

    /// Identifies the IncrementalLoadingThreshold dependency property.
    public static var incrementalLoadingThresholdProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.incrementalLoadingThresholdProperty)
    }

    /// The identifier for the IncrementalLoadingTrigger dependency property.
    public static var incrementalLoadingTriggerProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IncrementalLoadingTriggerProperty())
        }
    }

    /// Identifies the IncrementalLoadingTrigger dependency property.
    public static var incrementalLoadingTriggerProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.incrementalLoadingTriggerProperty)
    }

    /// The identifier for the IsActiveView dependency property.
    public static var isActiveViewProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IsActiveViewProperty())
        }
    }

    /// Identifies the IsActiveView dependency property.
    public static var isActiveViewProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isActiveViewProperty)
    }

    /// The identifier for the IsItemClickEnabled dependency property.
    public static var isItemClickEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IsItemClickEnabledProperty())
        }
    }

    /// Identifies the IsItemClickEnabled dependency property.
    public static var isItemClickEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isItemClickEnabledProperty)
    }

    /// The identifier for the IsMultiSelectCheckBoxEnabled dependency property.
    public static var isMultiSelectCheckBoxEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IsMultiSelectCheckBoxEnabledProperty())
        }
    }

    /// Get the identifier for the IsMultiSelectCheckBoxEnabled dependency property.
    public static var isMultiSelectCheckBoxEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isMultiSelectCheckBoxEnabledProperty)
    }

    /// The identifier for the IsSwipeEnabled dependency property.
    public static var isSwipeEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IsSwipeEnabledProperty())
        }
    }

    /// Identifies the IsSwipeEnabled dependency property.
    public static var isSwipeEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isSwipeEnabledProperty)
    }

    /// The identifier for the IsZoomedInView dependency property.
    public static var isZoomedInViewProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_IsZoomedInViewProperty())
        }
    }

    /// Identifies the IsZoomedInView dependency property.
    public static var isZoomedInViewProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isZoomedInViewProperty)
    }

    /// The identifier for the ReorderMode dependency property.
    public static var reorderModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_ReorderModeProperty())
        }
    }

    /// Identifies the ReorderMode dependency property.
    public static var reorderModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.reorderModeProperty)
    }

    /// The identifier for the SelectionMode dependency property.
    public static var selectionModeProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_SelectionModeProperty())
        }
    }

    /// Identifies the SelectionMode dependency property.
    public static var selectionModeProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.selectionModeProperty)
    }

    /// The identifier for the SemanticZoomOwner dependency property.
    public static var semanticZoomOwnerProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_SemanticZoomOwnerProperty())
        }
    }

    /// Identifies the SemanticZoomOwner dependency property.
    public static var semanticZoomOwnerProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.semanticZoomOwnerProperty)
    }

    /// The identifier for the ShowsScrollingPlaceholders dependency property.
    public static var showsScrollingPlaceholdersProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_ShowsScrollingPlaceholdersProperty())
        }
    }

    /// Identifies the ShowsScrollingPlaceholders dependency property.
    public static var showsScrollingPlaceholdersProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.showsScrollingPlaceholdersProperty)
    }

    /// The identifier for the SingleSelectionFollowsFocus dependency property.
    public static var singleSelectionFollowsFocusProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ilistViewBaseStatics.get_SingleSelectionFollowsFocusProperty())
        }
    }

    /// Identifies the SingleSelectionFollowsFocus dependency property.
    public static var singleSelectionFollowsFocusProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.singleSelectionFollowsFocusProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_IListViewBase>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIListViewBase: COM.COMReference<SWRT_MicrosoftUIXamlControls_IListViewBase>.Optional = .none

    internal var _ilistViewBase: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IListViewBase> {
        get throws {
            try _lazyIListViewBase.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControls_IListViewBase.self)).cast()
            }
        }
    }

    private var _lazyISemanticZoomInformation: COM.COMReference<SWRT_MicrosoftUIXamlControls_ISemanticZoomInformation>.Optional = .none

    internal var _isemanticZoomInformation: COM.COMInterop<SWRT_MicrosoftUIXamlControls_ISemanticZoomInformation> {
        get throws {
            try _lazyISemanticZoomInformation.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlControls_ISemanticZoomInformation.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.ListViewBase")
            }
        }
    }

    private static var _lazyIListViewBaseFactory: COM.COMReference<SWRT_MicrosoftUIXamlControls_IListViewBaseFactory>.Optional = .none

    internal static var _ilistViewBaseFactory: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IListViewBaseFactory> {
        get throws {
            try _lazyIListViewBaseFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IListViewBaseFactory.self)).cast()
            }
        }
    }

    private static var _lazyIListViewBaseStatics: COM.COMReference<SWRT_MicrosoftUIXamlControls_IListViewBaseStatics>.Optional = .none

    internal static var _ilistViewBaseStatics: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IListViewBaseStatics> {
        get throws {
            try _lazyIListViewBaseStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IListViewBaseStatics.self)).cast()
            }
        }
    }
}