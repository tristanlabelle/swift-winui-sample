// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides event data for the ContextMenuOpening event that exists on several text-related UI elements.
public final class MicrosoftUIXamlControls_ContextMenuEventArgs: MicrosoftUIXaml_RoutedEventArgs, @unchecked Sendable {
    /// A value in pixels.
    public var cursorLeft: Swift.Double {
        get throws {
            try _icontextMenuEventArgs.get_CursorLeft()
        }
    }

    /// Gets the pixel offset of the text cursor horizontal position.
    public var cursorLeft_: Swift.Double {
        try! self.cursorLeft
    }

    /// A value in pixels.
    public var cursorTop: Swift.Double {
        get throws {
            try _icontextMenuEventArgs.get_CursorTop()
        }
    }

    /// Gets the pixel offset of the text cursor vertical position.
    public var cursorTop_: Swift.Double {
        try! self.cursorTop
    }

    /// True to mark the routed event handled. False to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public var handled: Swift.Bool {
        get throws {
            try _icontextMenuEventArgs.get_Handled()
        }
    }

    /// Sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    /// - Parameter newValue: True to mark the routed event handled. False to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public func handled(_ value: Swift.Bool) throws {
        try _icontextMenuEventArgs.put_Handled(value)
    }

    /// Gets or sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    public var handled_: Swift.Bool {
        get {
            try! self.handled
        }
        set {
            try! self.handled(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_IContextMenuEventArgs>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIContextMenuEventArgs: COM.COMReference<SWRT_MicrosoftUIXamlControls_IContextMenuEventArgs>.Optional = .none

    internal var _icontextMenuEventArgs: COM.COMInterop<SWRT_MicrosoftUIXamlControls_IContextMenuEventArgs> {
        get throws {
            try _lazyIContextMenuEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlControls_IContextMenuEventArgs.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.ContextMenuEventArgs")
            }
        }
    }
}