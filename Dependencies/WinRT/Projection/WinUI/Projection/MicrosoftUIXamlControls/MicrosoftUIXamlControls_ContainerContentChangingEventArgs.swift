// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides data for the ContainerContentChanging event.
public final class MicrosoftUIXamlControls_ContainerContentChangingEventArgs: WindowsRuntime.WinRTImport<MicrosoftUIXamlControls_ContainerContentChangingEventArgsBinding>, @unchecked Sendable {
    /// Initializes a new instance of the ContainerContentChangingEventArgs class.
    public init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXamlControls_ContainerContentChangingEventArgsBinding.self))
        super.init(_wrapping: consume _instance)
    }

    public func registerUpdateCallback(_ callback: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ContainerContentChangingEventArgs?>?) throws {
        try _interop.registerUpdateCallback(callback)
    }

    public func registerUpdateCallback(_ callbackPhase: Swift.UInt32, _ callback: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlControls_ListViewBase?, MicrosoftUIXamlControls_ContainerContentChangingEventArgs?>?) throws {
        try _interop.registerUpdateCallbackWithPhase(callbackPhase, callback)
    }

    /// true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public var handled: Swift.Bool {
        get throws {
            try _interop.get_Handled()
        }
    }

    /// Sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    /// - Parameter newValue: true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public func handled(_ value: Swift.Bool) throws {
        try _interop.put_Handled(value)
    }

    /// Gets or sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    public var handled_: Swift.Bool {
        get {
            try! self.handled
        }
        set {
            try! self.handled(newValue)
        }
    }

    /// true if the container is in the recycle queue of the ListViewBase; otherwise, false.
    public var inRecycleQueue: Swift.Bool {
        get throws {
            try _interop.get_InRecycleQueue()
        }
    }

    /// Gets a value that indicates whether this container is in the recycle queue of the ListViewBase and is not being used to visualize a data item.
    public var inRecycleQueue_: Swift.Bool {
        try! self.inRecycleQueue
    }

    /// The data item associated with this container, or null if no data is associated with this container.
    public var item: WindowsRuntime.IInspectable {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Item())
        }
    }

    /// Gets the data item associated with this container.
    public var item_: WindowsRuntime.IInspectable! {
        try! NullResult.catch(self.item)
    }

    /// The UI container used to display the current data item.
    public var itemContainer: MicrosoftUIXamlControlsPrimitives_SelectorItem {
        get throws {
            try COM.NullResult.unwrap(_interop.get_ItemContainer())
        }
    }

    /// Gets the UI container used to display the current data item.
    public var itemContainer_: MicrosoftUIXamlControlsPrimitives_SelectorItem! {
        try! NullResult.catch(self.itemContainer)
    }

    /// The index in the ItemsSource of the data item associated with this container. The default is -1.
    public var itemIndex: Swift.Int32 {
        get throws {
            try _interop.get_ItemIndex()
        }
    }

    /// Gets the index in the ItemsSource of the data item associated with this container.
    public var itemIndex_: Swift.Int32 {
        try! self.itemIndex
    }

    /// The number of times this container and data item pair has been called.
    public var phase: Swift.UInt32 {
        get throws {
            try _interop.get_Phase()
        }
    }

    /// Gets the number of times this container and data item pair has been called.
    public var phase_: Swift.UInt32 {
        try! self.phase
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlControls_IContainerContentChangingEventArgs>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs")
            }
        }
    }
}