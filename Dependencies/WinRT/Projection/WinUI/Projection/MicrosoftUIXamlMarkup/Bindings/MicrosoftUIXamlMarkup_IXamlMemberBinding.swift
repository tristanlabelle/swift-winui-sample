// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public enum MicrosoftUIXamlMarkup_IXamlMemberBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftUIXamlMarkup_IXamlMember
    public typealias ABIStruct = SWRT_MicrosoftUIXamlMarkup_IXamlMember

    public static let typeName = "Microsoft.UI.Xaml.Markup.IXamlMember"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftUIXamlMarkup_IXamlMemberBinding>, MicrosoftUIXamlMarkup_IXamlMemberProtocol {
        public func getValue(_ instance: WindowsRuntime.IInspectable?) throws -> WindowsRuntime.IInspectable {
            try COM.NullResult.unwrap(_interop.getValue(instance))
        }

        public func setValue(_ instance: WindowsRuntime.IInspectable?, _ value: WindowsRuntime.IInspectable?) throws {
            try _interop.setValue(instance, value)
        }

        public var isAttachable: Swift.Bool {
            get throws {
                try _interop.get_IsAttachable()
            }
        }

        public var isDependencyProperty: Swift.Bool {
            get throws {
                try _interop.get_IsDependencyProperty()
            }
        }

        public var isReadOnly: Swift.Bool {
            get throws {
                try _interop.get_IsReadOnly()
            }
        }

        public var name: Swift.String {
            get throws {
                try _interop.get_Name()
            }
        }

        public var targetType: MicrosoftUIXamlMarkup_IXamlType {
            get throws {
                try COM.NullResult.unwrap(_interop.get_TargetType())
            }
        }

        public var type: MicrosoftUIXamlMarkup_IXamlType {
            get throws {
                try COM.NullResult.unwrap(_interop.get_Type())
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIXamlMarkup_IXamlMember_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_IsAttachable: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.isAttachable
        } },
        get_IsDependencyProperty: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.isDependencyProperty
        } },
        get_IsReadOnly: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this.isReadOnly
        } },
        get_Name: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.name
            _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
        } },
        get_TargetType: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.targetType)
            _result.pointee = try MicrosoftUIXamlMarkup_IXamlTypeBinding.toABI(_result_swift)
        } },
        get_Type: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.type)
            _result.pointee = try MicrosoftUIXamlMarkup_IXamlTypeBinding.toABI(_result_swift)
        } },
        GetValue: { this, instance, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let instance_swift = WindowsRuntime.IInspectableBinding.fromABI(instance)
            let _result_swift = try COM.NullResult.`catch`(try this.getValue(instance_swift))
            _result.pointee = try WindowsRuntime.IInspectableBinding.toABI(_result_swift)
        } },
        SetValue: { this, instance, value in _implement(this) { this in
            let instance_swift = WindowsRuntime.IInspectableBinding.fromABI(instance)
            let value_swift = WindowsRuntime.IInspectableBinding.fromABI(value)
            try this.setValue(instance_swift, value_swift)
        } }
    )
}