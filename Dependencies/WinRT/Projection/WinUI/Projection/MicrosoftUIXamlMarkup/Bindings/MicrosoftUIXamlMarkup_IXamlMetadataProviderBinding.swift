// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

public enum MicrosoftUIXamlMarkup_IXamlMetadataProviderBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftUIXamlMarkup_IXamlMetadataProvider
    public typealias ABIStruct = SWRT_MicrosoftUIXamlMarkup_IXamlMetadataProvider

    public static let typeName = "Microsoft.UI.Xaml.Markup.IXamlMetadataProvider"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftUIXamlMarkup_IXamlMetadataProviderBinding>, MicrosoftUIXamlMarkup_IXamlMetadataProviderProtocol {
        public func getXamlType(_ type: WindowsUIXamlInterop_TypeName) throws -> MicrosoftUIXamlMarkup_IXamlType {
            try COM.NullResult.unwrap(_interop.getXamlType(type))
        }

        public func getXamlType(_ fullName: Swift.String) throws -> MicrosoftUIXamlMarkup_IXamlType {
            try COM.NullResult.unwrap(_interop.getXamlTypeByFullName(fullName))
        }

        public func getXmlnsDefinitions() throws -> [MicrosoftUIXamlMarkup_XmlnsDefinition] {
            try _interop.getXmlnsDefinitions()
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIXamlMarkup_IXamlMetadataProvider_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        GetXamlType: { this, type, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let type_swift = WindowsUIXamlInterop_TypeName.fromABI(type)
            let _result_swift = try COM.NullResult.`catch`(try this.getXamlType(type_swift))
            _result.pointee = try MicrosoftUIXamlMarkup_IXamlTypeBinding.toABI(_result_swift)
        } },
        GetXamlTypeByFullName: { this, fullName, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let fullName_swift = WindowsRuntime.StringBinding.fromABI(fullName)
            let _result_swift = try COM.NullResult.`catch`(try this.getXamlType(fullName_swift))
            _result.pointee = try MicrosoftUIXamlMarkup_IXamlTypeBinding.toABI(_result_swift)
        } },
        GetXmlnsDefinitions: { this, _resultLength, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try this.getXmlnsDefinitions()
            fatalError("Not implemented: out arrays")
        } }
    )
}