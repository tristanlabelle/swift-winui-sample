// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides data for the ManipulationInertiaStarting event.
public final class MicrosoftUIXamlInput_ManipulationInertiaStartingRoutedEventArgs: MicrosoftUIXaml_RoutedEventArgs, @unchecked Sendable {
    /// Initializes a new instance of the ManipulationInertiaStartingRoutedEventArgs class.
    public override init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXamlInput_ManipulationInertiaStartingRoutedEventArgsBinding.self))
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// The UIElement that is considered the container of the manipulation.
    public var container: MicrosoftUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_imanipulationInertiaStartingRoutedEventArgs.get_Container())
        }
    }

    /// Gets the UIElement that is considered the container of the manipulation.
    public var container_: MicrosoftUIXaml_UIElement! {
        try! NullResult.catch(self.container)
    }

    /// The overall changes since the beginning of the manipulation.
    public var cumulative: MicrosoftUIInput_ManipulationDelta {
        get throws {
            try _imanipulationInertiaStartingRoutedEventArgs.get_Cumulative()
        }
    }

    /// Gets the overall changes since the beginning of the manipulation.
    public var cumulative_: MicrosoftUIInput_ManipulationDelta {
        try! self.cumulative
    }

    /// The most recent changes of the current manipulation.
    public var delta: MicrosoftUIInput_ManipulationDelta {
        get throws {
            try _imanipulationInertiaStartingRoutedEventArgs.get_Delta()
        }
    }

    /// Gets the most recent changes of the current manipulation, as a ManipulationDelta.
    public var delta_: MicrosoftUIInput_ManipulationDelta {
        try! self.delta
    }

    /// The rate of slowdown of expansion inertial movement
    public var expansionBehavior: MicrosoftUIXamlInput_InertiaExpansionBehavior {
        get throws {
            try COM.NullResult.unwrap(_imanipulationInertiaStartingRoutedEventArgs.get_ExpansionBehavior())
        }
    }

    /// Get or sets the rate of slowdown of expansion inertial movement.
    /// - Parameter newValue: The rate of slowdown of expansion inertial movement
    public func expansionBehavior(_ value: MicrosoftUIXamlInput_InertiaExpansionBehavior?) throws {
        try _imanipulationInertiaStartingRoutedEventArgs.put_ExpansionBehavior(value)
    }

    /// Get or sets the rate of slowdown of expansion inertial movement.
    public var expansionBehavior_: MicrosoftUIXamlInput_InertiaExpansionBehavior! {
        get {
            try! NullResult.catch(self.expansionBehavior)
        }
        set {
            try! self.expansionBehavior(newValue)
        }
    }

    /// true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public var handled: Swift.Bool {
        get throws {
            try _imanipulationInertiaStartingRoutedEventArgs.get_Handled()
        }
    }

    /// Sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    /// - Parameter newValue: true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public func handled(_ value: Swift.Bool) throws {
        try _imanipulationInertiaStartingRoutedEventArgs.put_Handled(value)
    }

    /// Gets or sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    public var handled_: Swift.Bool {
        get {
            try! self.handled
        }
        set {
            try! self.handled(newValue)
        }
    }

    /// A value of the enumeration.
    public var pointerDeviceType: MicrosoftUIInput_PointerDeviceType {
        get throws {
            try _imanipulationInertiaStartingRoutedEventArgs.get_PointerDeviceType()
        }
    }

    /// Gets the PointerDeviceType for the pointer device involved in the manipulation.
    public var pointerDeviceType_: MicrosoftUIInput_PointerDeviceType {
        try! self.pointerDeviceType
    }

    /// Manipulation rotation information.
    public var rotationBehavior: MicrosoftUIXamlInput_InertiaRotationBehavior {
        get throws {
            try COM.NullResult.unwrap(_imanipulationInertiaStartingRoutedEventArgs.get_RotationBehavior())
        }
    }

    /// Gets information about the rotation information associated with the manipulation for this event occurrence.
    /// - Parameter newValue: Manipulation rotation information.
    public func rotationBehavior(_ value: MicrosoftUIXamlInput_InertiaRotationBehavior?) throws {
        try _imanipulationInertiaStartingRoutedEventArgs.put_RotationBehavior(value)
    }

    /// Gets information about the rotation information associated with the manipulation for this event occurrence.
    public var rotationBehavior_: MicrosoftUIXamlInput_InertiaRotationBehavior! {
        get {
            try! NullResult.catch(self.rotationBehavior)
        }
        set {
            try! self.rotationBehavior(newValue)
        }
    }

    /// Manipulation translation information.
    public var translationBehavior: MicrosoftUIXamlInput_InertiaTranslationBehavior {
        get throws {
            try COM.NullResult.unwrap(_imanipulationInertiaStartingRoutedEventArgs.get_TranslationBehavior())
        }
    }

    /// Gets information about the translation information associated with the manipulation for this event occurrence.
    /// - Parameter newValue: Manipulation translation information.
    public func translationBehavior(_ value: MicrosoftUIXamlInput_InertiaTranslationBehavior?) throws {
        try _imanipulationInertiaStartingRoutedEventArgs.put_TranslationBehavior(value)
    }

    /// Gets information about the translation information associated with the manipulation for this event occurrence.
    public var translationBehavior_: MicrosoftUIXamlInput_InertiaTranslationBehavior! {
        get {
            try! NullResult.catch(self.translationBehavior)
        }
        set {
            try! self.translationBehavior(newValue)
        }
    }

    /// The rates of the most recent changes to the manipulation.
    public var velocities: MicrosoftUIInput_ManipulationVelocities {
        get throws {
            try _imanipulationInertiaStartingRoutedEventArgs.get_Velocities()
        }
    }

    /// Gets the rates of the most recent changes to the manipulation.
    public var velocities_: MicrosoftUIInput_ManipulationVelocities {
        try! self.velocities
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlInput_IManipulationInertiaStartingRoutedEventArgs>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIManipulationInertiaStartingRoutedEventArgs: COM.COMReference<SWRT_MicrosoftUIXamlInput_IManipulationInertiaStartingRoutedEventArgs>.Optional = .none

    internal var _imanipulationInertiaStartingRoutedEventArgs: COM.COMInterop<SWRT_MicrosoftUIXamlInput_IManipulationInertiaStartingRoutedEventArgs> {
        get throws {
            try _lazyIManipulationInertiaStartingRoutedEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlInput_IManipulationInertiaStartingRoutedEventArgs.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs")
            }
        }
    }
}