// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides data for the NoFocusCandidateFound event.
public final class MicrosoftUIXamlInput_NoFocusCandidateFoundEventArgs: MicrosoftUIXaml_RoutedEventArgs, @unchecked Sendable {
    /// The direction of focus movement.
    public var direction: MicrosoftUIXamlInput_FocusNavigationDirection {
        get throws {
            try _inoFocusCandidateFoundEventArgs.get_Direction()
        }
    }

    /// Gets the direction that focus moved from element to element within the app UI.
    public var direction_: MicrosoftUIXamlInput_FocusNavigationDirection {
        try! self.direction
    }

    /// true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public var handled: Swift.Bool {
        get throws {
            try _inoFocusCandidateFoundEventArgs.get_Handled()
        }
    }

    /// Sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    /// - Parameter newValue: true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public func handled(_ value: Swift.Bool) throws {
        try _inoFocusCandidateFoundEventArgs.put_Handled(value)
    }

    /// Gets or sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    public var handled_: Swift.Bool {
        get {
            try! self.handled
        }
        set {
            try! self.handled(newValue)
        }
    }

    /// The input device type.
    public var inputDevice: MicrosoftUIXamlInput_FocusInputDeviceKind {
        get throws {
            try _inoFocusCandidateFoundEventArgs.get_InputDevice()
        }
    }

    /// Gets the input device type from which input events are received.
    public var inputDevice_: MicrosoftUIXamlInput_FocusInputDeviceKind {
        try! self.inputDevice
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlInput_INoFocusCandidateFoundEventArgs>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyINoFocusCandidateFoundEventArgs: COM.COMReference<SWRT_MicrosoftUIXamlInput_INoFocusCandidateFoundEventArgs>.Optional = .none

    internal var _inoFocusCandidateFoundEventArgs: COM.COMInterop<SWRT_MicrosoftUIXamlInput_INoFocusCandidateFoundEventArgs> {
        get throws {
            try _lazyINoFocusCandidateFoundEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlInput_INoFocusCandidateFoundEventArgs.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs")
            }
        }
    }
}