// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides data for the FocusManager.GettingFocus and UIElement.GettingFocus events.
public final class MicrosoftUIXamlInput_GettingFocusEventArgs: MicrosoftUIXaml_RoutedEventArgs, @unchecked Sendable {
    /// Attempts to cancel the ongoing focus action.
    /// - Returns: true if the focus action is canceled; otherwise, false.
    public func tryCancel() throws -> Swift.Bool {
        try _igettingFocusEventArgs.tryCancel()
    }

    /// Attempts to redirect focus to the specified element instead of the original targeted element.
    /// - Parameter element: The object on which to set focus.
    /// - Returns: true if the focus action is redirected; otherwise, false.
    public func trySetNewFocusedElement(_ element: MicrosoftUIXaml_DependencyObject?) throws -> Swift.Bool {
        try _igettingFocusEventArgs.trySetNewFocusedElement(element)
    }

    /// true if focus navigation should be canceled; otherwise, false.
    public var cancel: Swift.Bool {
        get throws {
            try _igettingFocusEventArgs.get_Cancel()
        }
    }

    /// Sets whether focus navigation should be canceled.
    /// - Parameter newValue: true if focus navigation should be canceled; otherwise, false.
    public func cancel(_ value: Swift.Bool) throws {
        try _igettingFocusEventArgs.put_Cancel(value)
    }

    /// Gets or sets whether focus navigation should be canceled.
    public var cancel_: Swift.Bool {
        get {
            try! self.cancel
        }
        set {
            try! self.cancel(newValue)
        }
    }

    /// The unique ID, if any; otherwise, null. The default is null.
    public var correlationId: COM.GUID {
        get throws {
            try _igettingFocusEventArgs.get_CorrelationId()
        }
    }

    /// Gets the unique ID generated when a focus movement event is initiated.
    public var correlationId_: COM.GUID {
        try! self.correlationId
    }

    /// The direction of focus movement.
    public var direction: MicrosoftUIXamlInput_FocusNavigationDirection {
        get throws {
            try _igettingFocusEventArgs.get_Direction()
        }
    }

    /// Gets the direction that focus moved from element to element within the app UI.
    public var direction_: MicrosoftUIXamlInput_FocusNavigationDirection {
        try! self.direction
    }

    /// How the element obtained focus.
    public var focusState: MicrosoftUIXaml_FocusState {
        get throws {
            try _igettingFocusEventArgs.get_FocusState()
        }
    }

    /// Gets the input mode through which an element obtained focus.
    public var focusState_: MicrosoftUIXaml_FocusState {
        try! self.focusState
    }

    /// true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public var handled: Swift.Bool {
        get throws {
            try _igettingFocusEventArgs.get_Handled()
        }
    }

    /// Sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    /// - Parameter newValue: true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.
    public func handled(_ value: Swift.Bool) throws {
        try _igettingFocusEventArgs.put_Handled(value)
    }

    /// Gets or sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
    public var handled_: Swift.Bool {
        get {
            try! self.handled
        }
        set {
            try! self.handled(newValue)
        }
    }

    /// The input device type.
    public var inputDevice: MicrosoftUIXamlInput_FocusInputDeviceKind {
        get throws {
            try _igettingFocusEventArgs.get_InputDevice()
        }
    }

    /// Gets the input device type from which input events are received.
    public var inputDevice_: MicrosoftUIXamlInput_FocusInputDeviceKind {
        try! self.inputDevice
    }

    /// The most recent focused object.
    public var newFocusedElement: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_igettingFocusEventArgs.get_NewFocusedElement())
        }
    }

    /// Sets the most recent focused object.
    /// - Parameter newValue: The most recent focused object.
    public func newFocusedElement(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _igettingFocusEventArgs.put_NewFocusedElement(value)
    }

    /// Gets or sets the most recent focused object.
    public var newFocusedElement_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.newFocusedElement)
        }
        set {
            try! self.newFocusedElement(newValue)
        }
    }

    /// The last focused object.
    public var oldFocusedElement: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_igettingFocusEventArgs.get_OldFocusedElement())
        }
    }

    /// Gets the last focused object.
    public var oldFocusedElement_: MicrosoftUIXaml_DependencyObject! {
        try! NullResult.catch(self.oldFocusedElement)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlInput_IGettingFocusEventArgs>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIGettingFocusEventArgs: COM.COMReference<SWRT_MicrosoftUIXamlInput_IGettingFocusEventArgs>.Optional = .none

    internal var _igettingFocusEventArgs: COM.COMInterop<SWRT_MicrosoftUIXamlInput_IGettingFocusEventArgs> {
        get throws {
            try _lazyIGettingFocusEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlInput_IGettingFocusEventArgs.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Input.GettingFocusEventArgs")
            }
        }
    }
}