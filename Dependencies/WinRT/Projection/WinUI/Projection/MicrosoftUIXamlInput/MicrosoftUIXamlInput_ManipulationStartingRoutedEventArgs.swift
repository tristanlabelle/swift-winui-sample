// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides data for the ManipulationStarting, event.
public final class MicrosoftUIXamlInput_ManipulationStartingRoutedEventArgs: MicrosoftUIXaml_RoutedEventArgs, @unchecked Sendable {
    /// Initializes a new instance of the ManipulationStartingRoutedEventArgs class.
    public override init() throws {
        let _instance = COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: MicrosoftUIXamlInput_ManipulationStartingRoutedEventArgsBinding.self))
        super.init(_wrapping: _instance.cast()) // Transitively casts down to IInspectable
    }

    /// The UIElement that is considered the container of the manipulation.
    public var container: MicrosoftUIXaml_UIElement {
        get throws {
            try COM.NullResult.unwrap(_imanipulationStartingRoutedEventArgs.get_Container())
        }
    }

    /// Gets the UIElement that is considered the container of the manipulation.
    /// - Parameter newValue: The UIElement that is considered the container of the manipulation.
    public func container(_ value: MicrosoftUIXaml_UIElement?) throws {
        try _imanipulationStartingRoutedEventArgs.put_Container(value)
    }

    /// Gets the UIElement that is considered the container of the manipulation.
    public var container_: MicrosoftUIXaml_UIElement! {
        get {
            try! NullResult.catch(self.container)
        }
        set {
            try! self.container(newValue)
        }
    }

    /// true to mark the routed event handled; false to leave the routed event unhandled, which permits the event to potentially route further. The default is false.
    public var handled: Swift.Bool {
        get throws {
            try _imanipulationStartingRoutedEventArgs.get_Handled()
        }
    }

    /// Sets a value that marks the routed event as handled. Setting to true prevents most handlers along the event route from handling the same event again.
    /// - Parameter newValue: true to mark the routed event handled; false to leave the routed event unhandled, which permits the event to potentially route further. The default is false.
    public func handled(_ value: Swift.Bool) throws {
        try _imanipulationStartingRoutedEventArgs.put_Handled(value)
    }

    /// Gets or sets a value that marks the routed event as handled. Setting to true prevents most handlers along the event route from handling the same event again.
    public var handled_: Swift.Bool {
        get {
            try! self.handled
        }
        set {
            try! self.handled(newValue)
        }
    }

    /// One of the enumeration values. The default is All.
    public var mode: MicrosoftUIXamlInput_ManipulationModes {
        get throws {
            try _imanipulationStartingRoutedEventArgs.get_Mode()
        }
    }

    /// Sets which types of manipulations are possible.
    /// - Parameter newValue: One of the enumeration values. The default is All.
    public func mode(_ value: MicrosoftUIXamlInput_ManipulationModes) throws {
        try _imanipulationStartingRoutedEventArgs.put_Mode(value)
    }

    /// Gets or sets which types of manipulations are possible.
    public var mode_: MicrosoftUIXamlInput_ManipulationModes {
        get {
            try! self.mode
        }
        set {
            try! self.mode(newValue)
        }
    }

    /// An object that describes the pivot for a single-point manipulation.
    public var pivot: MicrosoftUIXamlInput_ManipulationPivot {
        get throws {
            try COM.NullResult.unwrap(_imanipulationStartingRoutedEventArgs.get_Pivot())
        }
    }

    /// Sets an object that describes the pivot for a single-point manipulation.
    /// - Parameter newValue: An object that describes the pivot for a single-point manipulation.
    public func pivot(_ value: MicrosoftUIXamlInput_ManipulationPivot?) throws {
        try _imanipulationStartingRoutedEventArgs.put_Pivot(value)
    }

    /// Gets or sets an object that describes the pivot for a single-point manipulation.
    public var pivot_: MicrosoftUIXamlInput_ManipulationPivot! {
        get {
            try! NullResult.catch(self.pivot)
        }
        set {
            try! self.pivot(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlInput_IManipulationStartingRoutedEventArgs>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIManipulationStartingRoutedEventArgs: COM.COMReference<SWRT_MicrosoftUIXamlInput_IManipulationStartingRoutedEventArgs>.Optional = .none

    internal var _imanipulationStartingRoutedEventArgs: COM.COMInterop<SWRT_MicrosoftUIXamlInput_IManipulationStartingRoutedEventArgs> {
        get throws {
            try _lazyIManipulationStartingRoutedEventArgs.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIXamlInput_IManipulationStartingRoutedEventArgs.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs")
            }
        }
    }
}