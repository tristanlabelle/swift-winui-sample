// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Represents a keyboard shortcut (or accelerator) that lets a user perform an action using the keyboard instead of navigating the app UI (directly or through access keys).

/// Accelerators are typically assigned to buttons or menu items.
open class MicrosoftUIXamlInput_KeyboardAccelerator: MicrosoftUIXaml_DependencyObject, @unchecked Sendable {
    /// Initializes a new instance of the KeyboardAccelerator class.
    public override init() throws {
        try super.init(_compose: Self.self != MicrosoftUIXamlInput_KeyboardAccelerator.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._ikeyboardAcceleratorFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    /// Occurs when the key combination for this KeyboardAccelerator is pressed.
    @discardableResult
    public func invoked(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIXamlInput_KeyboardAccelerator?, MicrosoftUIXamlInput_KeyboardAcceleratorInvokedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _ikeyboardAccelerator.add_Invoked(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).invoked(removing: token) })
    }

    public func invoked(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _ikeyboardAccelerator.remove_Invoked(token)
    }

    /// true if the shortcut is available; otherwise, false.
    public var isEnabled: Swift.Bool {
        get throws {
            try _ikeyboardAccelerator.get_IsEnabled()
        }
    }

    /// Sets whether a keyboard shortcut (accelerator) is available to the user.
    /// - Parameter newValue: true if the shortcut is available; otherwise, false.
    public func isEnabled(_ value: Swift.Bool) throws {
        try _ikeyboardAccelerator.put_IsEnabled(value)
    }

    /// Gets or sets whether a keyboard shortcut (accelerator) is available to the user.
    public var isEnabled_: Swift.Bool {
        get {
            try! self.isEnabled
        }
        set {
            try! self.isEnabled(newValue)
        }
    }

    /// The virtual-key.
    public var key: WindowsSystem_VirtualKey {
        get throws {
            try _ikeyboardAccelerator.get_Key()
        }
    }

    /// Sets the virtual-key (used in conjunction with one or more modifier keys) for a keyboard shortcut (accelerator).

    /// A keyboard shortcut is invoked when the modifier keys associated with the shortcut are pressed and then the non-modifier key is pressed at the same time. For example, Ctrl+C for copy and Ctrl+S for save.
    /// - Parameter newValue: The virtual-key.
    public func key(_ value: WindowsSystem_VirtualKey) throws {
        try _ikeyboardAccelerator.put_Key(value)
    }

    /// Gets or sets the virtual-key (used in conjunction with one or more modifier keys) for a keyboard shortcut (accelerator).

    /// A keyboard shortcut is invoked when the modifier keys associated with the shortcut are pressed and then the non-modifier key is pressed at the same time. For example, Ctrl+C for copy and Ctrl+S for save.
    public var key_: WindowsSystem_VirtualKey {
        get {
            try! self.key
        }
        set {
            try! self.key(newValue)
        }
    }

    /// The virtual-key.
    public var modifiers: WindowsSystem_VirtualKeyModifiers {
        get throws {
            try _ikeyboardAccelerator.get_Modifiers()
        }
    }

    /// Sets the virtual-key used to modify another keypress for a keyboard shortcut (accelerator).

    /// A keyboard shortcut is invoked when the modifier keys associated with the shortcut are pressed and then the non-modifier key is pressed at the same time. For example, Ctrl+C for copy and Ctrl+S for save.
    /// - Parameter newValue: The virtual-key.
    public func modifiers(_ value: WindowsSystem_VirtualKeyModifiers) throws {
        try _ikeyboardAccelerator.put_Modifiers(value)
    }

    /// Gets or sets the virtual-key used to modify another keypress for a keyboard shortcut (accelerator).

    /// A keyboard shortcut is invoked when the modifier keys associated with the shortcut are pressed and then the non-modifier key is pressed at the same time. For example, Ctrl+C for copy and Ctrl+S for save.
    public var modifiers_: WindowsSystem_VirtualKeyModifiers {
        get {
            try! self.modifiers
        }
        set {
            try! self.modifiers(newValue)
        }
    }

    /// The scope (or target) of the keyboard accelerator. The default is null (global scope).
    public var scopeOwner: MicrosoftUIXaml_DependencyObject {
        get throws {
            try COM.NullResult.unwrap(_ikeyboardAccelerator.get_ScopeOwner())
        }
    }

    /// Sets the scope (or target) of the keyboard accelerator.
    /// - Parameter newValue: The scope (or target) of the keyboard accelerator. The default is null (global scope).
    public func scopeOwner(_ value: MicrosoftUIXaml_DependencyObject?) throws {
        try _ikeyboardAccelerator.put_ScopeOwner(value)
    }

    /// Gets or sets the scope (or target) of the keyboard accelerator.
    public var scopeOwner_: MicrosoftUIXaml_DependencyObject! {
        get {
            try! NullResult.catch(self.scopeOwner)
        }
        set {
            try! self.scopeOwner(newValue)
        }
    }

    /// The identifier for the IsEnabled dependency property.
    public static var isEnabledProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ikeyboardAcceleratorStatics.get_IsEnabledProperty())
        }
    }

    /// Identifies the IsEnabled dependency property.
    public static var isEnabledProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.isEnabledProperty)
    }

    /// The identifier for the Key dependency property.
    public static var keyProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ikeyboardAcceleratorStatics.get_KeyProperty())
        }
    }

    /// Identifies the Key dependency property.
    public static var keyProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.keyProperty)
    }

    /// The identifier for the Modifiers dependency property.
    public static var modifiersProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ikeyboardAcceleratorStatics.get_ModifiersProperty())
        }
    }

    /// Identifies the Modifiers dependency property.
    public static var modifiersProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.modifiersProperty)
    }

    /// The identifier for the ScopeOwner dependency property.
    public static var scopeOwnerProperty: MicrosoftUIXaml_DependencyProperty {
        get throws {
            try COM.NullResult.unwrap(_ikeyboardAcceleratorStatics.get_ScopeOwnerProperty())
        }
    }

    /// Identifies the ScopeOwner dependency property.
    public static var scopeOwnerProperty_: MicrosoftUIXaml_DependencyProperty! {
        try! NullResult.catch(Self.scopeOwnerProperty)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIKeyboardAccelerator: COM.COMReference<SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator>.Optional = .none

    internal var _ikeyboardAccelerator: COM.COMInterop<SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator> {
        get throws {
            try _lazyIKeyboardAccelerator.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIXamlInput_IKeyboardAccelerator.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Input.KeyboardAccelerator")
            }
        }
    }

    private static var _lazyIKeyboardAcceleratorFactory: COM.COMReference<SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorFactory>.Optional = .none

    internal static var _ikeyboardAcceleratorFactory: COM.COMInterop<SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorFactory> {
        get throws {
            try _lazyIKeyboardAcceleratorFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorFactory.self)).cast()
            }
        }
    }

    private static var _lazyIKeyboardAcceleratorStatics: COM.COMReference<SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorStatics>.Optional = .none

    internal static var _ikeyboardAcceleratorStatics: COM.COMInterop<SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorStatics> {
        get throws {
            try _lazyIKeyboardAcceleratorStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIXamlInput_IKeyboardAcceleratorStatics.self)).cast()
            }
        }
    }
}