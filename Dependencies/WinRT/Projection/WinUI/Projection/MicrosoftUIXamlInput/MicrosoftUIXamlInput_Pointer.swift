// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK


/// Provides basic properties for the input pointer associated with a single mouse, pen/stylus, or touch contact.
public final class MicrosoftUIXamlInput_Pointer: WindowsRuntime.WinRTImport<MicrosoftUIXamlInput_PointerBinding>, @unchecked Sendable {
    /// true if the pointer device was in contact; otherwise, false.
    public var isInContact: Swift.Bool {
        get throws {
            try _interop.get_IsInContact()
        }
    }

    /// Gets a value that determines whether the pointer device was in contact with a sensor or digitizer at the time that the event was reported.
    public var isInContact_: Swift.Bool {
        try! self.isInContact
    }

    /// true if touch or pen is within detection range or mouse is over; otherwise false
    public var isInRange: Swift.Bool {
        get throws {
            try _interop.get_IsInRange()
        }
    }

    /// Gets a value that indicates whether the pointer device is within detection range of a sensor or digitizer.
    public var isInRange_: Swift.Bool {
        try! self.isInRange
    }

    /// The PointerDeviceType for this pointer reference.
    public var pointerDeviceType: MicrosoftUIInput_PointerDeviceType {
        get throws {
            try _interop.get_PointerDeviceType()
        }
    }

    /// Gets the PointerDeviceType for the pointer device.
    public var pointerDeviceType_: MicrosoftUIInput_PointerDeviceType {
        try! self.pointerDeviceType
    }

    /// The system-generated identifier.
    public var pointerId: Swift.UInt32 {
        get throws {
            try _interop.get_PointerId()
        }
    }

    /// Gets the system-generated identifier for this pointer reference.
    public var pointerId_: Swift.UInt32 {
        try! self.pointerId
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIXamlInput_IPointer>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Xaml.Input.Pointer")
            }
        }
    }
}