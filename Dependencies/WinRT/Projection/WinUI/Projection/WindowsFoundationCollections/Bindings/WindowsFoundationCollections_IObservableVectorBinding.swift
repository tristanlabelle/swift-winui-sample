// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

// MARK: Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.GroupStyle>

extension WindowsFoundationCollections_IObservableVectorBinding {
    internal enum GroupStyle: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IObservableVector<MicrosoftUIXamlControls_GroupStyle?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IObservableVector_MicrosoftUIXamlControls_GroupStyle

        public static let typeName = "Windows.Foundation.Collections.IObservableVector<Microsoft.UI.Xaml.Controls.GroupStyle>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<GroupStyle>, WindowsFoundationCollections_IObservableVectorProtocol {
            public typealias T = MicrosoftUIXamlControls_GroupStyle?

            @discardableResult
            public func vectorChanged(adding vhnd: WindowsFoundationCollections_VectorChangedEventHandler<MicrosoftUIXamlControls_GroupStyle?>?) throws -> WindowsRuntime.EventRegistration {
                let _token = try _interop.add_VectorChanged(vhnd)
                return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).vectorChanged(removing: token) })
            }

            public func vectorChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
                try _interop.remove_VectorChanged(token)
            }

            // MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.GroupStyle> members

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_GroupStyle? {
                try _ivector.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlControls_GroupStyle?> {
                try COM.NullResult.unwrap(_ivector.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlControls_GroupStyle?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _ivector.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_GroupStyle?) throws {
                try _ivector.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_GroupStyle?) throws {
                try _ivector.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _ivector.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlControls_GroupStyle?) throws {
                try _ivector.append(value)
            }

            public func removeAtEnd() throws {
                try _ivector.removeAtEnd()
            }

            public func clear() throws {
                try _ivector.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_GroupStyle?]) throws -> Swift.UInt32 {
                try _ivector.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlControls_GroupStyle?]) throws {
                try _ivector.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _ivector.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.GroupStyle> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_GroupStyle?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIVector: COM.COMReference<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_GroupStyle>.Optional = .none

            internal var _ivector: COM.COMInterop<SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_GroupStyle> {
                get throws {
                    try _lazyIVector.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_GroupStyle.self)).cast()
                    }
                }
            }

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IObservableVector_MicrosoftUIXamlControls_GroupStyle_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            add_VectorChanged: { this, vhnd, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let vhnd_swift = WindowsFoundationCollections_VectorChangedEventHandlerBinding.GroupStyle.fromABI(vhnd)
                let _result_swift = try this.vectorChanged(adding: vhnd_swift).token
                _result.pointee = WindowsRuntime.EventRegistrationToken.toABI(_result_swift)
            } },
            remove_VectorChanged: { this, token in _implement(this) { this in
                let token_swift = WindowsRuntime.EventRegistrationToken.fromABI(token)
                try this.vectorChanged(removing: token_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IObservableVector<Object>

extension WindowsFoundationCollections_IObservableVectorBinding {
    internal enum Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IObservableVector<WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IObservableVector_IInspectable

        public static let typeName = "Windows.Foundation.Collections.IObservableVector<Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Object>, WindowsFoundationCollections_IObservableVectorProtocol {
            public typealias T = WindowsRuntime.IInspectable?

            @discardableResult
            public func vectorChanged(adding vhnd: WindowsFoundationCollections_VectorChangedEventHandler<WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
                let _token = try _interop.add_VectorChanged(vhnd)
                return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).vectorChanged(removing: token) })
            }

            public func vectorChanged(removing token: WindowsRuntime.EventRegistrationToken) throws {
                try _interop.remove_VectorChanged(token)
            }

            // MARK: Windows.Foundation.Collections.IVector<Object> members

            public func getAt(_ index: Swift.UInt32) throws -> WindowsRuntime.IInspectable? {
                try _ivector.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<WindowsRuntime.IInspectable?> {
                try COM.NullResult.unwrap(_ivector.getView())
            }

            public func indexOf(_ value: WindowsRuntime.IInspectable?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _ivector.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: WindowsRuntime.IInspectable?) throws {
                try _ivector.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: WindowsRuntime.IInspectable?) throws {
                try _ivector.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _ivector.removeAt(index)
            }

            public func append(_ value: WindowsRuntime.IInspectable?) throws {
                try _ivector.append(value)
            }

            public func removeAtEnd() throws {
                try _ivector.removeAtEnd()
            }

            public func clear() throws {
                try _ivector.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsRuntime.IInspectable?]) throws -> Swift.UInt32 {
                try _ivector.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [WindowsRuntime.IInspectable?]) throws {
                try _ivector.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _ivector.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Object> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsRuntime.IInspectable?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIVector: COM.COMReference<SWRT_WindowsFoundationCollections_IVector_IInspectable>.Optional = .none

            internal var _ivector: COM.COMInterop<SWRT_WindowsFoundationCollections_IVector_IInspectable> {
                get throws {
                    try _lazyIVector.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IVector_IInspectable.self)).cast()
                    }
                }
            }

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_IInspectable>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_IInspectable> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_IInspectable.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IObservableVector_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            add_VectorChanged: { this, vhnd, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let vhnd_swift = WindowsFoundationCollections_VectorChangedEventHandlerBinding.Object.fromABI(vhnd)
                let _result_swift = try this.vectorChanged(adding: vhnd_swift).token
                _result.pointee = WindowsRuntime.EventRegistrationToken.toABI(_result_swift)
            } },
            remove_VectorChanged: { this, token in _implement(this) { this in
                let token_swift = WindowsRuntime.EventRegistrationToken.fromABI(token)
                try this.vectorChanged(removing: token_swift)
            } }
        )
    }
}