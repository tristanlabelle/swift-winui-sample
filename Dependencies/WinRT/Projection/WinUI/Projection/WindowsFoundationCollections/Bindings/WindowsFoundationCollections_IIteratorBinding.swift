// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum AutomationPeer: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlAutomationPeers_AutomationPeer?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeer

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<AutomationPeer>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlAutomationPeers_AutomationPeer?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlAutomationPeers_AutomationPeer? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeer_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.DependencyObject>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum DependencyObject: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXaml_DependencyObject?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_DependencyObject

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.DependencyObject>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<DependencyObject>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXaml_DependencyObject?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXaml_DependencyObject? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_DependencyObject_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXaml_DependencyObjectBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_DependencyObjectBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.UIElement>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum UIElement: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXaml_UIElement?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_UIElement

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.UIElement>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<UIElement>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXaml_UIElement?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXaml_UIElement? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_UIElement_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXaml_UIElementBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.TriggerBase>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum TriggerBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXaml_TriggerBase?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_TriggerBase

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.TriggerBase>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TriggerBase>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXaml_TriggerBase?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXaml_TriggerBase? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_TriggerBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXaml_TriggerBaseBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Documents.TextHighlighter>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum TextHighlighter: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_TextHighlighter?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextHighlighter

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Documents.TextHighlighter>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TextHighlighter>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlDocuments_TextHighlighter?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlDocuments_TextHighlighter? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextHighlighter_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlDocuments_TextHighlighterBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.RowDefinition>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum RowDefinition: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_RowDefinition?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_RowDefinition

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.RowDefinition>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<RowDefinition>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlControls_RowDefinition?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlControls_RowDefinition? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_RowDefinition_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlControls_RowDefinitionBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Object>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_IInspectable

        public static let typeName = "Windows.Foundation.Collections.IIterator<Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Object>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsRuntime.IInspectable?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsRuntime.IInspectable? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsRuntime.IInspectableBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<String>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_String

        public static let typeName = "Windows.Foundation.Collections.IIterator<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [Swift.String]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: Swift.String {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Point>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Point: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundation_Point>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundation_Point

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Point>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Point>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundation_Point]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundation_Point {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundation_Point_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = WindowsFoundation_Point.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundation_Point>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Input.Pointer>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Pointer: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlInput_Pointer?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_Pointer

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Input.Pointer>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Pointer>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlInput_Pointer?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlInput_Pointer? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_Pointer_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlInput_PointerBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_PointerBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<Object, Object>>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IKeyValuePair_Object_Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<Object, Object>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_Object_Object>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundationCollections_IKeyValuePairBinding.Object_Object.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.Object_Object>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Data.ItemIndexRange>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum ItemIndexRange: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlData_ItemIndexRange?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlData_ItemIndexRange

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Data.ItemIndexRange>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ItemIndexRange>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlData_ItemIndexRange?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlData_ItemIndexRange? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlData_ItemIndexRange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlData_ItemIndexRangeBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlData_ItemIndexRangeBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Media.XamlLight>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum XamlLight: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlMedia_XamlLight?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMedia_XamlLight

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Media.XamlLight>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<XamlLight>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlMedia_XamlLight?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlMedia_XamlLight? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMedia_XamlLight_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlMedia_XamlLightBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Input.KeyboardAccelerator>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum KeyboardAccelerator: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlInput_KeyboardAccelerator?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_KeyboardAccelerator

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Input.KeyboardAccelerator>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<KeyboardAccelerator>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlInput_KeyboardAccelerator?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlInput_KeyboardAccelerator? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlInput_KeyboardAccelerator_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlInput_KeyboardAcceleratorBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.ColumnDefinition>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum ColumnDefinition: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_ColumnDefinition?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_ColumnDefinition

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.ColumnDefinition>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ColumnDefinition>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlControls_ColumnDefinition?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlControls_ColumnDefinition? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_ColumnDefinition_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlControls_ColumnDefinitionBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.ResourceDictionary>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum ResourceDictionary: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXaml_ResourceDictionary?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_ResourceDictionary

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.ResourceDictionary>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ResourceDictionary>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXaml_ResourceDictionary?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXaml_ResourceDictionary? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_ResourceDictionary_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXaml_ResourceDictionaryBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Input.PointerPoint>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum PointerPoint: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIInput_PointerPoint?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIInput_PointerPoint

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Input.PointerPoint>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerPoint>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIInput_PointerPoint?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIInput_PointerPoint? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIInput_PointerPoint_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIInput_PointerPointBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IIterable_Point: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IIterable<WindowsFoundation_Point>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IIterable_WindowsFoundation_Point

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IIterable_Point>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundationCollections_IIterable<WindowsFoundation_Point>?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundationCollections_IIterable<WindowsFoundation_Point>? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IIterable_WindowsFoundation_Point_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundationCollections_IIterableBinding.Point.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IIterableBinding.Point>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Documents.Inline>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Inline: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_Inline?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_Inline

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Documents.Inline>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Inline>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlDocuments_Inline?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlDocuments_Inline? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_Inline_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlDocuments_InlineBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.GroupStyle>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum GroupStyle: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_GroupStyle?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_GroupStyle

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Controls.GroupStyle>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<GroupStyle>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlControls_GroupStyle?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlControls_GroupStyle? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlControls_GroupStyle_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlControls_GroupStyleBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.SetterBase>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum SetterBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXaml_SetterBase?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_SetterBase

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.SetterBase>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<SetterBase>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXaml_SetterBase?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXaml_SetterBase? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXaml_SetterBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXaml_SetterBaseBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Documents.TextRange>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum TextRange: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_TextRange>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextRange

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Documents.TextRange>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TextRange>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlDocuments_TextRange]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlDocuments_TextRange {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlDocuments_TextRange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = MicrosoftUIXamlDocuments_TextRange.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Media.Animation.Transition>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Transition: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlMediaAnimation_Transition?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMediaAnimation_Transition

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Media.Animation.Transition>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Transition>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlMediaAnimation_Transition?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlMediaAnimation_Transition? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlMediaAnimation_Transition_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlMediaAnimation_TransitionBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum AutomationPeerAnnotation: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<AutomationPeerAnnotation>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}