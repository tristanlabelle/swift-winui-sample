// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.SetterBase>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum SetterBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXaml_SetterBase?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_SetterBase

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.SetterBase>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<SetterBase>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXaml_SetterBase?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_SetterBase? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXaml_SetterBase?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXaml_SetterBase?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_SetterBase?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_SetterBase?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXaml_SetterBase?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_SetterBase?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXaml_SetterBase?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.SetterBase> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_SetterBase?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_SetterBase>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_SetterBase> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_SetterBase.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_SetterBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXaml_SetterBaseBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.SetterBase.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXaml_SetterBaseBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_SetterBaseBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_SetterBaseBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_SetterBaseBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_SetterBaseBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.XamlLight>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum XamlLight: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlMedia_XamlLight?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMedia_XamlLight

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.XamlLight>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<XamlLight>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlMedia_XamlLight?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlMedia_XamlLight? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlMedia_XamlLight?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlMedia_XamlLight?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlMedia_XamlLight?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlMedia_XamlLight?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlMedia_XamlLight?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlMedia_XamlLight?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlMedia_XamlLight?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Media.XamlLight> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlMedia_XamlLight?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMedia_XamlLight>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMedia_XamlLight> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMedia_XamlLight.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMedia_XamlLight_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlMedia_XamlLightBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.XamlLight.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlMedia_XamlLightBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlMedia_XamlLightBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlMedia_XamlLightBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlMedia_XamlLightBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlMedia_XamlLightBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.KeyboardAccelerator>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum KeyboardAccelerator: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlInput_KeyboardAccelerator?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlInput_KeyboardAccelerator

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.KeyboardAccelerator>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<KeyboardAccelerator>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlInput_KeyboardAccelerator?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlInput_KeyboardAccelerator? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlInput_KeyboardAccelerator?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlInput_KeyboardAccelerator?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlInput_KeyboardAccelerator?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlInput_KeyboardAccelerator?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlInput_KeyboardAccelerator?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlInput_KeyboardAccelerator?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlInput_KeyboardAccelerator?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.KeyboardAccelerator> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlInput_KeyboardAccelerator?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_KeyboardAccelerator>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_KeyboardAccelerator> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_KeyboardAccelerator.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlInput_KeyboardAccelerator_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlInput_KeyboardAcceleratorBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.KeyboardAccelerator.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlInput_KeyboardAcceleratorBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlInput_KeyboardAcceleratorBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlInput_KeyboardAcceleratorBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlInput_KeyboardAcceleratorBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlInput_KeyboardAcceleratorBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.Transition>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum Transition: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlMediaAnimation_Transition?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.Transition>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Transition>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlMediaAnimation_Transition?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlMediaAnimation_Transition? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlMediaAnimation_Transition?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlMediaAnimation_Transition?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlMediaAnimation_Transition?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlMediaAnimation_Transition?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlMediaAnimation_Transition?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlMediaAnimation_Transition?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlMediaAnimation_Transition?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Media.Animation.Transition> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlMediaAnimation_Transition?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMediaAnimation_Transition>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMediaAnimation_Transition> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMediaAnimation_Transition.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlMediaAnimation_Transition_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlMediaAnimation_TransitionBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.Transition.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlMediaAnimation_TransitionBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlMediaAnimation_TransitionBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlMediaAnimation_TransitionBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlMediaAnimation_TransitionBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlMediaAnimation_TransitionBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.ResourceDictionary>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum ResourceDictionary: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXaml_ResourceDictionary?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_ResourceDictionary

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.ResourceDictionary>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ResourceDictionary>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXaml_ResourceDictionary?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_ResourceDictionary? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXaml_ResourceDictionary?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXaml_ResourceDictionary?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_ResourceDictionary?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_ResourceDictionary?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXaml_ResourceDictionary?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_ResourceDictionary?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXaml_ResourceDictionary?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.ResourceDictionary> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_ResourceDictionary?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_ResourceDictionary>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_ResourceDictionary> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_ResourceDictionary.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_ResourceDictionary_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXaml_ResourceDictionaryBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.ResourceDictionary.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXaml_ResourceDictionaryBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_ResourceDictionaryBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_ResourceDictionaryBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_ResourceDictionaryBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_ResourceDictionaryBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.ColumnDefinition>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum ColumnDefinition: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlControls_ColumnDefinition?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_ColumnDefinition

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.ColumnDefinition>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ColumnDefinition>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlControls_ColumnDefinition?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_ColumnDefinition? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlControls_ColumnDefinition?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlControls_ColumnDefinition?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_ColumnDefinition?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_ColumnDefinition?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlControls_ColumnDefinition?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_ColumnDefinition?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlControls_ColumnDefinition?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.ColumnDefinition> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_ColumnDefinition?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_ColumnDefinition>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_ColumnDefinition> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_ColumnDefinition.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_ColumnDefinition_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlControls_ColumnDefinitionBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.ColumnDefinition.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlControls_ColumnDefinitionBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlControls_ColumnDefinitionBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlControls_ColumnDefinitionBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlControls_ColumnDefinitionBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_ColumnDefinitionBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Object>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_IInspectable

        public static let typeName = "Windows.Foundation.Collections.IVector<Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Object>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = WindowsRuntime.IInspectable?

            public func getAt(_ index: Swift.UInt32) throws -> WindowsRuntime.IInspectable? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<WindowsRuntime.IInspectable?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: WindowsRuntime.IInspectable?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: WindowsRuntime.IInspectable?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: WindowsRuntime.IInspectable?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: WindowsRuntime.IInspectable?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [WindowsRuntime.IInspectable?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [WindowsRuntime.IInspectable?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Object> members

            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsRuntime.IInspectable?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_IInspectable>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_IInspectable> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_IInspectable.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try WindowsRuntime.IInspectableBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.Object.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = WindowsRuntime.IInspectableBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsRuntime.IInspectableBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = WindowsRuntime.IInspectableBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = WindowsRuntime.IInspectableBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.IInspectableBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextHighlighter>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum TextHighlighter: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlDocuments_TextHighlighter?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextHighlighter

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextHighlighter>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TextHighlighter>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlDocuments_TextHighlighter?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlDocuments_TextHighlighter? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlDocuments_TextHighlighter?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlDocuments_TextHighlighter?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_TextHighlighter?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_TextHighlighter?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlDocuments_TextHighlighter?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlDocuments_TextHighlighter?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlDocuments_TextHighlighter?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.TextHighlighter> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_TextHighlighter?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextHighlighter>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextHighlighter> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextHighlighter.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextHighlighter_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlDocuments_TextHighlighterBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.TextHighlighter.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlDocuments_TextHighlighterBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlDocuments_TextHighlighterBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlDocuments_TextHighlighterBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlDocuments_TextHighlighterBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextHighlighterBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum AutomationPeer: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeer?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeer

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<AutomationPeer>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlAutomationPeers_AutomationPeer?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeer? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeer?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlAutomationPeers_AutomationPeer?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlAutomationPeers_AutomationPeer?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeer_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.AutomationPeer.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlAutomationPeers_AutomationPeerBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Input.PointerPoint>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum PointerPoint: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIInput_PointerPoint?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIInput_PointerPoint

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Input.PointerPoint>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerPoint>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIInput_PointerPoint?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIInput_PointerPoint? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIInput_PointerPoint?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIInput_PointerPoint?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIInput_PointerPoint?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIInput_PointerPoint?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIInput_PointerPoint?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIInput_PointerPoint?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIInput_PointerPoint?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Input.PointerPoint> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIInput_PointerPoint?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIInput_PointerPoint>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIInput_PointerPoint> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIInput_PointerPoint.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIInput_PointerPoint_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIInput_PointerPointBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.PointerPoint.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIInput_PointerPointBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIInput_PointerPointBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIInput_PointerPointBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIInput_PointerPointBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIInput_PointerPointBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum AutomationPeerAnnotation: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<AutomationPeerAnnotation>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.AutomationPeerAnnotation.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotationBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.Inline>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum Inline: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlDocuments_Inline?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_Inline

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.Inline>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Inline>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlDocuments_Inline?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlDocuments_Inline? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlDocuments_Inline?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlDocuments_Inline?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_Inline?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_Inline?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlDocuments_Inline?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlDocuments_Inline?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlDocuments_Inline?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.Inline> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_Inline?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_Inline>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_Inline> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_Inline.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_Inline_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlDocuments_InlineBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.Inline.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlDocuments_InlineBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlDocuments_InlineBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlDocuments_InlineBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlDocuments_InlineBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_InlineBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextRange>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum TextRange: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlDocuments_TextRange>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextRange

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextRange>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TextRange>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlDocuments_TextRange

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlDocuments_TextRange {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlDocuments_TextRange> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlDocuments_TextRange, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_TextRange) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlDocuments_TextRange) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlDocuments_TextRange) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlDocuments_TextRange]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlDocuments_TextRange]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.TextRange> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_TextRange> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextRange>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextRange> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextRange.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlDocuments_TextRange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = MicrosoftUIXamlDocuments_TextRange.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.TextRange.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlDocuments_TextRange.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlDocuments_TextRange.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlDocuments_TextRange.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlDocuments_TextRange.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlDocuments_TextRange>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.TriggerBase>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum TriggerBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXaml_TriggerBase?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_TriggerBase

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.TriggerBase>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TriggerBase>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXaml_TriggerBase?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_TriggerBase? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXaml_TriggerBase?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXaml_TriggerBase?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_TriggerBase?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_TriggerBase?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXaml_TriggerBase?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_TriggerBase?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXaml_TriggerBase?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.TriggerBase> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_TriggerBase?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_TriggerBase>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_TriggerBase> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_TriggerBase.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_TriggerBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXaml_TriggerBaseBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.TriggerBase.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXaml_TriggerBaseBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_TriggerBaseBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_TriggerBaseBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_TriggerBaseBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_TriggerBaseBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.GroupStyle>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum GroupStyle: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlControls_GroupStyle?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_GroupStyle

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.GroupStyle>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<GroupStyle>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlControls_GroupStyle?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_GroupStyle? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlControls_GroupStyle?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlControls_GroupStyle?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_GroupStyle?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_GroupStyle?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlControls_GroupStyle?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_GroupStyle?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlControls_GroupStyle?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.GroupStyle> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_GroupStyle?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_GroupStyle_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlControls_GroupStyleBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.GroupStyle.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlControls_GroupStyleBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlControls_GroupStyleBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlControls_GroupStyleBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlControls_GroupStyleBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_GroupStyleBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum UIElement: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXaml_UIElement?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_UIElement

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.UIElement>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<UIElement>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXaml_UIElement?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXaml_UIElement? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXaml_UIElement?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXaml_UIElement?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_UIElement?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXaml_UIElement?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXaml_UIElement?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXaml_UIElement?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXaml_UIElement?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.UIElement> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_UIElement?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_UIElement>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_UIElement> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_UIElement.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXaml_UIElement_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXaml_UIElementBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.UIElement.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXaml_UIElementBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_UIElementBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_UIElementBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXaml_UIElementBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXaml_UIElementBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.RowDefinition>

extension WindowsFoundationCollections_IVectorBinding {
    internal enum RowDefinition: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVector<MicrosoftUIXamlControls_RowDefinition?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_RowDefinition

        public static let typeName = "Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Controls.RowDefinition>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<RowDefinition>, WindowsFoundationCollections_IVectorProtocol {
            public typealias T = MicrosoftUIXamlControls_RowDefinition?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIXamlControls_RowDefinition? {
                try _interop.getAt(index)
            }

            public func getView() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIXamlControls_RowDefinition?> {
                try COM.NullResult.unwrap(_interop.getView())
            }

            public func indexOf(_ value: MicrosoftUIXamlControls_RowDefinition?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func setAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_RowDefinition?) throws {
                try _interop.setAt(index, value)
            }

            public func insertAt(_ index: Swift.UInt32, _ value: MicrosoftUIXamlControls_RowDefinition?) throws {
                try _interop.insertAt(index, value)
            }

            public func removeAt(_ index: Swift.UInt32) throws {
                try _interop.removeAt(index)
            }

            public func append(_ value: MicrosoftUIXamlControls_RowDefinition?) throws {
                try _interop.append(value)
            }

            public func removeAtEnd() throws {
                try _interop.removeAtEnd()
            }

            public func clear() throws {
                try _interop.clear()
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIXamlControls_RowDefinition?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func replaceAll(_ items: [MicrosoftUIXamlControls_RowDefinition?]) throws {
                try _interop.replaceAll(items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.RowDefinition> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_RowDefinition?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_RowDefinition>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_RowDefinition> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_RowDefinition.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVector_MicrosoftUIXamlControls_RowDefinition_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIXamlControls_RowDefinitionBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            GetView: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.getView())
                _result.pointee = try WindowsFoundationCollections_IVectorViewBinding.RowDefinition.toABI(_result_swift)
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIXamlControls_RowDefinitionBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            SetAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlControls_RowDefinitionBinding.fromABI(value)
                try this.setAt(index, value_swift)
            } },
            InsertAt: { this, index, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlControls_RowDefinitionBinding.fromABI(value)
                try this.insertAt(index, value_swift)
            } },
            RemoveAt: { this, index in _implement(this) { this in
                try this.removeAt(index)
            } },
            Append: { this, value in _implement(this) { this in
                let value_swift = MicrosoftUIXamlControls_RowDefinitionBinding.fromABI(value)
                try this.append(value_swift)
            } },
            RemoveAtEnd: { this in _implement(this) { this in
                try this.removeAtEnd()
            } },
            Clear: { this in _implement(this) { this in
                try this.clear()
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } },
            ReplaceAll: { this, itemsLength, items in _implement(this) { this in
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIXamlControls_RowDefinitionBinding>.fromABI(pointer: items, count: itemsLength)
                try this.replaceAll(items_swift)
            } }
        )
    }
}