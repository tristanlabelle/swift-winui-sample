// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinUI_ABI
import UWP
import WindowsAppSDK

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.ResourceDictionary>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum ResourceDictionary: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXaml_ResourceDictionary?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_ResourceDictionary

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.ResourceDictionary>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ResourceDictionary>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_ResourceDictionary?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_ResourceDictionary_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.ResourceDictionary.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IIterable_Point: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IIterable<WindowsFoundation_Point>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IIterable_WindowsFoundation_Point

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IIterable_Point>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IIterable<WindowsFoundation_Point>?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IIterable_WindowsFoundation_Point_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IIterable_Point.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.Inline>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum Inline: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlDocuments_Inline?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_Inline

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.Inline>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Inline>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_Inline?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_Inline_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.Inline.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.ColumnDefinition>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum ColumnDefinition: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlControls_ColumnDefinition?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_ColumnDefinition

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.ColumnDefinition>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ColumnDefinition>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_ColumnDefinition?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_ColumnDefinition_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.ColumnDefinition.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.TextRange>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum TextRange: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlDocuments_TextRange>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextRange

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.TextRange>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TextRange>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_TextRange> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextRange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.TextRange.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.UIElement>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum UIElement: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXaml_UIElement?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_UIElement

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.UIElement>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<UIElement>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_UIElement?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_UIElement_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.UIElement.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.GroupStyle>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum GroupStyle: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlControls_GroupStyle?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.GroupStyle>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<GroupStyle>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_GroupStyle?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_GroupStyle_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.GroupStyle.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum AutomationPeerAnnotation: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeerAnnotation>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<AutomationPeerAnnotation>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeerAnnotation_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.AutomationPeerAnnotation.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<Object, Object>>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IKeyValuePair_Object_Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<Object, Object>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_Object_Object>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<WindowsRuntime.IInspectable?, WindowsRuntime.IInspectable?>?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_IInspectable_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IKeyValuePair_Object_Object.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<String>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_String

        public static let typeName = "Windows.Foundation.Collections.IIterable<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.String> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.String.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.TriggerBase>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum TriggerBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXaml_TriggerBase?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_TriggerBase

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.TriggerBase>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TriggerBase>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_TriggerBase?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_TriggerBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.TriggerBase.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.TextHighlighter>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum TextHighlighter: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlDocuments_TextHighlighter?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextHighlighter

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Documents.TextHighlighter>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<TextHighlighter>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlDocuments_TextHighlighter?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlDocuments_TextHighlighter_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.TextHighlighter.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum AutomationPeer: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlAutomationPeers_AutomationPeer?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<AutomationPeer>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlAutomationPeers_AutomationPeer?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlAutomationPeers_AutomationPeer_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.AutomationPeer.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.RowDefinition>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum RowDefinition: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlControls_RowDefinition?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_RowDefinition

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Controls.RowDefinition>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<RowDefinition>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlControls_RowDefinition?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlControls_RowDefinition_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.RowDefinition.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.SetterBase>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum SetterBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXaml_SetterBase?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_SetterBase

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.SetterBase>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<SetterBase>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_SetterBase?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_SetterBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.SetterBase.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Data.ItemIndexRange>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum ItemIndexRange: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlData_ItemIndexRange?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlData_ItemIndexRange

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Data.ItemIndexRange>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<ItemIndexRange>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlData_ItemIndexRange?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlData_ItemIndexRange_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.ItemIndexRange.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Input.PointerPoint>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum PointerPoint: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIInput_PointerPoint?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIInput_PointerPoint

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Input.PointerPoint>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<PointerPoint>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIInput_PointerPoint?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIInput_PointerPoint_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.PointerPoint.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Media.Animation.Transition>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum Transition: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlMediaAnimation_Transition?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMediaAnimation_Transition

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Media.Animation.Transition>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Transition>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlMediaAnimation_Transition?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMediaAnimation_Transition_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.Transition.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.KeyboardAccelerator>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum KeyboardAccelerator: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlInput_KeyboardAccelerator?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_KeyboardAccelerator

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.KeyboardAccelerator>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<KeyboardAccelerator>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlInput_KeyboardAccelerator?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_KeyboardAccelerator_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.KeyboardAccelerator.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.Pointer>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum Pointer: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlInput_Pointer?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_Pointer

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Input.Pointer>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Pointer>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlInput_Pointer?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlInput_Pointer_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.Pointer.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum Point: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundation_Point>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_Point

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Point>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundation_Point> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundation_Point_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.Point.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Media.XamlLight>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum XamlLight: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXamlMedia_XamlLight?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMedia_XamlLight

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.Media.XamlLight>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<XamlLight>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXamlMedia_XamlLight?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXamlMedia_XamlLight_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.XamlLight.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.DependencyObject>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum DependencyObject: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIXaml_DependencyObject?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_DependencyObject

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.DependencyObject>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<DependencyObject>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIXaml_DependencyObject?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIXaml_DependencyObject_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.DependencyObject.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Object>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum Object: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_IInspectable

        public static let typeName = "Windows.Foundation.Collections.IIterable<Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Object>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsRuntime.IInspectable?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.Object.toABI(_result_swift)
            } }
        )
    }
}