// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP

// MARK: Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Composition.CompositionBatchCompletedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum Object_CompositionBatchCompletedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<WindowsRuntime.IInspectable?, MicrosoftUIComposition_CompositionBatchCompletedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIComposition_CompositionBatchCompletedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Object, Microsoft.UI.Composition.CompositionBatchCompletedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xEF3D5598, 0xA709, 0x5A16, 0x9FD5, 0x5F1393310FF2)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x2CB759F1, 0x1694, 0x5D74, 0xAFC6, 0x5D0FA88F20D3)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Object_CompositionBatchCompletedEventArgs> {
            public func invoke(_ sender: WindowsRuntime.IInspectable?, _ args: MicrosoftUIComposition_CompositionBatchCompletedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_IInspectable_MicrosoftUIComposition_CompositionBatchCompletedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = WindowsRuntime.IInspectableBinding.fromABI(sender)
                let args_swift = MicrosoftUIComposition_CompositionBatchCompletedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow, Microsoft.UI.Windowing.AppWindowClosingEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum AppWindow_AppWindowClosingEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_AppWindow?, MicrosoftUIWindowing_AppWindowClosingEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_AppWindow_MicrosoftUIWindowing_AppWindowClosingEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow, Microsoft.UI.Windowing.AppWindowClosingEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x296AA185, 0x272E, 0x5F04, 0x919E, 0x193B9303CC5E)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x107F5B06, 0xC72E, 0x5258, 0xAF2B, 0x1030E348082E)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<AppWindow_AppWindowClosingEventArgs> {
            public func invoke(_ sender: MicrosoftUIWindowing_AppWindow?, _ args: MicrosoftUIWindowing_AppWindowClosingEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_AppWindow_MicrosoftUIWindowing_AppWindowClosingEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIWindowing_AppWindowBinding.fromABI(sender)
                let args_swift = MicrosoftUIWindowing_AppWindowClosingEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueue, Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DispatcherQueue_DispatcherQueueShutdownStartingEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIDispatching_DispatcherQueue?, MicrosoftUIDispatching_DispatcherQueueShutdownStartingEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIDispatching_DispatcherQueue_MicrosoftUIDispatching_DispatcherQueueShutdownStartingEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueue, Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xE5A1E4A4, 0xF42E, 0x5EFD, 0x9607, 0xFD6D876D7F7D)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xE98213C3, 0xEFB8, 0x569F, 0xA538, 0xF6223A049643)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DispatcherQueue_DispatcherQueueShutdownStartingEventArgs> {
            public func invoke(_ sender: MicrosoftUIDispatching_DispatcherQueue?, _ args: MicrosoftUIDispatching_DispatcherQueueShutdownStartingEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIDispatching_DispatcherQueue_MicrosoftUIDispatching_DispatcherQueueShutdownStartingEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIDispatching_DispatcherQueueBinding.fromABI(sender)
                let args_swift = MicrosoftUIDispatching_DispatcherQueueShutdownStartingEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIslandEnvironment, Microsoft.UI.Content.ContentEnvironmentSettingChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum ContentIslandEnvironment_ContentEnvironmentSettingChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIContent_ContentIslandEnvironment?, MicrosoftUIContent_ContentEnvironmentSettingChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIContent_ContentIslandEnvironment_MicrosoftUIContent_ContentEnvironmentSettingChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIslandEnvironment, Microsoft.UI.Content.ContentEnvironmentSettingChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x34E8D29D, 0x2251, 0x5922, 0xA478, 0xCBD5D08E3C99)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x933E9F92, 0xEF3A, 0x5962, 0x91E6, 0x1DE3CEAA7D54)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ContentIslandEnvironment_ContentEnvironmentSettingChangedEventArgs> {
            public func invoke(_ sender: MicrosoftUIContent_ContentIslandEnvironment?, _ args: MicrosoftUIContent_ContentEnvironmentSettingChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIContent_ContentIslandEnvironment_MicrosoftUIContent_ContentEnvironmentSettingChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIContent_ContentIslandEnvironmentBinding.fromABI(sender)
                let args_swift = MicrosoftUIContent_ContentEnvironmentSettingChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher, Microsoft.UI.Windowing.DisplayArea>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DisplayAreaWatcher_DisplayArea: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_DisplayAreaWatcher?, MicrosoftUIWindowing_DisplayArea?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_DisplayAreaWatcher_MicrosoftUIWindowing_DisplayArea

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher, Microsoft.UI.Windowing.DisplayArea>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xBF1D1B71, 0x9AB9, 0x54DE, 0x8F0B, 0x32797FE20A56)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x5D0E9D44, 0x610E, 0x5C11, 0xA7AE, 0x9B5156675512)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DisplayAreaWatcher_DisplayArea> {
            public func invoke(_ sender: MicrosoftUIWindowing_DisplayAreaWatcher?, _ args: MicrosoftUIWindowing_DisplayArea?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_DisplayAreaWatcher_MicrosoftUIWindowing_DisplayArea_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIWindowing_DisplayAreaWatcherBinding.fromABI(sender)
                let args_swift = MicrosoftUIWindowing_DisplayAreaBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueueTimer, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DispatcherQueueTimer_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIDispatching_DispatcherQueueTimer?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIDispatching_DispatcherQueueTimer_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueueTimer, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xCA1C0242, 0x6BB4, 0x5403, 0x918B, 0x3D22719EF95F)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xF0C2927D, 0x5EA3, 0x5701, 0x9210, 0x963E3FF59D3D)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DispatcherQueueTimer_Object> {
            public func invoke(_ sender: MicrosoftUIDispatching_DispatcherQueueTimer?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIDispatching_DispatcherQueueTimer_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIDispatching_DispatcherQueueTimerBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum AppWindow_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_AppWindow?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_AppWindow_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x7A271295, 0x273B, 0x5AF1, 0x9BEE, 0x9AC3ACCA28F4)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xD60B1FF0, 0xF944, 0x5075, 0x8A1F, 0x94275277321A)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<AppWindow_Object> {
            public func invoke(_ sender: MicrosoftUIWindowing_AppWindow?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_AppWindow_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIWindowing_AppWindowBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow, Microsoft.UI.Windowing.AppWindowChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum AppWindow_AppWindowChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_AppWindow?, MicrosoftUIWindowing_AppWindowChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_AppWindow_MicrosoftUIWindowing_AppWindowChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.AppWindow, Microsoft.UI.Windowing.AppWindowChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xC77A4A95, 0x17B8, 0x5961, 0xA98B, 0x21E087A04A29)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xF6027642, 0x8A5D, 0x57E9, 0x9EC5, 0x6E262B0392EB)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<AppWindow_AppWindowChangedEventArgs> {
            public func invoke(_ sender: MicrosoftUIWindowing_AppWindow?, _ args: MicrosoftUIWindowing_AppWindowChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_AppWindow_MicrosoftUIWindowing_AppWindowChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIWindowing_AppWindowBinding.fromABI(sender)
                let args_swift = MicrosoftUIWindowing_AppWindowChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueue, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DispatcherQueue_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIDispatching_DispatcherQueue?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIDispatching_DispatcherQueue_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Dispatching.DispatcherQueue, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x73CA50E6, 0x3094, 0x5E6F, 0x9561, 0xBDA000F6FE2C)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x621BE26A, 0xB818, 0x528E, 0x8B87, 0x333BCCC0C730)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DispatcherQueue_Object> {
            public func invoke(_ sender: MicrosoftUIDispatching_DispatcherQueue?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIDispatching_DispatcherQueue_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIDispatching_DispatcherQueueBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIslandEnvironment, Microsoft.UI.Content.ContentEnvironmentStateChangedEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum ContentIslandEnvironment_ContentEnvironmentStateChangedEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIContent_ContentIslandEnvironment?, MicrosoftUIContent_ContentEnvironmentStateChangedEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIContent_ContentIslandEnvironment_MicrosoftUIContent_ContentEnvironmentStateChangedEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Content.ContentIslandEnvironment, Microsoft.UI.Content.ContentEnvironmentStateChangedEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x6E2C920C, 0xCA1F, 0x5558, 0xB904, 0xF1463D6F107E)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0x05163FA3, 0x89E9, 0x5E5C, 0xBD0C, 0x40F9E9B1B301)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ContentIslandEnvironment_ContentEnvironmentStateChangedEventArgs> {
            public func invoke(_ sender: MicrosoftUIContent_ContentIslandEnvironment?, _ args: MicrosoftUIContent_ContentEnvironmentStateChangedEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIContent_ContentIslandEnvironment_MicrosoftUIContent_ContentEnvironmentStateChangedEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIContent_ContentIslandEnvironmentBinding.fromABI(sender)
                let args_swift = MicrosoftUIContent_ContentEnvironmentStateChangedEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher, Object>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum DisplayAreaWatcher_Object: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_DisplayAreaWatcher?, WindowsRuntime.IInspectable?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_DisplayAreaWatcher_IInspectable

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.UI.Windowing.DisplayAreaWatcher, Object>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0x2303D266, 0xADE8, 0x5BE5, 0x9F52, 0xBC90A90A7545)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xB4377CCF, 0x0A45, 0x5333, 0x9A15, 0xAEF2A3672AFD)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<DisplayAreaWatcher_Object> {
            public func invoke(_ sender: MicrosoftUIWindowing_DisplayAreaWatcher?, _ args: WindowsRuntime.IInspectable?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftUIWindowing_DisplayAreaWatcher_IInspectable_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftUIWindowing_DisplayAreaWatcherBinding.fromABI(sender)
                let args_swift = WindowsRuntime.IInspectableBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.TypedEventHandler<Microsoft.Windows.ApplicationModel.Resources.ResourceManager, Microsoft.Windows.ApplicationModel.Resources.ResourceNotFoundEventArgs>

extension WindowsFoundation_TypedEventHandlerBinding {
    internal enum ResourceManager_ResourceNotFoundEventArgs: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_TypedEventHandler<MicrosoftWindowsApplicationModelResources_ResourceManager?, MicrosoftWindowsApplicationModelResources_ResourceNotFoundEventArgs?>
        public typealias ABIStruct = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftWindowsApplicationModelResources_ResourceManager_MicrosoftWindowsApplicationModelResources_ResourceNotFoundEventArgs

        public static let typeName = "Windows.Foundation.TypedEventHandler<Microsoft.Windows.ApplicationModel.Resources.ResourceManager, Microsoft.Windows.ApplicationModel.Resources.ResourceNotFoundEventArgs>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xDC270576, 0xDFBB, 0x5E0C, 0xB7C3, 0x0E4E19AB3B0D)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xB9C20E7E, 0xDCB2, 0x55D1, 0xA025, 0xCA3CD77E3D1D)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<ResourceManager_ResourceNotFoundEventArgs> {
            public func invoke(_ sender: MicrosoftWindowsApplicationModelResources_ResourceManager?, _ args: MicrosoftWindowsApplicationModelResources_ResourceNotFoundEventArgs?) throws {
                try _interop.invoke(sender, args)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_TypedEventHandler_MicrosoftWindowsApplicationModelResources_ResourceManager_MicrosoftWindowsApplicationModelResources_ResourceNotFoundEventArgs_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, sender, args in _implement(this) { this in
                let sender_swift = MicrosoftWindowsApplicationModelResources_ResourceManagerBinding.fromABI(sender)
                let args_swift = MicrosoftWindowsApplicationModelResources_ResourceNotFoundEventArgsBinding.fromABI(args)
                try this(sender_swift, args_swift)
            } }
        )
    }
}