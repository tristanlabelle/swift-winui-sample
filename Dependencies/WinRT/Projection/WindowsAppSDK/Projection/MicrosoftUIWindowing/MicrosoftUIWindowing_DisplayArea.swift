// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Represents the area of a display in which a view is able to be shown to a user.
public final class MicrosoftUIWindowing_DisplayArea: WindowsRuntime.WinRTImport<MicrosoftUIWindowing_DisplayAreaBinding>, @unchecked Sendable {
    /// The identifier for the display associated with the DisplayArea.
    public var displayId: MicrosoftUI_DisplayId {
        get throws {
            try _interop.get_DisplayId()
        }
    }

    /// Gets the identifier for the display associated with the DisplayArea.
    public var displayId_: MicrosoftUI_DisplayId {
        try! self.displayId
    }

    /// true if the DisplayArea is located on the primary monitor; otherwise, false.
    public var isPrimary: Swift.Bool {
        get throws {
            try _interop.get_IsPrimary()
        }
    }

    /// Gets a value that indicates whether the DisplayArea is located on the primary monitor.
    public var isPrimary_: Swift.Bool {
        try! self.isPrimary
    }

    /// A rectangle that describes the bounds of the DisplayArea, where the X,Y offset is within the screen coordinate space.
    public var outerBounds: WindowsGraphics_RectInt32 {
        get throws {
            try _interop.get_OuterBounds()
        }
    }

    /// Gets a rectangle that describes the bounds of the DisplayArea, where the X,Y offset is within the screen coordinate space.
    public var outerBounds_: WindowsGraphics_RectInt32 {
        try! self.outerBounds
    }

    /// The rectangle of the work area of the DisplayArea.
    public var workArea: WindowsGraphics_RectInt32 {
        get throws {
            try _interop.get_WorkArea()
        }
    }

    /// Gets the rectangle of the work area of the DisplayArea, where the X,Y offset is within the display area's bounds.
    public var workArea_: WindowsGraphics_RectInt32 {
        try! self.workArea
    }

    /// Gets the DisplayArea for the specified DisplayId.
    /// - Parameter displayId: The identifier of the display for which to get the DisplayArea.
    /// - Returns: The DisplayArea for the specified DisplayId
    public static func getFromDisplayId(_ displayId: MicrosoftUI_DisplayId) throws -> MicrosoftUIWindowing_DisplayArea {
        try COM.NullResult.unwrap(_idisplayAreaStatics2.getFromDisplayId(displayId))
    }

    /// Creates a DisplayAreaWatcher that notifies when a DisplayArea or the collection of display areas has changed.
    /// - Returns: A new instance of DisplayAreaWatcher.
    public static func createWatcher() throws -> MicrosoftUIWindowing_DisplayAreaWatcher {
        try COM.NullResult.unwrap(_idisplayAreaStatics.createWatcher())
    }

    /// Retrieves a list of all display areas currently present in the system.
    /// - Returns: A list of all display areas currently present in the system.
    public static func findAll() throws -> WindowsFoundationCollections_IVectorView<MicrosoftUIWindowing_DisplayArea?> {
        try COM.NullResult.unwrap(_idisplayAreaStatics.findAll())
    }

    /// Gets the DisplayArea for the specified WindowId.
    /// - Parameter windowId: The identifier of the window for which to get the DisplayArea.
    /// - Parameter displayAreaFallback: The DisplayArea to use if no DisplayArea is found with the given parameter.
    /// - Returns: The DisplayArea for the specified WindowId, or the display area indicated by _displayAreaFallback_ if no match is found.
    public static func getFromWindowId(_ windowId: MicrosoftUI_WindowId, _ displayAreaFallback: MicrosoftUIWindowing_DisplayAreaFallback) throws -> MicrosoftUIWindowing_DisplayArea {
        try COM.NullResult.unwrap(_idisplayAreaStatics.getFromWindowId(windowId, displayAreaFallback))
    }

    /// Gets the DisplayArea where the specified Point is present.
    /// - Parameter point: The point for which to get the DisplayArea.
    /// - Parameter displayAreaFallback: The DisplayArea to use if no DisplayArea is found with the given parameter.
    /// - Returns: The DisplayArea where the specified point is present, or the display area indicated by _displayAreaFallback_ if no match is found.
    public static func getFromPoint(_ point: WindowsGraphics_PointInt32, _ displayAreaFallback: MicrosoftUIWindowing_DisplayAreaFallback) throws -> MicrosoftUIWindowing_DisplayArea {
        try COM.NullResult.unwrap(_idisplayAreaStatics.getFromPoint(point, displayAreaFallback))
    }

    /// Gets the DisplayArea where the specified rectangle is present.
    /// - Parameter rect: The rectangle for which to get the DisplayArea.
    /// - Parameter displayAreaFallback: The DisplayArea to use if no DisplayArea is found with the given parameter.
    /// - Returns: The DisplayArea where the specified rectangle is present, or the display area indicated by _displayAreaFallback_ if no match is found.
    public static func getFromRect(_ rect: WindowsGraphics_RectInt32, _ displayAreaFallback: MicrosoftUIWindowing_DisplayAreaFallback) throws -> MicrosoftUIWindowing_DisplayArea {
        try COM.NullResult.unwrap(_idisplayAreaStatics.getFromRect(rect, displayAreaFallback))
    }

    /// The primary DisplayArea for the desktop.
    public static var primary: MicrosoftUIWindowing_DisplayArea {
        get throws {
            try COM.NullResult.unwrap(_idisplayAreaStatics.get_Primary())
        }
    }

    /// Gets the primary DisplayArea for the desktop.
    public static var primary_: MicrosoftUIWindowing_DisplayArea! {
        try! NullResult.catch(Self.primary)
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIWindowing_IDisplayArea>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Windowing.DisplayArea")
            }
        }
    }

    private static var _lazyIDisplayAreaStatics2: COM.COMReference<SWRT_MicrosoftUIWindowing_IDisplayAreaStatics2>.Optional = .none

    internal static var _idisplayAreaStatics2: COM.COMInterop<SWRT_MicrosoftUIWindowing_IDisplayAreaStatics2> {
        get throws {
            try _lazyIDisplayAreaStatics2.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIWindowing_IDisplayAreaStatics2.self)).cast()
            }
        }
    }

    private static var _lazyIDisplayAreaStatics: COM.COMReference<SWRT_MicrosoftUIWindowing_IDisplayAreaStatics>.Optional = .none

    internal static var _idisplayAreaStatics: COM.COMInterop<SWRT_MicrosoftUIWindowing_IDisplayAreaStatics> {
        get throws {
            try _lazyIDisplayAreaStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIWindowing_IDisplayAreaStatics.self)).cast()
            }
        }
    }
}