// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Represents a system-managed container for the content of an app.
public final class MicrosoftUIWindowing_AppWindow: WindowsRuntime.WinRTImport<MicrosoftUIWindowing_AppWindowBinding>, @unchecked Sendable {
    /// Attempts to destroy the app window.
    public func destroy() throws {
        try _interop.destroy()
    }

    /// Hides the window from all UX representations in the system but keeps the object alive.
    public func hide() throws {
        try _interop.hide()
    }

    /// Moves the window to the specified point in screen coordinates.
    /// - Parameter position: The point to move the window to in screen coordinates.
    public func move(_ position: WindowsGraphics_PointInt32) throws {
        try _interop.move(position)
    }

    /// Moves the window to the specified point in screen coordinates and sets it to the specified size.
    /// - Parameter rect: A rectangle that specifies the position and size of the window.
    public func moveAndResize(_ rect: WindowsGraphics_RectInt32) throws {
        try _interop.moveAndResize(rect)
    }

    /// Moves the window to the specified point within the given display area and sets it to the specified size.
    /// - Parameter rect: A rectangle that specifies the position and size of the window.
    /// - Parameter displayarea: The display area where the window is to be positioned.
    public func moveAndResize(_ rect: WindowsGraphics_RectInt32, _ displayarea: MicrosoftUIWindowing_DisplayArea?) throws {
        try _interop.moveAndResizeRelativeToDisplayArea(rect, displayarea)
    }

    /// Resizes the window to the specified size.
    /// - Parameter size: The height and width of the window in screen coordinates.
    public func resize(_ size: WindowsGraphics_SizeInt32) throws {
        try _interop.resize(size)
    }

    public func setIcon(_ iconPath: Swift.String) throws {
        try _interop.setIcon(iconPath)
    }

    public func setIcon(_ iconId: MicrosoftUI_IconId) throws {
        try _interop.setIconWithIconId(iconId)
    }

    public func setPresenter(_ appWindowPresenter: MicrosoftUIWindowing_AppWindowPresenter?) throws {
        try _interop.setPresenter(appWindowPresenter)
    }

    public func setPresenter(_ appWindowPresenterKind: MicrosoftUIWindowing_AppWindowPresenterKind) throws {
        try _interop.setPresenterByKind(appWindowPresenterKind)
    }

    /// Shows the window and activates it.
    public func show() throws {
        try _interop.show()
    }

    /// Shows the window with an option to activate it or not.
    /// - Parameter activateWindow: true to activate the window; otherwise, false.
    public func show(_ activateWindow: Swift.Bool) throws {
        try _interop.showWithActivation(activateWindow)
    }

    /// Occurs when a property of the window has changed, and the system is in a "steady state" for the time being.
    @discardableResult
    public func changed(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_AppWindow?, MicrosoftUIWindowing_AppWindowChangedEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Changed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).changed(removing: token) })
    }

    public func changed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Changed(token)
    }

    /// Occurs when a window is being closed through a system affordance.
    @discardableResult
    public func closing(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_AppWindow?, MicrosoftUIWindowing_AppWindowClosingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Closing(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).closing(removing: token) })
    }

    public func closing(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Closing(token)
    }

    /// Occurs when a window is being destroyed.
    @discardableResult
    public func destroying(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_AppWindow?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Destroying(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).destroying(removing: token) })
    }

    public func destroying(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Destroying(token)
    }

    /// The identifier for the app window.
    public var id: MicrosoftUI_WindowId {
        get throws {
            try _interop.get_Id()
        }
    }

    /// Gets the identifier for the app window.
    public var id_: MicrosoftUI_WindowId {
        try! self.id
    }

    /// true if this window will appear in various system representations, such as ALT+TAB and taskbar; otherwise, false;
    public var isShownInSwitchers: Swift.Bool {
        get throws {
            try _interop.get_IsShownInSwitchers()
        }
    }

    /// Sets a value that indicates whether this window will appear in various system representations, such as ALT+TAB and taskbar.
    /// - Parameter newValue: true if this window will appear in various system representations, such as ALT+TAB and taskbar; otherwise, false;
    public func isShownInSwitchers(_ value: Swift.Bool) throws {
        try _interop.put_IsShownInSwitchers(value)
    }

    /// Gets or sets a value that indicates whether this window will appear in various system representations, such as ALT+TAB and taskbar.
    public var isShownInSwitchers_: Swift.Bool {
        get {
            try! self.isShownInSwitchers
        }
        set {
            try! self.isShownInSwitchers(newValue)
        }
    }

    /// true if the window is shown; otherwise, false.
    public var isVisible: Swift.Bool {
        get throws {
            try _interop.get_IsVisible()
        }
    }

    /// Gets a value that indicates whether the window is shown.
    public var isVisible_: Swift.Bool {
        try! self.isVisible
    }

    /// The identifier of the owner of this window; 0 if not owned.
    public var ownerWindowId: MicrosoftUI_WindowId {
        get throws {
            try _interop.get_OwnerWindowId()
        }
    }

    /// Gets the identifier of the owner of this window; or 0 if not owned.
    public var ownerWindowId_: MicrosoftUI_WindowId {
        try! self.ownerWindowId
    }

    /// The current position of the window in screen coordinates.
    public var position: WindowsGraphics_PointInt32 {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets the current position of the window in screen coordinates.
    public var position_: WindowsGraphics_PointInt32 {
        try! self.position
    }

    /// The currently applied presenter for the app window. The default is null.
    public var presenter: MicrosoftUIWindowing_AppWindowPresenter {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Presenter())
        }
    }

    /// Gets the currently applied presenter for the app window.
    public var presenter_: MicrosoftUIWindowing_AppWindowPresenter! {
        try! NullResult.catch(self.presenter)
    }

    /// The current size of the window in screen coordinates.
    public var size: WindowsGraphics_SizeInt32 {
        get throws {
            try _interop.get_Size()
        }
    }

    /// Gets the current size of the window in screen coordinates.
    public var size_: WindowsGraphics_SizeInt32 {
        try! self.size
    }

    /// The displayed title of the app window. The default is an empty string.
    public var title: Swift.String {
        get throws {
            try _interop.get_Title()
        }
    }

    /// Sets the displayed title of the app window.
    /// - Parameter newValue: The displayed title of the app window. The default is an empty string.
    public func title(_ value: Swift.String) throws {
        try _interop.put_Title(value)
    }

    /// Gets or sets the displayed title of the app window.
    public var title_: Swift.String {
        get {
            try! self.title
        }
        set {
            try! self.title(newValue)
        }
    }

    /// The title bar of the app window.
    public var titleBar: MicrosoftUIWindowing_AppWindowTitleBar {
        get throws {
            try COM.NullResult.unwrap(_interop.get_TitleBar())
        }
    }

    /// Gets the title bar of the app window.
    public var titleBar_: MicrosoftUIWindowing_AppWindowTitleBar! {
        try! NullResult.catch(self.titleBar)
    }

    /// Moves the current window to be the bottom window in the Z-order.
    public func moveInZOrderAtBottom() throws {
        try _iappWindow2.moveInZOrderAtBottom()
    }

    /// Moves the current window to be the top window in the Z-order.
    public func moveInZOrderAtTop() throws {
        try _iappWindow2.moveInZOrderAtTop()
    }

    /// Moves the current window to be below the specified window in the Z-order.
    /// - Parameter windowId: The identifier of the window to place the current window below.
    public func moveInZOrderBelow(_ windowId: MicrosoftUI_WindowId) throws {
        try _iappWindow2.moveInZOrderBelow(windowId)
    }

    /// Resizes the window to accommodate the specified size for the client area.
    /// - Parameter size: The height and width of the window client area in Win32 client coordinates.
    public func resizeClient(_ size: WindowsGraphics_SizeInt32) throws {
        try _iappWindow2.resizeClient(size)
    }

    /// Shows the window with the default presenter in the requested state.
    public func showOnceWithRequestedStartupState() throws {
        try _iappWindow2.showOnceWithRequestedStartupState()
    }

    /// The current size of the window's client area in Win32 client coordinates.
    public var clientSize: WindowsGraphics_SizeInt32 {
        get throws {
            try _iappWindow2.get_ClientSize()
        }
    }

    /// Gets the current size of the window's client area in Win32 client coordinates.
    public var clientSize_: WindowsGraphics_SizeInt32 {
        try! self.clientSize
    }

    /// Associates the app window with the specified dispatcher queue.
    /// - Parameter dispatcherQueue: The dispatcher queue to associate with the app window.
    public func associateWithDispatcherQueue(_ dispatcherQueue: MicrosoftUIDispatching_DispatcherQueue?) throws {
        try _iappWindow3.associateWithDispatcherQueue(dispatcherQueue)
    }

    /// The dispatcher queue associated with the app window.
    public var dispatcherQueue: MicrosoftUIDispatching_DispatcherQueue {
        get throws {
            try COM.NullResult.unwrap(_iappWindow3.get_DispatcherQueue())
        }
    }

    /// Gets the dispatcher queue associated with the app window.
    public var dispatcherQueue_: MicrosoftUIDispatching_DispatcherQueue! {
        try! NullResult.catch(self.dispatcherQueue)
    }

    /// Creates a window with styles and properties as defined in the specified AppWindowPresenter, parented to the specified window, and associated with the specified DispatcherQueue.
    /// - Parameter appWindowPresenter: An AppWindowPresenter object that specifies property values to apply to the window.
    /// - Parameter ownerWindowId: The ID of the parent window for the new window.
    /// - Parameter DispatcherQueue: The dispatcher queue to associate with the new window.
    /// - Returns: A new app window with the specified configuration.
    public static func create(_ appWindowPresenter: MicrosoftUIWindowing_AppWindowPresenter?, _ ownerWindowId: MicrosoftUI_WindowId, _ DispatcherQueue: MicrosoftUIDispatching_DispatcherQueue?) throws -> MicrosoftUIWindowing_AppWindow {
        try COM.NullResult.unwrap(_iappWindowStatics2.createWithDispatcherQueue(appWindowPresenter, ownerWindowId, DispatcherQueue))
    }

    /// Creates an app window with the styles and properties set to that of the default OverlappedPresenter.
    /// - Returns: A new app window with the default configuration.
    public static func create() throws -> MicrosoftUIWindowing_AppWindow {
        try COM.NullResult.unwrap(_iappWindowStatics.create())
    }

    /// Creates a window with styles and properties as defined in the specified AppWindowPresenter.
    /// - Parameter appWindowPresenter: An AppWindowPresenter object that specifies property values to apply to the window.
    /// - Returns: A new app window with the specified configuration.
    public static func create(_ appWindowPresenter: MicrosoftUIWindowing_AppWindowPresenter?) throws -> MicrosoftUIWindowing_AppWindow {
        try COM.NullResult.unwrap(_iappWindowStatics.createWithPresenter(appWindowPresenter))
    }

    /// Creates a window with styles and properties as defined in the specified AppWindowPresenter and parented to the specified window.
    /// - Parameter appWindowPresenter: An AppWindowPresenter object that specifies property values to apply to the window.
    /// - Parameter ownerWindowId: The ID of the parent window for the new window.
    /// - Returns: A new app window with the specified configuration.
    public static func create(_ appWindowPresenter: MicrosoftUIWindowing_AppWindowPresenter?, _ ownerWindowId: MicrosoftUI_WindowId) throws -> MicrosoftUIWindowing_AppWindow {
        try COM.NullResult.unwrap(_iappWindowStatics.createWithPresenterAndOwner(appWindowPresenter, ownerWindowId))
    }

    /// Returns the AppWindow with the specified WindowId, if available. Returns null if the WindowId cannot be matched to a valid window.
    /// - Parameter windowId: The identifier for the AppWindow.
    /// - Returns: The AppWindow with the specified WindowId, if available; null if the WindowId cannot be matched to a valid window.
    public static func getFromWindowId(_ windowId: MicrosoftUI_WindowId) throws -> MicrosoftUIWindowing_AppWindow {
        try COM.NullResult.unwrap(_iappWindowStatics.getFromWindowId(windowId))
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindow>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIAppWindow2: COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindow2>.Optional = .none

    internal var _iappWindow2: COM.COMInterop<SWRT_MicrosoftUIWindowing_IAppWindow2> {
        get throws {
            try _lazyIAppWindow2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIWindowing_IAppWindow2.self)).cast()
            }
        }
    }

    private var _lazyIAppWindow3: COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindow3>.Optional = .none

    internal var _iappWindow3: COM.COMInterop<SWRT_MicrosoftUIWindowing_IAppWindow3> {
        get throws {
            try _lazyIAppWindow3.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIWindowing_IAppWindow3.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Windowing.AppWindow")
            }
        }
    }

    private static var _lazyIAppWindowStatics2: COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindowStatics2>.Optional = .none

    internal static var _iappWindowStatics2: COM.COMInterop<SWRT_MicrosoftUIWindowing_IAppWindowStatics2> {
        get throws {
            try _lazyIAppWindowStatics2.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIWindowing_IAppWindowStatics2.self)).cast()
            }
        }
    }

    private static var _lazyIAppWindowStatics: COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindowStatics>.Optional = .none

    internal static var _iappWindowStatics: COM.COMInterop<SWRT_MicrosoftUIWindowing_IAppWindowStatics> {
        get throws {
            try _lazyIAppWindowStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIWindowing_IAppWindowStatics.self)).cast()
            }
        }
    }
}