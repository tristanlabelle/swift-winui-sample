// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Provides data for the AppWindow.Changed event.
public final class MicrosoftUIWindowing_AppWindowChangedEventArgs: WindowsRuntime.WinRTImport<MicrosoftUIWindowing_AppWindowChangedEventArgsBinding>, @unchecked Sendable {
    /// true if the position of the window changed; otherwise, false.
    public var didPositionChange: Swift.Bool {
        get throws {
            try _interop.get_DidPositionChange()
        }
    }

    /// Gets a value that indicates whether the AppWindow.Position property changed.
    public var didPositionChange_: Swift.Bool {
        try! self.didPositionChange
    }

    /// true if the window's presenter changed; otherwise, false.
    public var didPresenterChange: Swift.Bool {
        get throws {
            try _interop.get_DidPresenterChange()
        }
    }

    /// Gets a value that indicates whether the AppWindow.Presenter property changed.
    public var didPresenterChange_: Swift.Bool {
        try! self.didPresenterChange
    }

    /// true if the size of the window changed; otherwise, false.
    public var didSizeChange: Swift.Bool {
        get throws {
            try _interop.get_DidSizeChange()
        }
    }

    /// Gets a value that indicates whether the AppWindow.Size property changed.
    public var didSizeChange_: Swift.Bool {
        try! self.didSizeChange
    }

    /// true if the Visibility of the window changed; otherwise, false.
    public var didVisibilityChange: Swift.Bool {
        get throws {
            try _interop.get_DidVisibilityChange()
        }
    }

    /// Gets a value that indicates whether the AppWindow.IsVisible property changed.
    public var didVisibilityChange_: Swift.Bool {
        try! self.didVisibilityChange
    }

    /// true if the window's position in the Z-order changed; otherwise, false.
    public var didZOrderChange: Swift.Bool {
        get throws {
            try _iappWindowChangedEventArgs2.get_DidZOrderChange()
        }
    }

    /// Gets a value that indicates whether the window's position in the Z-order changed.
    public var didZOrderChange_: Swift.Bool {
        try! self.didZOrderChange
    }

    /// true if the position of the window is at the bottom of the topmost windows or the bottom of the non-topmost windows in Z-order.; otherwise, false.
    public var isZOrderAtBottom: Swift.Bool {
        get throws {
            try _iappWindowChangedEventArgs2.get_IsZOrderAtBottom()
        }
    }

    /// Gets a value that indicates whether the window is now at the bottom of the Z-order.
    public var isZOrderAtBottom_: Swift.Bool {
        try! self.isZOrderAtBottom
    }

    /// true if the position of the window is at the top of the topmost windows or the top of the non-topmost windows in Z-order.; otherwise, false.
    public var isZOrderAtTop: Swift.Bool {
        get throws {
            try _iappWindowChangedEventArgs2.get_IsZOrderAtTop()
        }
    }

    /// Gets a value that indicates whether the window is now at the top of the Z-order.
    public var isZOrderAtTop_: Swift.Bool {
        try! self.isZOrderAtTop
    }

    /// The ID of the window directly above this window in Z-order, if DidZOrderChange is true and this window is not the top window; otherwise, 0.
    public var zorderBelowWindowId: MicrosoftUI_WindowId {
        get throws {
            try _iappWindowChangedEventArgs2.get_ZOrderBelowWindowId()
        }
    }

    /// Gets the ID of the window directly above this window in Z-order, if Z-order changed and this window is not the top window.
    public var zorderBelowWindowId_: MicrosoftUI_WindowId {
        try! self.zorderBelowWindowId
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindowChangedEventArgs>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIAppWindowChangedEventArgs2: COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindowChangedEventArgs2>.Optional = .none

    internal var _iappWindowChangedEventArgs2: COM.COMInterop<SWRT_MicrosoftUIWindowing_IAppWindowChangedEventArgs2> {
        get throws {
            try _lazyIAppWindowChangedEventArgs2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIWindowing_IAppWindowChangedEventArgs2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Windowing.AppWindowChangedEventArgs")
            }
        }
    }
}