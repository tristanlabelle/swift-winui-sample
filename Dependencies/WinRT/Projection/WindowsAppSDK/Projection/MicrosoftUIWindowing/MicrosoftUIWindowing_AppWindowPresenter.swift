// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Displays an app window using a pre-defined configuration appropriate for the type of window.
open class MicrosoftUIWindowing_AppWindowPresenter: WindowsRuntime.ComposableClass, @unchecked Sendable {
    /// A value of the enumeration that indicates the kind of presenter the app window is using.
    public var kind: MicrosoftUIWindowing_AppWindowPresenterKind {
        get throws {
            try _iappWindowPresenter.get_Kind()
        }
    }

    /// Gets a value that indicates the kind of presenter the app window is using.
    public var kind_: MicrosoftUIWindowing_AppWindowPresenterKind {
        try! self.kind
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindowPresenter>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIAppWindowPresenter: COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindowPresenter>.Optional = .none

    internal var _iappWindowPresenter: COM.COMInterop<SWRT_MicrosoftUIWindowing_IAppWindowPresenter> {
        get throws {
            try _lazyIAppWindowPresenter.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIWindowing_IAppWindowPresenter.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Windowing.AppWindowPresenter")
            }
        }
    }

    private static var _lazyIAppWindowPresenterFactory: COM.COMReference<SWRT_MicrosoftUIWindowing_IAppWindowPresenterFactory>.Optional = .none

    internal static var _iappWindowPresenterFactory: COM.COMInterop<SWRT_MicrosoftUIWindowing_IAppWindowPresenterFactory> {
        get throws {
            try _lazyIAppWindowPresenterFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIWindowing_IAppWindowPresenterFactory.self)).cast()
            }
        }
    }
}