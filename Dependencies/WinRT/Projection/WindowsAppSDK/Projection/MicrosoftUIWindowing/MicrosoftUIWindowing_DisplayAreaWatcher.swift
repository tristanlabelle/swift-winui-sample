// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Enumerates display areas and raises events when the collection of display areas or the configuration of an individual DisplayArea changes.
public final class MicrosoftUIWindowing_DisplayAreaWatcher: WindowsRuntime.WinRTImport<MicrosoftUIWindowing_DisplayAreaWatcherBinding>, @unchecked Sendable {
    /// Starts the DisplayAreaWatcher.
    public func start() throws {
        try _interop.start()
    }

    /// Stops the DisplayAreaWatcher.
    public func stop() throws {
        try _interop.stop()
    }

    /// Occurs when a DisplayArea is added to the collection of display areas returned by DisplayArea.FindAll.
    @discardableResult
    public func added(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_DisplayAreaWatcher?, MicrosoftUIWindowing_DisplayArea?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Added(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).added(removing: token) })
    }

    public func added(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Added(token)
    }

    /// Occurs when the initial pass of watcher events has been processed and the collection of display areas is complete.
    @discardableResult
    public func enumerationCompleted(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_DisplayAreaWatcher?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_EnumerationCompleted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).enumerationCompleted(removing: token) })
    }

    public func enumerationCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_EnumerationCompleted(token)
    }

    /// Occurs when a DisplayArea is removed from the collection returned by DisplayArea.FindAll.
    @discardableResult
    public func removed(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_DisplayAreaWatcher?, MicrosoftUIWindowing_DisplayArea?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Removed(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).removed(removing: token) })
    }

    public func removed(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Removed(token)
    }

    /// Occurs when the DisplayAreaWatcher has stopped.
    @discardableResult
    public func stopped(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_DisplayAreaWatcher?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Stopped(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).stopped(removing: token) })
    }

    public func stopped(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Stopped(token)
    }

    /// Occurs when the configuration of a DisplayArea has changed.
    @discardableResult
    public func updated(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIWindowing_DisplayAreaWatcher?, MicrosoftUIWindowing_DisplayArea?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Updated(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).updated(removing: token) })
    }

    public func updated(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Updated(token)
    }

    /// A value of the enumeration that indicates the status of the DisplayAreaWatcher.
    public var status: MicrosoftUIWindowing_DisplayAreaWatcherStatus {
        get throws {
            try _interop.get_Status()
        }
    }

    /// Gets the status of the DisplayAreaWatcher.
    public var status_: MicrosoftUIWindowing_DisplayAreaWatcherStatus {
        try! self.status
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIWindowing_IDisplayAreaWatcher>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Windowing.DisplayAreaWatcher")
            }
        }
    }
}