// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Paints a SpriteVisual with a solid color.
public final class MicrosoftUIComposition_CompositionColorBrush: MicrosoftUIComposition_CompositionBrush, @unchecked Sendable {
    /// The color used to fill a SpriteVisual.
    public var color: WindowsUI_Color {
        get throws {
            try _icompositionColorBrush.get_Color()
        }
    }

    /// The color used to fill a SpriteVisual. Animatable.
    /// - Parameter newValue: The color used to fill a SpriteVisual.
    public func color(_ value: WindowsUI_Color) throws {
        try _icompositionColorBrush.put_Color(value)
    }

    /// The color used to fill a SpriteVisual. Animatable.
    public var color_: WindowsUI_Color {
        get {
            try! self.color
        }
        set {
            try! self.color(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionColorBrush>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyICompositionColorBrush: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionColorBrush>.Optional = .none

    internal var _icompositionColorBrush: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionColorBrush> {
        get throws {
            try _lazyICompositionColorBrush.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionColorBrush.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.CompositionColorBrush")
            }
        }
    }
}