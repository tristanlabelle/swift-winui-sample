// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Represents a physics-based animation that uses forces to dynamically move content.
open class MicrosoftUIComposition_NaturalMotionAnimation: MicrosoftUIComposition_CompositionAnimation, @unchecked Sendable {
    /// The delay behavior of the NaturalMotionAnimation.
    public var delayBehavior: MicrosoftUIComposition_AnimationDelayBehavior {
        get throws {
            try _inaturalMotionAnimation.get_DelayBehavior()
        }
    }

    /// The delay behavior of the NaturalMotionAnimation.
    /// - Parameter newValue: The delay behavior of the NaturalMotionAnimation.
    public func delayBehavior(_ value: MicrosoftUIComposition_AnimationDelayBehavior) throws {
        try _inaturalMotionAnimation.put_DelayBehavior(value)
    }

    /// The delay behavior of the NaturalMotionAnimation.
    public var delayBehavior_: MicrosoftUIComposition_AnimationDelayBehavior {
        get {
            try! self.delayBehavior
        }
        set {
            try! self.delayBehavior(newValue)
        }
    }

    /// Delay before the animation starts after CompositionObject.StartAnimation is called.
    public var delayTime: WindowsFoundation_TimeSpan {
        get throws {
            try _inaturalMotionAnimation.get_DelayTime()
        }
    }

    /// Delay before the animation starts after CompositionObject.StartAnimation is called.
    /// - Parameter newValue: Delay before the animation starts after CompositionObject.StartAnimation is called.
    public func delayTime(_ value: WindowsFoundation_TimeSpan) throws {
        try _inaturalMotionAnimation.put_DelayTime(value)
    }

    /// Delay before the animation starts after CompositionObject.StartAnimation is called.
    public var delayTime_: WindowsFoundation_TimeSpan {
        get {
            try! self.delayTime
        }
        set {
            try! self.delayTime(newValue)
        }
    }

    /// Specifies how to set the property value when StopAnimation is called.
    public var stopBehavior: MicrosoftUIComposition_AnimationStopBehavior {
        get throws {
            try _inaturalMotionAnimation.get_StopBehavior()
        }
    }

    /// Specifies how to set the property value when StopAnimation is called.
    /// - Parameter newValue: Specifies how to set the property value when StopAnimation is called.
    public func stopBehavior(_ value: MicrosoftUIComposition_AnimationStopBehavior) throws {
        try _inaturalMotionAnimation.put_StopBehavior(value)
    }

    /// Specifies how to set the property value when StopAnimation is called.
    public var stopBehavior_: MicrosoftUIComposition_AnimationStopBehavior {
        get {
            try! self.stopBehavior
        }
        set {
            try! self.stopBehavior(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_INaturalMotionAnimation>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyINaturalMotionAnimation: COM.COMReference<SWRT_MicrosoftUIComposition_INaturalMotionAnimation>.Optional = .none

    internal var _inaturalMotionAnimation: COM.COMInterop<SWRT_MicrosoftUIComposition_INaturalMotionAnimation> {
        get throws {
            try _lazyINaturalMotionAnimation.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_INaturalMotionAnimation.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.NaturalMotionAnimation")
            }
        }
    }

    private static var _lazyINaturalMotionAnimationFactory: COM.COMReference<SWRT_MicrosoftUIComposition_INaturalMotionAnimationFactory>.Optional = .none

    internal static var _inaturalMotionAnimationFactory: COM.COMInterop<SWRT_MicrosoftUIComposition_INaturalMotionAnimationFactory> {
        get throws {
            try _lazyINaturalMotionAnimationFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIComposition_INaturalMotionAnimationFactory.self)).cast()
            }
        }
    }
}