// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Represents a visual that gets its content from another visual.
public final class MicrosoftUIComposition_RedirectVisual: MicrosoftUIComposition_ContainerVisual, @unchecked Sendable {
    /// The Visual that this RedirectVisual gets its content from. The default is null.
    public var source: MicrosoftUIComposition_Visual {
        get throws {
            try COM.NullResult.unwrap(_iredirectVisual.get_Source())
        }
    }

    /// Sets the Visual that this RedirectVisual gets its content from.
    /// - Parameter newValue: The Visual that this RedirectVisual gets its content from. The default is null.
    public func source(_ value: MicrosoftUIComposition_Visual?) throws {
        try _iredirectVisual.put_Source(value)
    }

    /// Gets or sets the Visual that this RedirectVisual gets its content from.
    public var source_: MicrosoftUIComposition_Visual! {
        get {
            try! NullResult.catch(self.source)
        }
        set {
            try! self.source(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_IRedirectVisual>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIRedirectVisual: COM.COMReference<SWRT_MicrosoftUIComposition_IRedirectVisual>.Optional = .none

    internal var _iredirectVisual: COM.COMInterop<SWRT_MicrosoftUIComposition_IRedirectVisual> {
        get throws {
            try _lazyIRedirectVisual.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIComposition_IRedirectVisual.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.RedirectVisual")
            }
        }
    }
}