// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Base class for shadows that can be applied to a SpriteVisual.
open class MicrosoftUIComposition_CompositionShadow: MicrosoftUIComposition_CompositionObject, @unchecked Sendable {
    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionShadow>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyICompositionShadow: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionShadow>.Optional = .none

    internal var _icompositionShadow: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionShadow> {
        get throws {
            try _lazyICompositionShadow.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionShadow.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.CompositionShadow")
            }
        }
    }

    private static var _lazyICompositionShadowFactory: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionShadowFactory>.Optional = .none

    internal static var _icompositionShadowFactory: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionShadowFactory> {
        get throws {
            try _lazyICompositionShadowFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionShadowFactory.self)).cast()
            }
        }
    }
}