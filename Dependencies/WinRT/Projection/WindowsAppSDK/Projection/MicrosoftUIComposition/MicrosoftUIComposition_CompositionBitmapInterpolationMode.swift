// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Specifies the algorithm used for interpolating pixels from ICompositionSurface when they do not form a one-to-one mapping to pixels on screen.
public struct MicrosoftUIComposition_CompositionBitmapInterpolationMode: CStyleEnum {
    public var rawValue: Swift.Int32

    public init(rawValue: Swift.Int32 = 0) {
        self.rawValue = rawValue
    }

    /// Use the exact color of the nearest bitmap pixel to the current rendering pixel.
    public static let nearestNeighbor = Self()

    /// Interpolate a color from the four bitmap pixels that are the nearest to the current rendering pixel.
    public static let linear = Self(rawValue: 1)

    /// Use Linear interpolation for magnification, minification, and mip-level sampling.
    public static let magLinearMinLinearMipLinear = Self(rawValue: 2)

    /// Use Linear interpolation for magnification and minification; use NearestNeighbor for mip-level sampling.
    public static let magLinearMinLinearMipNearest = Self(rawValue: 3)

    /// Use Linear interpolation for magnification; use NearestNeighbor for minification; use Linear interpolation for mip-level sampling.
    public static let magLinearMinNearestMipLinear = Self(rawValue: 4)

    /// Use Linear interpolation for magnification; use NearestNeighbor for minification and mip-level sampling.
    public static let magLinearMinNearestMipNearest = Self(rawValue: 5)

    /// Use NearestNeighbor for magnification; use Linear interpolation for minification and mip-level sampling.
    public static let magNearestMinLinearMipLinear = Self(rawValue: 6)

    /// Use NearestNeighbor for magnification; use Linear interpolation for minification; use NearestNeighbor for mip-level sampling.
    public static let magNearestMinLinearMipNearest = Self(rawValue: 7)

    /// Use NearestNeighbor for magnification and minification; use Linear interpolation for mip-level sampling.
    public static let magNearestMinNearestMipLinear = Self(rawValue: 8)

    /// Use NearestNeighbor for magnification, minification, and mip-level sampling.
    public static let magNearestMinNearestMipNearest = Self(rawValue: 9)
}