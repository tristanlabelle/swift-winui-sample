// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// The base visual object in the visual hierarchy.
open class MicrosoftUIComposition_Visual: MicrosoftUIComposition_CompositionObject, @unchecked Sendable {
    /// The point on the visual to be positioned at the visual's offset. Value is normalized with respect to the size of the visual.
    public var anchorPoint: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _ivisual.get_AnchorPoint()
        }
    }

    /// The point on the visual to be positioned at the visual's offset. Value is normalized with respect to the size of the visual. Animatable.
    /// - Parameter newValue: The point on the visual to be positioned at the visual's offset. Value is normalized with respect to the size of the visual.
    public func anchorPoint(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _ivisual.put_AnchorPoint(value)
    }

    /// The point on the visual to be positioned at the visual's offset. Value is normalized with respect to the size of the visual. Animatable.
    public var anchorPoint_: WindowsFoundationNumerics_Vector2 {
        get {
            try! self.anchorPoint
        }
        set {
            try! self.anchorPoint(newValue)
        }
    }

    /// Whether the back face of the visual should be visible during a 3D transform.
    public var backfaceVisibility: MicrosoftUIComposition_CompositionBackfaceVisibility {
        get throws {
            try _ivisual.get_BackfaceVisibility()
        }
    }

    /// Specifies whether the back face of the visual should be visible during a 3D transform.
    /// - Parameter newValue: Whether the back face of the visual should be visible during a 3D transform.
    public func backfaceVisibility(_ value: MicrosoftUIComposition_CompositionBackfaceVisibility) throws {
        try _ivisual.put_BackfaceVisibility(value)
    }

    /// Specifies whether the back face of the visual should be visible during a 3D transform.
    public var backfaceVisibility_: MicrosoftUIComposition_CompositionBackfaceVisibility {
        get {
            try! self.backfaceVisibility
        }
        set {
            try! self.backfaceVisibility(newValue)
        }
    }

    /// How to compose the edges of bitmaps and clips associated with a visual, or with all visuals in the subtree rooted at this visual.
    public var borderMode: MicrosoftUIComposition_CompositionBorderMode {
        get throws {
            try _ivisual.get_BorderMode()
        }
    }

    /// Specifies how to compose the edges of bitmaps and clips associated with a visual, or with all visuals in the subtree rooted at this visual. Setting BorderMode at a parent Visual will affect all children visuals in the subtree and can be selectively turned off at each child visual.
    /// - Parameter newValue: How to compose the edges of bitmaps and clips associated with a visual, or with all visuals in the subtree rooted at this visual.
    public func borderMode(_ value: MicrosoftUIComposition_CompositionBorderMode) throws {
        try _ivisual.put_BorderMode(value)
    }

    /// Specifies how to compose the edges of bitmaps and clips associated with a visual, or with all visuals in the subtree rooted at this visual. Setting BorderMode at a parent Visual will affect all children visuals in the subtree and can be selectively turned off at each child visual.
    public var borderMode_: MicrosoftUIComposition_CompositionBorderMode {
        get {
            try! self.borderMode
        }
        set {
            try! self.borderMode(newValue)
        }
    }

    /// The point about which rotation or scaling occurs.
    public var centerPoint: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _ivisual.get_CenterPoint()
        }
    }

    /// The point about which rotation or scaling occurs. Animatable
    /// - Parameter newValue: The point about which rotation or scaling occurs.
    public func centerPoint(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _ivisual.put_CenterPoint(value)
    }

    /// The point about which rotation or scaling occurs. Animatable
    public var centerPoint_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.centerPoint
        }
        set {
            try! self.centerPoint(newValue)
        }
    }

    /// Specifies the clipping region for the visual.
    public var clip: MicrosoftUIComposition_CompositionClip {
        get throws {
            try COM.NullResult.unwrap(_ivisual.get_Clip())
        }
    }

    /// Specifies the clipping region for the visual. When a visual is rendered, only the portion of the visual that falls inside the clipping region is displayed, while any content that extends outside the clipping region is clipped (that is, not displayed).
    /// - Parameter newValue: Specifies the clipping region for the visual.
    public func clip(_ value: MicrosoftUIComposition_CompositionClip?) throws {
        try _ivisual.put_Clip(value)
    }

    /// Specifies the clipping region for the visual. When a visual is rendered, only the portion of the visual that falls inside the clipping region is displayed, while any content that extends outside the clipping region is clipped (that is, not displayed).
    public var clip_: MicrosoftUIComposition_CompositionClip! {
        get {
            try! NullResult.catch(self.clip)
        }
        set {
            try! self.clip(newValue)
        }
    }

    /// How a visual's bitmap is blended with the screen.
    public var compositeMode: MicrosoftUIComposition_CompositionCompositeMode {
        get throws {
            try _ivisual.get_CompositeMode()
        }
    }

    /// Specifies how a visual's bitmap is blended with the screen.
    /// - Parameter newValue: How a visual's bitmap is blended with the screen.
    public func compositeMode(_ value: MicrosoftUIComposition_CompositionCompositeMode) throws {
        try _ivisual.put_CompositeMode(value)
    }

    /// Specifies how a visual's bitmap is blended with the screen.
    public var compositeMode_: MicrosoftUIComposition_CompositionCompositeMode {
        get {
            try! self.compositeMode
        }
        set {
            try! self.compositeMode(newValue)
        }
    }

    /// Indicates whether the visual and its entire subtree of child visuals is visible.
    public var isVisible: Swift.Bool {
        get throws {
            try _ivisual.get_IsVisible()
        }
    }

    /// Indicates whether the visual and its entire subtree of child visuals is visible.
    /// - Parameter newValue: Indicates whether the visual and its entire subtree of child visuals is visible.
    public func isVisible(_ value: Swift.Bool) throws {
        try _ivisual.put_IsVisible(value)
    }

    /// Indicates whether the visual and its entire subtree of child visuals is visible.
    public var isVisible_: Swift.Bool {
        get {
            try! self.isVisible
        }
        set {
            try! self.isVisible(newValue)
        }
    }

    /// Offset of the visual relative to its parent.
    public var offset: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _ivisual.get_Offset()
        }
    }

    /// The offset of the visual relative to its parent or for a root visual the offset relative to the upper-left corner of the windows that hosts the visual. Animatable.
    /// - Parameter newValue: Offset of the visual relative to its parent.
    public func offset(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _ivisual.put_Offset(value)
    }

    /// The offset of the visual relative to its parent or for a root visual the offset relative to the upper-left corner of the windows that hosts the visual. Animatable.
    public var offset_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.offset
        }
        set {
            try! self.offset(newValue)
        }
    }

    /// The opacity of the visual.
    public var opacity: Swift.Float {
        get throws {
            try _ivisual.get_Opacity()
        }
    }

    /// The opacity of the visual. Animatable.

    /// The opacity property determines the transparency, if any, of the Visual and is a value from 0 to 1. 0 is fully transparent and 1 is full opaque. A Visual with an Opacity property of 0 is still present in the tree. Like other properties on the Visual, Opacity can be animated using the Windows,UI.Composition animation system.
    /// - Parameter newValue: The opacity of the visual.
    public func opacity(_ value: Swift.Float) throws {
        try _ivisual.put_Opacity(value)
    }

    /// The opacity of the visual. Animatable.

    /// The opacity property determines the transparency, if any, of the Visual and is a value from 0 to 1. 0 is fully transparent and 1 is full opaque. A Visual with an Opacity property of 0 is still present in the tree. Like other properties on the Visual, Opacity can be animated using the Windows,UI.Composition animation system.
    public var opacity_: Swift.Float {
        get {
            try! self.opacity
        }
        set {
            try! self.opacity(newValue)
        }
    }

    /// A Quaternion describing an orientation and rotation in 3D space that will be applied to the visual.
    public var orientation: WindowsFoundationNumerics_Quaternion {
        get throws {
            try _ivisual.get_Orientation()
        }
    }

    /// A quaternion describing an orientation and rotation in 3D space that will be applied to the visual. Animatable.
    /// - Parameter newValue: A Quaternion describing an orientation and rotation in 3D space that will be applied to the visual.
    public func orientation(_ value: WindowsFoundationNumerics_Quaternion) throws {
        try _ivisual.put_Orientation(value)
    }

    /// A quaternion describing an orientation and rotation in 3D space that will be applied to the visual. Animatable.
    public var orientation_: WindowsFoundationNumerics_Quaternion {
        get {
            try! self.orientation
        }
        set {
            try! self.orientation(newValue)
        }
    }

    /// The parent of the visual.
    public var parent: MicrosoftUIComposition_ContainerVisual {
        get throws {
            try COM.NullResult.unwrap(_ivisual.get_Parent())
        }
    }

    /// The parent of the visual.
    public var parent_: MicrosoftUIComposition_ContainerVisual! {
        try! NullResult.catch(self.parent)
    }

    /// The rotation angle in radians of the visual.
    public var rotationAngle: Swift.Float {
        get throws {
            try _ivisual.get_RotationAngle()
        }
    }

    /// The rotation angle in radians of the visual. Animatable.
    /// - Parameter newValue: The rotation angle in radians of the visual.
    public func rotationAngle(_ value: Swift.Float) throws {
        try _ivisual.put_RotationAngle(value)
    }

    /// The rotation angle in radians of the visual. Animatable.
    public var rotationAngle_: Swift.Float {
        get {
            try! self.rotationAngle
        }
        set {
            try! self.rotationAngle(newValue)
        }
    }

    /// The rotation angle of the visual in degrees.
    public var rotationAngleInDegrees: Swift.Float {
        get throws {
            try _ivisual.get_RotationAngleInDegrees()
        }
    }

    /// The rotation angle of the visual in degrees. Animatable.
    /// - Parameter newValue: The rotation angle of the visual in degrees.
    public func rotationAngleInDegrees(_ value: Swift.Float) throws {
        try _ivisual.put_RotationAngleInDegrees(value)
    }

    /// The rotation angle of the visual in degrees. Animatable.
    public var rotationAngleInDegrees_: Swift.Float {
        get {
            try! self.rotationAngleInDegrees
        }
        set {
            try! self.rotationAngleInDegrees(newValue)
        }
    }

    /// The axis to rotate the visual around. For example, a value of Vector3(1,0,0) indicates rotation along the x-axis.
    public var rotationAxis: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _ivisual.get_RotationAxis()
        }
    }

    /// The axis to rotate the visual around. Animatable.
    /// - Parameter newValue: The axis to rotate the visual around. For example, a value of Vector3(1,0,0) indicates rotation along the x-axis.
    public func rotationAxis(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _ivisual.put_RotationAxis(value)
    }

    /// The axis to rotate the visual around. Animatable.
    public var rotationAxis_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.rotationAxis
        }
        set {
            try! self.rotationAxis(newValue)
        }
    }

    /// The scale to apply to the visual. A value of Vector3 (1.0,1.0,1.0) is equivalent to 100%.
    public var scale: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _ivisual.get_Scale()
        }
    }

    /// The scale to apply to the visual.
    /// - Parameter newValue: The scale to apply to the visual. A value of Vector3 (1.0,1.0,1.0) is equivalent to 100%.
    public func scale(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _ivisual.put_Scale(value)
    }

    /// The scale to apply to the visual.
    public var scale_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.scale
        }
        set {
            try! self.scale(newValue)
        }
    }

    /// The width and height of the visual.
    public var size: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _ivisual.get_Size()
        }
    }

    /// The width and height of the visual. Animatable.
    /// - Parameter newValue: The width and height of the visual.
    public func size(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _ivisual.put_Size(value)
    }

    /// The width and height of the visual. Animatable.
    public var size_: WindowsFoundationNumerics_Vector2 {
        get {
            try! self.size
        }
        set {
            try! self.size(newValue)
        }
    }

    /// The transformation matrix to apply to the visual.
    public var transformMatrix: WindowsFoundationNumerics_Matrix4x4 {
        get throws {
            try _ivisual.get_TransformMatrix()
        }
    }

    /// The transformation matrix to apply to the visual. Animatable.
    /// - Parameter newValue: The transformation matrix to apply to the visual.
    public func transformMatrix(_ value: WindowsFoundationNumerics_Matrix4x4) throws {
        try _ivisual.put_TransformMatrix(value)
    }

    /// The transformation matrix to apply to the visual. Animatable.
    public var transformMatrix_: WindowsFoundationNumerics_Matrix4x4 {
        get {
            try! self.transformMatrix
        }
        set {
            try! self.transformMatrix(newValue)
        }
    }

    /// Visual specifying the coordinate system in which this visual is composed.
    public var parentForTransform: MicrosoftUIComposition_Visual {
        get throws {
            try COM.NullResult.unwrap(_ivisual2.get_ParentForTransform())
        }
    }

    /// Visual specifying the coordinate system in which this visual is composed.
    /// - Parameter newValue: Visual specifying the coordinate system in which this visual is composed.
    public func parentForTransform(_ value: MicrosoftUIComposition_Visual?) throws {
        try _ivisual2.put_ParentForTransform(value)
    }

    /// Visual specifying the coordinate system in which this visual is composed.
    public var parentForTransform_: MicrosoftUIComposition_Visual! {
        get {
            try! NullResult.catch(self.parentForTransform)
        }
        set {
            try! self.parentForTransform(newValue)
        }
    }

    /// The offset of the visual with respect to the size of its parent visual.
    public var relativeOffsetAdjustment: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _ivisual2.get_RelativeOffsetAdjustment()
        }
    }

    /// Specifies the offset of the visual with respect to the size of its parent visual.
    /// - Parameter newValue: The offset of the visual with respect to the size of its parent visual.
    public func relativeOffsetAdjustment(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _ivisual2.put_RelativeOffsetAdjustment(value)
    }

    /// Specifies the offset of the visual with respect to the size of its parent visual.
    public var relativeOffsetAdjustment_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.relativeOffsetAdjustment
        }
        set {
            try! self.relativeOffsetAdjustment(newValue)
        }
    }

    /// The size of the visual with respect to the size of its parent visual.
    public var relativeSizeAdjustment: WindowsFoundationNumerics_Vector2 {
        get throws {
            try _ivisual2.get_RelativeSizeAdjustment()
        }
    }

    /// Sets the size of the visual with respect to the size of its parent visual.
    /// - Parameter newValue: The size of the visual with respect to the size of its parent visual.
    public func relativeSizeAdjustment(_ value: WindowsFoundationNumerics_Vector2) throws {
        try _ivisual2.put_RelativeSizeAdjustment(value)
    }

    /// Gets or sets the size of the visual with respect to the size of its parent visual.
    public var relativeSizeAdjustment_: WindowsFoundationNumerics_Vector2 {
        get {
            try! self.relativeSizeAdjustment
        }
        set {
            try! self.relativeSizeAdjustment(newValue)
        }
    }

    /// true if the visual sub-tree rooted at this visual participates in hit testing; otherwise, false. The default is true.
    public var isHitTestVisible: Swift.Bool {
        get throws {
            try _ivisual3.get_IsHitTestVisible()
        }
    }

    /// Sets a value that indicates whether the visual sub-tree rooted at this visual participates in hit testing.
    /// - Parameter newValue: true if the visual sub-tree rooted at this visual participates in hit testing; otherwise, false. The default is true.
    public func isHitTestVisible(_ value: Swift.Bool) throws {
        try _ivisual3.put_IsHitTestVisible(value)
    }

    /// Gets or sets a value that indicates whether the visual sub-tree rooted at this visual participates in hit testing.
    public var isHitTestVisible_: Swift.Bool {
        get {
            try! self.isHitTestVisible
        }
        set {
            try! self.isHitTestVisible(newValue)
        }
    }

    /// true if the composition engine aligns the rendered visual with a pixel boundary; otherwise, false. The default is false.
    public var isPixelSnappingEnabled: Swift.Bool {
        get throws {
            try _ivisual4.get_IsPixelSnappingEnabled()
        }
    }

    /// Sets a value that indicates whether the composition engine aligns the rendered visual with a pixel boundary.
    /// - Parameter newValue: true if the composition engine aligns the rendered visual with a pixel boundary; otherwise, false. The default is false.
    public func isPixelSnappingEnabled(_ value: Swift.Bool) throws {
        try _ivisual4.put_IsPixelSnappingEnabled(value)
    }

    /// Gets or sets a value that indicates whether the composition engine aligns the rendered visual with a pixel boundary.
    public var isPixelSnappingEnabled_: Swift.Bool {
        get {
            try! self.isPixelSnappingEnabled
        }
        set {
            try! self.isPixelSnappingEnabled(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_IVisual>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyIVisual: COM.COMReference<SWRT_MicrosoftUIComposition_IVisual>.Optional = .none

    internal var _ivisual: COM.COMInterop<SWRT_MicrosoftUIComposition_IVisual> {
        get throws {
            try _lazyIVisual.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_IVisual.self)).cast()
            }
        }
    }

    private var _lazyIVisual2: COM.COMReference<SWRT_MicrosoftUIComposition_IVisual2>.Optional = .none

    internal var _ivisual2: COM.COMInterop<SWRT_MicrosoftUIComposition_IVisual2> {
        get throws {
            try _lazyIVisual2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_IVisual2.self)).cast()
            }
        }
    }

    private var _lazyIVisual3: COM.COMReference<SWRT_MicrosoftUIComposition_IVisual3>.Optional = .none

    internal var _ivisual3: COM.COMInterop<SWRT_MicrosoftUIComposition_IVisual3> {
        get throws {
            try _lazyIVisual3.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_IVisual3.self)).cast()
            }
        }
    }

    private var _lazyIVisual4: COM.COMReference<SWRT_MicrosoftUIComposition_IVisual4>.Optional = .none

    internal var _ivisual4: COM.COMInterop<SWRT_MicrosoftUIComposition_IVisual4> {
        get throws {
            try _lazyIVisual4.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_IVisual4.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.Visual")
            }
        }
    }

    private static var _lazyIVisualFactory: COM.COMReference<SWRT_MicrosoftUIComposition_IVisualFactory>.Optional = .none

    internal static var _ivisualFactory: COM.COMInterop<SWRT_MicrosoftUIComposition_IVisualFactory> {
        get throws {
            try _lazyIVisualFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIComposition_IVisualFactory.self)).cast()
            }
        }
    }
}