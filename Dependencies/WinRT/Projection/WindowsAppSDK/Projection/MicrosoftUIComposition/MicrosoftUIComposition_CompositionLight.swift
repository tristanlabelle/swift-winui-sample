// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Base class for a light source that can target a UI scene.

/// The CompositionLight.Targets property determines which Visuals are lit.
open class MicrosoftUIComposition_CompositionLight: MicrosoftUIComposition_CompositionObject, @unchecked Sendable {
    /// The collection of Visuals targeted by the light.
    public var targets: MicrosoftUIComposition_VisualUnorderedCollection {
        get throws {
            try COM.NullResult.unwrap(_icompositionLight.get_Targets())
        }
    }

    /// The collection of Visuals targeted by the light.
    public var targets_: MicrosoftUIComposition_VisualUnorderedCollection! {
        try! NullResult.catch(self.targets)
    }

    /// The collection of Visuals that are not targeted by the light.
    public var exclusionsFromTargets: MicrosoftUIComposition_VisualUnorderedCollection {
        get throws {
            try COM.NullResult.unwrap(_icompositionLight2.get_ExclusionsFromTargets())
        }
    }

    /// Gets a collection of Visuals that are not targeted by the light.
    public var exclusionsFromTargets_: MicrosoftUIComposition_VisualUnorderedCollection! {
        try! NullResult.catch(self.exclusionsFromTargets)
    }

    /// true if the light is on; otherwise, false. The default is true.
    public var isEnabled: Swift.Bool {
        get throws {
            try _icompositionLight3.get_IsEnabled()
        }
    }

    /// Sets a value that determines whether the composition light is on.
    /// - Parameter newValue: true if the light is on; otherwise, false. The default is true.
    public func isEnabled(_ value: Swift.Bool) throws {
        try _icompositionLight3.put_IsEnabled(value)
    }

    /// Gets or sets a value that determines whether the composition light is on.
    public var isEnabled_: Swift.Bool {
        get {
            try! self.isEnabled
        }
        set {
            try! self.isEnabled(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionLight>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyICompositionLight: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionLight>.Optional = .none

    internal var _icompositionLight: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionLight> {
        get throws {
            try _lazyICompositionLight.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionLight.self)).cast()
            }
        }
    }

    private var _lazyICompositionLight2: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionLight2>.Optional = .none

    internal var _icompositionLight2: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionLight2> {
        get throws {
            try _lazyICompositionLight2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionLight2.self)).cast()
            }
        }
    }

    private var _lazyICompositionLight3: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionLight3>.Optional = .none

    internal var _icompositionLight3: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionLight3> {
        get throws {
            try _lazyICompositionLight3.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionLight3.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.CompositionLight")
            }
        }
    }

    private static var _lazyICompositionLightFactory: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionLightFactory>.Optional = .none

    internal static var _icompositionLightFactory: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionLightFactory> {
        get throws {
            try _lazyICompositionLightFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionLightFactory.self)).cast()
            }
        }
    }
}