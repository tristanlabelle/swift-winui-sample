// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Base class for interpolator functions to use with KeyFrameAnimations.

/// The CompositionEasingFunction class is the base class for easing functions that are used with KeyFrameAnimation s. Easing functions are used to describe how the system interpolates between two different keyframes. Currently, there are three supported easing functions: Linear, Cubic Bezier and Step.
open class MicrosoftUIComposition_CompositionEasingFunction: MicrosoftUIComposition_CompositionObject, @unchecked Sendable {
    /// Creates a new instance of CubicBezierEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Parameter controlPoint1: The first control point for the cubic-bezier interpolation function.
    /// - Parameter controlPoint2: The second control point for the cubic-bezier interpolation function.
    /// - Returns: The created CubicBezierEasingFunction object.
    public static func createCubicBezierEasingFunction(_ owner: MicrosoftUIComposition_Compositor?, _ controlPoint1: WindowsFoundationNumerics_Vector2, _ controlPoint2: WindowsFoundationNumerics_Vector2) throws -> MicrosoftUIComposition_CubicBezierEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createCubicBezierEasingFunction(owner, controlPoint1, controlPoint2))
    }

    /// Creates a new instance of LinearEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Returns: The created LinearEasingFunction object.
    public static func createLinearEasingFunction(_ owner: MicrosoftUIComposition_Compositor?) throws -> MicrosoftUIComposition_LinearEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createLinearEasingFunction(owner))
    }

    /// Creates a new instance of StepEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Returns: The created StepEasingFunction object.
    public static func createStepEasingFunction(_ owner: MicrosoftUIComposition_Compositor?) throws -> MicrosoftUIComposition_StepEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createStepEasingFunction(owner))
    }

    /// Creates a new instance of StepEasingFunction with the specified step count.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Parameter stepCount: The number of steps between the starting value and the end value.
    /// - Returns: The created StepEasingFunction object.
    public static func createStepEasingFunction(_ owner: MicrosoftUIComposition_Compositor?, _ stepCount: Swift.Int32) throws -> MicrosoftUIComposition_StepEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createStepEasingFunctionWithStepCount(owner, stepCount))
    }

    /// Creates a new instance of BackEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Parameter mode: A value that specifies how the animation interpolates.
    /// - Parameter amplitude: The amplitude of retraction associated with a BackEase animation.
    /// - Returns: The created BackEasingFunction object.
    public static func createBackEasingFunction(_ owner: MicrosoftUIComposition_Compositor?, _ mode: MicrosoftUIComposition_CompositionEasingFunctionMode, _ amplitude: Swift.Float) throws -> MicrosoftUIComposition_BackEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createBackEasingFunction(owner, mode, amplitude))
    }

    /// Creates a new instance of BounceEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Parameter mode: A value that specifies how the animation interpolates.
    /// - Parameter bounces: The number of bounces.
    /// - Parameter bounciness: A value that specifies how bouncy the bounce animation is.
    /// - Returns: The created BounceEasingFunction object.
    public static func createBounceEasingFunction(_ owner: MicrosoftUIComposition_Compositor?, _ mode: MicrosoftUIComposition_CompositionEasingFunctionMode, _ bounces: Swift.Int32, _ bounciness: Swift.Float) throws -> MicrosoftUIComposition_BounceEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createBounceEasingFunction(owner, mode, bounces, bounciness))
    }

    /// Creates a new instance of CircleEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Parameter mode: A value that specifies how the animation interpolates.
    /// - Returns: The created CircleEasingFunction object.
    public static func createCircleEasingFunction(_ owner: MicrosoftUIComposition_Compositor?, _ mode: MicrosoftUIComposition_CompositionEasingFunctionMode) throws -> MicrosoftUIComposition_CircleEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createCircleEasingFunction(owner, mode))
    }

    /// Creates a new instance of ElasticEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Parameter mode: A value that specifies how the animation interpolates.
    /// - Parameter oscillations: The number of times the target slides back and forth over the animation destination.
    /// - Parameter springiness: The stiffness of the spring. The smaller the _springiness_ value is, the stiffer the spring and the faster the elasticity decreases in intensity over each oscillation.
    /// - Returns: The created ElasticEasingFunction object.
    public static func createElasticEasingFunction(_ owner: MicrosoftUIComposition_Compositor?, _ mode: MicrosoftUIComposition_CompositionEasingFunctionMode, _ oscillations: Swift.Int32, _ springiness: Swift.Float) throws -> MicrosoftUIComposition_ElasticEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createElasticEasingFunction(owner, mode, oscillations, springiness))
    }

    /// Creates a new instance of ExponentialEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Parameter mode: A value that specifies how the animation interpolates.
    /// - Parameter exponent: The exponent used to determine the interpolation of the animation.
    /// - Returns: The created ExponentialEasingFunction object.
    public static func createExponentialEasingFunction(_ owner: MicrosoftUIComposition_Compositor?, _ mode: MicrosoftUIComposition_CompositionEasingFunctionMode, _ exponent: Swift.Float) throws -> MicrosoftUIComposition_ExponentialEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createExponentialEasingFunction(owner, mode, exponent))
    }

    /// Creates a new instance of PowerEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Parameter mode: A value that specifies how the animation interpolates.
    /// - Parameter power: The exponential power of the animation interpolation.
    /// - Returns: The created PowerEasingFunction object.
    public static func createPowerEasingFunction(_ owner: MicrosoftUIComposition_Compositor?, _ mode: MicrosoftUIComposition_CompositionEasingFunctionMode, _ power: Swift.Float) throws -> MicrosoftUIComposition_PowerEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createPowerEasingFunction(owner, mode, power))
    }

    /// Creates a new instance of SineEasingFunction.
    /// - Parameter owner: The compositor used to create the easing function.
    /// - Parameter mode: A value that specifies how the animation interpolates.
    /// - Returns: The created SineEasingFunction object.
    public static func createSineEasingFunction(_ owner: MicrosoftUIComposition_Compositor?, _ mode: MicrosoftUIComposition_CompositionEasingFunctionMode) throws -> MicrosoftUIComposition_SineEasingFunction {
        try COM.NullResult.unwrap(_icompositionEasingFunctionStatics.createSineEasingFunction(owner, mode))
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionEasingFunction>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyICompositionEasingFunction: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionEasingFunction>.Optional = .none

    internal var _icompositionEasingFunction: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionEasingFunction> {
        get throws {
            try _lazyICompositionEasingFunction.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionEasingFunction.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.CompositionEasingFunction")
            }
        }
    }

    private static var _lazyICompositionEasingFunctionFactory: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionEasingFunctionFactory>.Optional = .none

    internal static var _icompositionEasingFunctionFactory: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionEasingFunctionFactory> {
        get throws {
            try _lazyICompositionEasingFunctionFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionEasingFunctionFactory.self)).cast()
            }
        }
    }

    private static var _lazyICompositionEasingFunctionStatics: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionEasingFunctionStatics>.Optional = .none

    internal static var _icompositionEasingFunctionStatics: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionEasingFunctionStatics> {
        get throws {
            try _lazyICompositionEasingFunctionStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionEasingFunctionStatics.self)).cast()
            }
        }
    }
}