// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// A collection of animations triggered when a condition is met.
public final class MicrosoftUIComposition_ImplicitAnimationCollection: MicrosoftUIComposition_CompositionObject, WindowsFoundationCollections_IIterableProtocol, WindowsFoundationCollections_IMapProtocol, @unchecked Sendable {
    public typealias T = WindowsFoundationCollections_IKeyValuePair<Swift.String, MicrosoftUIComposition_ICompositionAnimationBase?>?
    public typealias K = Swift.String
    public typealias V = MicrosoftUIComposition_ICompositionAnimationBase?

    // MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Microsoft.UI.Composition.ICompositionAnimationBase>> members

    /// Retrieves the first animation in the collection.
    /// - Returns: Retrieves the first animation in the collection.
    public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, MicrosoftUIComposition_ICompositionAnimationBase?>?> {
        try COM.NullResult.unwrap(_iiterable.first())
    }

    // MARK: Windows.Foundation.Collections.IMap<String, Microsoft.UI.Composition.ICompositionAnimationBase> members

    /// Retrieves the animation associated with the specified property.
    /// - Parameter key: The property to lookup.
    /// - Returns: The value, if an item with the specified key exists. Use the HasKey method to determine whether the key exists.
    public func lookup(_ key: Swift.String) throws -> MicrosoftUIComposition_ICompositionAnimationBase? {
        try _imap.lookup(key)
    }

    /// Returns a boolean indicating whether the collection contains the specified key.
    /// - Parameter key: The key to check for.
    /// - Returns: Returns true if the key is in the collection; otherwise returns false.
    public func hasKey(_ key: Swift.String) throws -> Swift.Bool {
        try _imap.hasKey(key)
    }

    /// Returns a map view of the collection.
    /// - Returns: Returns a map view of the collection.
    public func getView() throws -> WindowsFoundationCollections_IMapView<Swift.String, MicrosoftUIComposition_ICompositionAnimationBase?> {
        try COM.NullResult.unwrap(_imap.getView())
    }

    /// Inserts an animation into the collection.
    /// - Parameter key: The property the animation affects.
    /// - Parameter value: The animation to insert.
    /// - Returns: Boolean value indicating whether the animation was successfully inserted.
    public func insert(_ key: Swift.String, _ value: MicrosoftUIComposition_ICompositionAnimationBase?) throws -> Swift.Bool {
        try _imap.insert(key, value)
    }

    /// Removes the specified animation from the collection.
    /// - Parameter key: The property the animation is assigned to.
    public func remove(_ key: Swift.String) throws {
        try _imap.remove(key)
    }

    /// Removes all animations from the collection.
    public func clear() throws {
        try _imap.clear()
    }

    /// The size of the collection.
    public var size: Swift.UInt32 {
        get throws {
            try _imap.get_Size()
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_IImplicitAnimationCollection>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIImplicitAnimationCollection: COM.COMReference<SWRT_MicrosoftUIComposition_IImplicitAnimationCollection>.Optional = .none

    internal var _iimplicitAnimationCollection: COM.COMInterop<SWRT_MicrosoftUIComposition_IImplicitAnimationCollection> {
        get throws {
            try _lazyIImplicitAnimationCollection.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIComposition_IImplicitAnimationCollection.self)).cast()
            }
        }
    }

    private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_MicrosoftUIComposition_ICompositionAnimationBase>.Optional = .none

    internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_MicrosoftUIComposition_ICompositionAnimationBase> {
        get throws {
            try _lazyIIterable.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_MicrosoftUIComposition_ICompositionAnimationBase.self)).cast()
            }
        }
    }

    private var _lazyIMap: COM.COMReference<SWRT_WindowsFoundationCollections_IMap_String_MicrosoftUIComposition_ICompositionAnimationBase>.Optional = .none

    internal var _imap: COM.COMInterop<SWRT_WindowsFoundationCollections_IMap_String_MicrosoftUIComposition_ICompositionAnimationBase> {
        get throws {
            try _lazyIMap.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IMap_String_MicrosoftUIComposition_ICompositionAnimationBase.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.ImplicitAnimationCollection")
            }
        }
    }
}