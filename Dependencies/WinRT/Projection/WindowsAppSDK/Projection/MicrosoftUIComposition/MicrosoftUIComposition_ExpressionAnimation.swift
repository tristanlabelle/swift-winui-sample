// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// A Composition Animation that uses a mathematical equation to calculate the value for an animating property every frame.
public final class MicrosoftUIComposition_ExpressionAnimation: MicrosoftUIComposition_CompositionAnimation, @unchecked Sendable {
    /// The mathematical equation specifying how the animated value is calculated each frame.
    public var expression: Swift.String {
        get throws {
            try _iexpressionAnimation.get_Expression()
        }
    }

    /// The mathematical equation specifying how the animated value is calculated each frame. The Expression is the core of an ExpressionAnimation and represents the equation the system will use to calculate the value of the animation property each frame. The equation is set on this property in the form of a string. Although expressions can be defined by simple mathematical equations such as “2+2”, the real power lies in creating mathematical relationships where the input values can change frame over frame.
    /// - Parameter newValue: The mathematical equation specifying how the animated value is calculated each frame.
    public func expression(_ value: Swift.String) throws {
        try _iexpressionAnimation.put_Expression(value)
    }

    /// The mathematical equation specifying how the animated value is calculated each frame. The Expression is the core of an ExpressionAnimation and represents the equation the system will use to calculate the value of the animation property each frame. The equation is set on this property in the form of a string. Although expressions can be defined by simple mathematical equations such as “2+2”, the real power lies in creating mathematical relationships where the input values can change frame over frame.
    public var expression_: Swift.String {
        get {
            try! self.expression
        }
        set {
            try! self.expression(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_IExpressionAnimation>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIExpressionAnimation: COM.COMReference<SWRT_MicrosoftUIComposition_IExpressionAnimation>.Optional = .none

    internal var _iexpressionAnimation: COM.COMInterop<SWRT_MicrosoftUIComposition_IExpressionAnimation> {
        get throws {
            try _lazyIExpressionAnimation.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIComposition_IExpressionAnimation.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.ExpressionAnimation")
            }
        }
    }
}