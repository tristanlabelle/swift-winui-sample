// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// A drop shadow cast by a SpriteVisual or LayerVisual.
public final class MicrosoftUIComposition_DropShadow: MicrosoftUIComposition_CompositionShadow, @unchecked Sendable {
    /// The radius of the Gaussian blur used to generate the shadow. Defaults to 9.0f. Specifying a value of 0 will result in no blur occurring.
    public var blurRadius: Swift.Float {
        get throws {
            try _idropShadow.get_BlurRadius()
        }
    }

    /// The radius of the Gaussian blur used to generate the shadow. Animatable.
    /// - Parameter newValue: The radius of the Gaussian blur used to generate the shadow. Defaults to 9.0f. Specifying a value of 0 will result in no blur occurring.
    public func blurRadius(_ value: Swift.Float) throws {
        try _idropShadow.put_BlurRadius(value)
    }

    /// The radius of the Gaussian blur used to generate the shadow. Animatable.
    public var blurRadius_: Swift.Float {
        get {
            try! self.blurRadius
        }
        set {
            try! self.blurRadius(newValue)
        }
    }

    /// The color of the shadow. Default color is Colors.Black.
    public var color: WindowsUI_Color {
        get throws {
            try _idropShadow.get_Color()
        }
    }

    /// The color of the shadow. Animatable.
    /// - Parameter newValue: The color of the shadow. Default color is Colors.Black.
    public func color(_ value: WindowsUI_Color) throws {
        try _idropShadow.put_Color(value)
    }

    /// The color of the shadow. Animatable.
    public var color_: WindowsUI_Color {
        get {
            try! self.color
        }
        set {
            try! self.color(newValue)
        }
    }

    /// Brush used to specify an opacity mask for the shadow. Defaults to the SpriteVisual's brush.
    public var mask: MicrosoftUIComposition_CompositionBrush {
        get throws {
            try COM.NullResult.unwrap(_idropShadow.get_Mask())
        }
    }

    /// Brush used to specify an opacity mask for the shadow. Defaults to the SpriteVisual's brush. Animatable.
    /// - Parameter newValue: Brush used to specify an opacity mask for the shadow. Defaults to the SpriteVisual's brush.
    public func mask(_ value: MicrosoftUIComposition_CompositionBrush?) throws {
        try _idropShadow.put_Mask(value)
    }

    /// Brush used to specify an opacity mask for the shadow. Defaults to the SpriteVisual's brush. Animatable.
    public var mask_: MicrosoftUIComposition_CompositionBrush! {
        get {
            try! NullResult.catch(self.mask)
        }
        set {
            try! self.mask(newValue)
        }
    }

    /// Offset of the shadow relative to its SpriteVisual.
    public var offset: WindowsFoundationNumerics_Vector3 {
        get throws {
            try _idropShadow.get_Offset()
        }
    }

    /// Offset of the shadow relative to its SpriteVisual. Animatable.
    /// - Parameter newValue: Offset of the shadow relative to its SpriteVisual.
    public func offset(_ value: WindowsFoundationNumerics_Vector3) throws {
        try _idropShadow.put_Offset(value)
    }

    /// Offset of the shadow relative to its SpriteVisual. Animatable.
    public var offset_: WindowsFoundationNumerics_Vector3 {
        get {
            try! self.offset
        }
        set {
            try! self.offset(newValue)
        }
    }

    /// The opacity of the shadow.
    public var opacity: Swift.Float {
        get throws {
            try _idropShadow.get_Opacity()
        }
    }

    /// The opacity of the shadow. Animatable.
    /// - Parameter newValue: The opacity of the shadow.
    public func opacity(_ value: Swift.Float) throws {
        try _idropShadow.put_Opacity(value)
    }

    /// The opacity of the shadow. Animatable.
    public var opacity_: Swift.Float {
        get {
            try! self.opacity
        }
        set {
            try! self.opacity(newValue)
        }
    }

    /// The masking policy to apply to the shadow.
    public var sourcePolicy: MicrosoftUIComposition_CompositionDropShadowSourcePolicy {
        get throws {
            try _idropShadow2.get_SourcePolicy()
        }
    }

    /// Used to define the shadow masking policy to be used for the shadow.
    /// - Parameter newValue: The masking policy to apply to the shadow.
    public func sourcePolicy(_ value: MicrosoftUIComposition_CompositionDropShadowSourcePolicy) throws {
        try _idropShadow2.put_SourcePolicy(value)
    }

    /// Used to define the shadow masking policy to be used for the shadow.
    public var sourcePolicy_: MicrosoftUIComposition_CompositionDropShadowSourcePolicy {
        get {
            try! self.sourcePolicy
        }
        set {
            try! self.sourcePolicy(newValue)
        }
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_IDropShadow>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    private var _lazyIDropShadow: COM.COMReference<SWRT_MicrosoftUIComposition_IDropShadow>.Optional = .none

    internal var _idropShadow: COM.COMInterop<SWRT_MicrosoftUIComposition_IDropShadow> {
        get throws {
            try _lazyIDropShadow.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIComposition_IDropShadow.self)).cast()
            }
        }
    }

    private var _lazyIDropShadow2: COM.COMReference<SWRT_MicrosoftUIComposition_IDropShadow2>.Optional = .none

    internal var _idropShadow2: COM.COMInterop<SWRT_MicrosoftUIComposition_IDropShadow2> {
        get throws {
            try _lazyIDropShadow2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIComposition_IDropShadow2.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.DropShadow")
            }
        }
    }
}