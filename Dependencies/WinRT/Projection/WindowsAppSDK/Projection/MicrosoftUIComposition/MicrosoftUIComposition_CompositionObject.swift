// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Base class of the composition API representing a node in the visual tree structure.

/// Composition objects are the visual tree structure on which all other features of the composition API use and build on. The API allows developers to define and create one or many Visual objects each representing a single node in a Visual tree.
open class MicrosoftUIComposition_CompositionObject: WindowsRuntime.ComposableClass, WindowsFoundation_IClosableProtocol, MicrosoftUIComposition_IAnimationObjectProtocol, @unchecked Sendable {
    /// Connects an animation with the specified property of the object and starts the animation.
    /// - Parameter propertyName: The property to associate the animation with.
    /// - Parameter animation: The animation to associate with the specified property.
    public func startAnimation(_ propertyName: Swift.String, _ animation: MicrosoftUIComposition_CompositionAnimation?) throws {
        try _icompositionObject.startAnimation(propertyName, animation)
    }

    /// Disconnects an animation from the specified property and stops the animation.
    /// - Parameter propertyName: The name of the property to disconnect the animation from.
    public func stopAnimation(_ propertyName: Swift.String) throws {
        try _icompositionObject.stopAnimation(propertyName)
    }

    /// The Compositor used to create this CompositionObject.
    public var compositor: MicrosoftUIComposition_Compositor {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject.get_Compositor())
        }
    }

    /// The Compositor used to create this CompositionObject.
    public var compositor_: MicrosoftUIComposition_Compositor! {
        try! NullResult.catch(self.compositor)
    }

    /// The collection of properties associated with the CompositionObject.
    public var properties: MicrosoftUIComposition_CompositionPropertySet {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject.get_Properties())
        }
    }

    /// The collection of properties associated with the CompositionObject.
    public var properties_: MicrosoftUIComposition_CompositionPropertySet! {
        try! NullResult.catch(self.properties)
    }

    /// Starts an animation group.

    /// The StartAnimationGroup method on CompositionObject lets you start CompositionAnimationGroup. All the animations in the group will be started at the same time on the object.
    /// - Parameter value: The animation group to start.
    public func startAnimationGroup(_ value: MicrosoftUIComposition_ICompositionAnimationBase?) throws {
        try _icompositionObject2.startAnimationGroup(value)
    }

    /// Stops an animation group.
    /// - Parameter value: The animation group to stop.
    public func stopAnimationGroup(_ value: MicrosoftUIComposition_ICompositionAnimationBase?) throws {
        try _icompositionObject2.stopAnimationGroup(value)
    }

    /// A string to associate with the CompositionObject. Note that for Visual Studio's Live Visual Tree debugging tool, the name displayed for a particular visual will be pulled from its Comment property
    public var comment: Swift.String {
        get throws {
            try _icompositionObject2.get_Comment()
        }
    }

    /// A string to associate with the CompositionObject.
    /// - Parameter newValue: A string to associate with the CompositionObject. Note that for Visual Studio's Live Visual Tree debugging tool, the name displayed for a particular visual will be pulled from its Comment property
    public func comment(_ value: Swift.String) throws {
        try _icompositionObject2.put_Comment(value)
    }

    /// A string to associate with the CompositionObject.
    public var comment_: Swift.String {
        get {
            try! self.comment
        }
        set {
            try! self.comment(newValue)
        }
    }

    /// The collection of implicit animations attached to this object.
    public var implicitAnimations: MicrosoftUIComposition_ImplicitAnimationCollection {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject2.get_ImplicitAnimations())
        }
    }

    /// The collection of implicit animations attached to this object.
    /// - Parameter newValue: The collection of implicit animations attached to this object.
    public func implicitAnimations(_ value: MicrosoftUIComposition_ImplicitAnimationCollection?) throws {
        try _icompositionObject2.put_ImplicitAnimations(value)
    }

    /// The collection of implicit animations attached to this object.
    public var implicitAnimations_: MicrosoftUIComposition_ImplicitAnimationCollection! {
        get {
            try! NullResult.catch(self.implicitAnimations)
        }
        set {
            try! self.implicitAnimations(newValue)
        }
    }

    /// The DispatcherQueue for the CompositionObject.
    public var dispatcherQueue: MicrosoftUIDispatching_DispatcherQueue {
        get throws {
            try COM.NullResult.unwrap(_icompositionObject3.get_DispatcherQueue())
        }
    }

    /// Gets the DispatcherQueue for the CompositionObject.
    public var dispatcherQueue_: MicrosoftUIDispatching_DispatcherQueue! {
        try! NullResult.catch(self.dispatcherQueue)
    }

    /// Returns an AnimationController for the animation running on the specified property.
    /// - Parameter propertyName: The property being animated.
    /// - Returns: An instance of AnimationController for the specified animation, or null if the animation is not found.
    public func tryGetAnimationController(_ propertyName: Swift.String) throws -> MicrosoftUIComposition_AnimationController {
        try COM.NullResult.unwrap(_icompositionObject4.tryGetAnimationController(propertyName))
    }

    /// Connects an animation with the specified property of the object and starts the animation.
    /// - Parameter propertyName: The property to associate the animation with.
    /// - Parameter animation: The animation to associate with the specified property.
    /// - Parameter animationController: The animation controller to associate with the animation.
    public func startAnimation(_ propertyName: Swift.String, _ animation: MicrosoftUIComposition_CompositionAnimation?, _ animationController: MicrosoftUIComposition_AnimationController?) throws {
        try _icompositionObject5.startAnimationWithController(propertyName, animation, animationController)
    }

    // MARK: Windows.Foundation.IClosable members

    /// Closes the CompositionObject and releases system resources.
    public func close() throws {
        try _iclosable.close()
    }

    // MARK: Microsoft.UI.Composition.IAnimationObject members

    /// Defines a property that can be animated.
    /// - Parameter propertyName: The property that can be animated.
    /// - Parameter propertyInfo: Information about the property to be animated.
    public func populatePropertyInfo(_ propertyName: Swift.String, _ propertyInfo: MicrosoftUIComposition_AnimationPropertyInfo?) throws {
        try _ianimationObject.populatePropertyInfo(propertyName, propertyInfo)
    }

    /// Connects an animation with the specified property of the target object and starts the animation.
    /// - Parameter target: The object that defines the property to be animated.
    /// - Parameter propertyName: The property to associate the animation with.
    /// - Parameter animation: The animation to associate with the specified property.
    public static func startAnimationWithIAnimationObject(_ target: MicrosoftUIComposition_IAnimationObject?, _ propertyName: Swift.String, _ animation: MicrosoftUIComposition_CompositionAnimation?) throws {
        try _icompositionObjectStatics.startAnimationWithIAnimationObject(target, propertyName, animation)
    }

    /// Starts an animation group on the specified target.
    /// - Parameter target: The object that defines the property to be animated.
    /// - Parameter animation: The animation to associate with the specified property.
    public static func startAnimationGroupWithIAnimationObject(_ target: MicrosoftUIComposition_IAnimationObject?, _ animation: MicrosoftUIComposition_ICompositionAnimationBase?) throws {
        try _icompositionObjectStatics.startAnimationGroupWithIAnimationObject(target, animation)
    }

    // MARK: Implementation details

    public init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionObject>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private var _lazyICompositionObject: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionObject>.Optional = .none

    internal var _icompositionObject: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionObject> {
        get throws {
            try _lazyICompositionObject.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionObject.self)).cast()
            }
        }
    }

    private var _lazyICompositionObject2: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionObject2>.Optional = .none

    internal var _icompositionObject2: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionObject2> {
        get throws {
            try _lazyICompositionObject2.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionObject2.self)).cast()
            }
        }
    }

    private var _lazyICompositionObject3: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionObject3>.Optional = .none

    internal var _icompositionObject3: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionObject3> {
        get throws {
            try _lazyICompositionObject3.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionObject3.self)).cast()
            }
        }
    }

    private var _lazyICompositionObject4: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionObject4>.Optional = .none

    internal var _icompositionObject4: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionObject4> {
        get throws {
            try _lazyICompositionObject4.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionObject4.self)).cast()
            }
        }
    }

    private var _lazyICompositionObject5: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionObject5>.Optional = .none

    internal var _icompositionObject5: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionObject5> {
        get throws {
            try _lazyICompositionObject5.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionObject5.self)).cast()
            }
        }
    }

    private var _lazyIClosable: COM.COMReference<SWRT_WindowsFoundation_IClosable>.Optional = .none

    internal var _iclosable: COM.COMInterop<SWRT_WindowsFoundation_IClosable> {
        get throws {
            try _lazyIClosable.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WindowsFoundation_IClosable.self)).cast()
            }
        }
    }

    private var _lazyIAnimationObject: COM.COMReference<SWRT_MicrosoftUIComposition_IAnimationObject>.Optional = .none

    internal var _ianimationObject: COM.COMInterop<SWRT_MicrosoftUIComposition_IAnimationObject> {
        get throws {
            try _lazyIAnimationObject.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_MicrosoftUIComposition_IAnimationObject.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Composition.CompositionObject")
            }
        }
    }

    private static var _lazyICompositionObjectFactory: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionObjectFactory>.Optional = .none

    internal static var _icompositionObjectFactory: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionObjectFactory> {
        get throws {
            try _lazyICompositionObjectFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionObjectFactory.self)).cast()
            }
        }
    }

    private static var _lazyICompositionObjectStatics: COM.COMReference<SWRT_MicrosoftUIComposition_ICompositionObjectStatics>.Optional = .none

    internal static var _icompositionObjectStatics: COM.COMInterop<SWRT_MicrosoftUIComposition_ICompositionObjectStatics> {
        get throws {
            try _lazyICompositionObjectStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIComposition_ICompositionObjectStatics.self)).cast()
            }
        }
    }
}