// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Executes a task in a DispatcherQueue periodically after a time interval has elapsed.
public final class MicrosoftUIDispatching_DispatcherQueueTimer: WindowsRuntime.WinRTImport<MicrosoftUIDispatching_DispatcherQueueTimerBinding>, @unchecked Sendable {
    /// Starts the DispatcherQueue timer.
    public func start() throws {
        try _interop.start()
    }

    /// Stops the DispatcherQueue timer.
    public func stop() throws {
        try _interop.stop()
    }

    /// Event that fires when the DispatcherQueue timer Interval elapses.
    @discardableResult
    public func tick(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIDispatching_DispatcherQueueTimer?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_Tick(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).tick(removing: token) })
    }

    public func tick(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_Tick(token)
    }

    /// The amount of time before the timer ticks.
    public var interval: WindowsFoundation_TimeSpan {
        get throws {
            try _interop.get_Interval()
        }
    }

    /// Gets and sets the interval for the timer.
    /// - Parameter newValue: The amount of time before the timer ticks.
    public func interval(_ value: WindowsFoundation_TimeSpan) throws {
        try _interop.put_Interval(value)
    }

    /// Gets and sets the interval for the timer.
    public var interval_: WindowsFoundation_TimeSpan {
        get {
            try! self.interval
        }
        set {
            try! self.interval(newValue)
        }
    }

    /// true to indicate that the timer fires every DispatcherQueueTimer.Interval; false to indicate that the timer fires once, after DispatcherQueueTimer.Interval elapses. The default is true.
    public var isRepeating: Swift.Bool {
        get throws {
            try _interop.get_IsRepeating()
        }
    }

    /// Sets a value that indicates whether the timer is repeating.
    /// - Parameter newValue: true to indicate that the timer fires every DispatcherQueueTimer.Interval; false to indicate that the timer fires once, after DispatcherQueueTimer.Interval elapses. The default is true.
    public func isRepeating(_ value: Swift.Bool) throws {
        try _interop.put_IsRepeating(value)
    }

    /// Gets or sets a value that indicates whether the timer is repeating.
    public var isRepeating_: Swift.Bool {
        get {
            try! self.isRepeating
        }
        set {
            try! self.isRepeating(newValue)
        }
    }

    /// True if the timer is running. Otherwise, false.
    public var isRunning: Swift.Bool {
        get throws {
            try _interop.get_IsRunning()
        }
    }

    /// Indicates whether the timer is currently running.
    public var isRunning_: Swift.Bool {
        try! self.isRunning
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIDispatching_IDispatcherQueueTimer>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Dispatching.DispatcherQueueTimer")
            }
        }
    }
}