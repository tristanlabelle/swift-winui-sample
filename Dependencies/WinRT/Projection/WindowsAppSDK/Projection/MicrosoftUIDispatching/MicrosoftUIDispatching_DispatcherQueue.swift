// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Manages a prioritized queue on which tasks execute in a serial fashion on a thread.
public final class MicrosoftUIDispatching_DispatcherQueue: WindowsRuntime.WinRTImport<MicrosoftUIDispatching_DispatcherQueueBinding>, @unchecked Sendable {
    /// Creates a DispatcherQueueTimer on the DispatcherQueue to execute a task periodically after a time interval has elapsed.
    /// - Returns: An DispatcherQueueTimer that can queue tasks on a timed basis to the current DispatcherQueue.
    public func createTimer() throws -> MicrosoftUIDispatching_DispatcherQueueTimer {
        try COM.NullResult.unwrap(_interop.createTimer())
    }

    /// Adds a task to the DispatcherQueue that will be executed on the thread associated with the DispatcherQueue.
    /// - Parameter callback: A delegate to the task to execute.
    /// - Returns: True if the task was added to the queue. Otherwise, false.
    public func tryEnqueue(_ callback: MicrosoftUIDispatching_DispatcherQueueHandler?) throws -> Swift.Bool {
        try _interop.tryEnqueue(callback)
    }

    /// Adds a task to the DispatcherQueue that will be executed on the thread associated with the DispatcherQueue with the specified priority.
    /// - Parameter priority: The priority of the task (such as Low, Normal, or High).
    /// - Parameter callback: A delegate to the task to execute.
    /// - Returns: True if the task was added to the queue. Otherwise, false.
    public func tryEnqueue(_ priority: MicrosoftUIDispatching_DispatcherQueuePriority, _ callback: MicrosoftUIDispatching_DispatcherQueueHandler?) throws -> Swift.Bool {
        try _interop.tryEnqueueWithPriority(priority, callback)
    }

    /// Raised when either ShutdownQueue or ShutdownQueueAsync is called. For a full list of the events raised, and in what order, see the Remarks for ShutdownQueueAsync.
    @discardableResult
    public func shutdownCompleted(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIDispatching_DispatcherQueue?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ShutdownCompleted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).shutdownCompleted(removing: token) })
    }

    public func shutdownCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ShutdownCompleted(token)
    }

    /// Raised when either ShutdownQueue or ShutdownQueueAsync is called. For a full list of the events raised, and in what order, see the Remarks for ShutdownQueueAsync.
    @discardableResult
    public func shutdownStarting(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIDispatching_DispatcherQueue?, MicrosoftUIDispatching_DispatcherQueueShutdownStartingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _interop.add_ShutdownStarting(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).shutdownStarting(removing: token) })
    }

    public func shutdownStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _interop.remove_ShutdownStarting(token)
    }

    /// Gets a value indicating whether the DispatcherQueue has access to the current thread.
    public var hasThreadAccess: Swift.Bool {
        get throws {
            try _idispatcherQueue2.get_HasThreadAccess()
        }
    }

    /// Gets a value indicating whether the DispatcherQueue has access to the current thread.
    public var hasThreadAccess_: Swift.Bool {
        try! self.hasThreadAccess
    }

    /// Enqueues a message loop exit message.
    public func enqueueEventLoopExit() throws {
        try _idispatcherQueue3.enqueueEventLoopExit()
    }

    /// Causes the Microsoft.UI.Dispatching.DispatcherQueue to manage the shutdown of the system DispatcherQueue (Windows.System.DispatcherQueue) from the same thread.
    public func ensureSystemDispatcherQueue() throws {
        try _idispatcherQueue3.ensureSystemDispatcherQueue()
    }

    /// Runs a message loop until either EnqueueEventLoopExit or PostQuitMessage is called. Also handles raising the ShutdownCompleted and FrameworkShutdownCompleted events.
    public func runEventLoop() throws {
        try _idispatcherQueue3.runEventLoop()
    }

    /// Runs a message loop until either EnqueueEventLoopExit or PostQuitMessage is called. Also handles raising the ShutdownCompleted and FrameworkShutdownCompleted events.
    /// - Parameter options: Options for related to the quit message.
    /// - Parameter deferral: A deferral object, used to defer exit.
    public func runEventLoop(_ options: MicrosoftUIDispatching_DispatcherRunOptions, _ deferral: MicrosoftUIDispatching_DispatcherExitDeferral?) throws {
        try _idispatcherQueue3.runEventLoopWithOptions(options, deferral)
    }

    /// Raised when either ShutdownQueue or ShutdownQueueAsync is called. For a full list of the events raised, and in what order, see the Remarks for ShutdownQueueAsync.
    @discardableResult
    public func frameworkShutdownCompleted(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIDispatching_DispatcherQueue?, WindowsRuntime.IInspectable?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idispatcherQueue3.add_FrameworkShutdownCompleted(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).frameworkShutdownCompleted(removing: token) })
    }

    public func frameworkShutdownCompleted(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idispatcherQueue3.remove_FrameworkShutdownCompleted(token)
    }

    /// Raised when either ShutdownQueue or ShutdownQueueAsync is called. For a full list of the events raised, and in what order, see the Remarks for ShutdownQueueAsync.
    @discardableResult
    public func frameworkShutdownStarting(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftUIDispatching_DispatcherQueue?, MicrosoftUIDispatching_DispatcherQueueShutdownStartingEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
        let _token = try _idispatcherQueue3.add_FrameworkShutdownStarting(handler)
        return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).frameworkShutdownStarting(removing: token) })
    }

    public func frameworkShutdownStarting(removing token: WindowsRuntime.EventRegistrationToken) throws {
        try _idispatcherQueue3.remove_FrameworkShutdownStarting(token)
    }

    /// Gets the DispatcherQueue associated with the current thread.
    /// - Returns: A DispatcherQueue instance that will execute tasks serially on the current thread.
    public static func getForCurrentThread() throws -> MicrosoftUIDispatching_DispatcherQueue {
        try COM.NullResult.unwrap(_idispatcherQueueStatics.getForCurrentThread())
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIDispatching_IDispatcherQueue>) {
        super.init(_wrapping: consume inner)
    }

    private var _lazyIDispatcherQueue2: COM.COMReference<SWRT_MicrosoftUIDispatching_IDispatcherQueue2>.Optional = .none

    internal var _idispatcherQueue2: COM.COMInterop<SWRT_MicrosoftUIDispatching_IDispatcherQueue2> {
        get throws {
            try _lazyIDispatcherQueue2.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIDispatching_IDispatcherQueue2.self)).cast()
            }
        }
    }

    private var _lazyIDispatcherQueue3: COM.COMReference<SWRT_MicrosoftUIDispatching_IDispatcherQueue3>.Optional = .none

    internal var _idispatcherQueue3: COM.COMInterop<SWRT_MicrosoftUIDispatching_IDispatcherQueue3> {
        get throws {
            try _lazyIDispatcherQueue3.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_MicrosoftUIDispatching_IDispatcherQueue3.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Dispatching.DispatcherQueue")
            }
        }
    }

    private static var _lazyIDispatcherQueueStatics: COM.COMReference<SWRT_MicrosoftUIDispatching_IDispatcherQueueStatics>.Optional = .none

    internal static var _idispatcherQueueStatics: COM.COMInterop<SWRT_MicrosoftUIDispatching_IDispatcherQueueStatics> {
        get throws {
            try _lazyIDispatcherQueueStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_MicrosoftUIDispatching_IDispatcherQueueStatics.self)).cast()
            }
        }
    }
}