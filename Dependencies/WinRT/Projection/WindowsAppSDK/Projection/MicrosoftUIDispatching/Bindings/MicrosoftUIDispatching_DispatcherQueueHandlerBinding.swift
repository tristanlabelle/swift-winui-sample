// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP

public enum MicrosoftUIDispatching_DispatcherQueueHandlerBinding: WindowsRuntime.DelegateBinding {
    public typealias SwiftObject = MicrosoftUIDispatching_DispatcherQueueHandler
    public typealias ABIStruct = SWRT_MicrosoftUIDispatching_DispatcherQueueHandler

    public static let typeName = "Microsoft.UI.Dispatching.IDispatcherQueueHandler"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static var ireferenceID: COM.COMInterfaceID {
        COMInterfaceID(0x949187DA, 0x080B, 0x525E, 0x99A1, 0x29DD141A68FC)
    }

    public static var ireferenceArrayID: COM.COMInterfaceID {
        COMInterfaceID(0x3851FE44, 0xB8A4, 0x570B, 0xBFA1, 0x2C070937A9CD)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference).invoke
    }

    public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
        ExportedDelegate<Self>(object).toCOM()
    }

    private final class Import: COMImport<MicrosoftUIDispatching_DispatcherQueueHandlerBinding> {
        public func invoke() throws {
            try _interop.invoke()
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIDispatching_DispatcherQueueHandler_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        Invoke: { this in _implement(this) { this in
            try this()
        } }
    )
}