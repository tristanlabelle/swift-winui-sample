// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Composition.CompositionShape>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum CompositionShape: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<MicrosoftUIComposition_CompositionShape?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIComposition_CompositionShape

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Microsoft.UI.Composition.CompositionShape>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionShape>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = MicrosoftUIComposition_CompositionShape?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIComposition_CompositionShape? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: MicrosoftUIComposition_CompositionShape?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIComposition_CompositionShape?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionShape> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionShape?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionShape>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionShape> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionShape.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIComposition_CompositionShape_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIComposition_CompositionShapeBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIComposition_CompositionShapeBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIComposition_CompositionShapeBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Windowing.DisplayArea>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum DisplayArea: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<MicrosoftUIWindowing_DisplayArea?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIWindowing_DisplayArea

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Microsoft.UI.Windowing.DisplayArea>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<DisplayArea>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = MicrosoftUIWindowing_DisplayArea?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIWindowing_DisplayArea? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: MicrosoftUIWindowing_DisplayArea?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIWindowing_DisplayArea?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Windowing.DisplayArea> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIWindowing_DisplayArea?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIWindowing_DisplayArea>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIWindowing_DisplayArea> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIWindowing_DisplayArea.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIWindowing_DisplayArea_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIWindowing_DisplayAreaBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIWindowing_DisplayAreaBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIWindowing_DisplayAreaBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Microsoft.UI.Composition.CompositionColorGradientStop>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum CompositionColorGradientStop: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<MicrosoftUIComposition_CompositionColorGradientStop?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIComposition_CompositionColorGradientStop

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Microsoft.UI.Composition.CompositionColorGradientStop>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionColorGradientStop>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = MicrosoftUIComposition_CompositionColorGradientStop?

            public func getAt(_ index: Swift.UInt32) throws -> MicrosoftUIComposition_CompositionColorGradientStop? {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: MicrosoftUIComposition_CompositionColorGradientStop?, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [MicrosoftUIComposition_CompositionColorGradientStop?]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionColorGradientStop> members

            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionColorGradientStop?> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionColorGradientStop>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionColorGradientStop> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionColorGradientStop.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_MicrosoftUIComposition_CompositionColorGradientStop_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.getAt(index)
                _result.pointee = try MicrosoftUIComposition_CompositionColorGradientStopBinding.toABI(_result_swift)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                let value_swift = MicrosoftUIComposition_CompositionColorGradientStopBinding.fromABI(value)
                _result.pointee = try this.indexOf(value_swift, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIComposition_CompositionColorGradientStopBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IVectorView<Single>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum Single: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<Swift.Float>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_Float

        public static let typeName = "Windows.Foundation.Collections.IVectorView<Single>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Single>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = Swift.Float

            public func getAt(_ index: Swift.UInt32) throws -> Swift.Float {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: Swift.Float, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [Swift.Float]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public var size: Swift.UInt32 {
                get throws {
                    try _interop.get_Size()
                }
            }

            // MARK: Windows.Foundation.Collections.IIterable<Single> members

            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.Float> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            // MARK: Implementation boilerplate

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_Float>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_Float> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_Float.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_Float_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.getAt(index)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.size
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.indexOf(value, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.SingleBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}