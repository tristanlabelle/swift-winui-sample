// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionProjectedShadowReceiver>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionProjectedShadowReceiver: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIComposition_CompositionProjectedShadowReceiver?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionProjectedShadowReceiver

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionProjectedShadowReceiver>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionProjectedShadowReceiver>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionProjectedShadowReceiver?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionProjectedShadowReceiver_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionProjectedShadowReceiver.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionShape>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionShape: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIComposition_CompositionShape?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionShape

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionShape>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionShape>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionShape?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionShape_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionShape.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionAnimation>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionAnimation: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIComposition_CompositionAnimation?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionAnimation

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionAnimation>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionAnimation>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionAnimation?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionAnimation_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionAnimation.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.Visual>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum Visual: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIComposition_Visual?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_Visual

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.Visual>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Visual>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIComposition_Visual?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_Visual_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.Visual.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Windowing.DisplayArea>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum DisplayArea: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIWindowing_DisplayArea?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIWindowing_DisplayArea

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Windowing.DisplayArea>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<DisplayArea>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIWindowing_DisplayArea?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIWindowing_DisplayArea_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.DisplayArea.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionColorGradientStop>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionColorGradientStop: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIComposition_CompositionColorGradientStop?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionColorGradientStop

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionColorGradientStop>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionColorGradientStop>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionColorGradientStop?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionColorGradientStop_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionColorGradientStop.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionProjectedShadowCaster>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum CompositionProjectedShadowCaster: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<MicrosoftUIComposition_CompositionProjectedShadowCaster?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionProjectedShadowCaster

        public static let typeName = "Windows.Foundation.Collections.IIterable<Microsoft.UI.Composition.CompositionProjectedShadowCaster>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionProjectedShadowCaster>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionProjectedShadowCaster?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_MicrosoftUIComposition_CompositionProjectedShadowCaster_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.CompositionProjectedShadowCaster.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String>>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IKeyValuePair_String_String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_String

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_String>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IKeyValuePair_String_String.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Single>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum Single: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<Swift.Float>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_Float

        public static let typeName = "Windows.Foundation.Collections.IIterable<Single>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Single>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.Float> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_Float_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.Single.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Microsoft.UI.Composition.ICompositionAnimationBase>>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum IKeyValuePair_String_ICompositionAnimationBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<WindowsFoundationCollections_IKeyValuePair<Swift.String, MicrosoftUIComposition_ICompositionAnimationBase?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_MicrosoftUIComposition_ICompositionAnimationBase

        public static let typeName = "Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, Microsoft.UI.Composition.ICompositionAnimationBase>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_ICompositionAnimationBase>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, MicrosoftUIComposition_ICompositionAnimationBase?>?> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_WindowsFoundationCollections_IKeyValuePair_String_MicrosoftUIComposition_ICompositionAnimationBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.IKeyValuePair_String_ICompositionAnimationBase.toABI(_result_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterable<String>

extension WindowsFoundationCollections_IIterableBinding {
    internal enum String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterable<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterable_String

        public static let typeName = "Windows.Foundation.Collections.IIterable<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String>, WindowsFoundationCollections_IIterableProtocol {
            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.String> {
                try COM.NullResult.unwrap(_interop.first())
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterable_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            First: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this.first())
                _result.pointee = try WindowsFoundationCollections_IIteratorBinding.String.toABI(_result_swift)
            } }
        )
    }
}