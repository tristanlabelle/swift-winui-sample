// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP

// MARK: Windows.Foundation.Collections.IIterator<String>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<Swift.String>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_String

        public static let typeName = "Windows.Foundation.Collections.IIterator<String>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<String>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [Swift.String]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: Swift.String {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionAnimation>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionAnimation: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionAnimation?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionAnimation

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionAnimation>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionAnimation>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIComposition_CompositionAnimation?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIComposition_CompositionAnimation? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionAnimation_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIComposition_CompositionAnimationBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIComposition_CompositionAnimationBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.Visual>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Visual: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIComposition_Visual?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_Visual

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.Visual>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Visual>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIComposition_Visual?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIComposition_Visual? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_Visual_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIComposition_VisualBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIComposition_VisualBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionColorGradientStop>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionColorGradientStop: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionColorGradientStop?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionColorGradientStop

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionColorGradientStop>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionColorGradientStop>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIComposition_CompositionColorGradientStop?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIComposition_CompositionColorGradientStop? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionColorGradientStop_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIComposition_CompositionColorGradientStopBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIComposition_CompositionColorGradientStopBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Windowing.DisplayArea>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum DisplayArea: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIWindowing_DisplayArea?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIWindowing_DisplayArea

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Windowing.DisplayArea>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<DisplayArea>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIWindowing_DisplayArea?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIWindowing_DisplayArea? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIWindowing_DisplayArea_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIWindowing_DisplayAreaBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIWindowing_DisplayAreaBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionProjectedShadowCaster>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionProjectedShadowCaster: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionProjectedShadowCaster?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionProjectedShadowCaster

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionProjectedShadowCaster>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionProjectedShadowCaster>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIComposition_CompositionProjectedShadowCaster?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIComposition_CompositionProjectedShadowCaster? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionProjectedShadowCaster_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIComposition_CompositionProjectedShadowCasterBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIComposition_CompositionProjectedShadowCasterBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionShape>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionShape: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionShape?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionShape

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionShape>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionShape>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIComposition_CompositionShape?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIComposition_CompositionShape? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionShape_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIComposition_CompositionShapeBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIComposition_CompositionShapeBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Microsoft.UI.Composition.ICompositionAnimationBase>>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IKeyValuePair_String_ICompositionAnimationBase: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, MicrosoftUIComposition_ICompositionAnimationBase?>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_MicrosoftUIComposition_ICompositionAnimationBase

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, Microsoft.UI.Composition.ICompositionAnimationBase>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_ICompositionAnimationBase>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<Swift.String, MicrosoftUIComposition_ICompositionAnimationBase?>?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundationCollections_IKeyValuePair<Swift.String, MicrosoftUIComposition_ICompositionAnimationBase?>? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_MicrosoftUIComposition_ICompositionAnimationBase_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundationCollections_IKeyValuePairBinding.String_ICompositionAnimationBase.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.String_ICompositionAnimationBase>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, String>>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum IKeyValuePair_String_String: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_String

        public static let typeName = "Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<String, String>>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<IKeyValuePair_String_String>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: WindowsFoundationCollections_IKeyValuePair<Swift.String, Swift.String>? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_WindowsFoundationCollections_IKeyValuePair_String_String_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try WindowsFoundationCollections_IKeyValuePairBinding.String_String.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsFoundationCollections_IKeyValuePairBinding.String_String>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionProjectedShadowReceiver>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum CompositionProjectedShadowReceiver: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<MicrosoftUIComposition_CompositionProjectedShadowReceiver?>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionProjectedShadowReceiver

        public static let typeName = "Windows.Foundation.Collections.IIterator<Microsoft.UI.Composition.CompositionProjectedShadowReceiver>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<CompositionProjectedShadowReceiver>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [MicrosoftUIComposition_CompositionProjectedShadowReceiver?]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: MicrosoftUIComposition_CompositionProjectedShadowReceiver? {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_MicrosoftUIComposition_CompositionProjectedShadowReceiver_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this.current
                _result.pointee = try MicrosoftUIComposition_CompositionProjectedShadowReceiverBinding.toABI(_result_swift)
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<MicrosoftUIComposition_CompositionProjectedShadowReceiverBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}

// MARK: Windows.Foundation.Collections.IIterator<Single>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Single: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<Swift.Float>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_Float

        public static let typeName = "Windows.Foundation.Collections.IIterator<Single>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Single>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [Swift.Float]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public var current: Swift.Float {
                get throws {
                    try _interop.get_Current()
                }
            }

            public var hasCurrent: Swift.Bool {
                get throws {
                    try _interop.get_HasCurrent()
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_Float_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.current
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.hasCurrent
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.SingleBinding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}