// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP

public enum MicrosoftUIInput_IPointerPointTransformBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftUIInput_IPointerPointTransform
    public typealias ABIStruct = SWRT_MicrosoftUIInput_IPointerPointTransform

    public static let typeName = "Microsoft.UI.Input.IPointerPointTransform"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftUIInput_IPointerPointTransformBinding>, MicrosoftUIInput_IPointerPointTransformProtocol {
        public func tryTransform(_ inPoint: WindowsFoundation_Point, _ outPoint: inout WindowsFoundation_Point) throws -> Swift.Bool {
            try _interop.tryTransform(inPoint, &outPoint)
        }

        public func tryTransformBounds(_ inRect: WindowsFoundation_Rect, _ outRect: inout WindowsFoundation_Rect) throws -> Swift.Bool {
            try _interop.tryTransformBounds(inRect, &outRect)
        }

        public var inverse: MicrosoftUIInput_IPointerPointTransform {
            get throws {
                try COM.NullResult.unwrap(_interop.get_Inverse())
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftUIInput_IPointerPointTransform_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_Inverse: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.inverse)
            _result.pointee = try MicrosoftUIInput_IPointerPointTransformBinding.toABI(_result_swift)
        } },
        TryTransform: { this, inPoint, outPoint, _result in _implement(this) { this in
            guard let outPoint else { throw COM.COMError.pointer }
            guard let _result else { throw COM.COMError.pointer }
            let inPoint_swift = WindowsFoundation_Point.fromABI(inPoint)
            var outPoint_swift: WindowsFoundation_Point = .init()
            _result.pointee = try this.tryTransform(inPoint_swift, &outPoint_swift)
            outPoint.pointee = WindowsFoundation_Point.toABI(outPoint_swift)
        } },
        TryTransformBounds: { this, inRect, outRect, _result in _implement(this) { this in
            guard let outRect else { throw COM.COMError.pointer }
            guard let _result else { throw COM.COMError.pointer }
            let inRect_swift = WindowsFoundation_Rect.fromABI(inRect)
            var outRect_swift: WindowsFoundation_Rect = .init()
            _result.pointee = try this.tryTransformBounds(inRect_swift, &outRect_swift)
            outRect.pointee = WindowsFoundation_Rect.toABI(outRect_swift)
        } }
    )
}