// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Provides extended properties for a PointerPoint object.
public final class MicrosoftUIInput_PointerPointProperties: WindowsRuntime.WinRTImport<MicrosoftUIInput_PointerPointPropertiesBinding>, @unchecked Sendable {
    /// The bounding rectangle of the contact area, using client window coordinates in device-independent pixels (DIP).
    public var contactRect: WindowsFoundation_Rect {
        get throws {
            try _interop.get_ContactRect()
        }
    }

    /// Gets the bounding rectangle of the contact area (typically from touch input).
    public var contactRect_: WindowsFoundation_Rect {
        try! self.contactRect
    }

    /// True if the barrel button is pressed. Otherwise, false.
    public var isBarrelButtonPressed: Swift.Bool {
        get throws {
            try _interop.get_IsBarrelButtonPressed()
        }
    }

    /// Gets a value that indicates whether the barrel button of the pen/stylus device is pressed.
    public var isBarrelButtonPressed_: Swift.Bool {
        try! self.isBarrelButtonPressed
    }

    /// True if the input was canceled. Otherwise, false.
    public var isCanceled: Swift.Bool {
        get throws {
            try _interop.get_IsCanceled()
        }
    }

    /// Gets a value that indicates whether the input was canceled by the pointer device.
    public var isCanceled_: Swift.Bool {
        try! self.isCanceled
    }

    /// True if the input is from a pen eraser. Oherwise, false.
    public var isEraser: Swift.Bool {
        get throws {
            try _interop.get_IsEraser()
        }
    }

    /// Gets a value that indicates whether the input is from a pen eraser.
    public var isEraser_: Swift.Bool {
        try! self.isEraser
    }

    /// True if the input is from a mouse tilt wheel. Otherwise, false.
    public var isHorizontalMouseWheel: Swift.Bool {
        get throws {
            try _interop.get_IsHorizontalMouseWheel()
        }
    }

    /// Gets a value that indicates whether the input is from a mouse tilt wheel.
    public var isHorizontalMouseWheel_: Swift.Bool {
        try! self.isHorizontalMouseWheel
    }

    /// True if touch or pen is within detection range or mouse is over. Otherwise, false.
    public var isInRange: Swift.Bool {
        get throws {
            try _interop.get_IsInRange()
        }
    }

    /// Gets a value that indicates whether the pointer device is within detection range of a sensor or digitizer (the pointer continues to exist).
    public var isInRange_: Swift.Bool {
        try! self.isInRange
    }

    /// True if inverted. Otherwise, false.
    public var isInverted: Swift.Bool {
        get throws {
            try _interop.get_IsInverted()
        }
    }

    /// Gets a value that indicates whether the digitizer pen is inverted.
    public var isInverted_: Swift.Bool {
        try! self.isInverted
    }

    /// True if the primary action mode. Otherwise, false.
    public var isLeftButtonPressed: Swift.Bool {
        get throws {
            try _interop.get_IsLeftButtonPressed()
        }
    }

    /// Gets a value that indicates whether the pointer input was triggered by the primary action mode of an input device.
    public var isLeftButtonPressed_: Swift.Bool {
        try! self.isLeftButtonPressed
    }

    /// True if the pointer input was triggered by the tertiary action mode. Otherwise, false.
    public var isMiddleButtonPressed: Swift.Bool {
        get throws {
            try _interop.get_IsMiddleButtonPressed()
        }
    }

    /// Gets a value that indicates whether the pointer input was triggered by the tertiary action mode of an input device (such as the mouse wheel button).
    public var isMiddleButtonPressed_: Swift.Bool {
        try! self.isMiddleButtonPressed
    }

    /// True if the input is from the primary pointer. Otherwise, false.
    public var isPrimary: Swift.Bool {
        get throws {
            try _interop.get_IsPrimary()
        }
    }

    /// Gets a value that indicates whether the input is from the primary pointer when multiple pointers are registered.
    public var isPrimary_: Swift.Bool {
        try! self.isPrimary
    }

    /// True if the secondary action mode. Otherwise, false.
    public var isRightButtonPressed: Swift.Bool {
        get throws {
            try _interop.get_IsRightButtonPressed()
        }
    }

    /// Gets a value that indicates whether the pointer input was triggered by the secondary action mode (if supported) of an input device.
    public var isRightButtonPressed_: Swift.Bool {
        try! self.isRightButtonPressed
    }

    /// True if the first extended mouse button is pressed. Otherwise, false.
    public var isXButton1Pressed: Swift.Bool {
        get throws {
            try _interop.get_IsXButton1Pressed()
        }
    }

    /// Gets a value that indicates whether the pointer input was triggered by the first extended mouse button (XButton1).
    public var isXButton1Pressed_: Swift.Bool {
        try! self.isXButton1Pressed
    }

    /// True if the second extended mouse button is pressed. Otherwise, false.
    public var isXButton2Pressed: Swift.Bool {
        get throws {
            try _interop.get_IsXButton2Pressed()
        }
    }

    /// Gets a value that indicates whether the pointer input was triggered by the second extended mouse button (XButton2).
    public var isXButton2Pressed_: Swift.Bool {
        try! self.isXButton2Pressed
    }

    /// The number of notches or distance thresholds crossed since the last pointer event. The default value is 0.
    public var mouseWheelDelta: Swift.Int32 {
        get throws {
            try _interop.get_MouseWheelDelta()
        }
    }

    /// Gets a value (the raw value reported by the device) that indicates the change in wheel button input from the last pointer event.
    public var mouseWheelDelta_: Swift.Int32 {
        try! self.mouseWheelDelta
    }

    /// A value between 0.0 and 359.0 in degrees of rotation. The default value is 0.0.
    public var orientation: Swift.Float {
        get throws {
            try _interop.get_Orientation()
        }
    }

    /// Gets the counter-clockwise angle of rotation around the major axis of the pointer device (the z-axis, perpendicular to the surface of the digitizer). A value of 0.0 degrees indicates the device is oriented towards the top of the digitizer.
    public var orientation_: Swift.Float {
        try! self.orientation
    }

    /// The type of pointer state change.
    public var pointerUpdateKind: MicrosoftUIInput_PointerUpdateKind {
        get throws {
            try _interop.get_PointerUpdateKind()
        }
    }

    /// Gets the type of pointer state change.
    public var pointerUpdateKind_: MicrosoftUIInput_PointerUpdateKind {
        try! self.pointerUpdateKind
    }

    /// A value from 0 to 1.0. The default value is 0.5.
    public var pressure: Swift.Float {
        get throws {
            try _interop.get_Pressure()
        }
    }

    /// Gets a value that indicates the force that the pointer device (typically a pen/stylus) exerts on the surface of the digitizer.
    public var pressure_: Swift.Float {
        try! self.pressure
    }

    /// True if the touch contact was accepted. Otherwise, false.
    public var touchConfidence: Swift.Bool {
        get throws {
            try _interop.get_TouchConfidence()
        }
    }

    /// Gets a value that indicates whether the pointer device rejected the touch contact.
    public var touchConfidence_: Swift.Bool {
        try! self.touchConfidence
    }

    /// A value between 0.0 and 359.0 in degrees of rotation. The default value is 0.0.
    public var twist: Swift.Float {
        get throws {
            try _interop.get_Twist()
        }
    }

    /// Gets the clockwise rotation in degrees of a pen device around its own major axis (such as when the user spins the pen in their fingers).
    public var twist_: Swift.Float {
        try! self.twist
    }

    /// The value is 0.0 when the finger or pen is perpendicular to the digitizer surface, between 0.0 and 90.0 when tilted to the right of perpendicular, and between 0.0 and -90.0 when tilted to the left of perpendicular. The default value is 0.0.
    public var xtilt: Swift.Float {
        get throws {
            try _interop.get_XTilt()
        }
    }

    /// Gets the plane angle between the Y-Z plane and the plane that contains the Y axis and the axis of the input device (typically a pen/stylus).
    public var xtilt_: Swift.Float {
        try! self.xtilt
    }

    /// The value is 0.0 when the finger or pen is perpendicular to the digitizer surface, between 0.0 and 90.0 when tilted towards the user, and between 0.0 and -90.0 when tilted away from the user. The default value is 0.0.
    public var ytilt: Swift.Float {
        get throws {
            try _interop.get_YTilt()
        }
    }

    /// Gets the plane angle between the X-Z plane and the plane that contains the X axis and the axis of the input device (typically a pen/stylus).
    public var ytilt_: Swift.Float {
        try! self.ytilt
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIInput_IPointerPointProperties>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Input.PointerPointProperties")
            }
        }
    }
}