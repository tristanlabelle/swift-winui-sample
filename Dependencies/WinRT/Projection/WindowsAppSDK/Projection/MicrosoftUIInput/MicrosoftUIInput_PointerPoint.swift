// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// Provides basic properties for the input pointer associated with a single mouse, pen/stylus, or touch contact.
public final class MicrosoftUIInput_PointerPoint: WindowsRuntime.WinRTImport<MicrosoftUIInput_PointerPointBinding>, @unchecked Sendable {
    /// Retrieves a new PointerPoint object by transforming the current PointerPoint with an application-defined transform.
    /// - Parameter transform: The application-defined transform.
    /// - Returns: The transformed PointerPoint or null, if the application-defined transform fails.
    public func getTransformedPoint(_ transform: MicrosoftUIInput_IPointerPointTransform?) throws -> MicrosoftUIInput_PointerPoint {
        try COM.NullResult.unwrap(_interop.getTransformedPoint(transform))
    }

    /// The frame ID.
    public var frameId: Swift.UInt32 {
        get throws {
            try _interop.get_FrameId()
        }
    }

    /// Gets the ID of an input frame.
    public var frameId_: Swift.UInt32 {
        try! self.frameId
    }

    /// True if pressed down. Otherwise, false.
    public var isInContact: Swift.Bool {
        get throws {
            try _interop.get_IsInContact()
        }
    }

    /// Gets a value that indicates whether the input device (touch, pen/stylus) is pressing down on (touching) the digitizer surface, or a mouse button is pressed down.
    public var isInContact_: Swift.Bool {
        try! self.isInContact
    }

    /// The input device type.
    public var pointerDeviceType: MicrosoftUIInput_PointerDeviceType {
        get throws {
            try _interop.get_PointerDeviceType()
        }
    }

    /// Gets the input device type associated with the input pointer.
    public var pointerDeviceType_: MicrosoftUIInput_PointerDeviceType {
        try! self.pointerDeviceType
    }

    /// A unique value that identifies the input pointer.
    public var pointerId: Swift.UInt32 {
        get throws {
            try _interop.get_PointerId()
        }
    }

    /// Gets a unique identifier for the input pointer.
    public var pointerId_: Swift.UInt32 {
        try! self.pointerId
    }

    /// The coordinates, in device-independent pixels (DIPs).
    public var position: WindowsFoundation_Point {
        get throws {
            try _interop.get_Position()
        }
    }

    /// Gets the location of the input pointer.
    public var position_: WindowsFoundation_Point {
        try! self.position
    }

    /// The extended properties exposed by the input device.
    public var properties: MicrosoftUIInput_PointerPointProperties {
        get throws {
            try COM.NullResult.unwrap(_interop.get_Properties())
        }
    }

    /// Gets extended information about the input pointer.
    public var properties_: MicrosoftUIInput_PointerPointProperties! {
        try! NullResult.catch(self.properties)
    }

    /// The time, relative to the system boot time, in microseconds.
    public var timestamp: Swift.UInt64 {
        get throws {
            try _interop.get_Timestamp()
        }
    }

    /// Gets the time when the input occurred.
    public var timestamp_: Swift.UInt64 {
        try! self.timestamp
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftUIInput_IPointerPoint>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.UI.Input.PointerPoint")
            }
        }
    }
}