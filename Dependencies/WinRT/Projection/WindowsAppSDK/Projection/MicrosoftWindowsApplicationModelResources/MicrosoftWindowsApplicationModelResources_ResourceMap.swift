// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP


/// A collection of related resources, typically either for a particular app package, or a resource file for a particular package.
public final class MicrosoftWindowsApplicationModelResources_ResourceMap: WindowsRuntime.WinRTImport<MicrosoftWindowsApplicationModelResources_ResourceMapBinding>, @unchecked Sendable {
    /// Returns a ResourceMap that represents a part of another ResourceMap, typically used to access a particular resource file within an app package.

    /// This method finds subtree, ancestor, sibling and cousin maps to this resource map, as well as top-level maps. It returns the resource map represented by a given resource map identifier, relative to this resource map. This method is typically used to make simpler references to a particular subset of resources, such as a single resource file, or a directory of files.
    /// - Parameter reference: A resource map identifier that identifies the root of the new subtree. For details, see the remarks for ResourceMap class.
    /// - Returns: The subtree ResourceMap.
    public func getSubtree(_ reference: Swift.String) throws -> MicrosoftWindowsApplicationModelResources_ResourceMap {
        try COM.NullResult.unwrap(_interop.getSubtree(reference))
    }

    /// Tries to find a ResourceMap that represents a part of another ResourceMap, typically used to access a particular resource file within an app package.

    /// This method finds subtree, ancestor, sibling and cousin maps to this resource map, as well as top-level maps. It returns the resource map represented by a given resource map identifier, relative to this resource map. This method is typically used to make simpler references to a particular subset of resources, such as a single resource file, or a directory of files.
    /// - Parameter reference: A resource map identifier that identifies the root of the new subtree. For details, see the remarks for ResourceMap class.
    /// - Returns: The subtree ResourceMap. If the specified resource map identifier is not found, this method returns null.
    public func tryGetSubtree(_ reference: Swift.String) throws -> MicrosoftWindowsApplicationModelResources_ResourceMap {
        try COM.NullResult.unwrap(_interop.tryGetSubtree(reference))
    }

    /// Returns the most appropriate candidate for a resource that is specified by a resource identifier within the default context.
    /// - Parameter resource: A resource identifier specified as a name or reference. For details, see the remarks for ResourceMap class.
    /// - Returns: A ResourceCandidate that describes the most appropriate candidate.
    public func getValue(_ resource: Swift.String) throws -> MicrosoftWindowsApplicationModelResources_ResourceCandidate {
        try COM.NullResult.unwrap(_interop.getValue(resource))
    }

    /// Returns the most appropriate candidate for a resource that is specified by a resource identifier for the supplied context.
    /// - Parameter resource: A resource specified as a name or reference. For details, see the remarks for ResourceMap class.
    /// - Parameter context: The context for which to select the most appropriate candidate.
    /// - Returns: A ResourceCandidate that describes the most appropriate candidate.
    public func getValue(_ resource: Swift.String, _ context: MicrosoftWindowsApplicationModelResources_ResourceContext?) throws -> MicrosoftWindowsApplicationModelResources_ResourceCandidate {
        try COM.NullResult.unwrap(_interop.getValueWithContext(resource, context))
    }

    /// Returns the resource at the specified index in the default context.
    /// - Parameter index: The index to use to locate the resource in the context.
    /// - Returns: The value, if an item with the specified index exists.
    public func getValueByIndex(_ index: Swift.UInt32) throws -> WindowsFoundationCollections_IKeyValuePair<Swift.String, MicrosoftWindowsApplicationModelResources_ResourceCandidate?> {
        try COM.NullResult.unwrap(_interop.getValueByIndex(index))
    }

    /// Returns the resource at the specified index in the specified context.
    /// - Parameter index: The index to use to locate the resource in the context.
    /// - Parameter context: 
    ///       
    /// - Returns: The value, if an item with the specified index exists.
    public func getValueByIndex(_ index: Swift.UInt32, _ context: MicrosoftWindowsApplicationModelResources_ResourceContext?) throws -> WindowsFoundationCollections_IKeyValuePair<Swift.String, MicrosoftWindowsApplicationModelResources_ResourceCandidate?> {
        try COM.NullResult.unwrap(_interop.getValueByIndexWithContext(index, context))
    }

    /// Tries to find the most appropriate candidate for a resource that is specified by a resource identifier within the default context.
    /// - Parameter resource: A resource identifier specified as a name or reference. For details, see the remarks for ResourceMap class.
    /// - Returns: A ResourceCandidate that describes the most appropriate candidate. If the specified resource identifier is not found, this method returns null.
    public func tryGetValue(_ resource: Swift.String) throws -> MicrosoftWindowsApplicationModelResources_ResourceCandidate {
        try COM.NullResult.unwrap(_interop.tryGetValue(resource))
    }

    /// Tries to find the most appropriate candidate for a resource that is specified by a resource identifier for the supplied context.
    /// - Parameter resource: A resource specified as a name or reference. For details, see the remarks for ResourceMap class.
    /// - Parameter context: The context for which to select the most appropriate candidate.
    /// - Returns: A ResourceCandidate that describes the most appropriate candidate. If the specified resource identifier is not found, this method returns null.
    public func tryGetValue(_ resource: Swift.String, _ context: MicrosoftWindowsApplicationModelResources_ResourceContext?) throws -> MicrosoftWindowsApplicationModelResources_ResourceCandidate {
        try COM.NullResult.unwrap(_interop.tryGetValueWithContext(resource, context))
    }

    /// The number of resources contained in the map.
    public var resourceCount: Swift.UInt32 {
        get throws {
            try _interop.get_ResourceCount()
        }
    }

    /// Gets the number of resources in the ResourceMap.
    public var resourceCount_: Swift.UInt32 {
        try! self.resourceCount
    }

    // MARK: Implementation details

    public required init(_wrapping inner: consuming COM.COMReference<SWRT_MicrosoftWindowsApplicationModelResources_IResourceMap>) {
        super.init(_wrapping: consume inner)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "Microsoft.Windows.ApplicationModel.Resources.ResourceMap")
            }
        }
    }
}