// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WindowsAppSDK_ABI
import UWP

public enum MicrosoftWindowsApplicationModelResources_IResourceManagerBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = MicrosoftWindowsApplicationModelResources_IResourceManager
    public typealias ABIStruct = SWRT_MicrosoftWindowsApplicationModelResources_IResourceManager

    public static let typeName = "Microsoft.Windows.ApplicationModel.Resources.IResourceManager"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<MicrosoftWindowsApplicationModelResources_IResourceManagerBinding>, MicrosoftWindowsApplicationModelResources_IResourceManagerProtocol {
        public func createResourceContext() throws -> MicrosoftWindowsApplicationModelResources_ResourceContext {
            try COM.NullResult.unwrap(_interop.createResourceContext())
        }

        @discardableResult
        public func resourceNotFound(adding handler: WindowsFoundation_TypedEventHandler<MicrosoftWindowsApplicationModelResources_ResourceManager?, MicrosoftWindowsApplicationModelResources_ResourceNotFoundEventArgs?>?) throws -> WindowsRuntime.EventRegistration {
            let _token = try _interop.add_ResourceNotFound(handler)
            return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).resourceNotFound(removing: token) })
        }

        public func resourceNotFound(removing token: WindowsRuntime.EventRegistrationToken) throws {
            try _interop.remove_ResourceNotFound(token)
        }

        public var mainResourceMap: MicrosoftWindowsApplicationModelResources_ResourceMap {
            get throws {
                try COM.NullResult.unwrap(_interop.get_MainResourceMap())
            }
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_MicrosoftWindowsApplicationModelResources_IResourceManager_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_MainResourceMap: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.mainResourceMap)
            _result.pointee = try MicrosoftWindowsApplicationModelResources_ResourceMapBinding.toABI(_result_swift)
        } },
        CreateResourceContext: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let _result_swift = try COM.NullResult.`catch`(try this.createResourceContext())
            _result.pointee = try MicrosoftWindowsApplicationModelResources_ResourceContextBinding.toABI(_result_swift)
        } },
        add_ResourceNotFound: { this, handler, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let handler_swift = WindowsFoundation_TypedEventHandlerBinding.ResourceManager_ResourceNotFoundEventArgs.fromABI(handler)
            let _result_swift = try this.resourceNotFound(adding: handler_swift).token
            _result.pointee = WindowsRuntime.EventRegistrationToken.toABI(_result_swift)
        } },
        remove_ResourceNotFound: { this, token in _implement(this) { this in
            let token_swift = WindowsRuntime.EventRegistrationToken.fromABI(token)
            try this.resourceNotFound(removing: token_swift)
        } }
    )
}